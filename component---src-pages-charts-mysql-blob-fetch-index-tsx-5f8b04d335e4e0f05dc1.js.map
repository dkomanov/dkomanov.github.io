{"version":3,"file":"component---src-pages-charts-mysql-blob-fetch-index-tsx-5f8b04d335e4e0f05dc1.js","mappings":"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","sources":["webpack://komanov.com/./src/pages/charts/java-compression/CompressionRatio.tsx","webpack://komanov.com/./src/pages/charts/java-compression/RealData.tsx","webpack://komanov.com/./src/pages/charts/mysql-blob-fetch/index.tsx"],"sourcesContent":["import React from 'react';\nimport { StatelessChoose } from '../../../components';\n\nexport const AllCompressionRatios = [\n  {\n    name: 'low',\n    value: 'LOW_COMPRESSION_1_3',\n  },\n  {\n    name: 'medium',\n    value: 'MEDIUM_COMPRESSION_2_1',\n  },\n  {\n    name: 'high',\n    value: 'HIGH_COMPRESSION_3_4',\n  },\n  {\n    name: 'extra',\n    value: 'EXTRA_HIGH_COMPRESSION_6_2',\n  },\n];\n\nexport const DefaultCompressionRatio = 'MEDIUM_COMPRESSION_2_1';\n\nexport const sideBySide = (lists: any[][]): any[] => {\n  if (lists.length <= 0) {\n    throw new Error('empty array');\n  }\n  if (lists.find((v) => v.length !== lists[0].length)) {\n    throw new Error('different lengths');\n  }\n\n  const r = [];\n  for (let i = 0; i < lists[0].length; ++i) {\n    for (let j = 0; j < lists.length; ++j) {\n      r.push(lists[j][i]);\n    }\n  }\n  return r;\n};\n\nexport const comparisonValues = (name: string, value: string) => {\n  return AllCompressionRatios.slice()\n    .reverse()\n    .map((r) => ({ name: `${name} [${r.name}]`, value: `${value}-${r.value}` }));\n};\n\nexport const CompressionRatioChooseComponent = ({ value, onChange }: { value: string; onChange: (value: string) => any }) => {\n  return (\n    <StatelessChoose\n      label=\"Compression Ratio:\"\n      value={value}\n      items={AllCompressionRatios.map((i) => ({\n        label: i.name,\n        value: i.value,\n      }))}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default CompressionRatioChooseComponent;\n","import React from 'react';\nimport { StatelessChoose } from '../../../components';\nimport { JmhAxisDescriptor } from '../../../util/jmh';\n\nexport const RealLengthDesc: JmhAxisDescriptor = {\n  title: 'Real Input Size',\n  prop: 'length',\n  values: [\n    '298',\n    '420',\n    '531',\n    '538',\n    '686',\n    '34011',\n    '42223',\n    '51771',\n    '62830',\n    '81207',\n    '94417',\n    '607930',\n    '751048',\n    '781196',\n    '866049',\n    '904172',\n    '1075724',\n    '1293080',\n    '1448911',\n    '1599048',\n    '4072805',\n    '4287156',\n  ],\n};\n\nexport type RealDataset = 'all' | '34011-94417' | '607930-4287156';\nexport const DefaultRealDataset: RealDataset = '607930-4287156';\nconst AllRealDatasets: RealDataset[] = ['all', '34011-94417', '607930-4287156'];\n\nexport const filterByDataset = (dataset: RealDataset, p: any) =>\n  dataset === 'all' ||\n  (dataset === '34011-94417' ? inBetween(p.length, 34011, 94417) : inBetween(p.length, 607930, 4287156));\n\nfunction inBetween(v: any, from: number, to: number) {\n  const num = parseInt(v);\n  return from <= num && num <= to;\n}\n\nexport const DatasetChooseComponent = ({\n  dataset,\n  datasetSet,\n}: {\n  dataset: RealDataset;\n  datasetSet: (v: any) => any;\n}) => (\n  <StatelessChoose\n    label=\"Data set:\"\n    items={AllRealDatasets.map((v) => ({ label: v, value: v }))}\n    value={dataset}\n    onChange={datasetSet}\n  />\n);\n\nexport default DatasetChooseComponent;\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport {\n  ChartAndTable,\n  ChooseSlider,\n  JmhChartComponentProps,\n  JmhChartPage,\n  StatelessChoose,\n  TimeUnits,\n} from '../../../components';\nimport { loadJson } from '../../../util';\nimport { EmptyJmhExtractorFuncHolder, JmhAxisDescriptor, JmhExtractorFunc } from '../../../util/jmh';\nimport {\n  AllCompressionRatios,\n  CompressionRatioChooseComponent,\n  comparisonValues,\n  DefaultCompressionRatio,\n} from '../java-compression/CompressionRatio';\nimport {\n  DefaultRealDataset,\n  filterByDataset,\n  DatasetChooseComponent,\n  RealLengthDesc,\n} from '../java-compression/RealData';\n\ninterface NameValue {\n  name: string;\n  value: string;\n  default?: boolean;\n}\n\ntype StubDataset = 'all' | 'small' | 'big';\n\nfunction generateLengths() {\n  const list: NameValue[] = [];\n\n  function addKb(n: number) {\n    list.push({\n      name: `${n}KB`,\n      value: (n * 1024).toString(),\n    });\n  }\n  function addMb(mb: number, kb100: number) {\n    list.push({\n      name: `${mb}.${kb100}MB`,\n      value: (mb * 1024 * 1024 + kb100 * 100 * 1024).toString(),\n      default: mb === 5 && kb100 === 0,\n    });\n  }\n\n  addKb(1);\n  for (let kb = 5; kb < 100; kb += 5) {\n    addKb(kb);\n  }\n  for (let kb = 100; kb <= 900; kb += 100) {\n    addKb(kb);\n  }\n  for (let mb = 1; mb <= 4; ++mb) {\n    for (let kb = 0; kb <= 9; ++kb) {\n      addMb(mb, kb);\n    }\n  }\n  addMb(5, 0);\n  return list;\n}\n\nconst AllLengths = generateLengths();\n\nconst xDesc: JmhAxisDescriptor = {\n  title: 'Fetch Kind',\n  prop: 'algorithm',\n  values: [\n    {\n      name: 'Uncompressed',\n      value: 'uncompressed',\n    },\n    {\n      name: 'Compressed table',\n      value: 'auto_mysql',\n    },\n    {\n      name: 'deflate',\n      value: 'deflate',\n    },\n    {\n      name: 'deflate+len MySQL',\n      value: 'explicit_mysql',\n    },\n    {\n      name: 'deflate+len Java',\n      value: 'deflateWithSize',\n    },\n    ...['gzip', 'snappy', 'zstd', 'brotli_0', 'brotli_6', 'brotli_11', 'lz4_fast', 'lz4_high9', 'lz4_high17'].map(\n      (v) => ({ name: v, value: v })\n    ),\n  ],\n};\n\nconst xDescComparison_lz4_vs_uncompressed: JmhAxisDescriptor = {\n  title: 'Fetch Kind',\n  prop: 'comparison',\n  values: [\n    {\n      name: 'Uncompressed',\n      value: 'uncompressed-LOW_COMPRESSION_1_3',\n    },\n    {\n      name: 'lz4 ~1',\n      value: 'lz4_high9-LOW_COMPRESSION_1_3',\n    },\n    {\n      name: 'lz4 ~1.5',\n      value: 'lz4_high9-MEDIUM_COMPRESSION_2_1',\n    },\n    {\n      name: 'lz4 ~2.5',\n      value: 'lz4_high9-HIGH_COMPRESSION_3_4',\n    },\n    {\n      name: 'lz4 ~3.9',\n      value: 'lz4_high9-EXTRA_HIGH_COMPRESSION_6_2',\n    },\n  ],\n};\n\nconst xDescDeflateMysqlComparison: JmhAxisDescriptor = {\n  title: 'Compression Algorithm',\n  prop: 'comparison',\n  values: [\n    ...comparisonValues('Compressed table', 'auto_mysql'),\n    ...comparisonValues('deflate+len MySQL', 'explicit_mysql'),\n  ],\n};\n\nconst xDescDeflateComparison: JmhAxisDescriptor = {\n  title: 'Compression Algorithm',\n  prop: 'comparison',\n  values: [...comparisonValues('Java', 'deflateWithSize'), ...comparisonValues('MySQL', 'explicit_mysql')],\n};\n\nconst yStubDesc: JmhAxisDescriptor = {\n  title: 'Data length',\n  prop: 'length',\n  values: AllLengths,\n};\n\nconst hAxisDataLength = { title: 'Data length, bytes' };\nconst vAxisThroughput = { title: 'throughput, bytes per second' };\nconst vAxisTime = { title: 'time, microseconds' };\n\nconst MysqlBlobFetchImpl = ({ jmhList }: JmhChartComponentProps) => {\n  const [length, lengthSet] = useState(AllLengths.find((v) => v.default)!.value);\n  const [compressionRatio, compressionRatioSet] = useState(DefaultCompressionRatio);\n  const [stubDataset, stubDatasetSet] = useState<StubDataset>('big');\n  const [realDataset, realDatasetSet] = useState(DefaultRealDataset);\n  const [extractor, extractorSet] = useState(EmptyJmhExtractorFuncHolder);\n\n  const filterByRatio = (p: any) => p.compressionRatio === compressionRatio;\n  const filterByStubDataset = (p: any) =>\n    stubDataset === 'all' || (stubDataset === 'small' ? parseInt(p.length) <= 102400 : parseInt(p.length) >= 102400);\n\n  const items = (list: string[]) => list.map((v) => ({ label: v, value: v }));\n  const StubDatasetChoose = (\n    <StatelessChoose\n      label=\"Data set:\"\n      items={items(['all', 'small', 'big'])}\n      value={stubDataset}\n      onChange={stubDatasetSet}\n    />\n  );\n  const RealDatasetChoose = <DatasetChooseComponent dataset={realDataset} datasetSet={realDatasetSet} />;\n  const CompressionRatioChoose = (\n    <CompressionRatioChooseComponent value={compressionRatio} onChange={compressionRatioSet} />\n  );\n\n  const makeChooses = (realData: boolean) => {\n    return realData ? (\n      <div>{RealDatasetChoose}</div>\n    ) : (\n      <div>\n        {CompressionRatioChoose}\n        {StubDatasetChoose}\n      </div>\n    );\n  };\n  const makeFilter = (realData: boolean) =>\n    realData\n      ? (p: any) => p.realData === realData && filterByDataset(realDataset, p)\n      : (p: any) => p.realData === realData && filterByRatio(p) && filterByStubDataset(p);\n\n  const PerformanceChart = (realData: boolean) => {\n    return (\n      <div>\n        <h3>Fetch BLOBs of different lengths</h3>\n\n        {makeChooses(realData)}\n\n        <ChartAndTable\n          chartType=\"LineChart\"\n          dataTable={jmhList}\n          extractor={extractor.func}\n          filter={makeFilter(realData)}\n          xDesc={xDesc}\n          yDesc={realData ? RealLengthDesc : yStubDesc}\n          options={{\n            hAxis: hAxisDataLength,\n            vAxis: vAxisTime,\n            legend: {\n              textStyle: {\n                fontSize: 14,\n              },\n            },\n          }}\n        />\n      </div>\n    );\n  };\n\n  const ThroughputChart = (realData: boolean) => {\n    return (\n      <div>\n        <h3>Effective throughput after decompression</h3>\n\n        {makeChooses(realData)}\n\n        <ChartAndTable\n          chartType=\"LineChart\"\n          dataTable={jmhList}\n          extractor={(pm: any) => pm.totalBytesReturned}\n          filter={makeFilter(realData)}\n          xDesc={xDesc}\n          yDesc={realData ? RealLengthDesc : yStubDesc}\n          options={{\n            hAxis: hAxisDataLength,\n            vAxis: vAxisThroughput,\n            legend: {\n              textStyle: {\n                fontSize: 14,\n              },\n            },\n          }}\n        />\n\n        <h3>MySQL data throughput over the wire</h3>\n\n        {makeChooses(realData)}\n\n        <ChartAndTable\n          chartType=\"LineChart\"\n          dataTable={jmhList}\n          extractor={(pm: any) => pm.totalBytesFromMysql}\n          filter={makeFilter(realData)}\n          xDesc={xDesc}\n          yDesc={realData ? RealLengthDesc : yStubDesc}\n          options={{\n            hAxis: hAxisDataLength,\n            vAxis: vAxisThroughput,\n            legend: {\n              textStyle: {\n                fontSize: 14,\n              },\n            },\n          }}\n        />\n      </div>\n    );\n  };\n\n  const ComparisonCharts = (title: string, xDesc: JmhAxisDescriptor) => {\n    return (\n      <div>\n        <h3>{title} with different compression ratios</h3>\n\n        <h4>Performance</h4>\n\n        {StubDatasetChoose}\n        <ChartAndTable\n          chartType=\"LineChart\"\n          dataTable={jmhList}\n          extractor={extractor.func}\n          filter={(p: any) => filterByStubDataset(p)}\n          xDesc={xDesc}\n          yDesc={yStubDesc}\n          options={{\n            hAxis: hAxisDataLength,\n            vAxis: vAxisTime,\n            legend: {\n              textStyle: {\n                fontSize: 14,\n              },\n            },\n          }}\n        />\n\n        <h4>Throughput</h4>\n\n        {StubDatasetChoose}\n        <ChartAndTable\n          chartType=\"LineChart\"\n          dataTable={jmhList}\n          extractor={(pm: any) => pm.totalBytesReturned}\n          filter={(p: any) => filterByStubDataset(p)}\n          xDesc={xDesc}\n          yDesc={yStubDesc}\n          options={{\n            hAxis: hAxisDataLength,\n            vAxis: vAxisThroughput,\n            legend: {\n              textStyle: {\n                fontSize: 14,\n              },\n            },\n          }}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"markdown\">\n      <h2>Introduction</h2>\n\n      <p>\n        Here are benchmarking results for{' '}\n        <Link to=\"/p/mysql-blob-fetch-performance-in-java\">&laquo;MySQL BLOB Fetch Performance In Java&raquo;</Link>{' '}\n        blog post.\n      </p>\n\n      <p>\n        The performance tests are performed via <a href=\"https://github.com/openjdk/jmh\">JMH</a>. The configuration of a\n        hardware is Intel® Core™ i7-1165G7 @ 2.80GHz × 8 (4 core + 4 HT) with 16 GB RAM. Scala version: 2.13.6.\n      </p>\n\n      <ul>\n        <li>\n          <a href=\"#real-data\">Charts for real data</a>\n        </li>\n        <li>\n          <a href=\"#stub-data\">Charts for stub (random) data</a>\n        </li>\n        <li>\n          <a href=\"#comparisons\">Comparisons for stub (random) data</a>\n        </li>\n        <li>\n          <a href=\"#legend\">Legend</a>\n        </li>\n      </ul>\n\n      <TimeUnits onChange={(func: JmhExtractorFunc) => extractorSet({ func })} />\n\n      <h2>Charts for real data</h2>\n\n      {PerformanceChart(true)}\n      {ThroughputChart(true)}\n\n      <h2>Charts for stub (random) data</h2>\n\n      {PerformanceChart(false)}\n      {ThroughputChart(false)}\n\n      <h3>Fetch performance for different compression ratios</h3>\n\n      <ChooseSlider\n        label=\"Data length:\"\n        items={AllLengths.map((i) => {\n          return {\n            label: i.name,\n            value: i.value,\n            default: i.default === true,\n          };\n        })}\n        onChange={(value: string) => lengthSet(value)}\n      />\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.length === length}\n        xDesc={xDesc}\n        yDesc={{\n          title: 'Compression Ratio',\n          prop: 'compressionRatio',\n          values: AllCompressionRatios,\n        }}\n        options={{\n          hAxis: {\n            title: 'Compression Ratio',\n          },\n          vAxis: vAxisTime,\n        }}\n      />\n\n      <h2 id=\"comparisons\">Comparisons</h2>\n\n      {ComparisonCharts('Uncompressed vs LZ4', xDescComparison_lz4_vs_uncompressed)}\n      {ComparisonCharts('Compressed Table vs DECOMPRESS', xDescDeflateMysqlComparison)}\n      {ComparisonCharts('Java vs MySQL', xDescDeflateComparison)}\n\n      <h2 id=\"legend\">Legend</h2>\n\n      <p>SQL schema:</p>\n      <pre>\n        -- data is not compressed{'\\n'}\n        CREATE TABLE uncompressed_blobs ({'\\n'}\n        {'  '}id INT NOT NULL PRIMARY KEY,{'\\n'}\n        {'  '}data MEDIUMBLOB NOT NULL{'\\n'}) ENGINE=InnoDB ROW_FORMAT=DYNAMIC;\n        {'\\n'}\n        {'\\n'}\n        CREATE TABLE compressed_blobs ({'\\n'}\n        {'  '}id INT NOT NULL PRIMARY KEY,{'\\n'}\n        {'  '}data MEDIUMBLOB NOT NULL{'\\n'}) ENGINE=InnoDB ROW_FORMAT=COMPRESSED;\n        {'\\n'}\n        {'\\n'}\n      </pre>\n\n      <ul>\n        <li>\n          <strong>Uncompressed</strong>: select data column from <i>uncompressed_blobs</i> table: data is not compressed\n          neither in MySQL nor on application level.\n        </li>\n        <li>\n          <strong>Compressed</strong>: select data column from <i>compressed_blobs</i> table: data is compressed in\n          MySQL, on select MySQL decompresses it and returns data uncompressed over the wire.\n        </li>\n        <li>\n          <strong>deflate</strong>: select data column from <i>uncompressed_blobs</i> table: data is compressed on\n          application level using{' '}\n          <a href=\"https://dev.mysql.com/doc/refman/8.0/en/encryption-functions.html#function_compress\">\n            MySQL's algorithm\n          </a>\n          , on select MySQL returns compressed data over the wire (no decompress in MySQL); data is decompressed in\n          application.\n        </li>\n        <li>\n          <strong>lz4</strong>: select data column from <i>lz4_compressed_blobs</i> table: data is compressed on\n          application level using <a href=\"https://github.com/lz4/lz4-java\">LZ4 algorithm</a>, on select MySQL returns\n          compressed data over the wire (no decompress in MySQL); data is decompressed in application.\n        </li>\n      </ul>\n\n      <p>\n        Full JMH logs: <a href={filePath('jdk17.log.txt')}>openjdk-17</a> (<a href={filePath('jdk17.json')}>json</a>).\n      </p>\n    </div>\n  );\n};\n\nconst filePath = (name: string) => `/data/charts/mysql-blob-fetch/${name}`;\n\nconst MysqlBlobFetch = JmhChartPage(MysqlBlobFetchImpl, {\n  fetchFunc: () => loadJson(filePath('jdk17.min.json')),\n  exportDimensionsFunc: (_, params) => params,\n  headerText: 'MySQL BLOB Fetch Performance In Java (Charts)',\n});\n\nexport default MysqlBlobFetch;\n"],"names":["AllCompressionRatios","name","value","DefaultCompressionRatio","sideBySide","lists","length","Error","find","v","r","i","j","push","comparisonValues","slice","reverse","map","CompressionRatioChooseComponent","onChange","React","StatelessChoose","label","items","RealLengthDesc","title","prop","values","DefaultRealDataset","AllRealDatasets","filterByDataset","dataset","p","inBetween","from","to","num","parseInt","DatasetChooseComponent","datasetSet","AllLengths","list","addKb","n","toString","addMb","mb","kb100","default","kb","generateLengths","xDesc","xDescComparison_lz4_vs_uncompressed","xDescDeflateMysqlComparison","xDescDeflateComparison","yStubDesc","hAxisDataLength","vAxisThroughput","vAxisTime","filePath","MysqlBlobFetch","JmhChartPage","jmhList","useState","lengthSet","compressionRatio","compressionRatioSet","stubDataset","stubDatasetSet","realDataset","realDatasetSet","EmptyJmhExtractorFuncHolder","extractor","extractorSet","filterByStubDataset","StubDatasetChoose","RealDatasetChoose","CompressionRatioChoose","makeChooses","realData","makeFilter","filterByRatio","PerformanceChart","ChartAndTable","chartType","dataTable","func","filter","yDesc","options","hAxis","vAxis","legend","textStyle","fontSize","ThroughputChart","pm","totalBytesReturned","totalBytesFromMysql","ComparisonCharts","className","Link","href","TimeUnits","ChooseSlider","id","fetchFunc","loadJson","exportDimensionsFunc","_","params","headerText"],"sourceRoot":""}