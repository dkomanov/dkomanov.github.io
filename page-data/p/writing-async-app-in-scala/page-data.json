{"componentChunkName":"component---src-templates-blog-post-js","path":"/p/writing-async-app-in-scala/","result":{"data":{"markdownRemark":{"id":"6e8b1463-360d-5cdb-8bc0-0be70e5798ad","excerpt":"Asynchronous Programming and Scala\nFutures and Promises\nretries\ntimeout\nfutures Real world examples For simplicity let’s not think about  argument for Future…","html":"<p><a href=\"https://alexn.org/blog/2017/01/30/asynchronous-programming-scala.html#5-task-scalas-io-monad\">Asynchronous Programming and Scala</a>\n<a href=\"https://docs.scala-lang.org/overviews/core/futures.html\">Futures and Promises</a>\n<a href=\"https://medium.com/@john.m.murray786/exponential-back-off-with-scala-futures-7426340d0069\">retries</a>\n<a href=\"http://justinhj.github.io/2017/07/16/future-with-timeout.html\">timeout</a>\n<a href=\"https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-8-welcome-to-the-future/\">futures</a></p>\n<h2 id=\"real-world-examples\" style=\"position:relative;\"><a href=\"#real-world-examples\" aria-label=\"real world examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Real world examples</h2>\n<p>For simplicity let’s not think about <code class=\"language-text\">implicit ec: ExecutionContext</code> argument for Future operations yet. I will cover this topic afterwards.</p>\n<h3 id=\"if-statement-replacement\" style=\"position:relative;\"><a href=\"#if-statement-replacement\" aria-label=\"if statement replacement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>if-statement replacement</h3>\n<p>Suppose we have old-school future-less code:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> condition<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">def</span> action1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> action2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  action1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  action2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>How it would look like with futures? Suppose, all methods use some kind of IO inside, so:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> condition<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">def</span> action1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> action2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ncondition<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span>\n    action1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span>\n    action2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pretty straight-forward, right?</p>\n<h3 id=\"boolean-operations\" style=\"position:relative;\"><a href=\"#boolean-operations\" aria-label=\"boolean operations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean operations</h3>\n<p>What if there are multiple conditions?</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> condition1<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition2<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition3<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>condition2 <span class=\"token operator\">||</span> condition3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>There aren’t much help from scala-library itself here, so let’s extend it a bit:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> FutureOfBooleanExtensions<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> future<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">AnyVal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    future<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>value <span class=\"token keyword\">=></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> other<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    future<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>value <span class=\"token keyword\">=></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> other<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now, with these extension methods we will get this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> condition1<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition2<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition3<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">val</span> condition <span class=\"token operator\">=</span> condition1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>condition2 <span class=\"token operator\">||</span> condition3<span class=\"token punctuation\">)</span>\ncondition<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nice, right?</p>\n<p>We can go further, for example, if some of conditions aren’t IO-bound, or already calculated, we can just\nextend it a little bit more:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">implicit class BooleanToFutureExtensions(val v: Boolean) extends AnyVal {\n  def &amp;&amp;(other: =&gt; Future[Boolean]): Future[Boolean] =\n    if (v) other else Future.successful(false)\n\n  def ||(other: =&gt; Future[Boolean]): Future[Boolean] =\n    if (v) Future.successful(true) else other\n}</code></pre></div>\n<p>And use it:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> condition1<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition2<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition3<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">val</span> condition <span class=\"token operator\">=</span> condition1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>condition2 <span class=\"token operator\">||</span> condition3<span class=\"token punctuation\">)</span>\ncondition<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Same code, but now we can mix <code class=\"language-text\">Future[Boolean]</code> and <code class=\"language-text\">Boolean</code>. Well, almost… We also need to add corresponding extension methods to <code class=\"language-text\">Future[Boolean]</code> for commutativity:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> FutureOfBooleanExtensions<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> future<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">AnyVal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    future<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>value <span class=\"token keyword\">=></span> value <span class=\"token operator\">&amp;&amp;</span> other<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    future<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>value <span class=\"token keyword\">=></span> value <span class=\"token operator\">||</span> other<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By analogy you may add another extensions, not only for <code class=\"language-text\">Boolean</code> type, of course.</p>\n<h3 id=\"for-comprehensions-for-the-rescue\" style=\"position:relative;\"><a href=\"#for-comprehensions-for-the-rescue\" aria-label=\"for comprehensions for the rescue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for-comprehensions for the rescue</h3>\n<p>Another way of making code look like future-less code is using for-comprehensions. This topic is covered quite a lot (<a href=\"https://docs.scala-lang.org/overviews/core/futures.html#functional-composition-and-for-comprehensions\">1</a>, <a href=\"https://contributors.scala-lang.org/t/sequencing-in-for-comprehensions/779\">2</a>, <a href=\"https://stackoverflow.com/a/19046133/426397\">3</a>). In short, it looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> getMovie<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Movie<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> getActors<span class=\"token punctuation\">(</span>movie<span class=\"token operator\">:</span> Movie<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Seq<span class=\"token punctuation\">[</span>Actor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> getPlot<span class=\"token punctuation\">(</span>movie<span class=\"token operator\">:</span> Movie<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>MoviePlot<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  movie <span class=\"token keyword\">&lt;-</span> getMovie\n  actors <span class=\"token keyword\">&lt;-</span> getActors<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n  plot <span class=\"token keyword\">&lt;-</span> getPlot<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> MovieDescription<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">,</span> plot<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"dealing-with-filter\" style=\"position:relative;\"><a href=\"#dealing-with-filter\" aria-label=\"dealing with filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dealing with filter</h4>\n<p>Looks very familiar. But in real life, it’s more complicated:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> hasPermissions<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  isPermitted <span class=\"token keyword\">&lt;-</span> hasPermissions\n  <span class=\"token keyword\">if</span> isPermitted\n  movie <span class=\"token keyword\">&lt;-</span> getMovie\n  <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>movie<span class=\"token punctuation\">.</span>hidden\n  actors <span class=\"token keyword\">&lt;-</span> getActors<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n  plot <span class=\"token keyword\">&lt;-</span> getPlot<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> MovieDescription<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">,</span> plot<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">if</code> construct is supported (via <code class=\"language-text\">withFilter</code> method of <code class=\"language-text\">Future</code>), of course, but <code class=\"language-text\">Future</code> will be resolved with <code class=\"language-text\">NoSuchElementException</code>, without ability to understand what’s really happened there.</p>\n<p>I came up with this solution (yes, another extension method):</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> BooleanFutureExtensions<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> future<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">AnyVal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> orFail<span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    future<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>t <span class=\"token keyword\">=></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>isSuccess <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span> Failure<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now we can rewrite it in this form:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  __ <span class=\"token keyword\">&lt;-</span> hasPermissions orFail <span class=\"token keyword\">new</span> PermissionDeniedException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n  movie <span class=\"token keyword\">&lt;-</span> getMovie\n  <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>movie<span class=\"token punctuation\">.</span>hidden\n  actors <span class=\"token keyword\">&lt;-</span> getActors<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n  plot <span class=\"token keyword\">&lt;-</span> getPlot<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> MovieDescription<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">,</span> plot<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now there will be <code class=\"language-text\">PermissionDeniedException</code> if user doesn’t have permissions, but still <code class=\"language-text\">NoSuchElementException</code> if movie is hidden. One of solutions might be this: instead of just comprehending <code class=\"language-text\">getMovie</code>, we may make it slightly more complex:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">movie <span class=\"token keyword\">&lt;-</span> getMovie<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_<span class=\"token punctuation\">.</span>hidden<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>recoverWith <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> _<span class=\"token operator\">:</span> NoSuchElementException <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> HiddenMovieException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As always, we can simplify it with simple extension method:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> FutureExtensions<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> future<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">AnyVal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> filterOrFail<span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> T <span class=\"token keyword\">=></span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    future<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>value <span class=\"token keyword\">=></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> Future<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Much better now:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  _ <span class=\"token keyword\">&lt;-</span> hasPermissions orFail <span class=\"token keyword\">new</span> PermissionDeniedException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n  movie <span class=\"token keyword\">&lt;-</span> getMovie<span class=\"token punctuation\">.</span>filterOrFail<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_<span class=\"token punctuation\">.</span>hidden<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> HiddenMovieException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  actors <span class=\"token keyword\">&lt;-</span> getActors<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n  plot <span class=\"token keyword\">&lt;-</span> getPlot<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> MovieDescription<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">,</span> plot<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"dealing-with-option\" style=\"position:relative;\"><a href=\"#dealing-with-option\" aria-label=\"dealing with option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dealing with Option</h4>\n<p>Another problem with for-comprehensions is that you can’t mix different monads (like <code class=\"language-text\">Option</code>). Because in real life it’s quite common to expose methods like:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> findMovie<span class=\"token punctuation\">(</span>title<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span>Movie<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>In this case, in for-comprehensions in this expression <code class=\"language-text\">movie &lt;- findMovie(&quot;Dark Waters&quot;)</code> the type of <code class=\"language-text\">movie</code> will be <code class=\"language-text\">Option[Movie]</code>, not <code class=\"language-text\">Movie</code>. Which is understandable, but we need to find out how to deal with it. One way is to expose Option-less version which resolves <code class=\"language-text\">Future</code> with some <code class=\"language-text\">Exception</code>. Another approach is, as you may already’ve guessed, to create a convenient extension method:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> FutureOfOptionExtensions<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> v<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">AnyVal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> orFail<span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">[</span>Future<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Future<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  movie <span class=\"token keyword\">&lt;-</span> findMovie<span class=\"token punctuation\">(</span><span class=\"token string\">\"Dark Waters\"</span><span class=\"token punctuation\">)</span> orFail <span class=\"token keyword\">new</span> MovieNotFoundException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> movie</code></pre></div>\n<h2 id=\"exception-handling\" style=\"position:relative;\"><a href=\"#exception-handling\" aria-label=\"exception handling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception Handling</h2>\n<p>Future[Either] — <a href=\"https://www.adtran.com/index.php/blog/technology-blog/255-asynchronous-functional-error-handling-in-scala\">https://www.adtran.com/index.php/blog/technology-blog/255-asynchronous-functional-error-handling-in-scala</a></p>\n<h2 id=\"threading-model\" style=\"position:relative;\"><a href=\"#threading-model\" aria-label=\"threading model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Threading Model</h2>\n<p>direct executor\npool for blocking\nseparate IO pool vs single pool</p>\n<h2 id=\"rewrite-a-real-service\" style=\"position:relative;\"><a href=\"#rewrite-a-real-service\" aria-label=\"rewrite a real service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rewrite a Real Service</h2>\n<p>make sure that old service has more or less good design and coverage\ncycle:</p>\n<ul>\n<li>write async implementation</li>\n<li>use it in sync version and run all tests</li>\n<li>delete sync version, rewrite tests, rewire sync code</li>\n<li>commit it all in order to preserve history</li>\n</ul>\n<h2 id=\"other-caveats\" style=\"position:relative;\"><a href=\"#other-caveats\" aria-label=\"other caveats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Caveats</h2>\n<ul>\n<li>Don’t use Await. Never.</li>\n<li>Careful about Promises - don’t forget to resolve it by all means.</li>\n<li>Use Timer in order to make sure that you don’t have stale promises.</li>\n</ul>\n<h2 id=\"recap\" style=\"position:relative;\"><a href=\"#recap\" aria-label=\"recap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recap</h2>\n<p>Let’s recap the main points:</p>\n<ul>\n<li>Don’t catch <code class=\"language-text\">Exception</code> or <code class=\"language-text\">Throwable</code>.</li>\n<li>Be cautious in finally clause, don’t let exception there to overthrow an original one.</li>\n<li>You may swallow exceptions in close for read operations.</li>\n</ul>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Despite the fact that resource management is a well-known subject, there are still many mistakes around it. Especially in languages not mature enough (I believe, Scala is one of that kind). Don’t get me wrong, there are libraries in Scala world that handle resource management properly, i.e. <a href=\"https://github.com/pathikrit/better-files/\">better-files</a> or <a href=\"https://github.com/jsuereth/scala-arm/\">scala-arm</a>. But I believe that it should be a part of the language. Either as a language construct or as a part of a scala-library. It’s too important to not have it.</p>\n<p>All code is available on <a href=\"https://github.com/dkomanov/stuff/tree/master/src/com/komanov/future\">GitHub</a>. Originally posted on <a href=\"https://medium.com/@dkomanov/scala-try-with-resources-735baad0fd7d\">Medium</a>.</p>","fields":{"slug":"/p/writing-async-app-in-scala/"},"frontmatter":{"rawDate":"2020-05-02T00:00:00.000Z","date":"May 02, 2020","title":"Writing Async App in Scala","description":"TBD","tags":["scala","async","exception","error"],"canonicalUrl":"TBD","cover":null}}},"pageContext":{"slug":"/p/writing-async-app-in-scala/","previous":{"fields":{"slug":"/p/scala-try-with-resources/"}},"next":null}}}