{"version":3,"file":"component---src-pages-charts-region-matches-index-tsx-5d251dd044ab83f9ad62.js","mappings":"gKAUMA,EAAO,CAAC,aAAc,aAAc,aAEpCC,EAAQ,CACZC,MAAO,MACPC,KAAM,MACNC,OAAQJ,GAGJK,EAAQ,CACZH,MAAO,MACPC,KAAM,MACNC,OAAQ,MAACE,IAGLC,EAAe,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAChBC,EAAQT,EAAKU,KAAI,SAACC,GAAD,MAAQ,CAAEC,MAAOD,EAAGE,MAAOF,MAClD,OAAO,gBAAC,KAAD,CAAQC,MAAM,QAAQJ,SAAUA,EAAUC,MAAOA,KAsD1D,IAsBMK,GAAgBC,EAAAA,EAAAA,KAzEI,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAC3B,GAAkCC,EAAAA,EAAAA,UAAS,MAApCC,EAAP,KAAkBC,EAAlB,KACA,GAAsBF,EAAAA,EAAAA,UAAS,aAAnBG,GAAZ,WAEA,OACE,uBAAKC,UAAU,YACb,0CAEA,mEAC0C,IACxC,qBAAGC,KAAK,oDAAR,OAFF,6GAOA,oCAEA,gBAACf,EAAD,CAAcC,SAAU,SAACG,GAAD,OAAOS,EAAOT,MACtC,gBAAC,KAAD,CAAWH,SAAU,SAACG,GAAD,OAAOQ,EAAaR,MAEzC,gBAAC,KAAD,CACEY,UAAU,YACVC,UAAWR,EACXE,UAAWA,EACXO,OAAQ,kBAAM,GACdvB,MAAM,oBACND,MAAOA,EACPI,MAAOA,OA8CuC,CACpDqB,UAvB6B,WAC7B,OAAOC,QAAQC,IAAI,EACjBC,EAAAA,EAAAA,IAAS,0CACTA,EAAAA,EAAAA,IAAS,2CACTA,EAAAA,EAAAA,IAAS,4CACRC,MAAK,SAAC1B,GACP,SAAS2B,EAAOC,EAAeC,GAC7B,IAAMC,EAA0B9B,EAAO4B,GAAOG,KAE9C,OADAD,EAAKE,SAAQ,SAACzB,GAAD,OAAQA,EAAE0B,OAAS,CAAEJ,IAAAA,MAC3BC,EAGT,MAAO,CACLC,KAAK,GAAD,eACCJ,EAAO,EAAG,eADX,OAECA,EAAO,EAAG,gBAFX,OAGCA,EAAO,EAAG,qBAQnBO,qBA1CF,SAA0BC,EAAmBF,GAG3C,IACA,EADeE,EAAUC,UAAUD,EAAUE,YAAY,KAAO,GACzBC,MAAM,KAAtCC,EAAP,KAAcC,EAAd,KAAuBC,EAAvB,WACA,IAAKF,IAAUC,GAAQC,EAAMC,OAAS,EACpC,MAAM,IAAIC,MAAM,oCAAsCR,GAKxD,MAAO,CACLS,KAAML,EACNM,OAAQL,EACRX,IALcI,EAARJ,MAkCRiB,WAAY,+CAGd","sources":["webpack://komanov.com/./src/pages/charts/region-matches/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { JmhBenchmarkRun } from '../../..';\nimport {\n  ChartAndTable,\n  Choose,\n  JmhChartPage,\n  TimeUnits\n} from '../../../components';\nimport { loadJson } from '../../../util';\n\nconst jdks = ['openjdk-17', 'openjdk-11', 'openjdk-8'];\n\nconst xDesc = {\n  title: 'JDK',\n  prop: 'jdk',\n  values: jdks,\n};\n\nconst yDesc = {\n  title: 'any',\n  prop: 'any',\n  values: [undefined],\n};\n\nconst Environments = ({ onChange }: { onChange: any }) => {\n  const items = jdks.map((v) => ({ label: v, value: v }));\n  return <Choose label=\"JDK: \" onChange={onChange} items={items} />;\n};\n\nconst RegionMatchesImpl = ({ jmhList }: { jmhList: any }) => {\n  const [extractor, extractorSet] = useState(null);\n  const [jdk, jdkSet] = useState('openjdk-8');\n\n  return (\n    <div className=\"markdown\">\n      <h3>Introduction</h3>\n\n      <p>\n        The performance tests are performed via{' '}\n        <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">JMH</a>. The\n        configuration of a hardware is Intel® Core™ i7-1165G7 @ 2.80GHz × 8 (4\n        core + 4 HT) with 16 GB RAM.\n      </p>\n\n      <h3>Charts</h3>\n\n      <Environments onChange={(v) => jdkSet(v)} />\n      <TimeUnits onChange={(v) => extractorSet(v)} />\n\n      <ChartAndTable\n        chartType=\"LineChart\"\n        dataTable={jmhList}\n        extractor={extractor}\n        filter={() => true}\n        title=\"All LIMITs, nanos\"\n        xDesc={xDesc}\n        yDesc={yDesc}\n      />\n    </div>\n  );\n};\n\nfunction exportDimensions(benchmark: string, params: any) {\n  //'com.komanov.str.jmh.RegionMatchesBenchmarks.begin_regionMatches'\n\n  const method = benchmark.substring(benchmark.lastIndexOf('.') + 1);\n  const [where, what, ...other] = method.split('_');\n  if (!where || !what || other.length > 0) {\n    throw new Error('Expected 2 parts in a benchmark: ' + benchmark);\n  }\n\n  const { jdk } = params;\n\n  return {\n    type: where,\n    method: what,\n    jdk,\n  };\n}\n\nconst fetchAndCombineResults = () => {\n  return Promise.all([\n    loadJson('/data/charts/region-matches/jdk8.json'),\n    loadJson('/data/charts/region-matches/jdk11.json'),\n    loadJson('/data/charts/region-matches/jdk17.json'),\n  ]).then((values: any[]) => {\n    function setJdk(index: number, jdk: string) {\n      const list: JmhBenchmarkRun[] = values[index].data;\n      list.forEach((v) => (v.params = { jdk }));\n      return list;\n    }\n\n    return {\n      data: [\n        ...setJdk(0, 'openjdk-8'),\n        ...setJdk(1, 'openjdk-11'),\n        ...setJdk(2, 'openjdk-17'),\n      ],\n    };\n  });\n};\n\nconst RegionMatches = JmhChartPage(RegionMatchesImpl, {\n  fetchFunc: fetchAndCombineResults,\n  exportDimensionsFunc: exportDimensions,\n  headerText: 'Benchmarking String.regionMatches (Charts)',\n});\n\nexport default RegionMatches;\n"],"names":["jdks","xDesc","title","prop","values","yDesc","undefined","Environments","onChange","items","map","v","label","value","RegionMatches","JmhChartPage","jmhList","useState","extractor","extractorSet","jdkSet","className","href","chartType","dataTable","filter","fetchFunc","Promise","all","loadJson","then","setJdk","index","jdk","list","data","forEach","params","exportDimensionsFunc","benchmark","substring","lastIndexOf","split","where","what","other","length","Error","type","method","headerText"],"sourceRoot":""}