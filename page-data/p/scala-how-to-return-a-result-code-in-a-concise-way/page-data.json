{"componentChunkName":"component---src-templates-blog-post-js","path":"/p/scala-how-to-return-a-result-code-in-a-concise-way/","result":{"data":{"markdownRemark":{"id":"0e742007-72be-51ff-87c5-87dc01c54547","excerpt":"First of all, I don’t want to raise\na topic “Exceptions versus Error Codes”.\nBut if you need to return a result code and you use Scala, I have an elegant…","html":"<p>First of all, I don’t want to <a href=\"http://stackoverflow.com/questions/253314/exceptions-or-error-codes\">raise</a>\na <a href=\"http://www.joelonsoftware.com/items/2003/10/13.html\">topic</a> “Exceptions versus Error Codes”.\nBut if you need to return a result code and you use Scala, I have an elegant solution for you to do so.</p>\n<p>We have a simple contract:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> processRequest<span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">,</span> requestId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BusinessResult</code></pre></div>\n<p>Where BusinessResult is plain Java enumeration:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">BusinessResult</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserNotFound</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestNotFound</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NotOwner</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"java-style\" style=\"position:relative;\"><a href=\"#java-style\" aria-label=\"java style permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java-style</h2>\n<p>The old-school implementation of this method would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">def <span class=\"token function\">processRequestOld</span><span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">,</span> requestId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token class-name\">BusinessResult</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  val userOpt <span class=\"token operator\">=</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userOpt<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">BusinessResult<span class=\"token punctuation\">.</span>UserNotFound</span>\n  <span class=\"token punctuation\">}</span>\n\n  val requestOpt <span class=\"token operator\">=</span> <span class=\"token function\">getRequestById</span><span class=\"token punctuation\">(</span>requestId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requestOpt<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">BusinessResult<span class=\"token punctuation\">.</span>RequestNotFound</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">checkAccess</span><span class=\"token punctuation\">(</span>requestOpt<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">,</span> userOpt<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isFailure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">BusinessResult<span class=\"token punctuation\">.</span>NotOwner</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token class-name\">BusinessResult<span class=\"token punctuation\">.</span>Ok</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pros:</p>\n<ul>\n<li>Very clear to a reader (even for unfamiliar with Scala)</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>In Scala World it’s uncommon to use return keyword</li>\n<li>Also using of Option.get function is uncommon and considered as a bad practice mostly</li>\n</ul>\n<h2 id=\"use-exceptions-internally\" style=\"position:relative;\"><a href=\"#use-exceptions-internally\" aria-label=\"use exceptions internally permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Use exceptions internally</h2>\n<p>Another solution is to use exceptions:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> processRequestWithException<span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">,</span> requestId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BusinessResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> BusinessException<span class=\"token punctuation\">(</span>result<span class=\"token operator\">:</span> BusinessResult<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> RuntimeException\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> getUser<span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> BusinessException<span class=\"token punctuation\">(</span>BusinessResult<span class=\"token punctuation\">.</span>UserNotFound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> getRequestById<span class=\"token punctuation\">(</span>requestId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> BusinessException<span class=\"token punctuation\">(</span>BusinessResult<span class=\"token punctuation\">.</span>RequestNotFound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    checkAccess<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toOption<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> BusinessException<span class=\"token punctuation\">(</span>BusinessResult<span class=\"token punctuation\">.</span>NotOwner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    BusinessResult<span class=\"token punctuation\">.</span>Ok\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> be<span class=\"token operator\">:</span> BusinessException <span class=\"token keyword\">=></span> be<span class=\"token punctuation\">.</span>result\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Pros:</p>\n<ul>\n<li>More concise;</li>\n<li>Not using Option.<em>get</em> function;</li>\n<li>You may extract the code without try..catch and use it for a transition to</li>\n</ul>\n<p>exception-based error control (if you’re going to that transition).</p>\n<p>Cons:</p>\n<ul>\n<li>Usage of exceptions without actual need.</li>\n</ul>\n<h2 id=\"scala-collections\" style=\"position:relative;\"><a href=\"#scala-collections\" aria-label=\"scala collections permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scala collections</h2>\n<p>I tried to realize, how to use collections API for such tasks, i.e. using\nOption.<em>fold</em> method:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> processRequestCollections<span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">,</span> requestId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BusinessResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  getUser<span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">(</span>BusinessResult<span class=\"token punctuation\">.</span>UserNotFound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>user <span class=\"token keyword\">=></span> <span class=\"token punctuation\">{</span>\n    getRequestById<span class=\"token punctuation\">(</span>requestId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">(</span>BusinessResult<span class=\"token punctuation\">.</span>RequestNotFound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>request <span class=\"token keyword\">=></span> <span class=\"token punctuation\">{</span>\n      checkAccess<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toOption<span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">(</span>BusinessResult<span class=\"token punctuation\">.</span>NotOwner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">=></span> BusinessResult<span class=\"token punctuation\">.</span>Ok<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It looks concise, but in this approach you will increase indent for each result code.</p>\n<h2 id=\"either-ftw\" style=\"position:relative;\"><a href=\"#either-ftw\" aria-label=\"either ftw permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Either FTW</h2>\n<p>The common use case for <a href=\"http://www.scala-lang.org/api/2.11.7/index.html#scala.util.Either\">Either</a> is a replacement for\nOption where None will contain some meaningful value (by convention it’s Left).</p>\n<p>We will use <a href=\"http://danielwestheide.com/blog/2013/01/02/the-neophytes-guide-to-scala-part-7-the-either-type.html\">for comprehensions</a> on RightProjection\nof our Either. If we have Left (which means an error) then this value will\nbe returned, otherwise there will be a call to flatMap function with the next\nRightProjection etc.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> processRequestEither<span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">,</span> requestId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BusinessResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> result<span class=\"token operator\">:</span> Either<span class=\"token punctuation\">[</span>BusinessResult<span class=\"token punctuation\">,</span> BusinessResult<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n    user <span class=\"token keyword\">&lt;-</span> either<span class=\"token punctuation\">(</span>getUser<span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BusinessResult<span class=\"token punctuation\">.</span>UserNotFound<span class=\"token punctuation\">)</span>\n    request <span class=\"token keyword\">&lt;-</span> either<span class=\"token punctuation\">(</span>getRequestById<span class=\"token punctuation\">(</span>requestId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BusinessResult<span class=\"token punctuation\">.</span>RequestNotFound<span class=\"token punctuation\">)</span>\n    _ <span class=\"token keyword\">&lt;-</span> either<span class=\"token punctuation\">(</span>checkAccess<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toOption<span class=\"token punctuation\">,</span> BusinessResult<span class=\"token punctuation\">.</span>NotOwner<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> BusinessResult<span class=\"token punctuation\">.</span>Ok\n\n  result<span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">(</span>identity<span class=\"token punctuation\">,</span> identity<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">def</span> either<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>opt<span class=\"token operator\">:</span> Option<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> result<span class=\"token operator\">:</span> BusinessResult<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n  opt<span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">[</span>Either<span class=\"token punctuation\">[</span>BusinessResult<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Left<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Right<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>right</code></pre></div>\n<p>Pretty straightforward.</p>\n<p>A <em>result</em> type declaration is not necessary, I’ve put it just to show what\ndo we have in the end of the for clause.</p>\n<h2 id=\"adding-some-implicit-magic\" style=\"position:relative;\"><a href=\"#adding-some-implicit-magic\" aria-label=\"adding some implicit magic permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding some implicit magic…</h2>\n<p>With some implicit “<a href=\"https://gist.github.com/dkomanov/b3cb5b0b536a62b090eb\">magic</a>” we can transform\nthis code to a bit more concise form:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> processRequestNew<span class=\"token punctuation\">(</span>userId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">,</span> requestId<span class=\"token operator\">:</span> UUID<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BusinessResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n    user <span class=\"token keyword\">&lt;-</span> getUser<span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span> orResult BusinessResult<span class=\"token punctuation\">.</span>UserNotFound\n    request <span class=\"token keyword\">&lt;-</span> getRequestById<span class=\"token punctuation\">(</span>requestId<span class=\"token punctuation\">)</span> orResult BusinessResult<span class=\"token punctuation\">.</span>RequestNotFound\n    _ <span class=\"token keyword\">&lt;-</span> checkAccess<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span> orResult BusinessResult<span class=\"token punctuation\">.</span>NotOwner\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> BusinessResult<span class=\"token punctuation\">.</span>Ok\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All the magic is implicit classes that provides <em>orResult</em> function to create\nEither from Option and Try and an implicit conversion for Either[T, T]\n(to not write fold(identity, identity)).</p>\n<p>Of course, this approach will work not only with enums but with any type.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>So, we made a path from old-school Java-style to a concise Scala-style for such\nscenario of error handling: less verbosity, no ifs.</p>\n<p>All the code you may find in a <a href=\"https://github.com/dkomanov/scala-junk/commit/9de20fdb466adc06b7092fb111e3c3731c13861a\">single place</a> on GitHub.</p>\n<p>Originally posted on <a href=\"https://medium.com/@dkomanov/scala-how-to-return-a-result-code-in-a-concise-way-233e8981f73c\">Medium</a>.</p>","fields":{"slug":"/p/scala-how-to-return-a-result-code-in-a-concise-way/"},"frontmatter":{"rawDate":"2016-01-09T00:00:00.000Z","date":"January 09, 2016","title":"Scala: How to return a result code in a concise way","description":"My attempt to reinvent wheel during my learning of Scala. Right-biased Either...","tags":["scala","design"],"canonicalUrl":"https://medium.com/@dkomanov/scala-how-to-return-a-result-code-in-a-concise-way-233e8981f73c","cover":null}}},"pageContext":{"slug":"/p/scala-how-to-return-a-result-code-in-a-concise-way/","previous":{"fields":{"slug":"/p/lets-continue-with-uuid-fromstring/"}},"next":{"fields":{"slug":"/p/one-more-threat-of-mockito/"}}}},"staticQueryHashes":["3675711862"]}