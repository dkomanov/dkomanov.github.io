{"version":3,"file":"component---src-pages-charts-offheap-array-index-tsx-689b09c4ba28987da516.js","mappings":"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","sources":["webpack://komanov.com/./src/pages/charts/offheap-array/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'gatsby';\nimport { JmhBenchmarkRun } from '../../..';\nimport {\n  ChartAndTable,\n  Choose,\n  JmhChartComponentProps,\n  JmhChartPage,\n  TimeUnits,\n} from '../../../components';\nimport { loadJson } from '../../../util';\n\ntype JdkVersion = 'openjdk-17' | 'openjdk-11' | 'openjdk-8';\nconst jdks: JdkVersion[] = ['openjdk-17', 'openjdk-11', 'openjdk-8'];\n\nconst xDesc = {\n  title: 'Collection',\n  prop: 'method',\n  values: [\n    {\n      name: 'java.util.HashSet',\n      value: 'javaSet',\n    },\n    {\n      name: 'immutable.Set',\n      value: 'scalaSet',\n    },\n    {\n      name: 'Array[Long]',\n      value: 'heapLongArray',\n    },\n    {\n      name: 'Array[UUID]',\n      value: 'heapUuidArray',\n    },\n    {\n      name: 'OffHeap Array',\n      value: 'offHeap',\n    },\n    {\n      name: 'ByteBuf (netty4)',\n      value: 'netty4Single',\n    },\n    {\n      name: 'Buffer (netty5)',\n      value: 'netty5Single',\n    },\n  ],\n};\n\nconst xDescOffHeap = {\n  title: 'Collection',\n  prop: 'method',\n  values: [\n    {\n      name: 'OffHeap Array',\n      value: 'offHeap',\n    },\n    {\n      name: 'CompositeByteBuf (netty4)',\n      value: 'netty4Composite',\n    },\n    {\n      name: 'ByteBuf (netty4)',\n      value: 'netty4Single',\n    },\n    {\n      name: 'CompositeBuffer (netty5)',\n      value: 'netty5Composite',\n    },\n    {\n      name: 'Buffer (netty5)',\n      value: 'netty5Single',\n    },\n  ],\n};\n\nconst yDesc = {\n  title: 'JDK',\n  prop: 'jdk',\n  values: jdks,\n};\n\nfunction getChooseItems(\n  values: string[],\n  isDefault: (value: string, index: number) => boolean\n) {\n  return values.map((v, index) => {\n    return {\n      label: v,\n      value: v,\n      default: isDefault(v, index),\n    };\n  });\n}\n\nconst OffheapArrayImpl = ({ jmhList }: JmhChartComponentProps) => {\n  const [size, sizeSet] = useState('1000000');\n  const [jdk, jdkSet] = useState<JdkVersion>('openjdk-17');\n  const [extractor, extractorSet] = useState({ func: null });\n\n  return (\n    <div className=\"markdown\">\n      <h3>Introduction</h3>\n\n      <p>\n        Here are benchmarking results for{' '}\n        <Link to=\"/p/replacing-hash-set-with-sorted-array-in-java\">\n          &laquo;Replacing HashSet with Sorted Array and Binary Search in Java?&raquo;\n        </Link>{' '}\n        blog post.\n      </p>\n\n      <p>\n        The performance tests are performed via{' '}\n        <a href=\"https://github.com/openjdk/jmh\">JMH</a>. The configuration of a\n        hardware is Intel® Core™ i7-1165G7 @ 2.80GHz × 8 (4 core + 4 HT) with 16\n        GB RAM. Scala version: 2.13.6.\n      </p>\n\n      <h3>Charts</h3>\n\n      <Choose\n        label=\"Collection size:\"\n        items={getChooseItems(\n          ['1000', '10000', '100000', '1000000'],\n          (v) => v === '1000000'\n        )}\n        onChange={(value: string) => sizeSet(value)}\n      />\n      <TimeUnits onChange={(func: any) => extractorSet({ func })} />\n\n      <h4>Lookup Performance</h4>\n\n      <p>Performance of the successful lookup (hit) for all JDKs:</p>\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.what === 'hit' && p.size === size}\n        title=\"Successful lookup (hit), nanos\"\n        xDesc={xDesc}\n        yDesc={yDesc}\n      />\n\n      <p>Performance of the failed lookup (miss) for all JDKs:</p>\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.what === 'miss' && p.size === size}\n        title=\"Failed lookup (miss), nanos\"\n        xDesc={xDesc}\n        yDesc={yDesc}\n      />\n\n      <h4>Performance for different collection size</h4>\n\n      <Choose\n        label=\"JDK:\"\n        items={getChooseItems(jdks, (_, index) => index === 0)}\n        onChange={(value: JdkVersion) => jdkSet(value)}\n      />\n\n      <ChartAndTable\n        chartType=\"LineChart\"\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.what === 'hit' && p.jdk === jdk}\n        title=\"Successful lookup (hit), nanos\"\n        xDesc={xDesc}\n        yDesc={{\n          title: 'Collection size',\n          prop: 'size',\n          values: ['1000', '10000', '100000', '1000000'],\n        }}\n        options={{\n          hAxis: {\n            title: 'Collection size',\n          },\n          vAxis: {\n            title: 'time, nanoseconds',\n            maxValue: 2000,\n          },\n        }}\n      />\n\n      <h4>Off-Heap only, including Composite buffer</h4>\n\n      <p>\n        Composite buffer was excluded from the previous graphs, because it's\n        extremely slow. Below only off-heap collections:\n      </p>\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.what === 'hit' && p.size === size}\n        title=\"Successful lookup for off-heap (hit), nanos\"\n        xDesc={xDescOffHeap}\n        yDesc={yDesc}\n      />\n\n      <p>\n        Full JMH logs:\n        <a href={filePath('jdk8.log.txt')}>openjdk-8</a>,{' '}\n        <a href={filePath('jdk11.log.txt')}>openjdk-11</a>,{' '}\n        <a href={filePath('jdk17.log.txt')}>openjdk-17</a>.\n      </p>\n    </div>\n  );\n};\n\nfunction exportDimensions(benchmark: string, params: any) {\n  //'com.komanov.offheap.jmh.Benchmarks.heapArrayHit'\n\n  const method = benchmark.substring(benchmark.lastIndexOf('.') + 1);\n  const hit = method.endsWith('Hit');\n  const name = method.substring(0, method.length - (hit ? 3 : 4));\n\n  return {\n    method: name,\n    what: hit ? 'hit' : 'miss',\n    ...params,\n  };\n}\n\nconst filePath = (name: string) => `/data/charts/offheap-array/${name}`;\n\nconst fetchAndCombineResults = () => {\n  return Promise.all([\n    loadJson(filePath('jdk8.json')),\n    loadJson(filePath('jdk11.json')),\n    loadJson(filePath('jdk17.json')),\n  ]).then((values: any[]) => {\n    function setJdk(index: number, jdk: JdkVersion) {\n      const list: JmhBenchmarkRun[] = values[index].data;\n      list.forEach((v) => (v.params = { ...v.params, jdk }));\n      return list;\n    }\n\n    return {\n      data: [\n        ...setJdk(0, 'openjdk-8'),\n        ...setJdk(1, 'openjdk-11'),\n        ...setJdk(2, 'openjdk-17'),\n      ],\n    };\n  });\n};\n\nconst OffheapArray = JmhChartPage(OffheapArrayImpl, {\n  fetchFunc: fetchAndCombineResults,\n  exportDimensionsFunc: exportDimensions,\n  headerText: 'Replacing HashSet with Sorted Array and Binary Search (Charts)',\n});\n\nexport default OffheapArray;\n"],"names":["jdks","xDesc","title","prop","values","name","value","xDescOffHeap","yDesc","getChooseItems","isDefault","map","v","index","label","default","filePath","OffheapArray","JmhChartPage","jmhList","useState","size","sizeSet","jdk","jdkSet","func","extractor","extractorSet","React","className","Link","to","href","Choose","items","onChange","TimeUnits","ChartAndTable","dataTable","filter","p","what","_","chartType","options","hAxis","vAxis","maxValue","fetchFunc","Promise","all","loadJson","then","setJdk","list","data","forEach","params","exportDimensionsFunc","benchmark","method","substring","lastIndexOf","hit","endsWith","length","headerText"],"sourceRoot":""}