# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 0.00% complete, ETA 02:10:00
# Fork: 1 of 1
# Warmup Iteration   1: 92367.651 ns/op
# Warmup Iteration   2: 27071.326 ns/op
# Warmup Iteration   3: 26571.823 ns/op
# Warmup Iteration   4: 25609.911 ns/op
# Warmup Iteration   5: 24782.698 ns/op
Iteration   1: 25343.016 ns/op
Iteration   2: 25372.653 ns/op
Iteration   3: 25397.255 ns/op
Iteration   4: 24696.340 ns/op
Iteration   5: 24678.556 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  25097.564 ±(99.9%) 1443.714 ns/op [Average]
  (min, avg, max) = (24678.556, 25097.564, 25397.255), stdev = 374.928
  CI (99.9%): [23653.850, 26541.278] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 0.26% complete, ETA 02:30:12
# Fork: 1 of 1
# Warmup Iteration   1: 117218.413 ns/op
# Warmup Iteration   2: 51963.845 ns/op
# Warmup Iteration   3: 52415.203 ns/op
# Warmup Iteration   4: 49778.560 ns/op
# Warmup Iteration   5: 50956.700 ns/op
Iteration   1: 47841.494 ns/op
Iteration   2: 49094.983 ns/op
Iteration   3: 48147.935 ns/op
Iteration   4: 48860.145 ns/op
Iteration   5: 47710.267 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  48330.965 ±(99.9%) 2375.338 ns/op [Average]
  (min, avg, max) = (47710.267, 48330.965, 49094.983), stdev = 616.868
  CI (99.9%): [45955.627, 50706.303] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 0.51% complete, ETA 02:29:19
# Fork: 1 of 1
# Warmup Iteration   1: 366780.514 ns/op
# Warmup Iteration   2: 123446.683 ns/op
# Warmup Iteration   3: 99839.414 ns/op
# Warmup Iteration   4: 101594.279 ns/op
# Warmup Iteration   5: 98046.335 ns/op
Iteration   1: 96530.429 ns/op
Iteration   2: 97683.586 ns/op
Iteration   3: 97870.667 ns/op
Iteration   4: 96565.912 ns/op
Iteration   5: 96609.202 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  97051.959 ±(99.9%) 2564.009 ns/op [Average]
  (min, avg, max) = (96530.429, 97051.959, 97870.667), stdev = 665.865
  CI (99.9%): [94487.950, 99615.969] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 0.77% complete, ETA 02:28:37
# Fork: 1 of 1
# Warmup Iteration   1: 623756.809 ns/op
# Warmup Iteration   2: 241322.176 ns/op
# Warmup Iteration   3: 225497.404 ns/op
# Warmup Iteration   4: 219142.894 ns/op
# Warmup Iteration   5: 214634.395 ns/op
Iteration   1: 214539.748 ns/op
Iteration   2: 215637.482 ns/op
Iteration   3: 215994.302 ns/op
Iteration   4: 217290.273 ns/op
Iteration   5: 215180.502 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  215728.461 ±(99.9%) 3960.506 ns/op [Average]
  (min, avg, max) = (214539.748, 215728.461, 217290.273), stdev = 1028.531
  CI (99.9%): [211767.955, 219688.967] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 1.03% complete, ETA 02:28:15
# Fork: 1 of 1
# Warmup Iteration   1: 8334200.918 ns/op
# Warmup Iteration   2: 2233121.336 ns/op
# Warmup Iteration   3: 2162956.875 ns/op
# Warmup Iteration   4: 2037964.923 ns/op
# Warmup Iteration   5: 2021583.527 ns/op
Iteration   1: 2015000.861 ns/op
Iteration   2: 2005579.700 ns/op
Iteration   3: 2017866.153 ns/op
Iteration   4: 2040918.309 ns/op
Iteration   5: 2012744.553 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  2018421.915 ±(99.9%) 51491.301 ns/op [Average]
  (min, avg, max) = (2005579.700, 2018421.915, 2040918.309), stdev = 13372.127
  CI (99.9%): [1966930.614, 2069913.216] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 1.28% complete, ETA 02:27:57
# Fork: 1 of 1
# Warmup Iteration   1: 69898.382 ns/op
# Warmup Iteration   2: 25796.110 ns/op
# Warmup Iteration   3: 25072.180 ns/op
# Warmup Iteration   4: 24515.955 ns/op
# Warmup Iteration   5: 23930.705 ns/op
Iteration   1: 23872.403 ns/op
Iteration   2: 23553.547 ns/op
Iteration   3: 23561.435 ns/op
Iteration   4: 24064.542 ns/op
Iteration   5: 24065.281 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  23823.442 ±(99.9%) 982.676 ns/op [Average]
  (min, avg, max) = (23553.547, 23823.442, 24065.281), stdev = 255.198
  CI (99.9%): [22840.766, 24806.117] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 1.54% complete, ETA 02:27:27
# Fork: 1 of 1
# Warmup Iteration   1: 112548.377 ns/op
# Warmup Iteration   2: 46016.019 ns/op
# Warmup Iteration   3: 45188.908 ns/op
# Warmup Iteration   4: 41844.113 ns/op
# Warmup Iteration   5: 42365.421 ns/op
Iteration   1: 41528.494 ns/op
Iteration   2: 41458.269 ns/op
Iteration   3: 41452.014 ns/op
Iteration   4: 41422.370 ns/op
Iteration   5: 41468.543 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  41465.938 ±(99.9%) 150.013 ns/op [Average]
  (min, avg, max) = (41422.370, 41465.938, 41528.494), stdev = 38.958
  CI (99.9%): [41315.925, 41615.950] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 1.79% complete, ETA 02:27:02
# Fork: 1 of 1
# Warmup Iteration   1: 275659.103 ns/op
# Warmup Iteration   2: 88724.905 ns/op
# Warmup Iteration   3: 86132.043 ns/op
# Warmup Iteration   4: 86572.266 ns/op
# Warmup Iteration   5: 83938.052 ns/op
Iteration   1: 83611.553 ns/op
Iteration   2: 82268.760 ns/op
Iteration   3: 82094.699 ns/op
Iteration   4: 82071.866 ns/op
Iteration   5: 82765.757 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  82562.527 ±(99.9%) 2501.193 ns/op [Average]
  (min, avg, max) = (82071.866, 82562.527, 83611.553), stdev = 649.552
  CI (99.9%): [80061.334, 85063.719] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 2.05% complete, ETA 02:26:39
# Fork: 1 of 1
# Warmup Iteration   1: 649185.488 ns/op
# Warmup Iteration   2: 198294.807 ns/op
# Warmup Iteration   3: 194871.106 ns/op
# Warmup Iteration   4: 181923.862 ns/op
# Warmup Iteration   5: 180828.489 ns/op
Iteration   1: 179800.868 ns/op
Iteration   2: 178258.941 ns/op
Iteration   3: 178224.209 ns/op
Iteration   4: 178605.521 ns/op
Iteration   5: 180061.174 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  178990.143 ±(99.9%) 3375.430 ns/op [Average]
  (min, avg, max) = (178224.209, 178990.143, 180061.174), stdev = 876.588
  CI (99.9%): [175614.713, 182365.572] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 2.31% complete, ETA 02:26:14
# Fork: 1 of 1
# Warmup Iteration   1: 3293646.527 ns/op
# Warmup Iteration   2: 1768131.745 ns/op
# Warmup Iteration   3: 1705642.867 ns/op
# Warmup Iteration   4: 1653374.956 ns/op
# Warmup Iteration   5: 1649627.907 ns/op
Iteration   1: 1691989.514 ns/op
Iteration   2: 1688158.745 ns/op
Iteration   3: 1690158.099 ns/op
Iteration   4: 1692393.979 ns/op
Iteration   5: 1695798.832 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1691699.834 ±(99.9%) 10939.454 ns/op [Average]
  (min, avg, max) = (1688158.745, 1691699.834, 1695798.832), stdev = 2840.942
  CI (99.9%): [1680760.380, 1702639.288] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 2.56% complete, ETA 02:25:52
# Fork: 1 of 1
# Warmup Iteration   1: 89882.198 ns/op
# Warmup Iteration   2: 27575.208 ns/op
# Warmup Iteration   3: 26023.022 ns/op
# Warmup Iteration   4: 26910.924 ns/op
# Warmup Iteration   5: 24707.348 ns/op
Iteration   1: 24824.991 ns/op
Iteration   2: 24854.887 ns/op
Iteration   3: 24786.432 ns/op
Iteration   4: 24764.996 ns/op
Iteration   5: 25086.386 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  24863.538 ±(99.9%) 497.902 ns/op [Average]
  (min, avg, max) = (24764.996, 24863.538, 25086.386), stdev = 129.304
  CI (99.9%): [24365.636, 25361.441] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 2.82% complete, ETA 02:25:24
# Fork: 1 of 1
# Warmup Iteration   1: 223395.727 ns/op
# Warmup Iteration   2: 53204.250 ns/op
# Warmup Iteration   3: 48375.010 ns/op
# Warmup Iteration   4: 46245.434 ns/op
# Warmup Iteration   5: 45443.095 ns/op
Iteration   1: 45188.105 ns/op
Iteration   2: 45435.396 ns/op
Iteration   3: 45119.562 ns/op
Iteration   4: 46929.784 ns/op
Iteration   5: 45204.828 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  45575.535 ±(99.9%) 2950.876 ns/op [Average]
  (min, avg, max) = (45119.562, 45575.535, 46929.784), stdev = 766.333
  CI (99.9%): [42624.659, 48526.411] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 3.08% complete, ETA 02:25:03
# Fork: 1 of 1
# Warmup Iteration   1: 226583.060 ns/op
# Warmup Iteration   2: 94544.570 ns/op
# Warmup Iteration   3: 90992.128 ns/op
# Warmup Iteration   4: 90418.741 ns/op
# Warmup Iteration   5: 84876.971 ns/op
Iteration   1: 84978.643 ns/op
Iteration   2: 84958.856 ns/op
Iteration   3: 85383.117 ns/op
Iteration   4: 84799.784 ns/op
Iteration   5: 86286.374 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  85281.355 ±(99.9%) 2316.771 ns/op [Average]
  (min, avg, max) = (84799.784, 85281.355, 86286.374), stdev = 601.658
  CI (99.9%): [82964.584, 87598.125] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 3.33% complete, ETA 02:24:41
# Fork: 1 of 1
# Warmup Iteration   1: 861451.539 ns/op
# Warmup Iteration   2: 225844.351 ns/op
# Warmup Iteration   3: 240072.434 ns/op
# Warmup Iteration   4: 213309.850 ns/op
# Warmup Iteration   5: 201715.946 ns/op
Iteration   1: 201749.536 ns/op
Iteration   2: 199790.862 ns/op
Iteration   3: 202183.976 ns/op
Iteration   4: 201321.850 ns/op
Iteration   5: 200132.218 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  201035.688 ±(99.9%) 3981.221 ns/op [Average]
  (min, avg, max) = (199790.862, 201035.688, 202183.976), stdev = 1033.910
  CI (99.9%): [197054.467, 205016.910] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 3.59% complete, ETA 02:24:17
# Fork: 1 of 1
# Warmup Iteration   1: 5352758.893 ns/op
# Warmup Iteration   2: 2013413.512 ns/op
# Warmup Iteration   3: 1974428.791 ns/op
# Warmup Iteration   4: 1950957.807 ns/op
# Warmup Iteration   5: 1870583.801 ns/op
Iteration   1: 1927420.588 ns/op
Iteration   2: 1968984.306 ns/op
Iteration   3: 1940000.096 ns/op
Iteration   4: 1946165.424 ns/op
Iteration   5: 1944236.193 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1945361.321 ±(99.9%) 58097.864 ns/op [Average]
  (min, avg, max) = (1927420.588, 1945361.321, 1968984.306), stdev = 15087.831
  CI (99.9%): [1887263.457, 2003459.185] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 3.85% complete, ETA 02:23:56
# Fork: 1 of 1
# Warmup Iteration   1: 23003.182 ns/op
# Warmup Iteration   2: 10781.900 ns/op
# Warmup Iteration   3: 9901.189 ns/op
# Warmup Iteration   4: 10005.214 ns/op
# Warmup Iteration   5: 9557.370 ns/op
Iteration   1: 9512.382 ns/op
Iteration   2: 9494.314 ns/op
Iteration   3: 9550.243 ns/op
Iteration   4: 9499.945 ns/op
Iteration   5: 9463.197 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  9504.016 ±(99.9%) 121.521 ns/op [Average]
  (min, avg, max) = (9463.197, 9504.016, 9550.243), stdev = 31.559
  CI (99.9%): [9382.496, 9625.537] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 4.10% complete, ETA 02:23:31
# Fork: 1 of 1
# Warmup Iteration   1: 40581.834 ns/op
# Warmup Iteration   2: 19811.921 ns/op
# Warmup Iteration   3: 19755.955 ns/op
# Warmup Iteration   4: 18951.782 ns/op
# Warmup Iteration   5: 18766.140 ns/op
Iteration   1: 18989.283 ns/op
Iteration   2: 18482.379 ns/op
Iteration   3: 18580.902 ns/op
Iteration   4: 18473.613 ns/op
Iteration   5: 18363.703 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  18577.976 ±(99.9%) 933.583 ns/op [Average]
  (min, avg, max) = (18363.703, 18577.976, 18989.283), stdev = 242.449
  CI (99.9%): [17644.393, 19511.560] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 4.36% complete, ETA 02:23:07
# Fork: 1 of 1
# Warmup Iteration   1: 99021.296 ns/op
# Warmup Iteration   2: 38984.355 ns/op
# Warmup Iteration   3: 36029.041 ns/op
# Warmup Iteration   4: 36682.500 ns/op
# Warmup Iteration   5: 35193.161 ns/op
Iteration   1: 34070.610 ns/op
Iteration   2: 34109.001 ns/op
Iteration   3: 34286.625 ns/op
Iteration   4: 33558.742 ns/op
Iteration   5: 33895.882 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  33984.172 ±(99.9%) 1060.358 ns/op [Average]
  (min, avg, max) = (33558.742, 33984.172, 34286.625), stdev = 275.372
  CI (99.9%): [32923.814, 35044.530] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 4.62% complete, ETA 02:22:41
# Fork: 1 of 1
# Warmup Iteration   1: 211981.394 ns/op
# Warmup Iteration   2: 76478.610 ns/op
# Warmup Iteration   3: 73406.294 ns/op
# Warmup Iteration   4: 71341.981 ns/op
# Warmup Iteration   5: 70341.162 ns/op
Iteration   1: 69678.916 ns/op
Iteration   2: 70086.377 ns/op
Iteration   3: 69811.082 ns/op
Iteration   4: 69926.447 ns/op
Iteration   5: 70061.038 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  69912.772 ±(99.9%) 659.511 ns/op [Average]
  (min, avg, max) = (69678.916, 69912.772, 70086.377), stdev = 171.273
  CI (99.9%): [69253.261, 70572.283] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 4.87% complete, ETA 02:22:16
# Fork: 1 of 1
# Warmup Iteration   1: 1696055.684 ns/op
# Warmup Iteration   2: 768193.028 ns/op
# Warmup Iteration   3: 738771.073 ns/op
# Warmup Iteration   4: 722213.974 ns/op
# Warmup Iteration   5: 767360.915 ns/op
Iteration   1: 690218.119 ns/op
Iteration   2: 689918.368 ns/op
Iteration   3: 694593.687 ns/op
Iteration   4: 691027.695 ns/op
Iteration   5: 691135.195 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  691378.613 ±(99.9%) 7203.421 ns/op [Average]
  (min, avg, max) = (689918.368, 691378.613, 694593.687), stdev = 1870.705
  CI (99.9%): [684175.192, 698582.033] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 5.13% complete, ETA 02:21:52
# Fork: 1 of 1
# Warmup Iteration   1: 31113.791 ns/op
# Warmup Iteration   2: 10562.048 ns/op
# Warmup Iteration   3: 10018.762 ns/op
# Warmup Iteration   4: 9624.530 ns/op
# Warmup Iteration   5: 9652.095 ns/op
Iteration   1: 9727.431 ns/op
Iteration   2: 9739.153 ns/op
Iteration   3: 9771.552 ns/op
Iteration   4: 9593.045 ns/op
Iteration   5: 9518.688 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  9669.974 ±(99.9%) 418.335 ns/op [Average]
  (min, avg, max) = (9518.688, 9669.974, 9771.552), stdev = 108.640
  CI (99.9%): [9251.639, 10088.308] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 5.38% complete, ETA 02:21:27
# Fork: 1 of 1
# Warmup Iteration   1: 79583.961 ns/op
# Warmup Iteration   2: 21241.686 ns/op
# Warmup Iteration   3: 19966.473 ns/op
# Warmup Iteration   4: 18860.416 ns/op
# Warmup Iteration   5: 18951.987 ns/op
Iteration   1: 18823.396 ns/op
Iteration   2: 18795.704 ns/op
Iteration   3: 18836.747 ns/op
Iteration   4: 18813.132 ns/op
Iteration   5: 18926.675 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  18839.131 ±(99.9%) 197.091 ns/op [Average]
  (min, avg, max) = (18795.704, 18839.131, 18926.675), stdev = 51.184
  CI (99.9%): [18642.040, 19036.221] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 5.64% complete, ETA 02:21:04
# Fork: 1 of 1
# Warmup Iteration   1: 157335.441 ns/op
# Warmup Iteration   2: 42957.473 ns/op
# Warmup Iteration   3: 37524.351 ns/op
# Warmup Iteration   4: 35486.576 ns/op
# Warmup Iteration   5: 35213.715 ns/op
Iteration   1: 35320.063 ns/op
Iteration   2: 35116.428 ns/op
Iteration   3: 35079.689 ns/op
Iteration   4: 35358.332 ns/op
Iteration   5: 35190.988 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  35213.100 ±(99.9%) 472.259 ns/op [Average]
  (min, avg, max) = (35079.689, 35213.100, 35358.332), stdev = 122.644
  CI (99.9%): [34740.841, 35685.359] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 5.90% complete, ETA 02:20:39
# Fork: 1 of 1
# Warmup Iteration   1: 218327.869 ns/op
# Warmup Iteration   2: 84908.525 ns/op
# Warmup Iteration   3: 83210.252 ns/op
# Warmup Iteration   4: 74719.325 ns/op
# Warmup Iteration   5: 75376.022 ns/op
Iteration   1: 76219.115 ns/op
Iteration   2: 74531.569 ns/op
Iteration   3: 74647.557 ns/op
Iteration   4: 74588.026 ns/op
Iteration   5: 74932.631 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  74983.780 ±(99.9%) 2724.742 ns/op [Average]
  (min, avg, max) = (74531.569, 74983.780, 76219.115), stdev = 707.607
  CI (99.9%): [72259.038, 77708.521] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 6.15% complete, ETA 02:20:16
# Fork: 1 of 1
# Warmup Iteration   1: 2190220.908 ns/op
# Warmup Iteration   2: 967834.522 ns/op
# Warmup Iteration   3: 926014.976 ns/op
# Warmup Iteration   4: 893809.689 ns/op
# Warmup Iteration   5: 878295.117 ns/op
Iteration   1: 863180.705 ns/op
Iteration   2: 878775.937 ns/op
Iteration   3: 855764.444 ns/op
Iteration   4: 852283.745 ns/op
Iteration   5: 857672.642 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  861535.495 ±(99.9%) 40098.549 ns/op [Average]
  (min, avg, max) = (852283.745, 861535.495, 878775.937), stdev = 10413.466
  CI (99.9%): [821436.945, 901634.044] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 6.41% complete, ETA 02:19:54
# Fork: 1 of 1
# Warmup Iteration   1: 30976.189 ns/op
# Warmup Iteration   2: 13174.952 ns/op
# Warmup Iteration   3: 11236.176 ns/op
# Warmup Iteration   4: 11175.414 ns/op
# Warmup Iteration   5: 11188.113 ns/op
Iteration   1: 11140.614 ns/op
Iteration   2: 11245.338 ns/op
Iteration   3: 11239.518 ns/op
Iteration   4: 11122.585 ns/op
Iteration   5: 11091.713 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  11167.954 ±(99.9%) 270.425 ns/op [Average]
  (min, avg, max) = (11091.713, 11167.954, 11245.338), stdev = 70.229
  CI (99.9%): [10897.528, 11438.379] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 6.67% complete, ETA 02:19:29
# Fork: 1 of 1
# Warmup Iteration   1: 72928.386 ns/op
# Warmup Iteration   2: 25102.252 ns/op
# Warmup Iteration   3: 21516.675 ns/op
# Warmup Iteration   4: 21369.222 ns/op
# Warmup Iteration   5: 21320.371 ns/op
Iteration   1: 21278.483 ns/op
Iteration   2: 21258.674 ns/op
Iteration   3: 21262.980 ns/op
Iteration   4: 21446.719 ns/op
Iteration   5: 21283.577 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  21306.086 ±(99.9%) 305.345 ns/op [Average]
  (min, avg, max) = (21258.674, 21306.086, 21446.719), stdev = 79.297
  CI (99.9%): [21000.741, 21611.432] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 6.92% complete, ETA 02:19:04
# Fork: 1 of 1
# Warmup Iteration   1: 127065.003 ns/op
# Warmup Iteration   2: 48109.466 ns/op
# Warmup Iteration   3: 42867.595 ns/op
# Warmup Iteration   4: 42660.872 ns/op
# Warmup Iteration   5: 42869.936 ns/op
Iteration   1: 41979.761 ns/op
Iteration   2: 41904.688 ns/op
Iteration   3: 41916.986 ns/op
Iteration   4: 41928.543 ns/op
Iteration   5: 41912.045 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  41928.405 ±(99.9%) 115.487 ns/op [Average]
  (min, avg, max) = (41904.688, 41928.405, 41979.761), stdev = 29.992
  CI (99.9%): [41812.918, 42043.892] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 7.18% complete, ETA 02:18:41
# Fork: 1 of 1
# Warmup Iteration   1: 257908.041 ns/op
# Warmup Iteration   2: 111769.339 ns/op
# Warmup Iteration   3: 92793.647 ns/op
# Warmup Iteration   4: 95829.091 ns/op
# Warmup Iteration   5: 93671.674 ns/op
Iteration   1: 91767.053 ns/op
Iteration   2: 90975.672 ns/op
Iteration   3: 90977.673 ns/op
Iteration   4: 91940.596 ns/op
Iteration   5: 91076.648 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  91347.528 ±(99.9%) 1802.184 ns/op [Average]
  (min, avg, max) = (90975.672, 91347.528, 91940.596), stdev = 468.021
  CI (99.9%): [89545.345, 93149.712] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 7.44% complete, ETA 02:18:17
# Fork: 1 of 1
# Warmup Iteration   1: 2645232.329 ns/op
# Warmup Iteration   2: 1125802.141 ns/op
# Warmup Iteration   3: 1011034.052 ns/op
# Warmup Iteration   4: 998602.357 ns/op
# Warmup Iteration   5: 1112362.007 ns/op
Iteration   1: 1010684.602 ns/op
Iteration   2: 976937.981 ns/op
Iteration   3: 976548.137 ns/op
Iteration   4: 986589.388 ns/op
Iteration   5: 982916.323 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  986735.286 ±(99.9%) 54044.330 ns/op [Average]
  (min, avg, max) = (976548.137, 986735.286, 1010684.602), stdev = 14035.141
  CI (99.9%): [932690.957, 1040779.616] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 7.69% complete, ETA 02:17:54
# Fork: 1 of 1
# Warmup Iteration   1: 488619.675 ns/op
# Warmup Iteration   2: 187223.955 ns/op
# Warmup Iteration   3: 148676.806 ns/op
# Warmup Iteration   4: 147686.473 ns/op
# Warmup Iteration   5: 142547.996 ns/op
Iteration   1: 142328.573 ns/op
Iteration   2: 142660.115 ns/op
Iteration   3: 141709.284 ns/op
Iteration   4: 142023.442 ns/op
Iteration   5: 142885.814 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  142321.446 ±(99.9%) 1823.279 ns/op [Average]
  (min, avg, max) = (141709.284, 142321.446, 142885.814), stdev = 473.500
  CI (99.9%): [140498.166, 144144.725] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 7.95% complete, ETA 02:17:29
# Fork: 1 of 1
# Warmup Iteration   1: 1001556.808 ns/op
# Warmup Iteration   2: 329715.718 ns/op
# Warmup Iteration   3: 269731.242 ns/op
# Warmup Iteration   4: 267398.760 ns/op
# Warmup Iteration   5: 257886.821 ns/op
Iteration   1: 258285.180 ns/op
Iteration   2: 258281.553 ns/op
Iteration   3: 257857.327 ns/op
Iteration   4: 256914.114 ns/op
Iteration   5: 257782.905 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  257824.216 ±(99.9%) 2154.928 ns/op [Average]
  (min, avg, max) = (256914.114, 257824.216, 258285.180), stdev = 559.628
  CI (99.9%): [255669.288, 259979.144] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 8.21% complete, ETA 02:17:05
# Fork: 1 of 1
# Warmup Iteration   1: 1831839.833 ns/op
# Warmup Iteration   2: 742846.021 ns/op
# Warmup Iteration   3: 626805.533 ns/op
# Warmup Iteration   4: 624153.595 ns/op
# Warmup Iteration   5: 621188.262 ns/op
Iteration   1: 607570.206 ns/op
Iteration   2: 603771.183 ns/op
Iteration   3: 611007.974 ns/op
Iteration   4: 601659.060 ns/op
Iteration   5: 608550.124 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  606511.709 ±(99.9%) 14478.451 ns/op [Average]
  (min, avg, max) = (601659.060, 606511.709, 611007.974), stdev = 3760.008
  CI (99.9%): [592033.259, 620990.160] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 8.46% complete, ETA 02:16:43
# Fork: 1 of 1
# Warmup Iteration   1: 4547148.536 ns/op
# Warmup Iteration   2: 1717934.427 ns/op
# Warmup Iteration   3: 1612959.673 ns/op
# Warmup Iteration   4: 1655991.443 ns/op
# Warmup Iteration   5: 1498648.192 ns/op
Iteration   1: 1500900.211 ns/op
Iteration   2: 1505690.451 ns/op
Iteration   3: 1495635.726 ns/op
Iteration   4: 1496085.049 ns/op
Iteration   5: 1490652.718 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1497792.831 ±(99.9%) 22000.883 ns/op [Average]
  (min, avg, max) = (1490652.718, 1497792.831, 1505690.451), stdev = 5713.559
  CI (99.9%): [1475791.948, 1519793.714] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 8.72% complete, ETA 02:16:19
# Fork: 1 of 1
# Warmup Iteration   1: 36343532.131 ns/op
# Warmup Iteration   2: 14464002.391 ns/op
# Warmup Iteration   3: 13529913.188 ns/op
# Warmup Iteration   4: 13126356.902 ns/op
# Warmup Iteration   5: 13017548.505 ns/op
Iteration   1: 12780454.051 ns/op
Iteration   2: 12809125.738 ns/op
Iteration   3: 12768295.424 ns/op
Iteration   4: 12895242.935 ns/op
Iteration   5: 12801043.507 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  12810832.331 ±(99.9%) 192109.239 ns/op [Average]
  (min, avg, max) = (12768295.424, 12810832.331, 12895242.935), stdev = 49890.159
  CI (99.9%): [12618723.092, 13002941.570] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 8.97% complete, ETA 02:15:58
# Fork: 1 of 1
# Warmup Iteration   1: 15832.303 ns/op
# Warmup Iteration   2: 9319.537 ns/op
# Warmup Iteration   3: 7549.375 ns/op
# Warmup Iteration   4: 6971.310 ns/op
# Warmup Iteration   5: 7022.981 ns/op
Iteration   1: 6981.021 ns/op
Iteration   2: 6991.936 ns/op
Iteration   3: 7037.387 ns/op
Iteration   4: 7381.057 ns/op
Iteration   5: 7086.067 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  7095.494 ±(99.9%) 635.180 ns/op [Average]
  (min, avg, max) = (6981.021, 7095.494, 7381.057), stdev = 164.954
  CI (99.9%): [6460.314, 7730.674] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 9.23% complete, ETA 02:15:34
# Fork: 1 of 1
# Warmup Iteration   1: 30327.248 ns/op
# Warmup Iteration   2: 15426.833 ns/op
# Warmup Iteration   3: 13535.483 ns/op
# Warmup Iteration   4: 13660.907 ns/op
# Warmup Iteration   5: 13653.043 ns/op
Iteration   1: 13774.822 ns/op
Iteration   2: 13614.654 ns/op
Iteration   3: 13598.228 ns/op
Iteration   4: 13585.532 ns/op
Iteration   5: 13640.175 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  13642.682 ±(99.9%) 295.115 ns/op [Average]
  (min, avg, max) = (13585.532, 13642.682, 13774.822), stdev = 76.641
  CI (99.9%): [13347.567, 13937.798] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 9.49% complete, ETA 02:15:10
# Fork: 1 of 1
# Warmup Iteration   1: 50181.540 ns/op
# Warmup Iteration   2: 27060.807 ns/op
# Warmup Iteration   3: 24970.925 ns/op
# Warmup Iteration   4: 24819.857 ns/op
# Warmup Iteration   5: 24701.718 ns/op
Iteration   1: 24651.597 ns/op
Iteration   2: 24679.583 ns/op
Iteration   3: 24828.124 ns/op
Iteration   4: 24640.564 ns/op
Iteration   5: 24767.190 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  24713.412 ±(99.9%) 312.373 ns/op [Average]
  (min, avg, max) = (24640.564, 24713.412, 24828.124), stdev = 81.122
  CI (99.9%): [24401.039, 25025.785] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 9.74% complete, ETA 02:14:46
# Fork: 1 of 1
# Warmup Iteration   1: 100346.841 ns/op
# Warmup Iteration   2: 51904.926 ns/op
# Warmup Iteration   3: 49079.860 ns/op
# Warmup Iteration   4: 50445.113 ns/op
# Warmup Iteration   5: 48796.828 ns/op
Iteration   1: 49770.045 ns/op
Iteration   2: 48610.595 ns/op
Iteration   3: 49667.589 ns/op
Iteration   4: 51385.371 ns/op
Iteration   5: 48426.421 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  49572.004 ±(99.9%) 4545.279 ns/op [Average]
  (min, avg, max) = (48426.421, 49572.004, 51385.371), stdev = 1180.395
  CI (99.9%): [45026.725, 54117.283] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 10.00% complete, ETA 02:14:23
# Fork: 1 of 1
# Warmup Iteration   1: 827385.634 ns/op
# Warmup Iteration   2: 511708.368 ns/op
# Warmup Iteration   3: 496603.040 ns/op
# Warmup Iteration   4: 477331.073 ns/op
# Warmup Iteration   5: 476721.096 ns/op
Iteration   1: 476077.568 ns/op
Iteration   2: 484730.059 ns/op
Iteration   3: 474906.282 ns/op
Iteration   4: 477096.997 ns/op
Iteration   5: 472731.063 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  477108.394 ±(99.9%) 17557.714 ns/op [Average]
  (min, avg, max) = (472731.063, 477108.394, 484730.059), stdev = 4559.683
  CI (99.9%): [459550.679, 494666.108] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 10.26% complete, ETA 02:14:00
# Fork: 1 of 1
# Warmup Iteration   1: 72727.061 ns/op
# Warmup Iteration   2: 62123.407 ns/op
# Warmup Iteration   3: 73726.338 ns/op
# Warmup Iteration   4: 68860.313 ns/op
# Warmup Iteration   5: 73346.318 ns/op
Iteration   1: 71901.837 ns/op
Iteration   2: 67205.018 ns/op
Iteration   3: 65925.192 ns/op
Iteration   4: 63994.717 ns/op
Iteration   5: 65512.184 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  66907.790 ±(99.9%) 11620.409 ns/op [Average]
  (min, avg, max) = (63994.717, 66907.790, 71901.837), stdev = 3017.783
  CI (99.9%): [55287.381, 78528.199] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 10.51% complete, ETA 02:13:37
# Fork: 1 of 1
# Warmup Iteration   1: 147162.154 ns/op
# Warmup Iteration   2: 124224.363 ns/op
# Warmup Iteration   3: 127560.082 ns/op
# Warmup Iteration   4: 109132.070 ns/op
# Warmup Iteration   5: 109726.048 ns/op
Iteration   1: 111405.013 ns/op
Iteration   2: 117554.959 ns/op
Iteration   3: 130112.538 ns/op
Iteration   4: 119470.406 ns/op
Iteration   5: 112639.692 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  118236.521 ±(99.9%) 28623.314 ns/op [Average]
  (min, avg, max) = (111405.013, 118236.521, 130112.538), stdev = 7433.384
  CI (99.9%): [89613.208, 146859.835] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 10.77% complete, ETA 02:13:15
# Fork: 1 of 1
# Warmup Iteration   1: 242843.363 ns/op
# Warmup Iteration   2: 250487.390 ns/op
# Warmup Iteration   3: 272975.703 ns/op
# Warmup Iteration   4: 263118.000 ns/op
# Warmup Iteration   5: 255979.826 ns/op
Iteration   1: 258230.483 ns/op
Iteration   2: 261360.773 ns/op
Iteration   3: 252096.739 ns/op
Iteration   4: 251177.657 ns/op
Iteration   5: 253002.441 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  255173.619 ±(99.9%) 16979.354 ns/op [Average]
  (min, avg, max) = (251177.657, 255173.619, 261360.773), stdev = 4409.484
  CI (99.9%): [238194.265, 272152.972] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 11.03% complete, ETA 02:12:53
# Fork: 1 of 1
# Warmup Iteration   1: 582887.625 ns/op
# Warmup Iteration   2: 571413.068 ns/op
# Warmup Iteration   3: 588809.136 ns/op
# Warmup Iteration   4: 583459.165 ns/op
# Warmup Iteration   5: 589326.910 ns/op
Iteration   1: 562171.084 ns/op
Iteration   2: 577855.938 ns/op
Iteration   3: 566605.153 ns/op
Iteration   4: 570297.012 ns/op
Iteration   5: 582974.949 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  571980.827 ±(99.9%) 32409.055 ns/op [Average]
  (min, avg, max) = (562171.084, 571980.827, 582974.949), stdev = 8416.529
  CI (99.9%): [539571.772, 604389.882] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 11.28% complete, ETA 02:12:30
# Fork: 1 of 1
# Warmup Iteration   1: 5618890.723 ns/op
# Warmup Iteration   2: 4811777.646 ns/op
# Warmup Iteration   3: 4882261.194 ns/op
# Warmup Iteration   4: 4249627.455 ns/op
# Warmup Iteration   5: 4632618.709 ns/op
Iteration   1: 4975896.784 ns/op
Iteration   2: 5450567.295 ns/op
Iteration   3: 5484091.874 ns/op
Iteration   4: 5586524.061 ns/op
Iteration   5: 5394238.404 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  5378263.684 ±(99.9%) 907057.811 ns/op [Average]
  (min, avg, max) = (4975896.784, 5378263.684, 5586524.061), stdev = 235560.033
  CI (99.9%): [4471205.873, 6285321.495] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 11.54% complete, ETA 02:12:08
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 11.79% complete, ETA 02:09:15
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 12.05% complete, ETA 02:06:30
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 12.31% complete, ETA 02:03:50
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 12.56% complete, ETA 02:01:17
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 12.82% complete, ETA 01:58:50
# Fork: 1 of 1
# Warmup Iteration   1: 390745.358 ns/op
# Warmup Iteration   2: 237052.336 ns/op
# Warmup Iteration   3: 201509.872 ns/op
# Warmup Iteration   4: 199476.260 ns/op
# Warmup Iteration   5: 197185.253 ns/op
Iteration   1: 187975.194 ns/op
Iteration   2: 185989.564 ns/op
Iteration   3: 189679.523 ns/op
Iteration   4: 184237.736 ns/op
Iteration   5: 187583.540 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  187093.111 ±(99.9%) 7956.753 ns/op [Average]
  (min, avg, max) = (184237.736, 187093.111, 189679.523), stdev = 2066.343
  CI (99.9%): [179136.359, 195049.864] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 13.08% complete, ETA 01:58:44
# Fork: 1 of 1
# Warmup Iteration   1: 617788.572 ns/op
# Warmup Iteration   2: 343424.076 ns/op
# Warmup Iteration   3: 313203.328 ns/op
# Warmup Iteration   4: 290943.309 ns/op
# Warmup Iteration   5: 283607.016 ns/op
Iteration   1: 285149.757 ns/op
Iteration   2: 281937.240 ns/op
Iteration   3: 281804.606 ns/op
Iteration   4: 277897.940 ns/op
Iteration   5: 279288.237 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  281215.556 ±(99.9%) 10731.297 ns/op [Average]
  (min, avg, max) = (277897.940, 281215.556, 285149.757), stdev = 2786.884
  CI (99.9%): [270484.259, 291946.853] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 13.33% complete, ETA 01:58:38
# Fork: 1 of 1
# Warmup Iteration   1: 1418969.747 ns/op
# Warmup Iteration   2: 671730.576 ns/op
# Warmup Iteration   3: 648007.281 ns/op
# Warmup Iteration   4: 609698.121 ns/op
# Warmup Iteration   5: 600951.758 ns/op
Iteration   1: 597255.867 ns/op
Iteration   2: 587676.948 ns/op
Iteration   3: 587097.938 ns/op
Iteration   4: 586649.111 ns/op
Iteration   5: 590383.302 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  589812.633 ±(99.9%) 16967.536 ns/op [Average]
  (min, avg, max) = (586649.111, 589812.633, 597255.867), stdev = 4406.415
  CI (99.9%): [572845.097, 606780.170] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 13.59% complete, ETA 01:58:31
# Fork: 1 of 1
# Warmup Iteration   1: 3068010.648 ns/op
# Warmup Iteration   2: 1552414.344 ns/op
# Warmup Iteration   3: 1441914.985 ns/op
# Warmup Iteration   4: 1433356.920 ns/op
# Warmup Iteration   5: 1451522.260 ns/op
Iteration   1: 1403248.661 ns/op
Iteration   2: 1355236.575 ns/op
Iteration   3: 1363845.353 ns/op
Iteration   4: 1350734.806 ns/op
Iteration   5: 1339102.435 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1362433.566 ±(99.9%) 94338.113 ns/op [Average]
  (min, avg, max) = (1339102.435, 1362433.566, 1403248.661), stdev = 24499.308
  CI (99.9%): [1268095.453, 1456771.679] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 13.85% complete, ETA 01:58:24
# Fork: 1 of 1
# Warmup Iteration   1: 21997562.323 ns/op
# Warmup Iteration   2: 13751835.082 ns/op
# Warmup Iteration   3: 13434267.060 ns/op
# Warmup Iteration   4: 13355815.953 ns/op
# Warmup Iteration   5: 13314886.947 ns/op
Iteration   1: 12814086.414 ns/op
Iteration   2: 12851649.785 ns/op
Iteration   3: 12856843.170 ns/op
Iteration   4: 12681673.780 ns/op
Iteration   5: 12728832.585 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  12786617.147 ±(99.9%) 299928.240 ns/op [Average]
  (min, avg, max) = (12681673.780, 12786617.147, 12856843.170), stdev = 77890.411
  CI (99.9%): [12486688.907, 13086545.387] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 14.10% complete, ETA 01:58:17
# Fork: 1 of 1
# Warmup Iteration   1: 130164.577 ns/op
# Warmup Iteration   2: 50780.985 ns/op
# Warmup Iteration   3: 48564.188 ns/op
# Warmup Iteration   4: 50129.742 ns/op
# Warmup Iteration   5: 47570.684 ns/op
Iteration   1: 47260.185 ns/op
Iteration   2: 46709.681 ns/op
Iteration   3: 46685.550 ns/op
Iteration   4: 47157.934 ns/op
Iteration   5: 46709.948 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  46904.659 ±(99.9%) 1079.701 ns/op [Average]
  (min, avg, max) = (46685.550, 46904.659, 47260.185), stdev = 280.395
  CI (99.9%): [45824.959, 47984.360] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 14.36% complete, ETA 01:58:08
# Fork: 1 of 1
# Warmup Iteration   1: 287834.258 ns/op
# Warmup Iteration   2: 103547.706 ns/op
# Warmup Iteration   3: 96441.044 ns/op
# Warmup Iteration   4: 92409.955 ns/op
# Warmup Iteration   5: 92322.640 ns/op
Iteration   1: 90431.537 ns/op
Iteration   2: 89487.542 ns/op
Iteration   3: 89854.153 ns/op
Iteration   4: 89412.824 ns/op
Iteration   5: 89394.993 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  89716.210 ±(99.9%) 1698.471 ns/op [Average]
  (min, avg, max) = (89394.993, 89716.210, 90431.537), stdev = 441.088
  CI (99.9%): [88017.739, 91414.681] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 14.62% complete, ETA 01:57:57
# Fork: 1 of 1
# Warmup Iteration   1: 830819.464 ns/op
# Warmup Iteration   2: 254391.045 ns/op
# Warmup Iteration   3: 226599.913 ns/op
# Warmup Iteration   4: 209892.671 ns/op
# Warmup Iteration   5: 208943.105 ns/op
Iteration   1: 209594.328 ns/op
Iteration   2: 209872.759 ns/op
Iteration   3: 211475.507 ns/op
Iteration   4: 210089.460 ns/op
Iteration   5: 210033.631 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  210213.137 ±(99.9%) 2816.423 ns/op [Average]
  (min, avg, max) = (209594.328, 210213.137, 211475.507), stdev = 731.416
  CI (99.9%): [207396.713, 213029.560] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 14.87% complete, ETA 01:57:46
# Fork: 1 of 1
# Warmup Iteration   1: 1155872.511 ns/op
# Warmup Iteration   2: 572460.822 ns/op
# Warmup Iteration   3: 537440.649 ns/op
# Warmup Iteration   4: 500347.871 ns/op
# Warmup Iteration   5: 493837.911 ns/op
Iteration   1: 492075.368 ns/op
Iteration   2: 490917.089 ns/op
Iteration   3: 500986.347 ns/op
Iteration   4: 493489.607 ns/op
Iteration   5: 490807.433 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  493655.169 ±(99.9%) 16322.828 ns/op [Average]
  (min, avg, max) = (490807.433, 493655.169, 500986.347), stdev = 4238.987
  CI (99.9%): [477332.340, 509977.997] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 15.13% complete, ETA 01:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 10633935.761 ns/op
# Warmup Iteration   2: 5251556.547 ns/op
# Warmup Iteration   3: 4942653.757 ns/op
# Warmup Iteration   4: 4708125.258 ns/op
# Warmup Iteration   5: 4707136.180 ns/op
Iteration   1: 4690270.259 ns/op
Iteration   2: 4676125.046 ns/op
Iteration   3: 4702602.148 ns/op
Iteration   4: 4685809.448 ns/op
Iteration   5: 4658489.547 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  4682659.290 ±(99.9%) 63635.918 ns/op [Average]
  (min, avg, max) = (4658489.547, 4682659.290, 4702602.148), stdev = 16526.046
  CI (99.9%): [4619023.371, 4746295.208] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 15.38% complete, ETA 01:57:23
# Fork: 1 of 1
# Warmup Iteration   1: 110174.375 ns/op
# Warmup Iteration   2: 41693.068 ns/op
# Warmup Iteration   3: 41403.246 ns/op
# Warmup Iteration   4: 39307.365 ns/op
# Warmup Iteration   5: 38397.150 ns/op
Iteration   1: 38397.765 ns/op
Iteration   2: 38359.841 ns/op
Iteration   3: 38359.727 ns/op
Iteration   4: 38287.506 ns/op
Iteration   5: 38234.703 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  38327.909 ±(99.9%) 252.736 ns/op [Average]
  (min, avg, max) = (38234.703, 38327.909, 38397.765), stdev = 65.635
  CI (99.9%): [38075.173, 38580.644] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 15.64% complete, ETA 01:57:10
# Fork: 1 of 1
# Warmup Iteration   1: 189478.579 ns/op
# Warmup Iteration   2: 76737.173 ns/op
# Warmup Iteration   3: 74441.339 ns/op
# Warmup Iteration   4: 70080.002 ns/op
# Warmup Iteration   5: 72873.957 ns/op
Iteration   1: 70156.960 ns/op
Iteration   2: 69902.951 ns/op
Iteration   3: 69860.803 ns/op
Iteration   4: 69859.577 ns/op
Iteration   5: 69842.279 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  69924.514 ±(99.9%) 507.697 ns/op [Average]
  (min, avg, max) = (69842.279, 69924.514, 70156.960), stdev = 131.847
  CI (99.9%): [69416.818, 70432.211] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 15.90% complete, ETA 01:56:57
# Fork: 1 of 1
# Warmup Iteration   1: 384504.231 ns/op
# Warmup Iteration   2: 188329.500 ns/op
# Warmup Iteration   3: 177211.584 ns/op
# Warmup Iteration   4: 173340.597 ns/op
# Warmup Iteration   5: 172580.539 ns/op
Iteration   1: 172562.697 ns/op
Iteration   2: 169110.937 ns/op
Iteration   3: 169244.241 ns/op
Iteration   4: 169592.971 ns/op
Iteration   5: 169298.266 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  169961.823 ±(99.9%) 5639.529 ns/op [Average]
  (min, avg, max) = (169110.937, 169961.823, 172562.697), stdev = 1464.568
  CI (99.9%): [164322.293, 175601.352] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 16.15% complete, ETA 01:56:44
# Fork: 1 of 1
# Warmup Iteration   1: 765768.811 ns/op
# Warmup Iteration   2: 473984.418 ns/op
# Warmup Iteration   3: 461294.306 ns/op
# Warmup Iteration   4: 446642.371 ns/op
# Warmup Iteration   5: 442100.180 ns/op
Iteration   1: 439775.453 ns/op
Iteration   2: 460065.297 ns/op
Iteration   3: 435434.870 ns/op
Iteration   4: 434650.301 ns/op
Iteration   5: 438866.132 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  441758.411 ±(99.9%) 40291.790 ns/op [Average]
  (min, avg, max) = (434650.301, 441758.411, 460065.297), stdev = 10463.650
  CI (99.9%): [401466.620, 482050.201] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 16.41% complete, ETA 01:56:31
# Fork: 1 of 1
# Warmup Iteration   1: 8233000.776 ns/op
# Warmup Iteration   2: 4113286.728 ns/op
# Warmup Iteration   3: 3982963.093 ns/op
# Warmup Iteration   4: 3802043.429 ns/op
# Warmup Iteration   5: 3790160.498 ns/op
Iteration   1: 3810549.769 ns/op
Iteration   2: 3770165.192 ns/op
Iteration   3: 3830651.363 ns/op
Iteration   4: 3856786.208 ns/op
Iteration   5: 3867321.043 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  3827094.715 ±(99.9%) 149471.188 ns/op [Average]
  (min, avg, max) = (3770165.192, 3827094.715, 3867321.043), stdev = 38817.193
  CI (99.9%): [3677623.527, 3976565.903] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 16.67% complete, ETA 01:56:18
# Fork: 1 of 1
# Warmup Iteration   1: 24581.533 ns/op
# Warmup Iteration   2: 17226.903 ns/op
# Warmup Iteration   3: 15820.260 ns/op
# Warmup Iteration   4: 15179.178 ns/op
# Warmup Iteration   5: 14838.919 ns/op
Iteration   1: 15008.262 ns/op
Iteration   2: 15131.714 ns/op
Iteration   3: 14883.612 ns/op
Iteration   4: 14868.767 ns/op
Iteration   5: 14837.367 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  14945.944 ±(99.9%) 471.703 ns/op [Average]
  (min, avg, max) = (14837.367, 14945.944, 15131.714), stdev = 122.500
  CI (99.9%): [14474.242, 15417.647] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 16.92% complete, ETA 01:56:04
# Fork: 1 of 1
# Warmup Iteration   1: 52882.845 ns/op
# Warmup Iteration   2: 29648.553 ns/op
# Warmup Iteration   3: 28803.326 ns/op
# Warmup Iteration   4: 27530.347 ns/op
# Warmup Iteration   5: 27037.115 ns/op
Iteration   1: 27021.972 ns/op
Iteration   2: 27150.971 ns/op
Iteration   3: 27016.287 ns/op
Iteration   4: 26937.142 ns/op
Iteration   5: 26750.970 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  26975.468 ±(99.9%) 566.248 ns/op [Average]
  (min, avg, max) = (26750.970, 26975.468, 27150.971), stdev = 147.053
  CI (99.9%): [26409.221, 27541.716] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 17.18% complete, ETA 01:55:50
# Fork: 1 of 1
# Warmup Iteration   1: 112261.563 ns/op
# Warmup Iteration   2: 58561.536 ns/op
# Warmup Iteration   3: 55066.386 ns/op
# Warmup Iteration   4: 55234.184 ns/op
# Warmup Iteration   5: 56127.613 ns/op
Iteration   1: 53969.616 ns/op
Iteration   2: 53016.102 ns/op
Iteration   3: 53111.949 ns/op
Iteration   4: 53020.974 ns/op
Iteration   5: 52833.804 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  53190.489 ±(99.9%) 1721.605 ns/op [Average]
  (min, avg, max) = (52833.804, 53190.489, 53969.616), stdev = 447.095
  CI (99.9%): [51468.884, 54912.094] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 17.44% complete, ETA 01:55:36
# Fork: 1 of 1
# Warmup Iteration   1: 204061.228 ns/op
# Warmup Iteration   2: 127138.101 ns/op
# Warmup Iteration   3: 127422.699 ns/op
# Warmup Iteration   4: 126209.778 ns/op
# Warmup Iteration   5: 127088.165 ns/op
Iteration   1: 121068.566 ns/op
Iteration   2: 120358.608 ns/op
Iteration   3: 120577.248 ns/op
Iteration   4: 120311.819 ns/op
Iteration   5: 120319.980 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  120527.244 ±(99.9%) 1237.811 ns/op [Average]
  (min, avg, max) = (120311.819, 120527.244, 121068.566), stdev = 321.456
  CI (99.9%): [119289.433, 121765.055] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 17.69% complete, ETA 01:55:21
# Fork: 1 of 1
# Warmup Iteration   1: 1860210.226 ns/op
# Warmup Iteration   2: 1219315.506 ns/op
# Warmup Iteration   3: 1210005.936 ns/op
# Warmup Iteration   4: 1156063.252 ns/op
# Warmup Iteration   5: 1143537.848 ns/op
Iteration   1: 1132225.634 ns/op
Iteration   2: 1133795.702 ns/op
Iteration   3: 1132095.237 ns/op
Iteration   4: 1130766.070 ns/op
Iteration   5: 1132818.428 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1132340.214 ±(99.9%) 4261.102 ns/op [Average]
  (min, avg, max) = (1130766.070, 1132340.214, 1133795.702), stdev = 1106.595
  CI (99.9%): [1128079.112, 1136601.316] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 17.95% complete, ETA 01:55:06
# Fork: 1 of 1
# Warmup Iteration   1: 23766.903 ns/op
# Warmup Iteration   2: 16161.038 ns/op
# Warmup Iteration   3: 15791.982 ns/op
# Warmup Iteration   4: 15312.720 ns/op
# Warmup Iteration   5: 15541.188 ns/op
Iteration   1: 15032.595 ns/op
Iteration   2: 15006.518 ns/op
Iteration   3: 15062.026 ns/op
Iteration   4: 15068.267 ns/op
Iteration   5: 15023.785 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  15038.638 ±(99.9%) 100.296 ns/op [Average]
  (min, avg, max) = (15006.518, 15038.638, 15068.267), stdev = 26.047
  CI (99.9%): [14938.342, 15138.934] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 18.21% complete, ETA 01:54:51
# Fork: 1 of 1
# Warmup Iteration   1: 59525.833 ns/op
# Warmup Iteration   2: 29041.961 ns/op
# Warmup Iteration   3: 28904.796 ns/op
# Warmup Iteration   4: 27527.448 ns/op
# Warmup Iteration   5: 27138.787 ns/op
Iteration   1: 27752.876 ns/op
Iteration   2: 27190.552 ns/op
Iteration   3: 27600.990 ns/op
Iteration   4: 27326.273 ns/op
Iteration   5: 26766.773 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  27327.493 ±(99.9%) 1477.505 ns/op [Average]
  (min, avg, max) = (26766.773, 27327.493, 27752.876), stdev = 383.703
  CI (99.9%): [25849.988, 28804.998] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 18.46% complete, ETA 01:54:36
# Fork: 1 of 1
# Warmup Iteration   1: 81567.655 ns/op
# Warmup Iteration   2: 57243.583 ns/op
# Warmup Iteration   3: 57497.491 ns/op
# Warmup Iteration   4: 56108.105 ns/op
# Warmup Iteration   5: 55204.518 ns/op
Iteration   1: 56352.407 ns/op
Iteration   2: 54362.648 ns/op
Iteration   3: 54269.368 ns/op
Iteration   4: 54255.149 ns/op
Iteration   5: 54219.503 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  54691.815 ±(99.9%) 3580.339 ns/op [Average]
  (min, avg, max) = (54219.503, 54691.815, 56352.407), stdev = 929.803
  CI (99.9%): [51111.476, 58272.154] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 18.72% complete, ETA 01:54:20
# Fork: 1 of 1
# Warmup Iteration   1: 176630.936 ns/op
# Warmup Iteration   2: 108837.548 ns/op
# Warmup Iteration   3: 107824.019 ns/op
# Warmup Iteration   4: 108928.309 ns/op
# Warmup Iteration   5: 101546.815 ns/op
Iteration   1: 104303.045 ns/op
Iteration   2: 101479.882 ns/op
Iteration   3: 102951.851 ns/op
Iteration   4: 101430.155 ns/op
Iteration   5: 102298.016 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  102492.590 ±(99.9%) 4588.925 ns/op [Average]
  (min, avg, max) = (101430.155, 102492.590, 104303.045), stdev = 1191.729
  CI (99.9%): [97903.664, 107081.515] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 18.97% complete, ETA 01:54:05
# Fork: 1 of 1
# Warmup Iteration   1: 1689272.756 ns/op
# Warmup Iteration   2: 1095992.089 ns/op
# Warmup Iteration   3: 1085260.795 ns/op
# Warmup Iteration   4: 1038654.868 ns/op
# Warmup Iteration   5: 1067998.912 ns/op
Iteration   1: 1028954.629 ns/op
Iteration   2: 1018369.507 ns/op
Iteration   3: 1031048.857 ns/op
Iteration   4: 1040754.488 ns/op
Iteration   5: 1021230.320 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1028071.560 ±(99.9%) 33977.060 ns/op [Average]
  (min, avg, max) = (1018369.507, 1028071.560, 1040754.488), stdev = 8823.735
  CI (99.9%): [994094.500, 1062048.620] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 19.23% complete, ETA 01:53:49
# Fork: 1 of 1
# Warmup Iteration   1: 26152.232 ns/op
# Warmup Iteration   2: 15474.645 ns/op
# Warmup Iteration   3: 14856.030 ns/op
# Warmup Iteration   4: 14889.529 ns/op
# Warmup Iteration   5: 14470.998 ns/op
Iteration   1: 14468.661 ns/op
Iteration   2: 14322.334 ns/op
Iteration   3: 14489.795 ns/op
Iteration   4: 14490.691 ns/op
Iteration   5: 14326.765 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  14419.649 ±(99.9%) 336.062 ns/op [Average]
  (min, avg, max) = (14322.334, 14419.649, 14490.691), stdev = 87.274
  CI (99.9%): [14083.587, 14755.712] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 19.49% complete, ETA 01:53:32
# Fork: 1 of 1
# Warmup Iteration   1: 52035.984 ns/op
# Warmup Iteration   2: 28706.065 ns/op
# Warmup Iteration   3: 28029.188 ns/op
# Warmup Iteration   4: 27652.591 ns/op
# Warmup Iteration   5: 27451.587 ns/op
Iteration   1: 27717.383 ns/op
Iteration   2: 26887.935 ns/op
Iteration   3: 26597.911 ns/op
Iteration   4: 26597.073 ns/op
Iteration   5: 26809.126 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  26921.885 ±(99.9%) 1782.505 ns/op [Average]
  (min, avg, max) = (26597.073, 26921.885, 27717.383), stdev = 462.911
  CI (99.9%): [25139.381, 28704.390] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 19.74% complete, ETA 01:53:16
# Fork: 1 of 1
# Warmup Iteration   1: 112411.204 ns/op
# Warmup Iteration   2: 53195.032 ns/op
# Warmup Iteration   3: 51263.725 ns/op
# Warmup Iteration   4: 50639.658 ns/op
# Warmup Iteration   5: 49280.315 ns/op
Iteration   1: 49182.827 ns/op
Iteration   2: 50164.544 ns/op
Iteration   3: 49259.142 ns/op
Iteration   4: 50235.788 ns/op
Iteration   5: 49039.847 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  49576.430 ±(99.9%) 2215.499 ns/op [Average]
  (min, avg, max) = (49039.847, 49576.430, 50235.788), stdev = 575.358
  CI (99.9%): [47360.931, 51791.928] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 20.00% complete, ETA 01:52:59
# Fork: 1 of 1
# Warmup Iteration   1: 193384.848 ns/op
# Warmup Iteration   2: 118503.935 ns/op
# Warmup Iteration   3: 119184.475 ns/op
# Warmup Iteration   4: 108372.379 ns/op
# Warmup Iteration   5: 107066.887 ns/op
Iteration   1: 107794.157 ns/op
Iteration   2: 106793.324 ns/op
Iteration   3: 107910.928 ns/op
Iteration   4: 106778.795 ns/op
Iteration   5: 106745.072 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  107204.455 ±(99.9%) 2284.652 ns/op [Average]
  (min, avg, max) = (106745.072, 107204.455, 107910.928), stdev = 593.317
  CI (99.9%): [104919.803, 109489.108] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 20.26% complete, ETA 01:52:42
# Fork: 1 of 1
# Warmup Iteration   1: 1821200.624 ns/op
# Warmup Iteration   2: 1072716.981 ns/op
# Warmup Iteration   3: 1117184.859 ns/op
# Warmup Iteration   4: 1048430.169 ns/op
# Warmup Iteration   5: 1042017.288 ns/op
Iteration   1: 1037139.375 ns/op
Iteration   2: 1024488.128 ns/op
Iteration   3: 1015913.500 ns/op
Iteration   4: 1019342.419 ns/op
Iteration   5: 1012188.658 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1021814.416 ±(99.9%) 37313.014 ns/op [Average]
  (min, avg, max) = (1012188.658, 1021814.416, 1037139.375), stdev = 9690.071
  CI (99.9%): [984501.402, 1059127.429] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 20.51% complete, ETA 01:52:26
# Fork: 1 of 1
# Warmup Iteration   1: 10583.670 ns/op
# Warmup Iteration   2: 6482.447 ns/op
# Warmup Iteration   3: 6076.029 ns/op
# Warmup Iteration   4: 6063.215 ns/op
# Warmup Iteration   5: 5994.935 ns/op
Iteration   1: 5930.237 ns/op
Iteration   2: 5911.969 ns/op
Iteration   3: 5912.638 ns/op
Iteration   4: 5901.464 ns/op
Iteration   5: 5964.316 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  5924.125 ±(99.9%) 95.218 ns/op [Average]
  (min, avg, max) = (5901.464, 5924.125, 5964.316), stdev = 24.728
  CI (99.9%): [5828.907, 6019.343] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 20.77% complete, ETA 01:52:08
# Fork: 1 of 1
# Warmup Iteration   1: 24368.491 ns/op
# Warmup Iteration   2: 12286.816 ns/op
# Warmup Iteration   3: 11629.681 ns/op
# Warmup Iteration   4: 11602.753 ns/op
# Warmup Iteration   5: 11062.219 ns/op
Iteration   1: 11081.412 ns/op
Iteration   2: 11008.217 ns/op
Iteration   3: 11054.262 ns/op
Iteration   4: 10981.683 ns/op
Iteration   5: 10920.711 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  11009.257 ±(99.9%) 242.266 ns/op [Average]
  (min, avg, max) = (10920.711, 11009.257, 11081.412), stdev = 62.916
  CI (99.9%): [10766.991, 11251.523] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 21.03% complete, ETA 01:51:51
# Fork: 1 of 1
# Warmup Iteration   1: 45912.544 ns/op
# Warmup Iteration   2: 23112.594 ns/op
# Warmup Iteration   3: 22310.629 ns/op
# Warmup Iteration   4: 21047.708 ns/op
# Warmup Iteration   5: 20785.394 ns/op
Iteration   1: 20800.241 ns/op
Iteration   2: 20817.116 ns/op
Iteration   3: 20902.995 ns/op
Iteration   4: 20905.094 ns/op
Iteration   5: 20824.053 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  20849.900 ±(99.9%) 193.246 ns/op [Average]
  (min, avg, max) = (20800.241, 20849.900, 20905.094), stdev = 50.185
  CI (99.9%): [20656.654, 21043.146] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 21.28% complete, ETA 01:51:33
# Fork: 1 of 1
# Warmup Iteration   1: 74984.561 ns/op
# Warmup Iteration   2: 48089.131 ns/op
# Warmup Iteration   3: 46693.846 ns/op
# Warmup Iteration   4: 44660.937 ns/op
# Warmup Iteration   5: 44048.152 ns/op
Iteration   1: 44338.594 ns/op
Iteration   2: 44055.480 ns/op
Iteration   3: 44044.567 ns/op
Iteration   4: 43924.259 ns/op
Iteration   5: 43743.621 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  44021.304 ±(99.9%) 836.812 ns/op [Average]
  (min, avg, max) = (43743.621, 44021.304, 44338.594), stdev = 217.318
  CI (99.9%): [43184.492, 44858.117] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 21.54% complete, ETA 01:51:15
# Fork: 1 of 1
# Warmup Iteration   1: 679935.678 ns/op
# Warmup Iteration   2: 495202.517 ns/op
# Warmup Iteration   3: 476140.939 ns/op
# Warmup Iteration   4: 463281.626 ns/op
# Warmup Iteration   5: 452080.890 ns/op
Iteration   1: 453805.121 ns/op
Iteration   2: 454993.107 ns/op
Iteration   3: 453811.039 ns/op
Iteration   4: 455666.312 ns/op
Iteration   5: 455076.896 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  454670.495 ±(99.9%) 3191.873 ns/op [Average]
  (min, avg, max) = (453805.121, 454670.495, 455666.312), stdev = 828.919
  CI (99.9%): [451478.622, 457862.368] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 21.79% complete, ETA 01:50:58
# Fork: 1 of 1
# Warmup Iteration   1: 9803.657 ns/op
# Warmup Iteration   2: 4702.684 ns/op
# Warmup Iteration   3: 4253.786 ns/op
# Warmup Iteration   4: 4182.840 ns/op
# Warmup Iteration   5: 4179.039 ns/op
Iteration   1: 4165.001 ns/op
Iteration   2: 4163.168 ns/op
Iteration   3: 4205.887 ns/op
Iteration   4: 4174.111 ns/op
Iteration   5: 4133.165 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  4168.266 ±(99.9%) 100.380 ns/op [Average]
  (min, avg, max) = (4133.165, 4168.266, 4205.887), stdev = 26.068
  CI (99.9%): [4067.886, 4268.647] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 22.05% complete, ETA 01:50:40
# Fork: 1 of 1
# Warmup Iteration   1: 27066.632 ns/op
# Warmup Iteration   2: 9562.581 ns/op
# Warmup Iteration   3: 9337.626 ns/op
# Warmup Iteration   4: 8837.185 ns/op
# Warmup Iteration   5: 9043.095 ns/op
Iteration   1: 8838.448 ns/op
Iteration   2: 8810.928 ns/op
Iteration   3: 8937.989 ns/op
Iteration   4: 8813.579 ns/op
Iteration   5: 8941.924 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  8868.573 ±(99.9%) 254.361 ns/op [Average]
  (min, avg, max) = (8810.928, 8868.573, 8941.924), stdev = 66.057
  CI (99.9%): [8614.213, 9122.934] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 22.31% complete, ETA 01:50:21
# Fork: 1 of 1
# Warmup Iteration   1: 32354.339 ns/op
# Warmup Iteration   2: 18586.886 ns/op
# Warmup Iteration   3: 16973.134 ns/op
# Warmup Iteration   4: 16600.441 ns/op
# Warmup Iteration   5: 18186.890 ns/op
Iteration   1: 16760.555 ns/op
Iteration   2: 16700.872 ns/op
Iteration   3: 16732.122 ns/op
Iteration   4: 16506.532 ns/op
Iteration   5: 16562.104 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  16652.437 ±(99.9%) 429.798 ns/op [Average]
  (min, avg, max) = (16506.532, 16652.437, 16760.555), stdev = 111.617
  CI (99.9%): [16222.639, 17082.235] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 22.56% complete, ETA 01:50:04
# Fork: 1 of 1
# Warmup Iteration   1: 65474.389 ns/op
# Warmup Iteration   2: 39419.609 ns/op
# Warmup Iteration   3: 35797.085 ns/op
# Warmup Iteration   4: 34673.753 ns/op
# Warmup Iteration   5: 34182.318 ns/op
Iteration   1: 36432.624 ns/op
Iteration   2: 34690.123 ns/op
Iteration   3: 34321.958 ns/op
Iteration   4: 34616.202 ns/op
Iteration   5: 34208.527 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  34853.886 ±(99.9%) 3484.334 ns/op [Average]
  (min, avg, max) = (34208.527, 34853.886, 36432.624), stdev = 904.870
  CI (99.9%): [31369.553, 38338.220] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 22.82% complete, ETA 01:49:45
# Fork: 1 of 1
# Warmup Iteration   1: 811346.797 ns/op
# Warmup Iteration   2: 431065.126 ns/op
# Warmup Iteration   3: 380792.241 ns/op
# Warmup Iteration   4: 369668.447 ns/op
# Warmup Iteration   5: 370525.798 ns/op
Iteration   1: 368887.138 ns/op
Iteration   2: 368814.501 ns/op
Iteration   3: 369338.830 ns/op
Iteration   4: 368283.825 ns/op
Iteration   5: 369746.021 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  369014.063 ±(99.9%) 2135.649 ns/op [Average]
  (min, avg, max) = (368283.825, 369014.063, 369746.021), stdev = 554.621
  CI (99.9%): [366878.414, 371149.712] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 23.08% complete, ETA 01:49:27
# Fork: 1 of 1
# Warmup Iteration   1: 8932.605 ns/op
# Warmup Iteration   2: 4888.456 ns/op
# Warmup Iteration   3: 4713.476 ns/op
# Warmup Iteration   4: 4666.358 ns/op
# Warmup Iteration   5: 4678.931 ns/op
Iteration   1: 4696.652 ns/op
Iteration   2: 4735.564 ns/op
Iteration   3: 4681.777 ns/op
Iteration   4: 4690.000 ns/op
Iteration   5: 4645.732 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  4689.945 ±(99.9%) 123.994 ns/op [Average]
  (min, avg, max) = (4645.732, 4689.945, 4735.564), stdev = 32.201
  CI (99.9%): [4565.951, 4813.939] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 23.33% complete, ETA 01:49:09
# Fork: 1 of 1
# Warmup Iteration   1: 21029.370 ns/op
# Warmup Iteration   2: 9864.186 ns/op
# Warmup Iteration   3: 9059.323 ns/op
# Warmup Iteration   4: 9032.573 ns/op
# Warmup Iteration   5: 9040.288 ns/op
Iteration   1: 9006.638 ns/op
Iteration   2: 9083.275 ns/op
Iteration   3: 9019.257 ns/op
Iteration   4: 9025.327 ns/op
Iteration   5: 8991.578 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  9025.215 ±(99.9%) 134.540 ns/op [Average]
  (min, avg, max) = (8991.578, 9025.215, 9083.275), stdev = 34.940
  CI (99.9%): [8890.675, 9159.755] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 23.59% complete, ETA 01:48:50
# Fork: 1 of 1
# Warmup Iteration   1: 39586.145 ns/op
# Warmup Iteration   2: 19211.626 ns/op
# Warmup Iteration   3: 17852.544 ns/op
# Warmup Iteration   4: 17475.497 ns/op
# Warmup Iteration   5: 17453.249 ns/op
Iteration   1: 17419.280 ns/op
Iteration   2: 17403.692 ns/op
Iteration   3: 17583.802 ns/op
Iteration   4: 17385.648 ns/op
Iteration   5: 17409.997 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  17440.484 ±(99.9%) 312.114 ns/op [Average]
  (min, avg, max) = (17385.648, 17440.484, 17583.802), stdev = 81.055
  CI (99.9%): [17128.370, 17752.597] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 23.85% complete, ETA 01:48:31
# Fork: 1 of 1
# Warmup Iteration   1: 104350.360 ns/op
# Warmup Iteration   2: 39768.897 ns/op
# Warmup Iteration   3: 36493.250 ns/op
# Warmup Iteration   4: 35261.011 ns/op
# Warmup Iteration   5: 35443.046 ns/op
Iteration   1: 35148.952 ns/op
Iteration   2: 35092.520 ns/op
Iteration   3: 35229.747 ns/op
Iteration   4: 35424.810 ns/op
Iteration   5: 35488.003 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  35276.806 ±(99.9%) 664.255 ns/op [Average]
  (min, avg, max) = (35092.520, 35276.806, 35488.003), stdev = 172.505
  CI (99.9%): [34612.552, 35941.061] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 24.10% complete, ETA 01:48:13
# Fork: 1 of 1
# Warmup Iteration   1: 647046.533 ns/op
# Warmup Iteration   2: 370254.958 ns/op
# Warmup Iteration   3: 346375.934 ns/op
# Warmup Iteration   4: 345881.992 ns/op
# Warmup Iteration   5: 344266.540 ns/op
Iteration   1: 352550.831 ns/op
Iteration   2: 344132.028 ns/op
Iteration   3: 339568.581 ns/op
Iteration   4: 338594.484 ns/op
Iteration   5: 346357.099 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  344240.605 ±(99.9%) 21719.278 ns/op [Average]
  (min, avg, max) = (338594.484, 344240.605, 352550.831), stdev = 5640.428
  CI (99.9%): [322521.326, 365959.883] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 24.36% complete, ETA 01:47:54
# Fork: 1 of 1
# Warmup Iteration   1: 251610.667 ns/op
# Warmup Iteration   2: 127298.508 ns/op
# Warmup Iteration   3: 119694.900 ns/op
# Warmup Iteration   4: 120851.370 ns/op
# Warmup Iteration   5: 118815.894 ns/op
Iteration   1: 119803.474 ns/op
Iteration   2: 116934.675 ns/op
Iteration   3: 116443.692 ns/op
Iteration   4: 117335.822 ns/op
Iteration   5: 116091.002 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  117321.733 ±(99.9%) 5644.414 ns/op [Average]
  (min, avg, max) = (116091.002, 117321.733, 119803.474), stdev = 1465.836
  CI (99.9%): [111677.319, 122966.147] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 24.62% complete, ETA 01:47:35
# Fork: 1 of 1
# Warmup Iteration   1: 387359.238 ns/op
# Warmup Iteration   2: 224856.611 ns/op
# Warmup Iteration   3: 209558.177 ns/op
# Warmup Iteration   4: 206346.143 ns/op
# Warmup Iteration   5: 204361.819 ns/op
Iteration   1: 203986.850 ns/op
Iteration   2: 204064.804 ns/op
Iteration   3: 203943.871 ns/op
Iteration   4: 203839.524 ns/op
Iteration   5: 202362.419 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  203639.494 ±(99.9%) 2766.790 ns/op [Average]
  (min, avg, max) = (202362.419, 203639.494, 204064.804), stdev = 718.527
  CI (99.9%): [200872.703, 206406.284] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 24.87% complete, ETA 01:47:16
# Fork: 1 of 1
# Warmup Iteration   1: 1209150.086 ns/op
# Warmup Iteration   2: 558427.353 ns/op
# Warmup Iteration   3: 534325.802 ns/op
# Warmup Iteration   4: 517318.565 ns/op
# Warmup Iteration   5: 514396.786 ns/op
Iteration   1: 511313.924 ns/op
Iteration   2: 507549.187 ns/op
Iteration   3: 508469.610 ns/op
Iteration   4: 511394.296 ns/op
Iteration   5: 519539.845 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  511653.372 ±(99.9%) 18200.096 ns/op [Average]
  (min, avg, max) = (507549.187, 511653.372, 519539.845), stdev = 4726.507
  CI (99.9%): [493453.276, 529853.468] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 25.13% complete, ETA 01:46:57
# Fork: 1 of 1
# Warmup Iteration   1: 2605891.580 ns/op
# Warmup Iteration   2: 1296005.334 ns/op
# Warmup Iteration   3: 1195872.180 ns/op
# Warmup Iteration   4: 1207378.610 ns/op
# Warmup Iteration   5: 1172526.994 ns/op
Iteration   1: 1159076.726 ns/op
Iteration   2: 1150679.564 ns/op
Iteration   3: 1145245.920 ns/op
Iteration   4: 1146340.858 ns/op
Iteration   5: 1148639.748 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1149996.563 ±(99.9%) 21151.359 ns/op [Average]
  (min, avg, max) = (1145245.920, 1149996.563, 1159076.726), stdev = 5492.941
  CI (99.9%): [1128845.204, 1171147.922] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 25.38% complete, ETA 01:46:37
# Fork: 1 of 1
# Warmup Iteration   1: 20406993.673 ns/op
# Warmup Iteration   2: 11308502.893 ns/op
# Warmup Iteration   3: 10669166.850 ns/op
# Warmup Iteration   4: 10402560.750 ns/op
# Warmup Iteration   5: 10338332.124 ns/op
Iteration   1: 10228576.460 ns/op
Iteration   2: 10080682.451 ns/op
Iteration   3: 10084196.939 ns/op
Iteration   4: 10077691.829 ns/op
Iteration   5: 10066440.255 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  10107517.587 ±(99.9%) 261844.855 ns/op [Average]
  (min, avg, max) = (10066440.255, 10107517.587, 10228576.460), stdev = 68000.277
  CI (99.9%): [9845672.732, 10369362.441] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 25.64% complete, ETA 01:46:19
# Fork: 1 of 1
# Warmup Iteration   1: 3714.333 ns/op
# Warmup Iteration   2: 2967.495 ns/op
# Warmup Iteration   3: 2634.449 ns/op
# Warmup Iteration   4: 2623.627 ns/op
# Warmup Iteration   5: 2628.310 ns/op
Iteration   1: 2634.315 ns/op
Iteration   2: 2636.554 ns/op
Iteration   3: 2635.903 ns/op
Iteration   4: 2666.142 ns/op
Iteration   5: 2622.895 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2639.162 ±(99.9%) 61.894 ns/op [Average]
  (min, avg, max) = (2622.895, 2639.162, 2666.142), stdev = 16.074
  CI (99.9%): [2577.268, 2701.056] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 25.90% complete, ETA 01:45:59
# Fork: 1 of 1
# Warmup Iteration   1: 7438.770 ns/op
# Warmup Iteration   2: 5654.273 ns/op
# Warmup Iteration   3: 5137.061 ns/op
# Warmup Iteration   4: 5125.117 ns/op
# Warmup Iteration   5: 5125.444 ns/op
Iteration   1: 5108.683 ns/op
Iteration   2: 5112.345 ns/op
Iteration   3: 5124.864 ns/op
Iteration   4: 5124.257 ns/op
Iteration   5: 5117.700 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  5117.570 ±(99.9%) 27.513 ns/op [Average]
  (min, avg, max) = (5108.683, 5117.570, 5124.864), stdev = 7.145
  CI (99.9%): [5090.057, 5145.083] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 26.15% complete, ETA 01:45:39
# Fork: 1 of 1
# Warmup Iteration   1: 16889.829 ns/op
# Warmup Iteration   2: 11016.465 ns/op
# Warmup Iteration   3: 9976.947 ns/op
# Warmup Iteration   4: 9883.400 ns/op
# Warmup Iteration   5: 9871.831 ns/op
Iteration   1: 9862.709 ns/op
Iteration   2: 9833.351 ns/op
Iteration   3: 9860.286 ns/op
Iteration   4: 9852.651 ns/op
Iteration   5: 9832.576 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  9848.315 ±(99.9%) 55.832 ns/op [Average]
  (min, avg, max) = (9832.576, 9848.315, 9862.709), stdev = 14.499
  CI (99.9%): [9792.482, 9904.147] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 26.41% complete, ETA 01:45:20
# Fork: 1 of 1
# Warmup Iteration   1: 30879.997 ns/op
# Warmup Iteration   2: 22412.927 ns/op
# Warmup Iteration   3: 20071.530 ns/op
# Warmup Iteration   4: 19971.228 ns/op
# Warmup Iteration   5: 20033.761 ns/op
Iteration   1: 19994.842 ns/op
Iteration   2: 20010.086 ns/op
Iteration   3: 19933.579 ns/op
Iteration   4: 19991.442 ns/op
Iteration   5: 19968.735 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  19979.737 ±(99.9%) 114.518 ns/op [Average]
  (min, avg, max) = (19933.579, 19979.737, 20010.086), stdev = 29.740
  CI (99.9%): [19865.219, 20094.254] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 26.67% complete, ETA 01:45:00
# Fork: 1 of 1
# Warmup Iteration   1: 329377.230 ns/op
# Warmup Iteration   2: 247244.768 ns/op
# Warmup Iteration   3: 230111.111 ns/op
# Warmup Iteration   4: 229759.561 ns/op
# Warmup Iteration   5: 235859.218 ns/op
Iteration   1: 228781.018 ns/op
Iteration   2: 224857.261 ns/op
Iteration   3: 227694.838 ns/op
Iteration   4: 229344.993 ns/op
Iteration   5: 229083.776 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  227952.377 ±(99.9%) 7087.738 ns/op [Average]
  (min, avg, max) = (224857.261, 227952.377, 229344.993), stdev = 1840.663
  CI (99.9%): [220864.640, 235040.115] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 26.92% complete, ETA 01:44:40
# Fork: 1 of 1
# Warmup Iteration   1: 34268.151 ns/op
# Warmup Iteration   2: 35071.363 ns/op
# Warmup Iteration   3: 32477.055 ns/op
# Warmup Iteration   4: 33074.391 ns/op
# Warmup Iteration   5: 32820.322 ns/op
Iteration   1: 32480.372 ns/op
Iteration   2: 32344.081 ns/op
Iteration   3: 31030.761 ns/op
Iteration   4: 33230.681 ns/op
Iteration   5: 31943.996 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  32205.978 ±(99.9%) 3100.995 ns/op [Average]
  (min, avg, max) = (31030.761, 32205.978, 33230.681), stdev = 805.318
  CI (99.9%): [29104.984, 35306.973] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 27.18% complete, ETA 01:44:21
# Fork: 1 of 1
# Warmup Iteration   1: 59702.759 ns/op
# Warmup Iteration   2: 55981.017 ns/op
# Warmup Iteration   3: 56513.488 ns/op
# Warmup Iteration   4: 59194.747 ns/op
# Warmup Iteration   5: 56392.504 ns/op
Iteration   1: 67658.488 ns/op
Iteration   2: 65540.982 ns/op
Iteration   3: 64950.957 ns/op
Iteration   4: 61967.717 ns/op
Iteration   5: 62652.319 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  64554.093 ±(99.9%) 8838.634 ns/op [Average]
  (min, avg, max) = (61967.717, 64554.093, 67658.488), stdev = 2295.365
  CI (99.9%): [55715.459, 73392.726] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 27.44% complete, ETA 01:44:02
# Fork: 1 of 1
# Warmup Iteration   1: 150604.611 ns/op
# Warmup Iteration   2: 119204.976 ns/op
# Warmup Iteration   3: 112445.265 ns/op
# Warmup Iteration   4: 114440.668 ns/op
# Warmup Iteration   5: 115493.879 ns/op
Iteration   1: 118761.914 ns/op
Iteration   2: 122541.353 ns/op
Iteration   3: 121515.106 ns/op
Iteration   4: 124532.472 ns/op
Iteration   5: 118166.183 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  121103.406 ±(99.9%) 10207.030 ns/op [Average]
  (min, avg, max) = (118166.183, 121103.406, 124532.472), stdev = 2650.733
  CI (99.9%): [110896.375, 131310.436] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 27.69% complete, ETA 01:43:42
# Fork: 1 of 1
# Warmup Iteration   1: 231494.405 ns/op
# Warmup Iteration   2: 263529.804 ns/op
# Warmup Iteration   3: 252242.819 ns/op
# Warmup Iteration   4: 257151.572 ns/op
# Warmup Iteration   5: 271323.334 ns/op
Iteration   1: 287862.641 ns/op
Iteration   2: 286306.207 ns/op
Iteration   3: 279017.768 ns/op
Iteration   4: 274400.302 ns/op
Iteration   5: 280249.519 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  281567.287 ±(99.9%) 21238.935 ns/op [Average]
  (min, avg, max) = (274400.302, 281567.287, 287862.641), stdev = 5515.684
  CI (99.9%): [260328.352, 302806.222] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 27.95% complete, ETA 01:43:22
# Fork: 1 of 1
# Warmup Iteration   1: 2770699.889 ns/op
# Warmup Iteration   2: 2620988.898 ns/op
# Warmup Iteration   3: 2520221.381 ns/op
# Warmup Iteration   4: 2304412.441 ns/op
# Warmup Iteration   5: 2694586.971 ns/op
Iteration   1: 2613489.911 ns/op
Iteration   2: 2764494.020 ns/op
Iteration   3: 2780677.809 ns/op
Iteration   4: 2775119.089 ns/op
Iteration   5: 2713826.861 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2729521.538 ±(99.9%) 269743.287 ns/op [Average]
  (min, avg, max) = (2613489.911, 2729521.538, 2780677.809), stdev = 70051.475
  CI (99.9%): [2459778.251, 2999264.825] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 28.21% complete, ETA 01:43:03
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 28.46% complete, ETA 01:41:52
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 28.72% complete, ETA 01:40:43
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 28.97% complete, ETA 01:39:35
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 29.23% complete, ETA 01:38:28
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 29.49% complete, ETA 01:37:23
# Fork: 1 of 1
# Warmup Iteration   1: 218897.824 ns/op
# Warmup Iteration   2: 155373.013 ns/op
# Warmup Iteration   3: 152970.999 ns/op
# Warmup Iteration   4: 148973.867 ns/op
# Warmup Iteration   5: 153939.603 ns/op
Iteration   1: 149113.457 ns/op
Iteration   2: 147047.312 ns/op
Iteration   3: 146935.303 ns/op
Iteration   4: 144294.656 ns/op
Iteration   5: 144273.335 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  146332.813 ±(99.9%) 7938.543 ns/op [Average]
  (min, avg, max) = (144273.335, 146332.813, 149113.457), stdev = 2061.614
  CI (99.9%): [138394.270, 154271.355] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 29.74% complete, ETA 01:37:06
# Fork: 1 of 1
# Warmup Iteration   1: 330246.893 ns/op
# Warmup Iteration   2: 225525.765 ns/op
# Warmup Iteration   3: 210701.698 ns/op
# Warmup Iteration   4: 212358.408 ns/op
# Warmup Iteration   5: 211553.480 ns/op
Iteration   1: 206494.305 ns/op
Iteration   2: 206028.484 ns/op
Iteration   3: 207512.665 ns/op
Iteration   4: 208319.709 ns/op
Iteration   5: 204578.326 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  206586.698 ±(99.9%) 5518.135 ns/op [Average]
  (min, avg, max) = (204578.326, 206586.698, 208319.709), stdev = 1433.042
  CI (99.9%): [201068.563, 212104.833] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 30.00% complete, ETA 01:36:50
# Fork: 1 of 1
# Warmup Iteration   1: 635427.841 ns/op
# Warmup Iteration   2: 456815.115 ns/op
# Warmup Iteration   3: 441452.073 ns/op
# Warmup Iteration   4: 423867.863 ns/op
# Warmup Iteration   5: 420260.627 ns/op
Iteration   1: 415461.138 ns/op
Iteration   2: 410875.037 ns/op
Iteration   3: 416339.569 ns/op
Iteration   4: 415402.456 ns/op
Iteration   5: 418630.951 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  415341.830 ±(99.9%) 10854.437 ns/op [Average]
  (min, avg, max) = (410875.037, 415341.830, 418630.951), stdev = 2818.863
  CI (99.9%): [404487.393, 426196.267] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 30.26% complete, ETA 01:36:33
# Fork: 1 of 1
# Warmup Iteration   1: 1570508.342 ns/op
# Warmup Iteration   2: 1027881.442 ns/op
# Warmup Iteration   3: 1011016.099 ns/op
# Warmup Iteration   4: 1021032.113 ns/op
# Warmup Iteration   5: 1008315.305 ns/op
Iteration   1: 966795.644 ns/op
Iteration   2: 958642.884 ns/op
Iteration   3: 955092.902 ns/op
Iteration   4: 951674.873 ns/op
Iteration   5: 963110.437 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  959063.348 ±(99.9%) 23319.307 ns/op [Average]
  (min, avg, max) = (951674.873, 959063.348, 966795.644), stdev = 6055.950
  CI (99.9%): [935744.041, 982382.655] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 30.51% complete, ETA 01:36:16
# Fork: 1 of 1
# Warmup Iteration   1: 13736514.630 ns/op
# Warmup Iteration   2: 9706727.879 ns/op
# Warmup Iteration   3: 9419314.664 ns/op
# Warmup Iteration   4: 9572625.069 ns/op
# Warmup Iteration   5: 9381309.204 ns/op
Iteration   1: 9244520.824 ns/op
Iteration   2: 9191341.266 ns/op
Iteration   3: 9184340.785 ns/op
Iteration   4: 9088730.077 ns/op
Iteration   5: 9040369.674 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  9149860.525 ±(99.9%) 319831.217 ns/op [Average]
  (min, avg, max) = (9040369.674, 9149860.525, 9244520.824), stdev = 83059.151
  CI (99.9%): [8830029.308, 9469691.742] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 30.77% complete, ETA 01:35:59
# Fork: 1 of 1
# Warmup Iteration   1: 59785.044 ns/op
# Warmup Iteration   2: 25941.077 ns/op
# Warmup Iteration   3: 24063.642 ns/op
# Warmup Iteration   4: 23228.583 ns/op
# Warmup Iteration   5: 23257.575 ns/op
Iteration   1: 23182.235 ns/op
Iteration   2: 23258.346 ns/op
Iteration   3: 23134.741 ns/op
Iteration   4: 23195.497 ns/op
Iteration   5: 23132.158 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  23180.595 ±(99.9%) 199.331 ns/op [Average]
  (min, avg, max) = (23132.158, 23180.595, 23258.346), stdev = 51.766
  CI (99.9%): [22981.265, 23379.926] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 31.03% complete, ETA 01:35:41
# Fork: 1 of 1
# Warmup Iteration   1: 117296.419 ns/op
# Warmup Iteration   2: 47355.127 ns/op
# Warmup Iteration   3: 46975.788 ns/op
# Warmup Iteration   4: 44271.771 ns/op
# Warmup Iteration   5: 44081.946 ns/op
Iteration   1: 44039.087 ns/op
Iteration   2: 43899.164 ns/op
Iteration   3: 44610.807 ns/op
Iteration   4: 43815.202 ns/op
Iteration   5: 44294.369 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  44131.726 ±(99.9%) 1246.006 ns/op [Average]
  (min, avg, max) = (43815.202, 44131.726, 44610.807), stdev = 323.584
  CI (99.9%): [42885.720, 45377.731] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 31.28% complete, ETA 01:35:24
# Fork: 1 of 1
# Warmup Iteration   1: 286239.538 ns/op
# Warmup Iteration   2: 115349.094 ns/op
# Warmup Iteration   3: 111685.022 ns/op
# Warmup Iteration   4: 102019.186 ns/op
# Warmup Iteration   5: 101522.308 ns/op
Iteration   1: 101260.811 ns/op
Iteration   2: 101633.763 ns/op
Iteration   3: 101639.417 ns/op
Iteration   4: 100537.415 ns/op
Iteration   5: 100901.738 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  101194.629 ±(99.9%) 1839.433 ns/op [Average]
  (min, avg, max) = (100537.415, 101194.629, 101639.417), stdev = 477.695
  CI (99.9%): [99355.195, 103034.062] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 31.54% complete, ETA 01:35:06
# Fork: 1 of 1
# Warmup Iteration   1: 573480.501 ns/op
# Warmup Iteration   2: 271321.238 ns/op
# Warmup Iteration   3: 246109.529 ns/op
# Warmup Iteration   4: 240546.919 ns/op
# Warmup Iteration   5: 237702.456 ns/op
Iteration   1: 239444.571 ns/op
Iteration   2: 240708.582 ns/op
Iteration   3: 243988.233 ns/op
Iteration   4: 236863.164 ns/op
Iteration   5: 237461.242 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  239693.159 ±(99.9%) 10981.235 ns/op [Average]
  (min, avg, max) = (236863.164, 239693.159, 243988.233), stdev = 2851.792
  CI (99.9%): [228711.924, 250674.393] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 31.79% complete, ETA 01:34:48
# Fork: 1 of 1
# Warmup Iteration   1: 3999261.976 ns/op
# Warmup Iteration   2: 2619044.172 ns/op
# Warmup Iteration   3: 2400434.668 ns/op
# Warmup Iteration   4: 2303946.723 ns/op
# Warmup Iteration   5: 2405760.860 ns/op
Iteration   1: 2274080.626 ns/op
Iteration   2: 2266782.277 ns/op
Iteration   3: 2361317.161 ns/op
Iteration   4: 2358249.719 ns/op
Iteration   5: 2312555.168 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2314596.990 ±(99.9%) 172424.667 ns/op [Average]
  (min, avg, max) = (2266782.277, 2314596.990, 2361317.161), stdev = 44778.138
  CI (99.9%): [2142172.323, 2487021.657] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 32.05% complete, ETA 01:34:30
# Fork: 1 of 1
# Warmup Iteration   1: 27957.912 ns/op
# Warmup Iteration   2: 17554.996 ns/op
# Warmup Iteration   3: 16737.401 ns/op
# Warmup Iteration   4: 16593.195 ns/op
# Warmup Iteration   5: 16196.429 ns/op
Iteration   1: 16108.628 ns/op
Iteration   2: 16139.450 ns/op
Iteration   3: 16134.944 ns/op
Iteration   4: 16131.127 ns/op
Iteration   5: 16400.835 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  16182.997 ±(99.9%) 471.135 ns/op [Average]
  (min, avg, max) = (16108.628, 16182.997, 16400.835), stdev = 122.352
  CI (99.9%): [15711.861, 16654.132] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 32.31% complete, ETA 01:34:12
# Fork: 1 of 1
# Warmup Iteration   1: 61223.418 ns/op
# Warmup Iteration   2: 34917.678 ns/op
# Warmup Iteration   3: 32897.685 ns/op
# Warmup Iteration   4: 32693.889 ns/op
# Warmup Iteration   5: 31748.643 ns/op
Iteration   1: 32212.474 ns/op
Iteration   2: 31808.338 ns/op
Iteration   3: 31860.768 ns/op
Iteration   4: 32335.878 ns/op
Iteration   5: 31449.719 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  31933.435 ±(99.9%) 1354.220 ns/op [Average]
  (min, avg, max) = (31449.719, 31933.435, 32335.878), stdev = 351.687
  CI (99.9%): [30579.215, 33287.655] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 32.56% complete, ETA 01:33:54
# Fork: 1 of 1
# Warmup Iteration   1: 166231.660 ns/op
# Warmup Iteration   2: 84573.292 ns/op
# Warmup Iteration   3: 80339.315 ns/op
# Warmup Iteration   4: 80546.465 ns/op
# Warmup Iteration   5: 81017.028 ns/op
Iteration   1: 77426.677 ns/op
Iteration   2: 77379.907 ns/op
Iteration   3: 77472.353 ns/op
Iteration   4: 77446.396 ns/op
Iteration   5: 78404.481 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  77625.963 ±(99.9%) 1680.872 ns/op [Average]
  (min, avg, max) = (77379.907, 77625.963, 78404.481), stdev = 436.517
  CI (99.9%): [75945.091, 79306.835] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 32.82% complete, ETA 01:33:36
# Fork: 1 of 1
# Warmup Iteration   1: 378480.035 ns/op
# Warmup Iteration   2: 208340.336 ns/op
# Warmup Iteration   3: 210259.479 ns/op
# Warmup Iteration   4: 198206.404 ns/op
# Warmup Iteration   5: 192770.592 ns/op
Iteration   1: 192187.852 ns/op
Iteration   2: 191546.912 ns/op
Iteration   3: 193168.431 ns/op
Iteration   4: 194480.816 ns/op
Iteration   5: 194039.500 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  193084.702 ±(99.9%) 4730.543 ns/op [Average]
  (min, avg, max) = (191546.912, 193084.702, 194480.816), stdev = 1228.507
  CI (99.9%): [188354.159, 197815.246] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 33.08% complete, ETA 01:33:17
# Fork: 1 of 1
# Warmup Iteration   1: 3471101.241 ns/op
# Warmup Iteration   2: 2212878.615 ns/op
# Warmup Iteration   3: 2149206.506 ns/op
# Warmup Iteration   4: 2165527.867 ns/op
# Warmup Iteration   5: 2083520.249 ns/op
Iteration   1: 2074128.479 ns/op
Iteration   2: 2093613.138 ns/op
Iteration   3: 2083334.517 ns/op
Iteration   4: 2068677.457 ns/op
Iteration   5: 2072599.945 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2078470.707 ±(99.9%) 38611.150 ns/op [Average]
  (min, avg, max) = (2068677.457, 2078470.707, 2093613.138), stdev = 10027.193
  CI (99.9%): [2039859.558, 2117081.857] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 33.33% complete, ETA 01:32:59
# Fork: 1 of 1
# Warmup Iteration   1: 21082.548 ns/op
# Warmup Iteration   2: 11061.351 ns/op
# Warmup Iteration   3: 11300.998 ns/op
# Warmup Iteration   4: 10750.513 ns/op
# Warmup Iteration   5: 10506.926 ns/op
Iteration   1: 10495.836 ns/op
Iteration   2: 10400.356 ns/op
Iteration   3: 10418.602 ns/op
Iteration   4: 10499.335 ns/op
Iteration   5: 10406.625 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  10444.151 ±(99.9%) 189.580 ns/op [Average]
  (min, avg, max) = (10400.356, 10444.151, 10499.335), stdev = 49.233
  CI (99.9%): [10254.571, 10633.731] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 33.59% complete, ETA 01:32:41
# Fork: 1 of 1
# Warmup Iteration   1: 34457.809 ns/op
# Warmup Iteration   2: 22293.022 ns/op
# Warmup Iteration   3: 21307.608 ns/op
# Warmup Iteration   4: 20193.622 ns/op
# Warmup Iteration   5: 19850.988 ns/op
Iteration   1: 19849.473 ns/op
Iteration   2: 20061.008 ns/op
Iteration   3: 19820.278 ns/op
Iteration   4: 19854.697 ns/op
Iteration   5: 20159.444 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  19948.980 ±(99.9%) 584.615 ns/op [Average]
  (min, avg, max) = (19820.278, 19948.980, 20159.444), stdev = 151.823
  CI (99.9%): [19364.365, 20533.595] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 33.85% complete, ETA 01:32:22
# Fork: 1 of 1
# Warmup Iteration   1: 65998.145 ns/op
# Warmup Iteration   2: 39059.374 ns/op
# Warmup Iteration   3: 38116.956 ns/op
# Warmup Iteration   4: 38241.056 ns/op
# Warmup Iteration   5: 36584.620 ns/op
Iteration   1: 36605.455 ns/op
Iteration   2: 36531.633 ns/op
Iteration   3: 36582.147 ns/op
Iteration   4: 36609.234 ns/op
Iteration   5: 36697.842 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  36605.262 ±(99.9%) 232.178 ns/op [Average]
  (min, avg, max) = (36531.633, 36605.262, 36697.842), stdev = 60.296
  CI (99.9%): [36373.085, 36837.440] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 34.10% complete, ETA 01:32:04
# Fork: 1 of 1
# Warmup Iteration   1: 174860.547 ns/op
# Warmup Iteration   2: 92457.813 ns/op
# Warmup Iteration   3: 84547.474 ns/op
# Warmup Iteration   4: 86018.078 ns/op
# Warmup Iteration   5: 83945.056 ns/op
Iteration   1: 82643.160 ns/op
Iteration   2: 82106.340 ns/op
Iteration   3: 82114.081 ns/op
Iteration   4: 88439.358 ns/op
Iteration   5: 82089.626 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  83478.513 ±(99.9%) 10716.512 ns/op [Average]
  (min, avg, max) = (82089.626, 83478.513, 88439.358), stdev = 2783.044
  CI (99.9%): [72762.002, 94195.025] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 34.36% complete, ETA 01:31:45
# Fork: 1 of 1
# Warmup Iteration   1: 1376237.585 ns/op
# Warmup Iteration   2: 915908.611 ns/op
# Warmup Iteration   3: 873608.391 ns/op
# Warmup Iteration   4: 840938.580 ns/op
# Warmup Iteration   5: 832162.116 ns/op
Iteration   1: 824298.413 ns/op
Iteration   2: 822164.138 ns/op
Iteration   3: 836120.562 ns/op
Iteration   4: 817553.014 ns/op
Iteration   5: 803122.799 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  820651.785 ±(99.9%) 46036.372 ns/op [Average]
  (min, avg, max) = (803122.799, 820651.785, 836120.562), stdev = 11955.500
  CI (99.9%): [774615.413, 866688.158] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 34.62% complete, ETA 01:31:26
# Fork: 1 of 1
# Warmup Iteration   1: 12342.142 ns/op
# Warmup Iteration   2: 8450.827 ns/op
# Warmup Iteration   3: 8657.725 ns/op
# Warmup Iteration   4: 8875.280 ns/op
# Warmup Iteration   5: 8662.278 ns/op
Iteration   1: 8881.389 ns/op
Iteration   2: 8665.495 ns/op
Iteration   3: 8713.836 ns/op
Iteration   4: 8665.117 ns/op
Iteration   5: 8728.634 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  8730.894 ±(99.9%) 341.973 ns/op [Average]
  (min, avg, max) = (8665.117, 8730.894, 8881.389), stdev = 88.809
  CI (99.9%): [8388.921, 9072.867] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 34.87% complete, ETA 01:31:08
# Fork: 1 of 1
# Warmup Iteration   1: 26236.774 ns/op
# Warmup Iteration   2: 15393.628 ns/op
# Warmup Iteration   3: 14737.577 ns/op
# Warmup Iteration   4: 14397.492 ns/op
# Warmup Iteration   5: 14185.864 ns/op
Iteration   1: 14165.670 ns/op
Iteration   2: 14173.403 ns/op
Iteration   3: 14222.919 ns/op
Iteration   4: 14289.518 ns/op
Iteration   5: 14265.956 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  14223.493 ±(99.9%) 211.043 ns/op [Average]
  (min, avg, max) = (14165.670, 14223.493, 14289.518), stdev = 54.807
  CI (99.9%): [14012.450, 14434.536] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 35.13% complete, ETA 01:30:49
# Fork: 1 of 1
# Warmup Iteration   1: 54742.744 ns/op
# Warmup Iteration   2: 33786.324 ns/op
# Warmup Iteration   3: 33129.693 ns/op
# Warmup Iteration   4: 33177.780 ns/op
# Warmup Iteration   5: 31716.880 ns/op
Iteration   1: 31837.462 ns/op
Iteration   2: 31707.709 ns/op
Iteration   3: 31626.665 ns/op
Iteration   4: 31584.774 ns/op
Iteration   5: 31424.246 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  31636.171 ±(99.9%) 588.028 ns/op [Average]
  (min, avg, max) = (31424.246, 31636.171, 31837.462), stdev = 152.709
  CI (99.9%): [31048.144, 32224.199] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 35.38% complete, ETA 01:30:30
# Fork: 1 of 1
# Warmup Iteration   1: 123858.032 ns/op
# Warmup Iteration   2: 80820.528 ns/op
# Warmup Iteration   3: 82055.436 ns/op
# Warmup Iteration   4: 78989.771 ns/op
# Warmup Iteration   5: 78497.538 ns/op
Iteration   1: 76121.119 ns/op
Iteration   2: 75914.709 ns/op
Iteration   3: 76505.668 ns/op
Iteration   4: 76244.171 ns/op
Iteration   5: 76704.594 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  76298.052 ±(99.9%) 1201.655 ns/op [Average]
  (min, avg, max) = (75914.709, 76298.052, 76704.594), stdev = 312.066
  CI (99.9%): [75096.397, 77499.707] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 35.64% complete, ETA 01:30:11
# Fork: 1 of 1
# Warmup Iteration   1: 1051750.056 ns/op
# Warmup Iteration   2: 702796.514 ns/op
# Warmup Iteration   3: 701503.347 ns/op
# Warmup Iteration   4: 656078.961 ns/op
# Warmup Iteration   5: 661293.180 ns/op
Iteration   1: 658527.125 ns/op
Iteration   2: 657432.314 ns/op
Iteration   3: 656478.269 ns/op
Iteration   4: 666399.263 ns/op
Iteration   5: 652701.429 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  658307.680 ±(99.9%) 19355.465 ns/op [Average]
  (min, avg, max) = (652701.429, 658307.680, 666399.263), stdev = 5026.553
  CI (99.9%): [638952.215, 677663.145] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 35.90% complete, ETA 01:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 17064.766 ns/op
# Warmup Iteration   2: 10810.368 ns/op
# Warmup Iteration   3: 10819.711 ns/op
# Warmup Iteration   4: 10726.557 ns/op
# Warmup Iteration   5: 10515.430 ns/op
Iteration   1: 10525.899 ns/op
Iteration   2: 10466.767 ns/op
Iteration   3: 10473.383 ns/op
Iteration   4: 10489.408 ns/op
Iteration   5: 10448.774 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  10480.846 ±(99.9%) 112.027 ns/op [Average]
  (min, avg, max) = (10448.774, 10480.846, 10525.899), stdev = 29.093
  CI (99.9%): [10368.820, 10592.873] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 36.15% complete, ETA 01:29:33
# Fork: 1 of 1
# Warmup Iteration   1: 38578.699 ns/op
# Warmup Iteration   2: 21225.483 ns/op
# Warmup Iteration   3: 20335.052 ns/op
# Warmup Iteration   4: 20032.874 ns/op
# Warmup Iteration   5: 19359.902 ns/op
Iteration   1: 19393.598 ns/op
Iteration   2: 19242.750 ns/op
Iteration   3: 19631.240 ns/op
Iteration   4: 19262.411 ns/op
Iteration   5: 19380.162 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  19382.032 ±(99.9%) 596.384 ns/op [Average]
  (min, avg, max) = (19242.750, 19382.032, 19631.240), stdev = 154.879
  CI (99.9%): [18785.648, 19978.417] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 36.41% complete, ETA 01:29:14
# Fork: 1 of 1
# Warmup Iteration   1: 66465.169 ns/op
# Warmup Iteration   2: 43487.255 ns/op
# Warmup Iteration   3: 43589.232 ns/op
# Warmup Iteration   4: 43761.746 ns/op
# Warmup Iteration   5: 41196.028 ns/op
Iteration   1: 40332.091 ns/op
Iteration   2: 40322.088 ns/op
Iteration   3: 40483.048 ns/op
Iteration   4: 40470.943 ns/op
Iteration   5: 40111.634 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  40343.961 ±(99.9%) 577.804 ns/op [Average]
  (min, avg, max) = (40111.634, 40343.961, 40483.048), stdev = 150.054
  CI (99.9%): [39766.157, 40921.765] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 36.67% complete, ETA 01:28:55
# Fork: 1 of 1
# Warmup Iteration   1: 138018.997 ns/op
# Warmup Iteration   2: 79964.417 ns/op
# Warmup Iteration   3: 73784.549 ns/op
# Warmup Iteration   4: 72279.244 ns/op
# Warmup Iteration   5: 73170.057 ns/op
Iteration   1: 70617.073 ns/op
Iteration   2: 70517.825 ns/op
Iteration   3: 70664.200 ns/op
Iteration   4: 71590.499 ns/op
Iteration   5: 70487.903 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  70775.500 ±(99.9%) 1775.913 ns/op [Average]
  (min, avg, max) = (70487.903, 70775.500, 71590.499), stdev = 461.199
  CI (99.9%): [68999.587, 72551.413] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 36.92% complete, ETA 01:28:35
# Fork: 1 of 1
# Warmup Iteration   1: 1648439.276 ns/op
# Warmup Iteration   2: 899059.808 ns/op
# Warmup Iteration   3: 886980.315 ns/op
# Warmup Iteration   4: 831865.427 ns/op
# Warmup Iteration   5: 810642.432 ns/op
Iteration   1: 802941.040 ns/op
Iteration   2: 827524.338 ns/op
Iteration   3: 808311.253 ns/op
Iteration   4: 800892.332 ns/op
Iteration   5: 817370.009 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  811407.794 ±(99.9%) 42494.278 ns/op [Average]
  (min, avg, max) = (800892.332, 811407.794, 827524.338), stdev = 11035.629
  CI (99.9%): [768913.517, 853902.072] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 37.18% complete, ETA 01:28:16
# Fork: 1 of 1
# Warmup Iteration   1: 6030.466 ns/op
# Warmup Iteration   2: 3354.973 ns/op
# Warmup Iteration   3: 3216.746 ns/op
# Warmup Iteration   4: 3269.038 ns/op
# Warmup Iteration   5: 3172.936 ns/op
Iteration   1: 3127.300 ns/op
Iteration   2: 3126.551 ns/op
Iteration   3: 3131.532 ns/op
Iteration   4: 3121.703 ns/op
Iteration   5: 3128.101 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  3127.037 ±(99.9%) 13.627 ns/op [Average]
  (min, avg, max) = (3121.703, 3127.037, 3131.532), stdev = 3.539
  CI (99.9%): [3113.410, 3140.664] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 37.44% complete, ETA 01:27:57
# Fork: 1 of 1
# Warmup Iteration   1: 11114.871 ns/op
# Warmup Iteration   2: 6881.084 ns/op
# Warmup Iteration   3: 6620.251 ns/op
# Warmup Iteration   4: 6714.116 ns/op
# Warmup Iteration   5: 6499.635 ns/op
Iteration   1: 6534.637 ns/op
Iteration   2: 6439.651 ns/op
Iteration   3: 6428.960 ns/op
Iteration   4: 6453.348 ns/op
Iteration   5: 6465.218 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  6464.363 ±(99.9%) 160.214 ns/op [Average]
  (min, avg, max) = (6428.960, 6464.363, 6534.637), stdev = 41.607
  CI (99.9%): [6304.148, 6624.577] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 37.69% complete, ETA 01:27:37
# Fork: 1 of 1
# Warmup Iteration   1: 23591.066 ns/op
# Warmup Iteration   2: 12548.957 ns/op
# Warmup Iteration   3: 12410.898 ns/op
# Warmup Iteration   4: 12196.852 ns/op
# Warmup Iteration   5: 12054.958 ns/op
Iteration   1: 11937.561 ns/op
Iteration   2: 11871.342 ns/op
Iteration   3: 12086.504 ns/op
Iteration   4: 12275.847 ns/op
Iteration   5: 12036.355 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  12041.522 ±(99.9%) 598.795 ns/op [Average]
  (min, avg, max) = (11871.342, 12041.522, 12275.847), stdev = 155.505
  CI (99.9%): [11442.727, 12640.317] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 37.95% complete, ETA 01:27:18
# Fork: 1 of 1
# Warmup Iteration   1: 53857.706 ns/op
# Warmup Iteration   2: 25083.205 ns/op
# Warmup Iteration   3: 24703.566 ns/op
# Warmup Iteration   4: 24287.201 ns/op
# Warmup Iteration   5: 23038.854 ns/op
Iteration   1: 23072.278 ns/op
Iteration   2: 23045.276 ns/op
Iteration   3: 23048.705 ns/op
Iteration   4: 23013.080 ns/op
Iteration   5: 23018.505 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  23039.569 ±(99.9%) 92.960 ns/op [Average]
  (min, avg, max) = (23013.080, 23039.569, 23072.278), stdev = 24.141
  CI (99.9%): [22946.609, 23132.529] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 38.21% complete, ETA 01:26:58
# Fork: 1 of 1
# Warmup Iteration   1: 495659.610 ns/op
# Warmup Iteration   2: 273848.872 ns/op
# Warmup Iteration   3: 257308.644 ns/op
# Warmup Iteration   4: 251263.556 ns/op
# Warmup Iteration   5: 247967.368 ns/op
Iteration   1: 246246.668 ns/op
Iteration   2: 244978.499 ns/op
Iteration   3: 248175.831 ns/op
Iteration   4: 247910.566 ns/op
Iteration   5: 242907.085 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  246043.730 ±(99.9%) 8402.298 ns/op [Average]
  (min, avg, max) = (242907.085, 246043.730, 248175.831), stdev = 2182.050
  CI (99.9%): [237641.432, 254446.028] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 38.46% complete, ETA 01:26:39
# Fork: 1 of 1
# Warmup Iteration   1: 9305.972 ns/op
# Warmup Iteration   2: 5299.610 ns/op
# Warmup Iteration   3: 4509.717 ns/op
# Warmup Iteration   4: 4503.878 ns/op
# Warmup Iteration   5: 4497.557 ns/op
Iteration   1: 4570.395 ns/op
Iteration   2: 4499.306 ns/op
Iteration   3: 4629.808 ns/op
Iteration   4: 4491.498 ns/op
Iteration   5: 4503.929 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  4538.987 ±(99.9%) 230.186 ns/op [Average]
  (min, avg, max) = (4491.498, 4538.987, 4629.808), stdev = 59.779
  CI (99.9%): [4308.802, 4769.173] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 38.72% complete, ETA 01:26:19
# Fork: 1 of 1
# Warmup Iteration   1: 24619.854 ns/op
# Warmup Iteration   2: 11292.695 ns/op
# Warmup Iteration   3: 10329.339 ns/op
# Warmup Iteration   4: 10041.792 ns/op
# Warmup Iteration   5: 9999.422 ns/op
Iteration   1: 10023.277 ns/op
Iteration   2: 9986.447 ns/op
Iteration   3: 10092.141 ns/op
Iteration   4: 9999.331 ns/op
Iteration   5: 9979.453 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  10016.130 ±(99.9%) 175.798 ns/op [Average]
  (min, avg, max) = (9979.453, 10016.130, 10092.141), stdev = 45.654
  CI (99.9%): [9840.332, 10191.927] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 38.97% complete, ETA 01:25:59
# Fork: 1 of 1
# Warmup Iteration   1: 48390.291 ns/op
# Warmup Iteration   2: 20568.230 ns/op
# Warmup Iteration   3: 19420.880 ns/op
# Warmup Iteration   4: 18431.457 ns/op
# Warmup Iteration   5: 18464.566 ns/op
Iteration   1: 18383.088 ns/op
Iteration   2: 18811.226 ns/op
Iteration   3: 18479.593 ns/op
Iteration   4: 18339.591 ns/op
Iteration   5: 18345.111 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  18471.722 ±(99.9%) 762.072 ns/op [Average]
  (min, avg, max) = (18339.591, 18471.722, 18811.226), stdev = 197.908
  CI (99.9%): [17709.650, 19233.794] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 39.23% complete, ETA 01:25:40
# Fork: 1 of 1
# Warmup Iteration   1: 91995.110 ns/op
# Warmup Iteration   2: 41628.046 ns/op
# Warmup Iteration   3: 38891.436 ns/op
# Warmup Iteration   4: 37721.210 ns/op
# Warmup Iteration   5: 39427.657 ns/op
Iteration   1: 37768.529 ns/op
Iteration   2: 37632.531 ns/op
Iteration   3: 37750.865 ns/op
Iteration   4: 37755.670 ns/op
Iteration   5: 37610.089 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  37703.537 ±(99.9%) 291.710 ns/op [Average]
  (min, avg, max) = (37610.089, 37703.537, 37768.529), stdev = 75.756
  CI (99.9%): [37411.826, 37995.247] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 39.49% complete, ETA 01:25:20
# Fork: 1 of 1
# Warmup Iteration   1: 927677.860 ns/op
# Warmup Iteration   2: 509900.010 ns/op
# Warmup Iteration   3: 461331.310 ns/op
# Warmup Iteration   4: 446541.112 ns/op
# Warmup Iteration   5: 465251.870 ns/op
Iteration   1: 447731.158 ns/op
Iteration   2: 444706.500 ns/op
Iteration   3: 447449.989 ns/op
Iteration   4: 449515.078 ns/op
Iteration   5: 437822.703 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  445445.085 ±(99.9%) 17693.786 ns/op [Average]
  (min, avg, max) = (437822.703, 445445.085, 449515.078), stdev = 4595.020
  CI (99.9%): [427751.300, 463138.871] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 39.74% complete, ETA 01:25:00
# Fork: 1 of 1
# Warmup Iteration   1: 12918.947 ns/op
# Warmup Iteration   2: 6710.913 ns/op
# Warmup Iteration   3: 5985.163 ns/op
# Warmup Iteration   4: 5986.035 ns/op
# Warmup Iteration   5: 5975.553 ns/op
Iteration   1: 6021.857 ns/op
Iteration   2: 5967.628 ns/op
Iteration   3: 5977.180 ns/op
Iteration   4: 5977.097 ns/op
Iteration   5: 5961.849 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  5981.122 ±(99.9%) 91.216 ns/op [Average]
  (min, avg, max) = (5961.849, 5981.122, 6021.857), stdev = 23.689
  CI (99.9%): [5889.906, 6072.338] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 40.00% complete, ETA 01:24:40
# Fork: 1 of 1
# Warmup Iteration   1: 25954.642 ns/op
# Warmup Iteration   2: 13868.610 ns/op
# Warmup Iteration   3: 12519.697 ns/op
# Warmup Iteration   4: 11921.573 ns/op
# Warmup Iteration   5: 13953.249 ns/op
Iteration   1: 11894.973 ns/op
Iteration   2: 12018.964 ns/op
Iteration   3: 11917.464 ns/op
Iteration   4: 12220.859 ns/op
Iteration   5: 11897.199 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  11989.892 ±(99.9%) 534.389 ns/op [Average]
  (min, avg, max) = (11894.973, 11989.892, 12220.859), stdev = 138.779
  CI (99.9%): [11455.503, 12524.281] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 40.26% complete, ETA 01:24:20
# Fork: 1 of 1
# Warmup Iteration   1: 56250.623 ns/op
# Warmup Iteration   2: 28101.312 ns/op
# Warmup Iteration   3: 24100.965 ns/op
# Warmup Iteration   4: 25077.288 ns/op
# Warmup Iteration   5: 24170.303 ns/op
Iteration   1: 23944.602 ns/op
Iteration   2: 24175.213 ns/op
Iteration   3: 23982.914 ns/op
Iteration   4: 23824.804 ns/op
Iteration   5: 23909.435 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  23967.394 ±(99.9%) 500.732 ns/op [Average]
  (min, avg, max) = (23824.804, 23967.394, 24175.213), stdev = 130.039
  CI (99.9%): [23466.662, 24468.126] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 40.51% complete, ETA 01:24:00
# Fork: 1 of 1
# Warmup Iteration   1: 153172.602 ns/op
# Warmup Iteration   2: 64689.146 ns/op
# Warmup Iteration   3: 54101.213 ns/op
# Warmup Iteration   4: 53594.945 ns/op
# Warmup Iteration   5: 53877.547 ns/op
Iteration   1: 53441.494 ns/op
Iteration   2: 53460.825 ns/op
Iteration   3: 53466.536 ns/op
Iteration   4: 53415.587 ns/op
Iteration   5: 53560.151 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  53468.919 ±(99.9%) 210.828 ns/op [Average]
  (min, avg, max) = (53415.587, 53468.919, 53560.151), stdev = 54.751
  CI (99.9%): [53258.090, 53679.747] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 40.77% complete, ETA 01:23:40
# Fork: 1 of 1
# Warmup Iteration   1: 1182093.805 ns/op
# Warmup Iteration   2: 670646.118 ns/op
# Warmup Iteration   3: 601614.420 ns/op
# Warmup Iteration   4: 584809.714 ns/op
# Warmup Iteration   5: 584132.065 ns/op
Iteration   1: 580870.804 ns/op
Iteration   2: 580267.752 ns/op
Iteration   3: 581113.507 ns/op
Iteration   4: 580195.353 ns/op
Iteration   5: 579620.348 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  580413.553 ±(99.9%) 2275.677 ns/op [Average]
  (min, avg, max) = (579620.348, 580413.553, 581113.507), stdev = 590.986
  CI (99.9%): [578137.876, 582689.229] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 41.03% complete, ETA 01:23:20
# Fork: 1 of 1
# Warmup Iteration   1: 75282.187 ns/op
# Warmup Iteration   2: 31974.390 ns/op
# Warmup Iteration   3: 27529.394 ns/op
# Warmup Iteration   4: 26511.049 ns/op
# Warmup Iteration   5: 26761.566 ns/op
Iteration   1: 26605.078 ns/op
Iteration   2: 26827.350 ns/op
Iteration   3: 26529.273 ns/op
Iteration   4: 26704.010 ns/op
Iteration   5: 26405.839 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  26614.310 ±(99.9%) 621.521 ns/op [Average]
  (min, avg, max) = (26405.839, 26614.310, 26827.350), stdev = 161.407
  CI (99.9%): [25992.789, 27235.831] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 41.28% complete, ETA 01:23:00
# Fork: 1 of 1
# Warmup Iteration   1: 143250.190 ns/op
# Warmup Iteration   2: 61703.664 ns/op
# Warmup Iteration   3: 49522.664 ns/op
# Warmup Iteration   4: 48791.079 ns/op
# Warmup Iteration   5: 48586.439 ns/op
Iteration   1: 48400.267 ns/op
Iteration   2: 48439.823 ns/op
Iteration   3: 48403.430 ns/op
Iteration   4: 48381.050 ns/op
Iteration   5: 48437.725 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  48412.459 ±(99.9%) 98.244 ns/op [Average]
  (min, avg, max) = (48381.050, 48412.459, 48439.823), stdev = 25.514
  CI (99.9%): [48314.215, 48510.703] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 41.54% complete, ETA 01:22:40
# Fork: 1 of 1
# Warmup Iteration   1: 266502.318 ns/op
# Warmup Iteration   2: 131335.513 ns/op
# Warmup Iteration   3: 111650.803 ns/op
# Warmup Iteration   4: 110616.260 ns/op
# Warmup Iteration   5: 107282.414 ns/op
Iteration   1: 107842.539 ns/op
Iteration   2: 106929.673 ns/op
Iteration   3: 106710.630 ns/op
Iteration   4: 108404.484 ns/op
Iteration   5: 106986.547 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  107374.774 ±(99.9%) 2769.407 ns/op [Average]
  (min, avg, max) = (106710.630, 107374.774, 108404.484), stdev = 719.206
  CI (99.9%): [104605.367, 110144.182] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 41.79% complete, ETA 01:22:20
# Fork: 1 of 1
# Warmup Iteration   1: 546520.623 ns/op
# Warmup Iteration   2: 308327.247 ns/op
# Warmup Iteration   3: 266553.811 ns/op
# Warmup Iteration   4: 251977.554 ns/op
# Warmup Iteration   5: 253146.070 ns/op
Iteration   1: 254362.562 ns/op
Iteration   2: 253638.614 ns/op
Iteration   3: 253287.045 ns/op
Iteration   4: 252657.393 ns/op
Iteration   5: 253420.812 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  253473.285 ±(99.9%) 2374.684 ns/op [Average]
  (min, avg, max) = (252657.393, 253473.285, 254362.562), stdev = 616.698
  CI (99.9%): [251098.601, 255847.969] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 42.05% complete, ETA 01:22:00
# Fork: 1 of 1
# Warmup Iteration   1: 4118495.610 ns/op
# Warmup Iteration   2: 2704375.281 ns/op
# Warmup Iteration   3: 2288456.334 ns/op
# Warmup Iteration   4: 2281887.759 ns/op
# Warmup Iteration   5: 2282045.998 ns/op
Iteration   1: 2276625.606 ns/op
Iteration   2: 2293182.885 ns/op
Iteration   3: 2272948.952 ns/op
Iteration   4: 2279466.739 ns/op
Iteration   5: 2270503.023 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  2278545.441 ±(99.9%) 34159.710 ns/op [Average]
  (min, avg, max) = (2270503.023, 2278545.441, 2293182.885), stdev = 8871.168
  CI (99.9%): [2244385.731, 2312705.151] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 42.31% complete, ETA 01:21:40
# Fork: 1 of 1
# Warmup Iteration   1: 8781.580 ns/op
# Warmup Iteration   2: 4414.201 ns/op
# Warmup Iteration   3: 4304.869 ns/op
# Warmup Iteration   4: 4287.169 ns/op
# Warmup Iteration   5: 4285.698 ns/op
Iteration   1: 4275.700 ns/op
Iteration   2: 4297.823 ns/op
Iteration   3: 4271.834 ns/op
Iteration   4: 4278.382 ns/op
Iteration   5: 4324.253 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  4289.598 ±(99.9%) 83.992 ns/op [Average]
  (min, avg, max) = (4271.834, 4289.598, 4324.253), stdev = 21.812
  CI (99.9%): [4205.607, 4373.590] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 42.56% complete, ETA 01:21:20
# Fork: 1 of 1
# Warmup Iteration   1: 16114.556 ns/op
# Warmup Iteration   2: 8566.828 ns/op
# Warmup Iteration   3: 7749.707 ns/op
# Warmup Iteration   4: 7736.892 ns/op
# Warmup Iteration   5: 7711.384 ns/op
Iteration   1: 7700.905 ns/op
Iteration   2: 7861.173 ns/op
Iteration   3: 7704.726 ns/op
Iteration   4: 7692.395 ns/op
Iteration   5: 7733.397 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  7738.519 ±(99.9%) 270.604 ns/op [Average]
  (min, avg, max) = (7692.395, 7738.519, 7861.173), stdev = 70.275
  CI (99.9%): [7467.915, 8009.124] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 42.82% complete, ETA 01:20:59
# Fork: 1 of 1
# Warmup Iteration   1: 23558.359 ns/op
# Warmup Iteration   2: 14098.937 ns/op
# Warmup Iteration   3: 14464.004 ns/op
# Warmup Iteration   4: 13423.590 ns/op
# Warmup Iteration   5: 13420.675 ns/op
Iteration   1: 13541.292 ns/op
Iteration   2: 13692.652 ns/op
Iteration   3: 13777.751 ns/op
Iteration   4: 13448.517 ns/op
Iteration   5: 13506.154 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  13593.273 ±(99.9%) 527.813 ns/op [Average]
  (min, avg, max) = (13448.517, 13593.273, 13777.751), stdev = 137.071
  CI (99.9%): [13065.460, 14121.086] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 43.08% complete, ETA 01:20:39
# Fork: 1 of 1
# Warmup Iteration   1: 47912.733 ns/op
# Warmup Iteration   2: 28822.896 ns/op
# Warmup Iteration   3: 27962.694 ns/op
# Warmup Iteration   4: 27177.686 ns/op
# Warmup Iteration   5: 28318.945 ns/op
Iteration   1: 27218.624 ns/op
Iteration   2: 27323.472 ns/op
Iteration   3: 27244.932 ns/op
Iteration   4: 26873.602 ns/op
Iteration   5: 27159.500 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  27164.026 ±(99.9%) 665.049 ns/op [Average]
  (min, avg, max) = (26873.602, 27164.026, 27323.472), stdev = 172.711
  CI (99.9%): [26498.977, 27829.075] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 43.33% complete, ETA 01:20:18
# Fork: 1 of 1
# Warmup Iteration   1: 406051.790 ns/op
# Warmup Iteration   2: 269162.441 ns/op
# Warmup Iteration   3: 257540.411 ns/op
# Warmup Iteration   4: 257068.964 ns/op
# Warmup Iteration   5: 255668.568 ns/op
Iteration   1: 254885.619 ns/op
Iteration   2: 255654.422 ns/op
Iteration   3: 255009.724 ns/op
Iteration   4: 254485.594 ns/op
Iteration   5: 254258.091 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  254858.690 ±(99.9%) 2070.634 ns/op [Average]
  (min, avg, max) = (254258.091, 254858.690, 255654.422), stdev = 537.737
  CI (99.9%): [252788.056, 256929.324] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 43.59% complete, ETA 01:19:58
# Fork: 1 of 1
# Warmup Iteration   1: 32665.379 ns/op
# Warmup Iteration   2: 31656.547 ns/op
# Warmup Iteration   3: 33217.218 ns/op
# Warmup Iteration   4: 33632.039 ns/op
# Warmup Iteration   5: 32914.497 ns/op
Iteration   1: 33117.695 ns/op
Iteration   2: 32377.329 ns/op
Iteration   3: 31544.776 ns/op
Iteration   4: 30184.223 ns/op
Iteration   5: 28631.593 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  31171.123 ±(99.9%) 6890.092 ns/op [Average]
  (min, avg, max) = (28631.593, 31171.123, 33117.695), stdev = 1789.335
  CI (99.9%): [24281.032, 38061.215] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 43.85% complete, ETA 01:19:38
# Fork: 1 of 1
# Warmup Iteration   1: 67355.279 ns/op
# Warmup Iteration   2: 55977.883 ns/op
# Warmup Iteration   3: 58187.579 ns/op
# Warmup Iteration   4: 57754.092 ns/op
# Warmup Iteration   5: 55074.540 ns/op
Iteration   1: 62348.164 ns/op
Iteration   2: 60592.961 ns/op
Iteration   3: 60846.175 ns/op
Iteration   4: 61237.797 ns/op
Iteration   5: 61961.948 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  61397.409 ±(99.9%) 2855.137 ns/op [Average]
  (min, avg, max) = (60592.961, 61397.409, 62348.164), stdev = 741.470
  CI (99.9%): [58542.272, 64252.546] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 44.10% complete, ETA 01:19:18
# Fork: 1 of 1
# Warmup Iteration   1: 117225.575 ns/op
# Warmup Iteration   2: 120090.982 ns/op
# Warmup Iteration   3: 131695.214 ns/op
# Warmup Iteration   4: 120773.872 ns/op
# Warmup Iteration   5: 118024.110 ns/op
Iteration   1: 119537.359 ns/op
Iteration   2: 135857.999 ns/op
Iteration   3: 130696.721 ns/op
Iteration   4: 122757.331 ns/op
Iteration   5: 124227.777 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  126615.437 ±(99.9%) 25306.591 ns/op [Average]
  (min, avg, max) = (119537.359, 126615.437, 135857.999), stdev = 6572.041
  CI (99.9%): [101308.846, 151922.028] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 44.36% complete, ETA 01:18:57
# Fork: 1 of 1
# Warmup Iteration   1: 275676.471 ns/op
# Warmup Iteration   2: 246740.060 ns/op
# Warmup Iteration   3: 269367.590 ns/op
# Warmup Iteration   4: 283051.969 ns/op
# Warmup Iteration   5: 281333.818 ns/op
Iteration   1: 293471.961 ns/op
Iteration   2: 300495.040 ns/op
Iteration   3: 279336.522 ns/op
Iteration   4: 282288.818 ns/op
Iteration   5: 283455.351 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  287809.538 ±(99.9%) 34128.433 ns/op [Average]
  (min, avg, max) = (279336.522, 287809.538, 300495.040), stdev = 8863.046
  CI (99.9%): [253681.106, 321937.971] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 44.62% complete, ETA 01:18:37
# Fork: 1 of 1
# Warmup Iteration   1: 2687537.858 ns/op
# Warmup Iteration   2: 2751222.494 ns/op
# Warmup Iteration   3: 2300845.504 ns/op
# Warmup Iteration   4: 2713641.351 ns/op
# Warmup Iteration   5: 2605251.625 ns/op
Iteration   1: 2482742.123 ns/op
Iteration   2: 2424271.340 ns/op
Iteration   3: 2521574.893 ns/op
Iteration   4: 2455623.419 ns/op
Iteration   5: 2556381.390 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  2488118.633 ±(99.9%) 201382.124 ns/op [Average]
  (min, avg, max) = (2424271.340, 2488118.633, 2556381.390), stdev = 52298.298
  CI (99.9%): [2286736.509, 2689500.757] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 44.87% complete, ETA 01:18:16
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 45.13% complete, ETA 01:17:32
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 45.38% complete, ETA 01:16:47
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 45.64% complete, ETA 01:16:03
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 45.90% complete, ETA 01:15:20
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:69)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:69)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 46.15% complete, ETA 01:14:37
# Fork: 1 of 1
# Warmup Iteration   1: 64041.912 ns/op
# Warmup Iteration   2: 42921.471 ns/op
# Warmup Iteration   3: 40904.487 ns/op
# Warmup Iteration   4: 39485.170 ns/op
# Warmup Iteration   5: 39692.451 ns/op
Iteration   1: 39339.253 ns/op
Iteration   2: 39553.929 ns/op
Iteration   3: 40041.556 ns/op
Iteration   4: 40018.654 ns/op
Iteration   5: 39979.126 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  39786.504 ±(99.9%) 1233.067 ns/op [Average]
  (min, avg, max) = (39339.253, 39786.504, 40041.556), stdev = 320.224
  CI (99.9%): [38553.437, 41019.570] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 46.41% complete, ETA 01:14:18
# Fork: 1 of 1
# Warmup Iteration   1: 154660.184 ns/op
# Warmup Iteration   2: 77353.400 ns/op
# Warmup Iteration   3: 76424.666 ns/op
# Warmup Iteration   4: 72551.897 ns/op
# Warmup Iteration   5: 72844.221 ns/op
Iteration   1: 73814.790 ns/op
Iteration   2: 73845.942 ns/op
Iteration   3: 74336.409 ns/op
Iteration   4: 74109.457 ns/op
Iteration   5: 74492.008 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  74119.721 ±(99.9%) 1144.870 ns/op [Average]
  (min, avg, max) = (73814.790, 74119.721, 74492.008), stdev = 297.319
  CI (99.9%): [72974.851, 75264.591] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 46.67% complete, ETA 01:13:59
# Fork: 1 of 1
# Warmup Iteration   1: 296686.534 ns/op
# Warmup Iteration   2: 166830.172 ns/op
# Warmup Iteration   3: 157441.811 ns/op
# Warmup Iteration   4: 155843.517 ns/op
# Warmup Iteration   5: 154014.435 ns/op
Iteration   1: 154833.384 ns/op
Iteration   2: 152399.858 ns/op
Iteration   3: 152483.368 ns/op
Iteration   4: 152166.833 ns/op
Iteration   5: 153180.954 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  153012.879 ±(99.9%) 4180.413 ns/op [Average]
  (min, avg, max) = (152166.833, 153012.879, 154833.384), stdev = 1085.640
  CI (99.9%): [148832.467, 157193.292] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 46.92% complete, ETA 01:13:40
# Fork: 1 of 1
# Warmup Iteration   1: 615580.399 ns/op
# Warmup Iteration   2: 382870.995 ns/op
# Warmup Iteration   3: 363704.742 ns/op
# Warmup Iteration   4: 347417.379 ns/op
# Warmup Iteration   5: 346721.598 ns/op
Iteration   1: 347359.238 ns/op
Iteration   2: 348232.367 ns/op
Iteration   3: 348550.377 ns/op
Iteration   4: 347840.075 ns/op
Iteration   5: 352977.291 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  348991.870 ±(99.9%) 8748.562 ns/op [Average]
  (min, avg, max) = (347359.238, 348991.870, 352977.291), stdev = 2271.974
  CI (99.9%): [340243.307, 357740.432] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 47.18% complete, ETA 01:13:20
# Fork: 1 of 1
# Warmup Iteration   1: 5064035.573 ns/op
# Warmup Iteration   2: 3455203.689 ns/op
# Warmup Iteration   3: 3394008.719 ns/op
# Warmup Iteration   4: 3282677.197 ns/op
# Warmup Iteration   5: 3237283.018 ns/op
Iteration   1: 3227941.771 ns/op
Iteration   2: 3242737.649 ns/op
Iteration   3: 3263808.435 ns/op
Iteration   4: 3266038.044 ns/op
Iteration   5: 3228104.842 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  3245726.148 ±(99.9%) 71399.802 ns/op [Average]
  (min, avg, max) = (3227941.771, 3245726.148, 3266038.044), stdev = 18542.302
  CI (99.9%): [3174326.346, 3317125.950] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 47.44% complete, ETA 01:13:01
# Fork: 1 of 1
# Warmup Iteration   1: 50088.658 ns/op
# Warmup Iteration   2: 28168.274 ns/op
# Warmup Iteration   3: 27256.124 ns/op
# Warmup Iteration   4: 26138.623 ns/op
# Warmup Iteration   5: 25487.283 ns/op
Iteration   1: 25459.926 ns/op
Iteration   2: 25399.118 ns/op
Iteration   3: 25407.941 ns/op
Iteration   4: 25350.311 ns/op
Iteration   5: 25306.674 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  25384.794 ±(99.9%) 225.169 ns/op [Average]
  (min, avg, max) = (25306.674, 25384.794, 25459.926), stdev = 58.476
  CI (99.9%): [25159.625, 25609.963] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 47.69% complete, ETA 01:12:42
# Fork: 1 of 1
# Warmup Iteration   1: 65454.509 ns/op
# Warmup Iteration   2: 40065.996 ns/op
# Warmup Iteration   3: 39929.943 ns/op
# Warmup Iteration   4: 37230.215 ns/op
# Warmup Iteration   5: 38983.245 ns/op
Iteration   1: 37237.501 ns/op
Iteration   2: 37180.059 ns/op
Iteration   3: 37173.903 ns/op
Iteration   4: 37187.420 ns/op
Iteration   5: 37271.274 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  37210.031 ±(99.9%) 163.597 ns/op [Average]
  (min, avg, max) = (37173.903, 37210.031, 37271.274), stdev = 42.486
  CI (99.9%): [37046.434, 37373.629] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 47.95% complete, ETA 01:12:22
# Fork: 1 of 1
# Warmup Iteration   1: 160044.024 ns/op
# Warmup Iteration   2: 95017.026 ns/op
# Warmup Iteration   3: 91483.836 ns/op
# Warmup Iteration   4: 89048.521 ns/op
# Warmup Iteration   5: 90420.893 ns/op
Iteration   1: 87570.679 ns/op
Iteration   2: 89018.405 ns/op
Iteration   3: 87345.752 ns/op
Iteration   4: 87548.653 ns/op
Iteration   5: 87278.693 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  87752.436 ±(99.9%) 2768.091 ns/op [Average]
  (min, avg, max) = (87278.693, 87752.436, 89018.405), stdev = 718.864
  CI (99.9%): [84984.345, 90520.528] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 48.21% complete, ETA 01:12:02
# Fork: 1 of 1
# Warmup Iteration   1: 371760.288 ns/op
# Warmup Iteration   2: 240459.358 ns/op
# Warmup Iteration   3: 235685.055 ns/op
# Warmup Iteration   4: 224152.752 ns/op
# Warmup Iteration   5: 222869.874 ns/op
Iteration   1: 221836.427 ns/op
Iteration   2: 221027.055 ns/op
Iteration   3: 223555.288 ns/op
Iteration   4: 221373.819 ns/op
Iteration   5: 220995.261 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  221757.570 ±(99.9%) 4084.243 ns/op [Average]
  (min, avg, max) = (220995.261, 221757.570, 223555.288), stdev = 1060.665
  CI (99.9%): [217673.327, 225841.813] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 48.46% complete, ETA 01:11:43
# Fork: 1 of 1
# Warmup Iteration   1: 2942893.758 ns/op
# Warmup Iteration   2: 1961365.708 ns/op
# Warmup Iteration   3: 1906331.980 ns/op
# Warmup Iteration   4: 1868396.828 ns/op
# Warmup Iteration   5: 1830679.607 ns/op
Iteration   1: 1829392.188 ns/op
Iteration   2: 1831258.114 ns/op
Iteration   3: 1829082.192 ns/op
Iteration   4: 1822786.656 ns/op
Iteration   5: 1824798.871 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  1827463.604 ±(99.9%) 13574.845 ns/op [Average]
  (min, avg, max) = (1822786.656, 1827463.604, 1831258.114), stdev = 3525.344
  CI (99.9%): [1813888.759, 1841038.450] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 48.72% complete, ETA 01:11:23
# Fork: 1 of 1
# Warmup Iteration   1: 30532.192 ns/op
# Warmup Iteration   2: 19923.914 ns/op
# Warmup Iteration   3: 18708.641 ns/op
# Warmup Iteration   4: 18234.901 ns/op
# Warmup Iteration   5: 18235.295 ns/op
Iteration   1: 18158.742 ns/op
Iteration   2: 18111.219 ns/op
Iteration   3: 18320.293 ns/op
Iteration   4: 18303.243 ns/op
Iteration   5: 18158.619 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  18210.423 ±(99.9%) 364.711 ns/op [Average]
  (min, avg, max) = (18111.219, 18210.423, 18320.293), stdev = 94.714
  CI (99.9%): [17845.712, 18575.134] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 48.97% complete, ETA 01:11:03
# Fork: 1 of 1
# Warmup Iteration   1: 82526.424 ns/op
# Warmup Iteration   2: 39232.881 ns/op
# Warmup Iteration   3: 36338.429 ns/op
# Warmup Iteration   4: 39588.185 ns/op
# Warmup Iteration   5: 35396.469 ns/op
Iteration   1: 36222.258 ns/op
Iteration   2: 35756.023 ns/op
Iteration   3: 35438.097 ns/op
Iteration   4: 35402.661 ns/op
Iteration   5: 35456.806 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  35655.169 ±(99.9%) 1336.664 ns/op [Average]
  (min, avg, max) = (35402.661, 35655.169, 36222.258), stdev = 347.128
  CI (99.9%): [34318.505, 36991.834] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 49.23% complete, ETA 01:10:44
# Fork: 1 of 1
# Warmup Iteration   1: 144869.612 ns/op
# Warmup Iteration   2: 84289.142 ns/op
# Warmup Iteration   3: 78070.990 ns/op
# Warmup Iteration   4: 77682.606 ns/op
# Warmup Iteration   5: 78124.126 ns/op
Iteration   1: 77058.021 ns/op
Iteration   2: 76944.602 ns/op
Iteration   3: 77367.063 ns/op
Iteration   4: 77149.063 ns/op
Iteration   5: 77206.123 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  77144.974 ±(99.9%) 611.238 ns/op [Average]
  (min, avg, max) = (76944.602, 77144.974, 77367.063), stdev = 158.737
  CI (99.9%): [76533.736, 77756.212] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 49.49% complete, ETA 01:10:24
# Fork: 1 of 1
# Warmup Iteration   1: 317711.064 ns/op
# Warmup Iteration   2: 217305.717 ns/op
# Warmup Iteration   3: 209985.569 ns/op
# Warmup Iteration   4: 199315.276 ns/op
# Warmup Iteration   5: 199625.570 ns/op
Iteration   1: 200382.128 ns/op
Iteration   2: 201875.530 ns/op
Iteration   3: 199716.038 ns/op
Iteration   4: 199039.686 ns/op
Iteration   5: 199591.943 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  200121.065 ±(99.9%) 4200.425 ns/op [Average]
  (min, avg, max) = (199039.686, 200121.065, 201875.530), stdev = 1090.837
  CI (99.9%): [195920.640, 204321.490] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 49.74% complete, ETA 01:10:04
# Fork: 1 of 1
# Warmup Iteration   1: 2588656.158 ns/op
# Warmup Iteration   2: 1919948.643 ns/op
# Warmup Iteration   3: 1771967.083 ns/op
# Warmup Iteration   4: 1769802.363 ns/op
# Warmup Iteration   5: 1761646.647 ns/op
Iteration   1: 1760151.163 ns/op
Iteration   2: 1781335.528 ns/op
Iteration   3: 1753439.392 ns/op
Iteration   4: 1751118.084 ns/op
Iteration   5: 1748779.163 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  1758964.666 ±(99.9%) 50855.666 ns/op [Average]
  (min, avg, max) = (1748779.163, 1758964.666, 1781335.528), stdev = 13207.055
  CI (99.9%): [1708109.000, 1809820.333] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 50.00% complete, ETA 01:09:44
# Fork: 1 of 1
# Warmup Iteration   1: 57404.022 ns/op
# Warmup Iteration   2: 16865.546 ns/op
# Warmup Iteration   3: 16244.483 ns/op
# Warmup Iteration   4: 16274.695 ns/op
# Warmup Iteration   5: 16190.969 ns/op
Iteration   1: 15956.277 ns/op
Iteration   2: 15869.794 ns/op
Iteration   3: 15754.458 ns/op
Iteration   4: 16161.465 ns/op
Iteration   5: 15777.587 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  15903.916 ±(99.9%) 634.289 ns/op [Average]
  (min, avg, max) = (15754.458, 15903.916, 16161.465), stdev = 164.723
  CI (99.9%): [15269.628, 16538.205] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 50.26% complete, ETA 01:09:24
# Fork: 1 of 1
# Warmup Iteration   1: 93936.469 ns/op
# Warmup Iteration   2: 32704.713 ns/op
# Warmup Iteration   3: 29499.453 ns/op
# Warmup Iteration   4: 29115.362 ns/op
# Warmup Iteration   5: 28027.240 ns/op
Iteration   1: 28397.374 ns/op
Iteration   2: 27897.341 ns/op
Iteration   3: 28695.837 ns/op
Iteration   4: 27968.761 ns/op
Iteration   5: 28127.441 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  28217.351 ±(99.9%) 1267.857 ns/op [Average]
  (min, avg, max) = (27897.341, 28217.351, 28695.837), stdev = 329.258
  CI (99.9%): [26949.494, 29485.207] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 50.51% complete, ETA 01:09:04
# Fork: 1 of 1
# Warmup Iteration   1: 337919.832 ns/op
# Warmup Iteration   2: 71586.911 ns/op
# Warmup Iteration   3: 58606.472 ns/op
# Warmup Iteration   4: 53815.408 ns/op
# Warmup Iteration   5: 53350.851 ns/op
Iteration   1: 52754.439 ns/op
Iteration   2: 52258.415 ns/op
Iteration   3: 52231.171 ns/op
Iteration   4: 52038.283 ns/op
Iteration   5: 52176.880 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  52291.837 ±(99.9%) 1048.024 ns/op [Average]
  (min, avg, max) = (52038.283, 52291.837, 52754.439), stdev = 272.169
  CI (99.9%): [51243.813, 53339.862] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 50.77% complete, ETA 01:08:44
# Fork: 1 of 1
# Warmup Iteration   1: 319136.064 ns/op
# Warmup Iteration   2: 132618.951 ns/op
# Warmup Iteration   3: 106735.323 ns/op
# Warmup Iteration   4: 104988.349 ns/op
# Warmup Iteration   5: 106485.041 ns/op
Iteration   1: 105389.631 ns/op
Iteration   2: 104043.409 ns/op
Iteration   3: 103871.275 ns/op
Iteration   4: 103903.915 ns/op
Iteration   5: 104228.476 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  104287.341 ±(99.9%) 2433.944 ns/op [Average]
  (min, avg, max) = (103871.275, 104287.341, 105389.631), stdev = 632.088
  CI (99.9%): [101853.397, 106721.285] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 51.03% complete, ETA 01:08:24
# Fork: 1 of 1
# Warmup Iteration   1: 2078653.179 ns/op
# Warmup Iteration   2: 853142.052 ns/op
# Warmup Iteration   3: 879601.000 ns/op
# Warmup Iteration   4: 831745.110 ns/op
# Warmup Iteration   5: 837458.088 ns/op
Iteration   1: 811595.368 ns/op
Iteration   2: 800003.051 ns/op
Iteration   3: 802116.495 ns/op
Iteration   4: 796956.850 ns/op
Iteration   5: 801017.299 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  802337.813 ±(99.9%) 21257.240 ns/op [Average]
  (min, avg, max) = (796956.850, 802337.813, 811595.368), stdev = 5520.438
  CI (99.9%): [781080.572, 823595.053] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 51.28% complete, ETA 01:08:04
# Fork: 1 of 1
# Warmup Iteration   1: 66252.220 ns/op
# Warmup Iteration   2: 15615.263 ns/op
# Warmup Iteration   3: 13871.296 ns/op
# Warmup Iteration   4: 13732.476 ns/op
# Warmup Iteration   5: 13686.020 ns/op
Iteration   1: 13482.593 ns/op
Iteration   2: 13364.042 ns/op
Iteration   3: 13326.973 ns/op
Iteration   4: 13290.652 ns/op
Iteration   5: 13392.442 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  13371.340 ±(99.9%) 281.352 ns/op [Average]
  (min, avg, max) = (13290.652, 13371.340, 13482.593), stdev = 73.066
  CI (99.9%): [13089.988, 13652.693] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 51.54% complete, ETA 01:07:43
# Fork: 1 of 1
# Warmup Iteration   1: 45766.452 ns/op
# Warmup Iteration   2: 21850.663 ns/op
# Warmup Iteration   3: 21401.152 ns/op
# Warmup Iteration   4: 21515.165 ns/op
# Warmup Iteration   5: 21213.398 ns/op
Iteration   1: 21571.408 ns/op
Iteration   2: 21149.978 ns/op
Iteration   3: 21046.029 ns/op
Iteration   4: 21056.169 ns/op
Iteration   5: 21141.971 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  21193.111 ±(99.9%) 834.735 ns/op [Average]
  (min, avg, max) = (21046.029, 21193.111, 21571.408), stdev = 216.778
  CI (99.9%): [20358.376, 22027.846] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 51.79% complete, ETA 01:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 283733.560 ns/op
# Warmup Iteration   2: 50904.002 ns/op
# Warmup Iteration   3: 41599.443 ns/op
# Warmup Iteration   4: 42582.449 ns/op
# Warmup Iteration   5: 40987.866 ns/op
Iteration   1: 40476.552 ns/op
Iteration   2: 40193.826 ns/op
Iteration   3: 41014.586 ns/op
Iteration   4: 40139.538 ns/op
Iteration   5: 40226.222 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  40410.145 ±(99.9%) 1393.178 ns/op [Average]
  (min, avg, max) = (40139.538, 40410.145, 41014.586), stdev = 361.804
  CI (99.9%): [39016.966, 41803.323] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 52.05% complete, ETA 01:07:03
# Fork: 1 of 1
# Warmup Iteration   1: 445958.696 ns/op
# Warmup Iteration   2: 114358.382 ns/op
# Warmup Iteration   3: 84073.133 ns/op
# Warmup Iteration   4: 84509.384 ns/op
# Warmup Iteration   5: 83950.505 ns/op
Iteration   1: 82017.978 ns/op
Iteration   2: 81127.169 ns/op
Iteration   3: 81183.950 ns/op
Iteration   4: 81061.921 ns/op
Iteration   5: 81536.204 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  81385.445 ±(99.9%) 1533.989 ns/op [Average]
  (min, avg, max) = (81061.921, 81385.445, 82017.978), stdev = 398.372
  CI (99.9%): [79851.456, 82919.433] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 52.31% complete, ETA 01:06:43
# Fork: 1 of 1
# Warmup Iteration   1: 5413863.948 ns/op
# Warmup Iteration   2: 747889.306 ns/op
# Warmup Iteration   3: 675186.201 ns/op
# Warmup Iteration   4: 705692.592 ns/op
# Warmup Iteration   5: 623808.144 ns/op
Iteration   1: 624020.142 ns/op
Iteration   2: 622276.094 ns/op
Iteration   3: 620851.114 ns/op
Iteration   4: 621354.829 ns/op
Iteration   5: 620233.331 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  621747.102 ±(99.9%) 5677.161 ns/op [Average]
  (min, avg, max) = (620233.331, 621747.102, 624020.142), stdev = 1474.341
  CI (99.9%): [616069.941, 627424.263] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 52.56% complete, ETA 01:06:23
# Fork: 1 of 1
# Warmup Iteration   1: 62811.439 ns/op
# Warmup Iteration   2: 14907.499 ns/op
# Warmup Iteration   3: 13612.580 ns/op
# Warmup Iteration   4: 13387.961 ns/op
# Warmup Iteration   5: 13317.201 ns/op
Iteration   1: 13259.351 ns/op
Iteration   2: 13112.211 ns/op
Iteration   3: 13043.920 ns/op
Iteration   4: 13025.273 ns/op
Iteration   5: 13120.182 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  13112.187 ±(99.9%) 354.676 ns/op [Average]
  (min, avg, max) = (13025.273, 13112.187, 13259.351), stdev = 92.108
  CI (99.9%): [12757.511, 13466.863] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 52.82% complete, ETA 01:06:02
# Fork: 1 of 1
# Warmup Iteration   1: 131093.012 ns/op
# Warmup Iteration   2: 28460.312 ns/op
# Warmup Iteration   3: 23686.775 ns/op
# Warmup Iteration   4: 23510.172 ns/op
# Warmup Iteration   5: 23599.523 ns/op
Iteration   1: 23129.872 ns/op
Iteration   2: 22987.764 ns/op
Iteration   3: 22815.442 ns/op
Iteration   4: 22808.431 ns/op
Iteration   5: 23424.620 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  23033.226 ±(99.9%) 986.545 ns/op [Average]
  (min, avg, max) = (22808.431, 23033.226, 23424.620), stdev = 256.203
  CI (99.9%): [22046.681, 24019.771] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 53.08% complete, ETA 01:05:42
# Fork: 1 of 1
# Warmup Iteration   1: 289605.100 ns/op
# Warmup Iteration   2: 61154.364 ns/op
# Warmup Iteration   3: 42208.425 ns/op
# Warmup Iteration   4: 41892.775 ns/op
# Warmup Iteration   5: 41460.116 ns/op
Iteration   1: 40705.193 ns/op
Iteration   2: 40381.947 ns/op
Iteration   3: 40473.858 ns/op
Iteration   4: 40365.502 ns/op
Iteration   5: 40384.880 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  40462.276 ±(99.9%) 547.790 ns/op [Average]
  (min, avg, max) = (40365.502, 40462.276, 40705.193), stdev = 142.259
  CI (99.9%): [39914.486, 41010.066] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 53.33% complete, ETA 01:05:22
# Fork: 1 of 1
# Warmup Iteration   1: 227477.420 ns/op
# Warmup Iteration   2: 89582.051 ns/op
# Warmup Iteration   3: 80765.323 ns/op
# Warmup Iteration   4: 83941.896 ns/op
# Warmup Iteration   5: 80431.577 ns/op
Iteration   1: 81110.913 ns/op
Iteration   2: 79217.167 ns/op
Iteration   3: 79033.959 ns/op
Iteration   4: 79011.386 ns/op
Iteration   5: 81047.945 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  79884.274 ±(99.9%) 4213.233 ns/op [Average]
  (min, avg, max) = (79011.386, 79884.274, 81110.913), stdev = 1094.163
  CI (99.9%): [75671.041, 84097.507] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 53.59% complete, ETA 01:05:01
# Fork: 1 of 1
# Warmup Iteration   1: 2393101.994 ns/op
# Warmup Iteration   2: 626754.378 ns/op
# Warmup Iteration   3: 615986.841 ns/op
# Warmup Iteration   4: 613003.988 ns/op
# Warmup Iteration   5: 577132.885 ns/op
Iteration   1: 569292.354 ns/op
Iteration   2: 567205.154 ns/op
Iteration   3: 581458.178 ns/op
Iteration   4: 567256.772 ns/op
Iteration   5: 568075.300 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  570657.552 ±(99.9%) 23475.484 ns/op [Average]
  (min, avg, max) = (567205.154, 570657.552, 581458.178), stdev = 6096.509
  CI (99.9%): [547182.068, 594133.036] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 53.85% complete, ETA 01:04:41
# Fork: 1 of 1
# Warmup Iteration   1: 35998.048 ns/op
# Warmup Iteration   2: 13049.300 ns/op
# Warmup Iteration   3: 6528.921 ns/op
# Warmup Iteration   4: 6209.370 ns/op
# Warmup Iteration   5: 5903.771 ns/op
Iteration   1: 5904.701 ns/op
Iteration   2: 5910.216 ns/op
Iteration   3: 5890.317 ns/op
Iteration   4: 5894.933 ns/op
Iteration   5: 5889.513 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  5897.936 ±(99.9%) 35.218 ns/op [Average]
  (min, avg, max) = (5889.513, 5897.936, 5910.216), stdev = 9.146
  CI (99.9%): [5862.718, 5933.153] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 54.10% complete, ETA 01:04:21
# Fork: 1 of 1
# Warmup Iteration   1: 55701.480 ns/op
# Warmup Iteration   2: 14594.379 ns/op
# Warmup Iteration   3: 12702.007 ns/op
# Warmup Iteration   4: 12418.846 ns/op
# Warmup Iteration   5: 12414.587 ns/op
Iteration   1: 12177.490 ns/op
Iteration   2: 12108.804 ns/op
Iteration   3: 12096.982 ns/op
Iteration   4: 12274.072 ns/op
Iteration   5: 12106.670 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  12152.804 ±(99.9%) 288.772 ns/op [Average]
  (min, avg, max) = (12096.982, 12152.804, 12274.072), stdev = 74.993
  CI (99.9%): [11864.032, 12441.575] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 54.36% complete, ETA 01:04:00
# Fork: 1 of 1
# Warmup Iteration   1: 76460.007 ns/op
# Warmup Iteration   2: 28069.910 ns/op
# Warmup Iteration   3: 23369.797 ns/op
# Warmup Iteration   4: 23023.340 ns/op
# Warmup Iteration   5: 22393.229 ns/op
Iteration   1: 23356.085 ns/op
Iteration   2: 22495.816 ns/op
Iteration   3: 22093.272 ns/op
Iteration   4: 22041.156 ns/op
Iteration   5: 22030.219 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  22403.310 ±(99.9%) 2180.646 ns/op [Average]
  (min, avg, max) = (22030.219, 22403.310, 23356.085), stdev = 566.307
  CI (99.9%): [20222.663, 24583.956] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 54.62% complete, ETA 01:03:40
# Fork: 1 of 1
# Warmup Iteration   1: 281494.174 ns/op
# Warmup Iteration   2: 55603.022 ns/op
# Warmup Iteration   3: 43067.925 ns/op
# Warmup Iteration   4: 41251.863 ns/op
# Warmup Iteration   5: 39984.183 ns/op
Iteration   1: 40047.723 ns/op
Iteration   2: 42093.226 ns/op
Iteration   3: 40091.228 ns/op
Iteration   4: 40100.682 ns/op
Iteration   5: 40074.278 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  40481.427 ±(99.9%) 3470.383 ns/op [Average]
  (min, avg, max) = (40047.723, 40481.427, 42093.226), stdev = 901.247
  CI (99.9%): [37011.044, 43951.810] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 54.87% complete, ETA 01:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 1071932.076 ns/op
# Warmup Iteration   2: 416637.680 ns/op
# Warmup Iteration   3: 349288.414 ns/op
# Warmup Iteration   4: 322707.482 ns/op
# Warmup Iteration   5: 318323.665 ns/op
Iteration   1: 319740.749 ns/op
Iteration   2: 320040.697 ns/op
Iteration   3: 318763.833 ns/op
Iteration   4: 320633.638 ns/op
Iteration   5: 318304.974 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  319496.778 ±(99.9%) 3655.793 ns/op [Average]
  (min, avg, max) = (318304.974, 319496.778, 320633.638), stdev = 949.398
  CI (99.9%): [315840.985, 323152.571] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 55.13% complete, ETA 01:02:59
# Fork: 1 of 1
# Warmup Iteration   1: 63232.545 ns/op
# Warmup Iteration   2: 12253.243 ns/op
# Warmup Iteration   3: 9696.330 ns/op
# Warmup Iteration   4: 9393.635 ns/op
# Warmup Iteration   5: 8917.686 ns/op
Iteration   1: 8918.068 ns/op
Iteration   2: 8924.297 ns/op
Iteration   3: 8907.104 ns/op
Iteration   4: 8915.073 ns/op
Iteration   5: 8920.276 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  8916.964 ±(99.9%) 24.862 ns/op [Average]
  (min, avg, max) = (8907.104, 8916.964, 8924.297), stdev = 6.457
  CI (99.9%): [8892.101, 8941.826] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 55.38% complete, ETA 01:02:39
# Fork: 1 of 1
# Warmup Iteration   1: 98058.293 ns/op
# Warmup Iteration   2: 27416.026 ns/op
# Warmup Iteration   3: 18180.368 ns/op
# Warmup Iteration   4: 16717.634 ns/op
# Warmup Iteration   5: 16659.649 ns/op
Iteration   1: 16853.820 ns/op
Iteration   2: 16816.546 ns/op
Iteration   3: 16950.136 ns/op
Iteration   4: 16679.519 ns/op
Iteration   5: 16722.994 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  16804.603 ±(99.9%) 413.164 ns/op [Average]
  (min, avg, max) = (16679.519, 16804.603, 16950.136), stdev = 107.297
  CI (99.9%): [16391.439, 17217.767] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 55.64% complete, ETA 01:02:18
# Fork: 1 of 1
# Warmup Iteration   1: 175126.916 ns/op
# Warmup Iteration   2: 50682.166 ns/op
# Warmup Iteration   3: 31891.027 ns/op
# Warmup Iteration   4: 30205.478 ns/op
# Warmup Iteration   5: 29569.308 ns/op
Iteration   1: 29464.177 ns/op
Iteration   2: 29336.677 ns/op
Iteration   3: 29379.285 ns/op
Iteration   4: 29452.616 ns/op
Iteration   5: 29644.550 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  29455.461 ±(99.9%) 454.602 ns/op [Average]
  (min, avg, max) = (29336.677, 29455.461, 29644.550), stdev = 118.059
  CI (99.9%): [29000.859, 29910.063] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 55.90% complete, ETA 01:01:57
# Fork: 1 of 1
# Warmup Iteration   1: 244978.358 ns/op
# Warmup Iteration   2: 92530.202 ns/op
# Warmup Iteration   3: 61609.172 ns/op
# Warmup Iteration   4: 57877.941 ns/op
# Warmup Iteration   5: 57618.004 ns/op
Iteration   1: 57630.863 ns/op
Iteration   2: 57681.857 ns/op
Iteration   3: 57424.869 ns/op
Iteration   4: 57491.746 ns/op
Iteration   5: 57542.347 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  57554.336 ±(99.9%) 398.969 ns/op [Average]
  (min, avg, max) = (57424.869, 57554.336, 57681.857), stdev = 103.611
  CI (99.9%): [57155.367, 57953.306] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 56.15% complete, ETA 01:01:37
# Fork: 1 of 1
# Warmup Iteration   1: 2397784.049 ns/op
# Warmup Iteration   2: 764532.400 ns/op
# Warmup Iteration   3: 606757.993 ns/op
# Warmup Iteration   4: 568050.954 ns/op
# Warmup Iteration   5: 551369.661 ns/op
Iteration   1: 547742.461 ns/op
Iteration   2: 546491.437 ns/op
Iteration   3: 546144.691 ns/op
Iteration   4: 550584.198 ns/op
Iteration   5: 548319.314 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  547856.420 ±(99.9%) 6796.475 ns/op [Average]
  (min, avg, max) = (546144.691, 547856.420, 550584.198), stdev = 1765.023
  CI (99.9%): [541059.945, 554652.896] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 56.41% complete, ETA 01:01:16
# Fork: 1 of 1
# Warmup Iteration   1: 50044.879 ns/op
# Warmup Iteration   2: 13591.986 ns/op
# Warmup Iteration   3: 9892.764 ns/op
# Warmup Iteration   4: 9962.646 ns/op
# Warmup Iteration   5: 9111.136 ns/op
Iteration   1: 9013.230 ns/op
Iteration   2: 9002.880 ns/op
Iteration   3: 8999.687 ns/op
Iteration   4: 9031.104 ns/op
Iteration   5: 8872.261 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  8983.832 ±(99.9%) 244.760 ns/op [Average]
  (min, avg, max) = (8872.261, 8983.832, 9031.104), stdev = 63.563
  CI (99.9%): [8739.072, 9228.592] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 56.67% complete, ETA 01:00:56
# Fork: 1 of 1
# Warmup Iteration   1: 119707.418 ns/op
# Warmup Iteration   2: 26237.236 ns/op
# Warmup Iteration   3: 19131.682 ns/op
# Warmup Iteration   4: 17531.577 ns/op
# Warmup Iteration   5: 16970.423 ns/op
Iteration   1: 16481.970 ns/op
Iteration   2: 16455.086 ns/op
Iteration   3: 16475.367 ns/op
Iteration   4: 16968.318 ns/op
Iteration   5: 16475.508 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  16571.250 ±(99.9%) 855.606 ns/op [Average]
  (min, avg, max) = (16455.086, 16571.250, 16968.318), stdev = 222.198
  CI (99.9%): [15715.644, 17426.856] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 56.92% complete, ETA 01:00:35
# Fork: 1 of 1
# Warmup Iteration   1: 136364.765 ns/op
# Warmup Iteration   2: 38094.955 ns/op
# Warmup Iteration   3: 31460.519 ns/op
# Warmup Iteration   4: 29290.695 ns/op
# Warmup Iteration   5: 29025.795 ns/op
Iteration   1: 29522.294 ns/op
Iteration   2: 29687.002 ns/op
Iteration   3: 29197.870 ns/op
Iteration   4: 28970.405 ns/op
Iteration   5: 29057.681 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  29287.050 ±(99.9%) 1180.788 ns/op [Average]
  (min, avg, max) = (28970.405, 29287.050, 29687.002), stdev = 306.647
  CI (99.9%): [28106.263, 30467.838] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 57.18% complete, ETA 01:00:14
# Fork: 1 of 1
# Warmup Iteration   1: 341775.860 ns/op
# Warmup Iteration   2: 103772.643 ns/op
# Warmup Iteration   3: 64973.841 ns/op
# Warmup Iteration   4: 61906.477 ns/op
# Warmup Iteration   5: 59800.152 ns/op
Iteration   1: 59244.011 ns/op
Iteration   2: 59205.789 ns/op
Iteration   3: 59262.554 ns/op
Iteration   4: 59913.007 ns/op
Iteration   5: 59187.323 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  59362.537 ±(99.9%) 1190.484 ns/op [Average]
  (min, avg, max) = (59187.323, 59362.537, 59913.007), stdev = 309.165
  CI (99.9%): [58172.052, 60553.021] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 57.44% complete, ETA 00:59:54
# Fork: 1 of 1
# Warmup Iteration   1: 2698068.919 ns/op
# Warmup Iteration   2: 703457.272 ns/op
# Warmup Iteration   3: 588976.989 ns/op
# Warmup Iteration   4: 574177.823 ns/op
# Warmup Iteration   5: 545118.632 ns/op
Iteration   1: 543358.371 ns/op
Iteration   2: 542349.144 ns/op
Iteration   3: 542417.217 ns/op
Iteration   4: 541474.358 ns/op
Iteration   5: 542797.469 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  542479.312 ±(99.9%) 2657.153 ns/op [Average]
  (min, avg, max) = (541474.358, 542479.312, 543358.371), stdev = 690.054
  CI (99.9%): [539822.159, 545136.464] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 57.69% complete, ETA 00:59:33
# Fork: 1 of 1
# Warmup Iteration   1: 368880.333 ns/op
# Warmup Iteration   2: 166688.645 ns/op
# Warmup Iteration   3: 134320.636 ns/op
# Warmup Iteration   4: 134497.432 ns/op
# Warmup Iteration   5: 129567.038 ns/op
Iteration   1: 134568.720 ns/op
Iteration   2: 130310.813 ns/op
Iteration   3: 129410.213 ns/op
Iteration   4: 129921.689 ns/op
Iteration   5: 129403.253 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  130722.938 ±(99.9%) 8407.002 ns/op [Average]
  (min, avg, max) = (129403.253, 130722.938, 134568.720), stdev = 2183.272
  CI (99.9%): [122315.936, 139129.939] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 57.95% complete, ETA 00:59:12
# Fork: 1 of 1
# Warmup Iteration   1: 557453.741 ns/op
# Warmup Iteration   2: 225566.989 ns/op
# Warmup Iteration   3: 182110.992 ns/op
# Warmup Iteration   4: 181524.942 ns/op
# Warmup Iteration   5: 179801.693 ns/op
Iteration   1: 177463.688 ns/op
Iteration   2: 176019.391 ns/op
Iteration   3: 175036.752 ns/op
Iteration   4: 175406.866 ns/op
Iteration   5: 175030.123 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  175791.364 ±(99.9%) 3920.018 ns/op [Average]
  (min, avg, max) = (175030.123, 175791.364, 177463.688), stdev = 1018.016
  CI (99.9%): [171871.346, 179711.382] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 58.21% complete, ETA 00:58:51
# Fork: 1 of 1
# Warmup Iteration   1: 890739.547 ns/op
# Warmup Iteration   2: 313307.795 ns/op
# Warmup Iteration   3: 242421.556 ns/op
# Warmup Iteration   4: 236022.718 ns/op
# Warmup Iteration   5: 233560.488 ns/op
Iteration   1: 231807.466 ns/op
Iteration   2: 229903.835 ns/op
Iteration   3: 230362.503 ns/op
Iteration   4: 228788.042 ns/op
Iteration   5: 228643.652 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  229901.100 ±(99.9%) 4971.362 ns/op [Average]
  (min, avg, max) = (228643.652, 229901.100, 231807.466), stdev = 1291.047
  CI (99.9%): [224929.738, 234872.461] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 58.46% complete, ETA 00:58:31
# Fork: 1 of 1
# Warmup Iteration   1: 1515387.384 ns/op
# Warmup Iteration   2: 413192.510 ns/op
# Warmup Iteration   3: 361613.116 ns/op
# Warmup Iteration   4: 348192.475 ns/op
# Warmup Iteration   5: 350224.921 ns/op
Iteration   1: 344060.712 ns/op
Iteration   2: 342337.558 ns/op
Iteration   3: 341194.779 ns/op
Iteration   4: 340616.658 ns/op
Iteration   5: 346456.280 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  342933.197 ±(99.9%) 9117.703 ns/op [Average]
  (min, avg, max) = (340616.658, 342933.197, 346456.280), stdev = 2367.838
  CI (99.9%): [333815.494, 352050.900] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 58.72% complete, ETA 00:58:10
# Fork: 1 of 1
# Warmup Iteration   1: 5802482.816 ns/op
# Warmup Iteration   2: 2323966.540 ns/op
# Warmup Iteration   3: 2074954.777 ns/op
# Warmup Iteration   4: 2051830.478 ns/op
# Warmup Iteration   5: 2051903.156 ns/op
Iteration   1: 2015989.211 ns/op
Iteration   2: 1993945.316 ns/op
Iteration   3: 2003717.699 ns/op
Iteration   4: 1982919.829 ns/op
Iteration   5: 1978358.685 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  1994986.148 ±(99.9%) 59045.596 ns/op [Average]
  (min, avg, max) = (1978358.685, 1994986.148, 2015989.211), stdev = 15333.954
  CI (99.9%): [1935940.551, 2054031.744] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 58.97% complete, ETA 00:57:49
# Fork: 1 of 1
# Warmup Iteration   1: 13437.389 ns/op
# Warmup Iteration   2: 5880.007 ns/op
# Warmup Iteration   3: 5237.044 ns/op
# Warmup Iteration   4: 5281.630 ns/op
# Warmup Iteration   5: 5230.178 ns/op
Iteration   1: 5226.384 ns/op
Iteration   2: 5225.902 ns/op
Iteration   3: 5208.698 ns/op
Iteration   4: 5222.478 ns/op
Iteration   5: 5242.199 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  5225.132 ±(99.9%) 45.989 ns/op [Average]
  (min, avg, max) = (5208.698, 5225.132, 5242.199), stdev = 11.943
  CI (99.9%): [5179.143, 5271.121] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 59.23% complete, ETA 00:57:28
# Fork: 1 of 1
# Warmup Iteration   1: 22739.348 ns/op
# Warmup Iteration   2: 10570.758 ns/op
# Warmup Iteration   3: 10223.404 ns/op
# Warmup Iteration   4: 9954.317 ns/op
# Warmup Iteration   5: 9822.183 ns/op
Iteration   1: 9812.027 ns/op
Iteration   2: 9827.649 ns/op
Iteration   3: 9806.585 ns/op
Iteration   4: 9897.715 ns/op
Iteration   5: 9799.798 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  9828.755 ±(99.9%) 153.623 ns/op [Average]
  (min, avg, max) = (9799.798, 9828.755, 9897.715), stdev = 39.895
  CI (99.9%): [9675.132, 9982.378] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 59.49% complete, ETA 00:57:07
# Fork: 1 of 1
# Warmup Iteration   1: 57929.992 ns/op
# Warmup Iteration   2: 18432.367 ns/op
# Warmup Iteration   3: 18845.467 ns/op
# Warmup Iteration   4: 17833.306 ns/op
# Warmup Iteration   5: 17650.240 ns/op
Iteration   1: 17038.157 ns/op
Iteration   2: 17011.864 ns/op
Iteration   3: 17024.571 ns/op
Iteration   4: 17024.798 ns/op
Iteration   5: 17091.372 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  17038.152 ±(99.9%) 120.024 ns/op [Average]
  (min, avg, max) = (17011.864, 17038.152, 17091.372), stdev = 31.170
  CI (99.9%): [16918.128, 17158.176] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 59.74% complete, ETA 00:56:46
# Fork: 1 of 1
# Warmup Iteration   1: 96280.689 ns/op
# Warmup Iteration   2: 34372.825 ns/op
# Warmup Iteration   3: 33110.574 ns/op
# Warmup Iteration   4: 32476.057 ns/op
# Warmup Iteration   5: 31418.368 ns/op
Iteration   1: 31968.419 ns/op
Iteration   2: 31374.596 ns/op
Iteration   3: 31434.790 ns/op
Iteration   4: 31412.146 ns/op
Iteration   5: 31647.870 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  31567.564 ±(99.9%) 955.228 ns/op [Average]
  (min, avg, max) = (31374.596, 31567.564, 31968.419), stdev = 248.070
  CI (99.9%): [30612.337, 32522.792] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 60.00% complete, ETA 00:56:25
# Fork: 1 of 1
# Warmup Iteration   1: 480958.562 ns/op
# Warmup Iteration   2: 355769.143 ns/op
# Warmup Iteration   3: 291019.416 ns/op
# Warmup Iteration   4: 281515.797 ns/op
# Warmup Iteration   5: 281908.186 ns/op
Iteration   1: 281049.743 ns/op
Iteration   2: 281885.141 ns/op
Iteration   3: 284095.165 ns/op
Iteration   4: 281449.176 ns/op
Iteration   5: 280999.919 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  281895.829 ±(99.9%) 4929.429 ns/op [Average]
  (min, avg, max) = (280999.919, 281895.829, 284095.165), stdev = 1280.157
  CI (99.9%): [276966.400, 286825.258] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 60.26% complete, ETA 00:56:05
# Fork: 1 of 1
# Warmup Iteration   1: 21172.465 ns/op
# Warmup Iteration   2: 12134.558 ns/op
# Warmup Iteration   3: 12855.224 ns/op
# Warmup Iteration   4: 12301.143 ns/op
# Warmup Iteration   5: 12701.892 ns/op
Iteration   1: 12584.788 ns/op
Iteration   2: 12489.408 ns/op
Iteration   3: 12465.616 ns/op
Iteration   4: 12556.807 ns/op
Iteration   5: 12416.344 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  12502.592 ±(99.9%) 263.108 ns/op [Average]
  (min, avg, max) = (12416.344, 12502.592, 12584.788), stdev = 68.328
  CI (99.9%): [12239.484, 12765.701] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 60.51% complete, ETA 00:55:44
# Fork: 1 of 1
# Warmup Iteration   1: 46246.537 ns/op
# Warmup Iteration   2: 23463.565 ns/op
# Warmup Iteration   3: 22106.740 ns/op
# Warmup Iteration   4: 22635.633 ns/op
# Warmup Iteration   5: 22815.636 ns/op
Iteration   1: 22201.643 ns/op
Iteration   2: 22087.439 ns/op
Iteration   3: 21874.199 ns/op
Iteration   4: 21858.302 ns/op
Iteration   5: 21689.478 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  21942.212 ±(99.9%) 779.545 ns/op [Average]
  (min, avg, max) = (21689.478, 21942.212, 22201.643), stdev = 202.445
  CI (99.9%): [21162.667, 22721.758] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 60.77% complete, ETA 00:55:23
# Fork: 1 of 1
# Warmup Iteration   1: 64381.988 ns/op
# Warmup Iteration   2: 36965.157 ns/op
# Warmup Iteration   3: 37663.780 ns/op
# Warmup Iteration   4: 37198.403 ns/op
# Warmup Iteration   5: 44243.118 ns/op
Iteration   1: 36429.494 ns/op
Iteration   2: 36264.291 ns/op
Iteration   3: 36334.034 ns/op
Iteration   4: 36502.333 ns/op
Iteration   5: 36389.842 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  36383.999 ±(99.9%) 349.399 ns/op [Average]
  (min, avg, max) = (36264.291, 36383.999, 36502.333), stdev = 90.738
  CI (99.9%): [36034.600, 36733.397] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 61.03% complete, ETA 00:55:02
# Fork: 1 of 1
# Warmup Iteration   1: 127365.354 ns/op
# Warmup Iteration   2: 71149.768 ns/op
# Warmup Iteration   3: 79414.628 ns/op
# Warmup Iteration   4: 81985.744 ns/op
# Warmup Iteration   5: 78862.629 ns/op
Iteration   1: 81750.666 ns/op
Iteration   2: 81526.524 ns/op
Iteration   3: 81563.200 ns/op
Iteration   4: 80736.625 ns/op
Iteration   5: 79977.147 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  81110.833 ±(99.9%) 2863.554 ns/op [Average]
  (min, avg, max) = (79977.147, 81110.833, 81750.666), stdev = 743.656
  CI (99.9%): [78247.278, 83974.387] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 61.28% complete, ETA 00:54:41
# Fork: 1 of 1
# Warmup Iteration   1: 1197710.935 ns/op
# Warmup Iteration   2: 746061.816 ns/op
# Warmup Iteration   3: 758447.124 ns/op
# Warmup Iteration   4: 725092.155 ns/op
# Warmup Iteration   5: 745140.364 ns/op
Iteration   1: 816165.651 ns/op
Iteration   2: 719254.608 ns/op
Iteration   3: 738416.972 ns/op
Iteration   4: 722169.442 ns/op
Iteration   5: 720827.669 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  743366.868 ±(99.9%) 159498.856 ns/op [Average]
  (min, avg, max) = (719254.608, 743366.868, 816165.651), stdev = 41421.346
  CI (99.9%): [583868.012, 902865.724] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 61.54% complete, ETA 00:54:20
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 61.79% complete, ETA 00:53:47
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 62.05% complete, ETA 00:53:14
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 62.31% complete, ETA 00:52:41
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 62.56% complete, ETA 00:52:08
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 62.82% complete, ETA 00:51:36
# Fork: 1 of 1
# Warmup Iteration   1: 187503.903 ns/op
# Warmup Iteration   2: 64299.391 ns/op
# Warmup Iteration   3: 48219.553 ns/op
# Warmup Iteration   4: 44239.771 ns/op
# Warmup Iteration   5: 44263.051 ns/op
Iteration   1: 44220.993 ns/op
Iteration   2: 44592.517 ns/op
Iteration   3: 44059.072 ns/op
Iteration   4: 44377.844 ns/op
Iteration   5: 43993.567 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  44248.798 ±(99.9%) 936.719 ns/op [Average]
  (min, avg, max) = (43993.567, 44248.798, 44592.517), stdev = 243.263
  CI (99.9%): [43312.079, 45185.518] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 63.08% complete, ETA 00:51:16
# Fork: 1 of 1
# Warmup Iteration   1: 334889.368 ns/op
# Warmup Iteration   2: 119615.957 ns/op
# Warmup Iteration   3: 86002.357 ns/op
# Warmup Iteration   4: 78069.292 ns/op
# Warmup Iteration   5: 77763.686 ns/op
Iteration   1: 77592.938 ns/op
Iteration   2: 77843.366 ns/op
Iteration   3: 77446.205 ns/op
Iteration   4: 77607.157 ns/op
Iteration   5: 77369.877 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  77571.909 ±(99.9%) 699.483 ns/op [Average]
  (min, avg, max) = (77369.877, 77571.909, 77843.366), stdev = 181.653
  CI (99.9%): [76872.426, 78271.391] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 63.33% complete, ETA 00:50:55
# Fork: 1 of 1
# Warmup Iteration   1: 696834.679 ns/op
# Warmup Iteration   2: 266878.519 ns/op
# Warmup Iteration   3: 197916.117 ns/op
# Warmup Iteration   4: 177619.923 ns/op
# Warmup Iteration   5: 179299.530 ns/op
Iteration   1: 178098.546 ns/op
Iteration   2: 177148.240 ns/op
Iteration   3: 178472.595 ns/op
Iteration   4: 176609.806 ns/op
Iteration   5: 176949.650 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  177455.767 ±(99.9%) 3052.398 ns/op [Average]
  (min, avg, max) = (176609.806, 177455.767, 178472.595), stdev = 792.698
  CI (99.9%): [174403.369, 180508.165] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 63.59% complete, ETA 00:50:35
# Fork: 1 of 1
# Warmup Iteration   1: 1895648.348 ns/op
# Warmup Iteration   2: 556096.495 ns/op
# Warmup Iteration   3: 474509.594 ns/op
# Warmup Iteration   4: 419203.588 ns/op
# Warmup Iteration   5: 416996.917 ns/op
Iteration   1: 413177.583 ns/op
Iteration   2: 408301.120 ns/op
Iteration   3: 408304.695 ns/op
Iteration   4: 414463.264 ns/op
Iteration   5: 408873.694 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  410624.071 ±(99.9%) 11406.498 ns/op [Average]
  (min, avg, max) = (408301.120, 410624.071, 414463.264), stdev = 2962.231
  CI (99.9%): [399217.573, 422030.569] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 63.85% complete, ETA 00:50:15
# Fork: 1 of 1
# Warmup Iteration   1: 13324302.545 ns/op
# Warmup Iteration   2: 4025065.682 ns/op
# Warmup Iteration   3: 3411705.582 ns/op
# Warmup Iteration   4: 3254500.634 ns/op
# Warmup Iteration   5: 3719609.126 ns/op
Iteration   1: 3263306.791 ns/op
Iteration   2: 3323871.847 ns/op
Iteration   3: 3217663.558 ns/op
Iteration   4: 3188574.227 ns/op
Iteration   5: 3228520.963 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  3244387.477 ±(99.9%) 199684.185 ns/op [Average]
  (min, avg, max) = (3188574.227, 3244387.477, 3323871.847), stdev = 51857.349
  CI (99.9%): [3044703.292, 3444071.662] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 64.10% complete, ETA 00:49:54
# Fork: 1 of 1
# Warmup Iteration   1: 107409.507 ns/op
# Warmup Iteration   2: 36252.019 ns/op
# Warmup Iteration   3: 31703.184 ns/op
# Warmup Iteration   4: 30707.855 ns/op
# Warmup Iteration   5: 30069.140 ns/op
Iteration   1: 30082.654 ns/op
Iteration   2: 30101.937 ns/op
Iteration   3: 30023.108 ns/op
Iteration   4: 30132.208 ns/op
Iteration   5: 30118.169 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  30091.615 ±(99.9%) 163.742 ns/op [Average]
  (min, avg, max) = (30023.108, 30091.615, 30132.208), stdev = 42.523
  CI (99.9%): [29927.874, 30255.357] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 64.36% complete, ETA 00:49:34
# Fork: 1 of 1
# Warmup Iteration   1: 218888.188 ns/op
# Warmup Iteration   2: 67985.720 ns/op
# Warmup Iteration   3: 61145.860 ns/op
# Warmup Iteration   4: 57697.697 ns/op
# Warmup Iteration   5: 56004.913 ns/op
Iteration   1: 55790.885 ns/op
Iteration   2: 55829.269 ns/op
Iteration   3: 55797.452 ns/op
Iteration   4: 56438.795 ns/op
Iteration   5: 55824.672 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  55936.215 ±(99.9%) 1083.739 ns/op [Average]
  (min, avg, max) = (55790.885, 55936.215, 56438.795), stdev = 281.444
  CI (99.9%): [54852.476, 57019.954] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 64.62% complete, ETA 00:49:13
# Fork: 1 of 1
# Warmup Iteration   1: 418493.662 ns/op
# Warmup Iteration   2: 139368.103 ns/op
# Warmup Iteration   3: 126089.300 ns/op
# Warmup Iteration   4: 128594.501 ns/op
# Warmup Iteration   5: 123134.230 ns/op
Iteration   1: 122861.852 ns/op
Iteration   2: 122609.191 ns/op
Iteration   3: 122177.728 ns/op
Iteration   4: 122569.480 ns/op
Iteration   5: 122499.054 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  122543.461 ±(99.9%) 947.334 ns/op [Average]
  (min, avg, max) = (122177.728, 122543.461, 122861.852), stdev = 246.020
  CI (99.9%): [121596.127, 123490.795] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 64.87% complete, ETA 00:48:53
# Fork: 1 of 1
# Warmup Iteration   1: 781954.708 ns/op
# Warmup Iteration   2: 333051.425 ns/op
# Warmup Iteration   3: 309020.480 ns/op
# Warmup Iteration   4: 300619.856 ns/op
# Warmup Iteration   5: 293849.316 ns/op
Iteration   1: 293680.598 ns/op
Iteration   2: 293571.153 ns/op
Iteration   3: 292572.050 ns/op
Iteration   4: 292913.179 ns/op
Iteration   5: 292075.624 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  292962.521 ±(99.9%) 2602.788 ns/op [Average]
  (min, avg, max) = (292075.624, 292962.521, 293680.598), stdev = 675.936
  CI (99.9%): [290359.733, 295565.309] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 65.13% complete, ETA 00:48:32
# Fork: 1 of 1
# Warmup Iteration   1: 5609479.613 ns/op
# Warmup Iteration   2: 2426310.506 ns/op
# Warmup Iteration   3: 2263820.881 ns/op
# Warmup Iteration   4: 2202586.463 ns/op
# Warmup Iteration   5: 2173043.648 ns/op
Iteration   1: 2184043.054 ns/op
Iteration   2: 2142246.591 ns/op
Iteration   3: 2165153.457 ns/op
Iteration   4: 2155065.983 ns/op
Iteration   5: 2146230.106 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  2158547.838 ±(99.9%) 64526.175 ns/op [Average]
  (min, avg, max) = (2142246.591, 2158547.838, 2184043.054), stdev = 16757.243
  CI (99.9%): [2094021.664, 2223074.013] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 65.38% complete, ETA 00:48:12
# Fork: 1 of 1
# Warmup Iteration   1: 48064.813 ns/op
# Warmup Iteration   2: 27076.282 ns/op
# Warmup Iteration   3: 24522.373 ns/op
# Warmup Iteration   4: 24376.267 ns/op
# Warmup Iteration   5: 23444.880 ns/op
Iteration   1: 23251.789 ns/op
Iteration   2: 23284.973 ns/op
Iteration   3: 23259.476 ns/op
Iteration   4: 23280.655 ns/op
Iteration   5: 23286.122 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  23272.603 ±(99.9%) 61.070 ns/op [Average]
  (min, avg, max) = (23251.789, 23272.603, 23286.122), stdev = 15.860
  CI (99.9%): [23211.533, 23333.673] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 65.64% complete, ETA 00:47:51
# Fork: 1 of 1
# Warmup Iteration   1: 96618.970 ns/op
# Warmup Iteration   2: 50288.490 ns/op
# Warmup Iteration   3: 45236.116 ns/op
# Warmup Iteration   4: 42786.774 ns/op
# Warmup Iteration   5: 42462.445 ns/op
Iteration   1: 42510.624 ns/op
Iteration   2: 42904.360 ns/op
Iteration   3: 42449.989 ns/op
Iteration   4: 42413.541 ns/op
Iteration   5: 42963.806 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  42648.464 ±(99.9%) 1016.060 ns/op [Average]
  (min, avg, max) = (42413.541, 42648.464, 42963.806), stdev = 263.868
  CI (99.9%): [41632.404, 43664.524] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 65.90% complete, ETA 00:47:30
# Fork: 1 of 1
# Warmup Iteration   1: 243774.360 ns/op
# Warmup Iteration   2: 110041.254 ns/op
# Warmup Iteration   3: 102935.227 ns/op
# Warmup Iteration   4: 98521.529 ns/op
# Warmup Iteration   5: 98330.489 ns/op
Iteration   1: 97640.306 ns/op
Iteration   2: 98471.944 ns/op
Iteration   3: 97844.285 ns/op
Iteration   4: 97325.987 ns/op
Iteration   5: 97269.299 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  97710.364 ±(99.9%) 1871.757 ns/op [Average]
  (min, avg, max) = (97269.299, 97710.364, 98471.944), stdev = 486.089
  CI (99.9%): [95838.607, 99582.121] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 66.15% complete, ETA 00:47:10
# Fork: 1 of 1
# Warmup Iteration   1: 693450.214 ns/op
# Warmup Iteration   2: 264562.860 ns/op
# Warmup Iteration   3: 241430.271 ns/op
# Warmup Iteration   4: 233607.420 ns/op
# Warmup Iteration   5: 237041.069 ns/op
Iteration   1: 230942.031 ns/op
Iteration   2: 232481.883 ns/op
Iteration   3: 230803.217 ns/op
Iteration   4: 229547.169 ns/op
Iteration   5: 230307.985 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  230816.457 ±(99.9%) 4155.852 ns/op [Average]
  (min, avg, max) = (229547.169, 230816.457, 232481.883), stdev = 1079.262
  CI (99.9%): [226660.605, 234972.309] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 66.41% complete, ETA 00:46:49
# Fork: 1 of 1
# Warmup Iteration   1: 4915894.619 ns/op
# Warmup Iteration   2: 2128544.904 ns/op
# Warmup Iteration   3: 2089918.261 ns/op
# Warmup Iteration   4: 2066770.980 ns/op
# Warmup Iteration   5: 1994552.498 ns/op
Iteration   1: 1997972.958 ns/op
Iteration   2: 1989641.252 ns/op
Iteration   3: 1987210.200 ns/op
Iteration   4: 2001337.543 ns/op
Iteration   5: 1963871.133 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  1988006.617 ±(99.9%) 56555.639 ns/op [Average]
  (min, avg, max) = (1963871.133, 1988006.617, 2001337.543), stdev = 14687.320
  CI (99.9%): [1931450.979, 2044562.256] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 66.67% complete, ETA 00:46:28
# Fork: 1 of 1
# Warmup Iteration   1: 17937.588 ns/op
# Warmup Iteration   2: 9486.548 ns/op
# Warmup Iteration   3: 9070.719 ns/op
# Warmup Iteration   4: 9017.317 ns/op
# Warmup Iteration   5: 9022.367 ns/op
Iteration   1: 8820.238 ns/op
Iteration   2: 8776.282 ns/op
Iteration   3: 8807.378 ns/op
Iteration   4: 8828.024 ns/op
Iteration   5: 8832.503 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8812.885 ±(99.9%) 86.921 ns/op [Average]
  (min, avg, max) = (8776.282, 8812.885, 8832.503), stdev = 22.573
  CI (99.9%): [8725.963, 8899.806] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 66.92% complete, ETA 00:46:08
# Fork: 1 of 1
# Warmup Iteration   1: 35628.192 ns/op
# Warmup Iteration   2: 17855.064 ns/op
# Warmup Iteration   3: 16517.246 ns/op
# Warmup Iteration   4: 16328.485 ns/op
# Warmup Iteration   5: 16280.920 ns/op
Iteration   1: 16099.346 ns/op
Iteration   2: 16056.605 ns/op
Iteration   3: 15982.625 ns/op
Iteration   4: 15916.018 ns/op
Iteration   5: 15893.230 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  15989.565 ±(99.9%) 340.537 ns/op [Average]
  (min, avg, max) = (15893.230, 15989.565, 16099.346), stdev = 88.436
  CI (99.9%): [15649.028, 16330.101] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 67.18% complete, ETA 00:45:47
# Fork: 1 of 1
# Warmup Iteration   1: 62072.379 ns/op
# Warmup Iteration   2: 31859.622 ns/op
# Warmup Iteration   3: 31579.354 ns/op
# Warmup Iteration   4: 30662.717 ns/op
# Warmup Iteration   5: 30180.935 ns/op
Iteration   1: 30661.651 ns/op
Iteration   2: 30048.553 ns/op
Iteration   3: 29961.980 ns/op
Iteration   4: 30031.020 ns/op
Iteration   5: 30062.490 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  30153.139 ±(99.9%) 1104.663 ns/op [Average]
  (min, avg, max) = (29961.980, 30153.139, 30661.651), stdev = 286.877
  CI (99.9%): [29048.476, 31257.802] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 67.44% complete, ETA 00:45:26
# Fork: 1 of 1
# Warmup Iteration   1: 152981.002 ns/op
# Warmup Iteration   2: 63794.509 ns/op
# Warmup Iteration   3: 65720.252 ns/op
# Warmup Iteration   4: 66330.565 ns/op
# Warmup Iteration   5: 62347.526 ns/op
Iteration   1: 61476.166 ns/op
Iteration   2: 60603.643 ns/op
Iteration   3: 60481.383 ns/op
Iteration   4: 60594.494 ns/op
Iteration   5: 60925.741 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  60816.285 ±(99.9%) 1557.001 ns/op [Average]
  (min, avg, max) = (60481.383, 60816.285, 61476.166), stdev = 404.348
  CI (99.9%): [59259.284, 62373.286] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 67.69% complete, ETA 00:45:05
# Fork: 1 of 1
# Warmup Iteration   1: 1287522.311 ns/op
# Warmup Iteration   2: 505223.095 ns/op
# Warmup Iteration   3: 506704.096 ns/op
# Warmup Iteration   4: 479503.641 ns/op
# Warmup Iteration   5: 475161.422 ns/op
Iteration   1: 476755.533 ns/op
Iteration   2: 467495.944 ns/op
Iteration   3: 468109.849 ns/op
Iteration   4: 468914.679 ns/op
Iteration   5: 468922.207 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  470039.642 ±(99.9%) 14639.018 ns/op [Average]
  (min, avg, max) = (467495.944, 470039.642, 476755.533), stdev = 3801.707
  CI (99.9%): [455400.624, 484678.661] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 67.95% complete, ETA 00:44:45
# Fork: 1 of 1
# Warmup Iteration   1: 18019.495 ns/op
# Warmup Iteration   2: 8294.817 ns/op
# Warmup Iteration   3: 7946.819 ns/op
# Warmup Iteration   4: 7981.827 ns/op
# Warmup Iteration   5: 7912.115 ns/op
Iteration   1: 7738.556 ns/op
Iteration   2: 7711.229 ns/op
Iteration   3: 7705.252 ns/op
Iteration   4: 7691.327 ns/op
Iteration   5: 7712.707 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  7711.814 ±(99.9%) 66.111 ns/op [Average]
  (min, avg, max) = (7691.327, 7711.814, 7738.556), stdev = 17.169
  CI (99.9%): [7645.703, 7777.925] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 68.21% complete, ETA 00:44:24
# Fork: 1 of 1
# Warmup Iteration   1: 32274.545 ns/op
# Warmup Iteration   2: 14503.068 ns/op
# Warmup Iteration   3: 13918.404 ns/op
# Warmup Iteration   4: 13814.416 ns/op
# Warmup Iteration   5: 13893.122 ns/op
Iteration   1: 13662.135 ns/op
Iteration   2: 13577.524 ns/op
Iteration   3: 13532.494 ns/op
Iteration   4: 13703.381 ns/op
Iteration   5: 13590.879 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  13613.283 ±(99.9%) 264.069 ns/op [Average]
  (min, avg, max) = (13532.494, 13613.283, 13703.381), stdev = 68.578
  CI (99.9%): [13349.214, 13877.352] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 68.46% complete, ETA 00:44:03
# Fork: 1 of 1
# Warmup Iteration   1: 40476.165 ns/op
# Warmup Iteration   2: 25007.230 ns/op
# Warmup Iteration   3: 24929.496 ns/op
# Warmup Iteration   4: 24338.372 ns/op
# Warmup Iteration   5: 24380.186 ns/op
Iteration   1: 24572.505 ns/op
Iteration   2: 24049.618 ns/op
Iteration   3: 24378.173 ns/op
Iteration   4: 23996.127 ns/op
Iteration   5: 24160.671 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  24231.419 ±(99.9%) 925.949 ns/op [Average]
  (min, avg, max) = (23996.127, 24231.419, 24572.505), stdev = 240.466
  CI (99.9%): [23305.470, 25157.368] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 68.72% complete, ETA 00:43:42
# Fork: 1 of 1
# Warmup Iteration   1: 119671.487 ns/op
# Warmup Iteration   2: 53506.912 ns/op
# Warmup Iteration   3: 53194.194 ns/op
# Warmup Iteration   4: 52160.009 ns/op
# Warmup Iteration   5: 52135.669 ns/op
Iteration   1: 51719.310 ns/op
Iteration   2: 51777.814 ns/op
Iteration   3: 51892.710 ns/op
Iteration   4: 51370.952 ns/op
Iteration   5: 51128.099 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  51577.777 ±(99.9%) 1224.080 ns/op [Average]
  (min, avg, max) = (51128.099, 51577.777, 51892.710), stdev = 317.890
  CI (99.9%): [50353.697, 52801.857] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 68.97% complete, ETA 00:43:21
# Fork: 1 of 1
# Warmup Iteration   1: 746346.619 ns/op
# Warmup Iteration   2: 440385.541 ns/op
# Warmup Iteration   3: 404698.000 ns/op
# Warmup Iteration   4: 405533.843 ns/op
# Warmup Iteration   5: 403814.971 ns/op
Iteration   1: 403059.698 ns/op
Iteration   2: 391357.120 ns/op
Iteration   3: 391216.958 ns/op
Iteration   4: 391591.493 ns/op
Iteration   5: 393080.309 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  394061.116 ±(99.9%) 19581.228 ns/op [Average]
  (min, avg, max) = (391216.958, 394061.116, 403059.698), stdev = 5085.183
  CI (99.9%): [374479.887, 413642.344] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 69.23% complete, ETA 00:43:00
# Fork: 1 of 1
# Warmup Iteration   1: 16480.219 ns/op
# Warmup Iteration   2: 8855.091 ns/op
# Warmup Iteration   3: 8661.416 ns/op
# Warmup Iteration   4: 8658.538 ns/op
# Warmup Iteration   5: 8597.190 ns/op
Iteration   1: 8661.673 ns/op
Iteration   2: 8658.824 ns/op
Iteration   3: 8615.097 ns/op
Iteration   4: 8703.795 ns/op
Iteration   5: 8543.378 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8636.553 ±(99.9%) 234.150 ns/op [Average]
  (min, avg, max) = (8543.378, 8636.553, 8703.795), stdev = 60.808
  CI (99.9%): [8402.403, 8870.704] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 69.49% complete, ETA 00:42:40
# Fork: 1 of 1
# Warmup Iteration   1: 40661.236 ns/op
# Warmup Iteration   2: 14819.250 ns/op
# Warmup Iteration   3: 15068.406 ns/op
# Warmup Iteration   4: 14896.510 ns/op
# Warmup Iteration   5: 13913.639 ns/op
Iteration   1: 14070.809 ns/op
Iteration   2: 14210.256 ns/op
Iteration   3: 13945.641 ns/op
Iteration   4: 13939.337 ns/op
Iteration   5: 13993.689 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  14031.946 ±(99.9%) 433.917 ns/op [Average]
  (min, avg, max) = (13939.337, 14031.946, 14210.256), stdev = 112.687
  CI (99.9%): [13598.030, 14465.863] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 69.74% complete, ETA 00:42:19
# Fork: 1 of 1
# Warmup Iteration   1: 64303.399 ns/op
# Warmup Iteration   2: 26794.009 ns/op
# Warmup Iteration   3: 26779.368 ns/op
# Warmup Iteration   4: 25520.154 ns/op
# Warmup Iteration   5: 25574.498 ns/op
Iteration   1: 25204.782 ns/op
Iteration   2: 25078.644 ns/op
Iteration   3: 25007.196 ns/op
Iteration   4: 25067.537 ns/op
Iteration   5: 25372.808 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  25146.193 ±(99.9%) 560.851 ns/op [Average]
  (min, avg, max) = (25007.196, 25146.193, 25372.808), stdev = 145.651
  CI (99.9%): [24585.343, 25707.044] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 70.00% complete, ETA 00:41:58
# Fork: 1 of 1
# Warmup Iteration   1: 121466.499 ns/op
# Warmup Iteration   2: 49587.219 ns/op
# Warmup Iteration   3: 48818.885 ns/op
# Warmup Iteration   4: 48161.851 ns/op
# Warmup Iteration   5: 47719.659 ns/op
Iteration   1: 47486.341 ns/op
Iteration   2: 47250.104 ns/op
Iteration   3: 47432.289 ns/op
Iteration   4: 47015.698 ns/op
Iteration   5: 47424.822 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  47321.850 ±(99.9%) 742.520 ns/op [Average]
  (min, avg, max) = (47015.698, 47321.850, 47486.341), stdev = 192.830
  CI (99.9%): [46579.330, 48064.371] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 70.26% complete, ETA 00:41:37
# Fork: 1 of 1
# Warmup Iteration   1: 807495.800 ns/op
# Warmup Iteration   2: 370572.722 ns/op
# Warmup Iteration   3: 350984.272 ns/op
# Warmup Iteration   4: 349301.675 ns/op
# Warmup Iteration   5: 373064.121 ns/op
Iteration   1: 346872.166 ns/op
Iteration   2: 341160.282 ns/op
Iteration   3: 337894.876 ns/op
Iteration   4: 337093.328 ns/op
Iteration   5: 342918.462 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  341187.823 ±(99.9%) 15271.579 ns/op [Average]
  (min, avg, max) = (337093.328, 341187.823, 346872.166), stdev = 3965.981
  CI (99.9%): [325916.243, 356459.402] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 70.51% complete, ETA 00:41:16
# Fork: 1 of 1
# Warmup Iteration   1: 13514.058 ns/op
# Warmup Iteration   2: 3465.538 ns/op
# Warmup Iteration   3: 3081.908 ns/op
# Warmup Iteration   4: 3043.508 ns/op
# Warmup Iteration   5: 3036.510 ns/op
Iteration   1: 3077.156 ns/op
Iteration   2: 3032.143 ns/op
Iteration   3: 3034.572 ns/op
Iteration   4: 3151.323 ns/op
Iteration   5: 3021.716 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  3063.382 ±(99.9%) 206.156 ns/op [Average]
  (min, avg, max) = (3021.716, 3063.382, 3151.323), stdev = 53.538
  CI (99.9%): [2857.225, 3269.538] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 70.77% complete, ETA 00:40:55
# Fork: 1 of 1
# Warmup Iteration   1: 15616.696 ns/op
# Warmup Iteration   2: 6532.226 ns/op
# Warmup Iteration   3: 5642.450 ns/op
# Warmup Iteration   4: 5623.445 ns/op
# Warmup Iteration   5: 5636.281 ns/op
Iteration   1: 5667.481 ns/op
Iteration   2: 5619.017 ns/op
Iteration   3: 5675.504 ns/op
Iteration   4: 5606.044 ns/op
Iteration   5: 5679.124 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  5649.434 ±(99.9%) 131.918 ns/op [Average]
  (min, avg, max) = (5606.044, 5649.434, 5679.124), stdev = 34.259
  CI (99.9%): [5517.516, 5781.352] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 71.03% complete, ETA 00:40:34
# Fork: 1 of 1
# Warmup Iteration   1: 30959.051 ns/op
# Warmup Iteration   2: 11738.861 ns/op
# Warmup Iteration   3: 11151.016 ns/op
# Warmup Iteration   4: 10766.138 ns/op
# Warmup Iteration   5: 10789.293 ns/op
Iteration   1: 11019.816 ns/op
Iteration   2: 10755.911 ns/op
Iteration   3: 10826.873 ns/op
Iteration   4: 10879.634 ns/op
Iteration   5: 10759.041 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  10848.255 ±(99.9%) 419.002 ns/op [Average]
  (min, avg, max) = (10755.911, 10848.255, 11019.816), stdev = 108.813
  CI (99.9%): [10429.253, 11267.257] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 71.28% complete, ETA 00:40:13
# Fork: 1 of 1
# Warmup Iteration   1: 78342.826 ns/op
# Warmup Iteration   2: 23377.031 ns/op
# Warmup Iteration   3: 22361.379 ns/op
# Warmup Iteration   4: 21506.849 ns/op
# Warmup Iteration   5: 21241.498 ns/op
Iteration   1: 21154.746 ns/op
Iteration   2: 21125.008 ns/op
Iteration   3: 21122.585 ns/op
Iteration   4: 21129.995 ns/op
Iteration   5: 21184.083 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  21143.284 ±(99.9%) 100.688 ns/op [Average]
  (min, avg, max) = (21122.585, 21143.284, 21184.083), stdev = 26.148
  CI (99.9%): [21042.595, 21243.972] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 71.54% complete, ETA 00:39:52
# Fork: 1 of 1
# Warmup Iteration   1: 579673.493 ns/op
# Warmup Iteration   2: 247101.954 ns/op
# Warmup Iteration   3: 192157.270 ns/op
# Warmup Iteration   4: 190451.286 ns/op
# Warmup Iteration   5: 184525.293 ns/op
Iteration   1: 183912.614 ns/op
Iteration   2: 184038.363 ns/op
Iteration   3: 183875.393 ns/op
Iteration   4: 183852.588 ns/op
Iteration   5: 183886.252 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  183913.042 ±(99.9%) 282.277 ns/op [Average]
  (min, avg, max) = (183852.588, 183913.042, 184038.363), stdev = 73.306
  CI (99.9%): [183630.765, 184195.319] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 71.79% complete, ETA 00:39:31
# Fork: 1 of 1
# Warmup Iteration   1: 13915.305 ns/op
# Warmup Iteration   2: 5540.385 ns/op
# Warmup Iteration   3: 4878.765 ns/op
# Warmup Iteration   4: 4776.600 ns/op
# Warmup Iteration   5: 4876.111 ns/op
Iteration   1: 4652.913 ns/op
Iteration   2: 4660.254 ns/op
Iteration   3: 4620.226 ns/op
Iteration   4: 4623.323 ns/op
Iteration   5: 4621.494 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  4635.642 ±(99.9%) 74.408 ns/op [Average]
  (min, avg, max) = (4620.226, 4635.642, 4660.254), stdev = 19.323
  CI (99.9%): [4561.234, 4710.050] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 72.05% complete, ETA 00:39:10
# Fork: 1 of 1
# Warmup Iteration   1: 22865.488 ns/op
# Warmup Iteration   2: 9069.344 ns/op
# Warmup Iteration   3: 8896.615 ns/op
# Warmup Iteration   4: 8470.353 ns/op
# Warmup Iteration   5: 8443.631 ns/op
Iteration   1: 8462.168 ns/op
Iteration   2: 8484.713 ns/op
Iteration   3: 8444.329 ns/op
Iteration   4: 8432.910 ns/op
Iteration   5: 8452.380 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8455.300 ±(99.9%) 75.617 ns/op [Average]
  (min, avg, max) = (8432.910, 8455.300, 8484.713), stdev = 19.637
  CI (99.9%): [8379.683, 8530.917] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 72.31% complete, ETA 00:38:49
# Fork: 1 of 1
# Warmup Iteration   1: 31628.009 ns/op
# Warmup Iteration   2: 17093.004 ns/op
# Warmup Iteration   3: 15287.096 ns/op
# Warmup Iteration   4: 15270.526 ns/op
# Warmup Iteration   5: 14944.069 ns/op
Iteration   1: 14910.261 ns/op
Iteration   2: 14916.025 ns/op
Iteration   3: 15039.307 ns/op
Iteration   4: 14895.733 ns/op
Iteration   5: 14998.893 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  14952.044 ±(99.9%) 243.717 ns/op [Average]
  (min, avg, max) = (14895.733, 14952.044, 15039.307), stdev = 63.292
  CI (99.9%): [14708.327, 15195.761] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 72.56% complete, ETA 00:38:28
# Fork: 1 of 1
# Warmup Iteration   1: 72519.877 ns/op
# Warmup Iteration   2: 32720.372 ns/op
# Warmup Iteration   3: 31195.768 ns/op
# Warmup Iteration   4: 29829.581 ns/op
# Warmup Iteration   5: 29782.639 ns/op
Iteration   1: 29646.666 ns/op
Iteration   2: 29656.618 ns/op
Iteration   3: 29644.598 ns/op
Iteration   4: 29673.942 ns/op
Iteration   5: 29970.835 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  29718.532 ±(99.9%) 544.935 ns/op [Average]
  (min, avg, max) = (29644.598, 29718.532, 29970.835), stdev = 141.518
  CI (99.9%): [29173.597, 30263.466] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 72.82% complete, ETA 00:38:07
# Fork: 1 of 1
# Warmup Iteration   1: 485696.729 ns/op
# Warmup Iteration   2: 296372.671 ns/op
# Warmup Iteration   3: 264136.044 ns/op
# Warmup Iteration   4: 265079.245 ns/op
# Warmup Iteration   5: 263036.750 ns/op
Iteration   1: 262844.714 ns/op
Iteration   2: 264296.100 ns/op
Iteration   3: 272075.216 ns/op
Iteration   4: 262511.768 ns/op
Iteration   5: 262374.594 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  264820.478 ±(99.9%) 15890.886 ns/op [Average]
  (min, avg, max) = (262374.594, 264820.478, 272075.216), stdev = 4126.813
  CI (99.9%): [248929.592, 280711.365] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 73.08% complete, ETA 00:37:46
# Fork: 1 of 1
# Warmup Iteration   1: 21674.450 ns/op
# Warmup Iteration   2: 7271.313 ns/op
# Warmup Iteration   3: 5128.395 ns/op
# Warmup Iteration   4: 4420.635 ns/op
# Warmup Iteration   5: 4190.865 ns/op
Iteration   1: 4187.501 ns/op
Iteration   2: 4232.268 ns/op
Iteration   3: 4186.066 ns/op
Iteration   4: 4182.806 ns/op
Iteration   5: 4174.299 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  4192.588 ±(99.9%) 87.663 ns/op [Average]
  (min, avg, max) = (4174.299, 4192.588, 4232.268), stdev = 22.766
  CI (99.9%): [4104.925, 4280.251] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 73.33% complete, ETA 00:37:25
# Fork: 1 of 1
# Warmup Iteration   1: 19924.299 ns/op
# Warmup Iteration   2: 9865.486 ns/op
# Warmup Iteration   3: 7900.618 ns/op
# Warmup Iteration   4: 7680.158 ns/op
# Warmup Iteration   5: 7489.683 ns/op
Iteration   1: 7489.161 ns/op
Iteration   2: 7456.933 ns/op
Iteration   3: 7446.163 ns/op
Iteration   4: 7565.670 ns/op
Iteration   5: 7468.816 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  7485.348 ±(99.9%) 183.486 ns/op [Average]
  (min, avg, max) = (7446.163, 7485.348, 7565.670), stdev = 47.651
  CI (99.9%): [7301.863, 7668.834] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 73.59% complete, ETA 00:37:04
# Fork: 1 of 1
# Warmup Iteration   1: 42941.126 ns/op
# Warmup Iteration   2: 17935.670 ns/op
# Warmup Iteration   3: 14647.391 ns/op
# Warmup Iteration   4: 13209.899 ns/op
# Warmup Iteration   5: 12956.503 ns/op
Iteration   1: 12821.657 ns/op
Iteration   2: 12822.463 ns/op
Iteration   3: 12927.124 ns/op
Iteration   4: 12792.336 ns/op
Iteration   5: 12807.839 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  12834.284 ±(99.9%) 205.365 ns/op [Average]
  (min, avg, max) = (12792.336, 12834.284, 12927.124), stdev = 53.333
  CI (99.9%): [12628.919, 13039.649] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 73.85% complete, ETA 00:36:42
# Fork: 1 of 1
# Warmup Iteration   1: 72715.855 ns/op
# Warmup Iteration   2: 31132.639 ns/op
# Warmup Iteration   3: 25910.320 ns/op
# Warmup Iteration   4: 24332.465 ns/op
# Warmup Iteration   5: 24201.824 ns/op
Iteration   1: 24771.267 ns/op
Iteration   2: 25460.219 ns/op
Iteration   3: 24171.257 ns/op
Iteration   4: 24181.577 ns/op
Iteration   5: 24180.428 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  24552.950 ±(99.9%) 2189.438 ns/op [Average]
  (min, avg, max) = (24171.257, 24552.950, 25460.219), stdev = 568.590
  CI (99.9%): [22363.512, 26742.387] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 74.10% complete, ETA 00:36:21
# Fork: 1 of 1
# Warmup Iteration   1: 468816.837 ns/op
# Warmup Iteration   2: 303132.775 ns/op
# Warmup Iteration   3: 228704.029 ns/op
# Warmup Iteration   4: 223785.216 ns/op
# Warmup Iteration   5: 222964.703 ns/op
Iteration   1: 223478.303 ns/op
Iteration   2: 222588.424 ns/op
Iteration   3: 222683.351 ns/op
Iteration   4: 221672.597 ns/op
Iteration   5: 221428.764 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  222370.288 ±(99.9%) 3190.769 ns/op [Average]
  (min, avg, max) = (221428.764, 222370.288, 223478.303), stdev = 828.632
  CI (99.9%): [219179.519, 225561.056] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 74.36% complete, ETA 00:36:00
# Fork: 1 of 1
# Warmup Iteration   1: 279817.892 ns/op
# Warmup Iteration   2: 120005.519 ns/op
# Warmup Iteration   3: 102932.185 ns/op
# Warmup Iteration   4: 101552.830 ns/op
# Warmup Iteration   5: 103601.819 ns/op
Iteration   1: 101603.492 ns/op
Iteration   2: 100873.547 ns/op
Iteration   3: 99282.438 ns/op
Iteration   4: 99296.052 ns/op
Iteration   5: 99338.449 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  100078.796 ±(99.9%) 4196.723 ns/op [Average]
  (min, avg, max) = (99282.438, 100078.796, 101603.492), stdev = 1089.876
  CI (99.9%): [95882.072, 104275.519] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 74.62% complete, ETA 00:35:39
# Fork: 1 of 1
# Warmup Iteration   1: 380885.118 ns/op
# Warmup Iteration   2: 151112.553 ns/op
# Warmup Iteration   3: 139507.979 ns/op
# Warmup Iteration   4: 138902.968 ns/op
# Warmup Iteration   5: 136106.947 ns/op
Iteration   1: 137313.183 ns/op
Iteration   2: 136107.249 ns/op
Iteration   3: 135817.780 ns/op
Iteration   4: 135621.862 ns/op
Iteration   5: 134937.611 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  135959.537 ±(99.9%) 3352.842 ns/op [Average]
  (min, avg, max) = (134937.611, 135959.537, 137313.183), stdev = 870.722
  CI (99.9%): [132606.695, 139312.379] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 74.87% complete, ETA 00:35:18
# Fork: 1 of 1
# Warmup Iteration   1: 479362.329 ns/op
# Warmup Iteration   2: 184379.607 ns/op
# Warmup Iteration   3: 166852.030 ns/op
# Warmup Iteration   4: 162124.550 ns/op
# Warmup Iteration   5: 165342.104 ns/op
Iteration   1: 163950.070 ns/op
Iteration   2: 161919.096 ns/op
Iteration   3: 161969.577 ns/op
Iteration   4: 161483.161 ns/op
Iteration   5: 161043.142 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  162073.009 ±(99.9%) 4290.615 ns/op [Average]
  (min, avg, max) = (161043.142, 162073.009, 163950.070), stdev = 1114.259
  CI (99.9%): [157782.394, 166363.624] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 75.13% complete, ETA 00:34:57
# Fork: 1 of 1
# Warmup Iteration   1: 555620.206 ns/op
# Warmup Iteration   2: 215735.266 ns/op
# Warmup Iteration   3: 204385.761 ns/op
# Warmup Iteration   4: 205725.193 ns/op
# Warmup Iteration   5: 202557.427 ns/op
Iteration   1: 201710.519 ns/op
Iteration   2: 201395.655 ns/op
Iteration   3: 200595.458 ns/op
Iteration   4: 207386.355 ns/op
Iteration   5: 203363.558 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  202890.309 ±(99.9%) 10427.113 ns/op [Average]
  (min, avg, max) = (200595.458, 202890.309, 207386.355), stdev = 2707.888
  CI (99.9%): [192463.196, 213317.422] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 75.38% complete, ETA 00:34:35
# Fork: 1 of 1
# Warmup Iteration   1: 2048050.835 ns/op
# Warmup Iteration   2: 966906.176 ns/op
# Warmup Iteration   3: 908410.764 ns/op
# Warmup Iteration   4: 877203.160 ns/op
# Warmup Iteration   5: 875738.390 ns/op
Iteration   1: 864448.827 ns/op
Iteration   2: 864418.951 ns/op
Iteration   3: 860844.519 ns/op
Iteration   4: 857463.490 ns/op
Iteration   5: 856397.845 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  860714.726 ±(99.9%) 14521.528 ns/op [Average]
  (min, avg, max) = (856397.845, 860714.726, 864448.827), stdev = 3771.195
  CI (99.9%): [846193.199, 875236.254] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 75.64% complete, ETA 00:34:14
# Fork: 1 of 1
# Warmup Iteration   1: 3891.688 ns/op
# Warmup Iteration   2: 2602.614 ns/op
# Warmup Iteration   3: 2320.443 ns/op
# Warmup Iteration   4: 2256.773 ns/op
# Warmup Iteration   5: 2255.256 ns/op
Iteration   1: 2252.139 ns/op
Iteration   2: 2270.236 ns/op
Iteration   3: 2251.382 ns/op
Iteration   4: 2284.908 ns/op
Iteration   5: 2248.694 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  2261.472 ±(99.9%) 60.217 ns/op [Average]
  (min, avg, max) = (2248.694, 2261.472, 2284.908), stdev = 15.638
  CI (99.9%): [2201.255, 2321.689] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 75.90% complete, ETA 00:33:53
# Fork: 1 of 1
# Warmup Iteration   1: 8939.820 ns/op
# Warmup Iteration   2: 4921.829 ns/op
# Warmup Iteration   3: 4594.801 ns/op
# Warmup Iteration   4: 4519.504 ns/op
# Warmup Iteration   5: 4513.334 ns/op
Iteration   1: 4506.757 ns/op
Iteration   2: 4540.134 ns/op
Iteration   3: 4496.758 ns/op
Iteration   4: 4504.879 ns/op
Iteration   5: 4499.870 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  4509.680 ±(99.9%) 67.311 ns/op [Average]
  (min, avg, max) = (4496.758, 4509.680, 4540.134), stdev = 17.480
  CI (99.9%): [4442.369, 4576.990] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 76.15% complete, ETA 00:33:32
# Fork: 1 of 1
# Warmup Iteration   1: 14617.339 ns/op
# Warmup Iteration   2: 9382.522 ns/op
# Warmup Iteration   3: 8541.018 ns/op
# Warmup Iteration   4: 8361.969 ns/op
# Warmup Iteration   5: 8383.727 ns/op
Iteration   1: 8347.072 ns/op
Iteration   2: 8476.440 ns/op
Iteration   3: 8337.420 ns/op
Iteration   4: 8382.175 ns/op
Iteration   5: 8343.857 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8377.393 ±(99.9%) 223.495 ns/op [Average]
  (min, avg, max) = (8337.420, 8377.393, 8476.440), stdev = 58.041
  CI (99.9%): [8153.898, 8600.888] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 76.41% complete, ETA 00:33:10
# Fork: 1 of 1
# Warmup Iteration   1: 25259.547 ns/op
# Warmup Iteration   2: 17223.686 ns/op
# Warmup Iteration   3: 16715.331 ns/op
# Warmup Iteration   4: 16124.446 ns/op
# Warmup Iteration   5: 15923.594 ns/op
Iteration   1: 15934.801 ns/op
Iteration   2: 15930.473 ns/op
Iteration   3: 15973.506 ns/op
Iteration   4: 15926.706 ns/op
Iteration   5: 15926.903 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  15938.478 ±(99.9%) 76.460 ns/op [Average]
  (min, avg, max) = (15926.706, 15938.478, 15973.506), stdev = 19.856
  CI (99.9%): [15862.018, 16014.938] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 76.67% complete, ETA 00:32:49
# Fork: 1 of 1
# Warmup Iteration   1: 265421.027 ns/op
# Warmup Iteration   2: 172342.076 ns/op
# Warmup Iteration   3: 156921.211 ns/op
# Warmup Iteration   4: 156280.762 ns/op
# Warmup Iteration   5: 156675.767 ns/op
Iteration   1: 156693.567 ns/op
Iteration   2: 156132.463 ns/op
Iteration   3: 156618.988 ns/op
Iteration   4: 157438.785 ns/op
Iteration   5: 156076.163 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  156591.993 ±(99.9%) 2113.782 ns/op [Average]
  (min, avg, max) = (156076.163, 156591.993, 157438.785), stdev = 548.943
  CI (99.9%): [154478.211, 158705.775] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 76.92% complete, ETA 00:32:28
# Fork: 1 of 1
# Warmup Iteration   1: 10771.109 ns/op
# Warmup Iteration   2: 6415.808 ns/op
# Warmup Iteration   3: 6338.151 ns/op
# Warmup Iteration   4: 6384.052 ns/op
# Warmup Iteration   5: 6402.206 ns/op
Iteration   1: 6326.805 ns/op
Iteration   2: 6310.584 ns/op
Iteration   3: 6331.776 ns/op
Iteration   4: 6282.863 ns/op
Iteration   5: 6165.445 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  6283.495 ±(99.9%) 264.525 ns/op [Average]
  (min, avg, max) = (6165.445, 6283.495, 6331.776), stdev = 68.696
  CI (99.9%): [6018.970, 6548.019] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 77.18% complete, ETA 00:32:07
# Fork: 1 of 1
# Warmup Iteration   1: 16378.773 ns/op
# Warmup Iteration   2: 11548.929 ns/op
# Warmup Iteration   3: 10970.635 ns/op
# Warmup Iteration   4: 10803.435 ns/op
# Warmup Iteration   5: 10930.015 ns/op
Iteration   1: 10714.119 ns/op
Iteration   2: 10596.446 ns/op
Iteration   3: 10633.022 ns/op
Iteration   4: 10562.857 ns/op
Iteration   5: 10649.284 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  10631.146 ±(99.9%) 220.233 ns/op [Average]
  (min, avg, max) = (10562.857, 10631.146, 10714.119), stdev = 57.194
  CI (99.9%): [10410.913, 10851.378] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 77.44% complete, ETA 00:31:45
# Fork: 1 of 1
# Warmup Iteration   1: 30349.333 ns/op
# Warmup Iteration   2: 18324.630 ns/op
# Warmup Iteration   3: 18148.242 ns/op
# Warmup Iteration   4: 17951.512 ns/op
# Warmup Iteration   5: 17453.718 ns/op
Iteration   1: 17696.034 ns/op
Iteration   2: 17862.558 ns/op
Iteration   3: 17422.274 ns/op
Iteration   4: 17425.632 ns/op
Iteration   5: 17462.424 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  17573.784 ±(99.9%) 759.565 ns/op [Average]
  (min, avg, max) = (17422.274, 17573.784, 17862.558), stdev = 197.257
  CI (99.9%): [16814.219, 18333.350] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 77.69% complete, ETA 00:31:24
# Fork: 1 of 1
# Warmup Iteration   1: 55698.265 ns/op
# Warmup Iteration   2: 39289.902 ns/op
# Warmup Iteration   3: 30362.965 ns/op
# Warmup Iteration   4: 30058.217 ns/op
# Warmup Iteration   5: 29838.559 ns/op
Iteration   1: 29466.848 ns/op
Iteration   2: 29051.559 ns/op
Iteration   3: 29162.766 ns/op
Iteration   4: 29121.163 ns/op
Iteration   5: 29137.252 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  29187.917 ±(99.9%) 621.051 ns/op [Average]
  (min, avg, max) = (29051.559, 29187.917, 29466.848), stdev = 161.285
  CI (99.9%): [28566.866, 29808.969] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 77.95% complete, ETA 00:31:03
# Fork: 1 of 1
# Warmup Iteration   1: 423738.211 ns/op
# Warmup Iteration   2: 322138.815 ns/op
# Warmup Iteration   3: 259750.608 ns/op
# Warmup Iteration   4: 265643.993 ns/op
# Warmup Iteration   5: 256466.380 ns/op
Iteration   1: 252119.123 ns/op
Iteration   2: 254623.769 ns/op
Iteration   3: 254101.634 ns/op
Iteration   4: 250867.359 ns/op
Iteration   5: 250585.773 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  252459.531 ±(99.9%) 7085.155 ns/op [Average]
  (min, avg, max) = (250585.773, 252459.531, 254623.769), stdev = 1839.992
  CI (99.9%): [245374.376, 259544.686] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 78.21% complete, ETA 00:30:42
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 78.46% complete, ETA 00:30:15
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 78.72% complete, ETA 00:29:48
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 78.97% complete, ETA 00:29:22
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 79.23% complete, ETA 00:28:55
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 79.49% complete, ETA 00:28:29
# Fork: 1 of 1
# Warmup Iteration   1: 85586.929 ns/op
# Warmup Iteration   2: 29034.421 ns/op
# Warmup Iteration   3: 23746.358 ns/op
# Warmup Iteration   4: 23721.828 ns/op
# Warmup Iteration   5: 23085.997 ns/op
Iteration   1: 22993.408 ns/op
Iteration   2: 22808.579 ns/op
Iteration   3: 22774.446 ns/op
Iteration   4: 22881.703 ns/op
Iteration   5: 22795.133 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  22850.654 ±(99.9%) 344.430 ns/op [Average]
  (min, avg, max) = (22774.446, 22850.654, 22993.408), stdev = 89.447
  CI (99.9%): [22506.224, 23195.083] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 79.74% complete, ETA 00:28:08
# Fork: 1 of 1
# Warmup Iteration   1: 167098.402 ns/op
# Warmup Iteration   2: 50866.514 ns/op
# Warmup Iteration   3: 40551.030 ns/op
# Warmup Iteration   4: 38737.344 ns/op
# Warmup Iteration   5: 38647.416 ns/op
Iteration   1: 38708.106 ns/op
Iteration   2: 38846.488 ns/op
Iteration   3: 38832.555 ns/op
Iteration   4: 38975.607 ns/op
Iteration   5: 39233.223 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  38919.196 ±(99.9%) 768.074 ns/op [Average]
  (min, avg, max) = (38708.106, 38919.196, 39233.223), stdev = 199.466
  CI (99.9%): [38151.122, 39687.270] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 80.00% complete, ETA 00:27:47
# Fork: 1 of 1
# Warmup Iteration   1: 337032.967 ns/op
# Warmup Iteration   2: 107088.847 ns/op
# Warmup Iteration   3: 97157.043 ns/op
# Warmup Iteration   4: 93604.283 ns/op
# Warmup Iteration   5: 93389.070 ns/op
Iteration   1: 93079.161 ns/op
Iteration   2: 92975.932 ns/op
Iteration   3: 92840.419 ns/op
Iteration   4: 93210.970 ns/op
Iteration   5: 93310.442 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  93083.385 ±(99.9%) 716.336 ns/op [Average]
  (min, avg, max) = (92840.419, 93083.385, 93310.442), stdev = 186.030
  CI (99.9%): [92367.049, 93799.721] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 80.26% complete, ETA 00:27:26
# Fork: 1 of 1
# Warmup Iteration   1: 745185.644 ns/op
# Warmup Iteration   2: 263140.702 ns/op
# Warmup Iteration   3: 249809.916 ns/op
# Warmup Iteration   4: 229011.643 ns/op
# Warmup Iteration   5: 221337.561 ns/op
Iteration   1: 220331.785 ns/op
Iteration   2: 219748.767 ns/op
Iteration   3: 225334.966 ns/op
Iteration   4: 219622.102 ns/op
Iteration   5: 219281.799 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  220863.884 ±(99.9%) 9734.251 ns/op [Average]
  (min, avg, max) = (219281.799, 220863.884, 225334.966), stdev = 2527.954
  CI (99.9%): [211129.633, 230598.134] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 80.51% complete, ETA 00:27:05
# Fork: 1 of 1
# Warmup Iteration   1: 4814029.093 ns/op
# Warmup Iteration   2: 1863707.676 ns/op
# Warmup Iteration   3: 1790356.066 ns/op
# Warmup Iteration   4: 1669007.014 ns/op
# Warmup Iteration   5: 1673601.513 ns/op
Iteration   1: 1676617.055 ns/op
Iteration   2: 1637819.410 ns/op
Iteration   3: 1630150.390 ns/op
Iteration   4: 1633241.225 ns/op
Iteration   5: 1626782.684 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  1640922.153 ±(99.9%) 78412.980 ns/op [Average]
  (min, avg, max) = (1626782.684, 1640922.153, 1676617.055), stdev = 20363.602
  CI (99.9%): [1562509.173, 1719335.133] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 80.77% complete, ETA 00:26:44
# Fork: 1 of 1
# Warmup Iteration   1: 62757.114 ns/op
# Warmup Iteration   2: 18856.788 ns/op
# Warmup Iteration   3: 17911.447 ns/op
# Warmup Iteration   4: 17544.569 ns/op
# Warmup Iteration   5: 16793.784 ns/op
Iteration   1: 17329.945 ns/op
Iteration   2: 16818.804 ns/op
Iteration   3: 16834.623 ns/op
Iteration   4: 17037.710 ns/op
Iteration   5: 16830.858 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  16970.388 ±(99.9%) 849.527 ns/op [Average]
  (min, avg, max) = (16818.804, 16970.388, 17329.945), stdev = 220.620
  CI (99.9%): [16120.861, 17819.915] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 81.03% complete, ETA 00:26:23
# Fork: 1 of 1
# Warmup Iteration   1: 110933.966 ns/op
# Warmup Iteration   2: 34397.250 ns/op
# Warmup Iteration   3: 33474.216 ns/op
# Warmup Iteration   4: 34290.087 ns/op
# Warmup Iteration   5: 32122.523 ns/op
Iteration   1: 31615.045 ns/op
Iteration   2: 31568.696 ns/op
Iteration   3: 31710.394 ns/op
Iteration   4: 31682.696 ns/op
Iteration   5: 31658.625 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  31647.091 ±(99.9%) 215.952 ns/op [Average]
  (min, avg, max) = (31568.696, 31647.091, 31710.394), stdev = 56.082
  CI (99.9%): [31431.139, 31863.043] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 81.28% complete, ETA 00:26:02
# Fork: 1 of 1
# Warmup Iteration   1: 252144.104 ns/op
# Warmup Iteration   2: 81217.303 ns/op
# Warmup Iteration   3: 77279.173 ns/op
# Warmup Iteration   4: 76588.402 ns/op
# Warmup Iteration   5: 74117.981 ns/op
Iteration   1: 73844.422 ns/op
Iteration   2: 74169.875 ns/op
Iteration   3: 73756.374 ns/op
Iteration   4: 73580.763 ns/op
Iteration   5: 73523.924 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  73775.071 ±(99.9%) 985.230 ns/op [Average]
  (min, avg, max) = (73523.924, 73775.071, 74169.875), stdev = 255.861
  CI (99.9%): [72789.841, 74760.301] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 81.54% complete, ETA 00:25:41
# Fork: 1 of 1
# Warmup Iteration   1: 398471.395 ns/op
# Warmup Iteration   2: 183906.567 ns/op
# Warmup Iteration   3: 175474.885 ns/op
# Warmup Iteration   4: 173085.828 ns/op
# Warmup Iteration   5: 169573.857 ns/op
Iteration   1: 168863.622 ns/op
Iteration   2: 169196.735 ns/op
Iteration   3: 168910.490 ns/op
Iteration   4: 168585.344 ns/op
Iteration   5: 168762.046 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  168863.647 ±(99.9%) 863.003 ns/op [Average]
  (min, avg, max) = (168585.344, 168863.647, 169196.735), stdev = 224.119
  CI (99.9%): [168000.645, 169726.650] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 81.79% complete, ETA 00:25:20
# Fork: 1 of 1
# Warmup Iteration   1: 3243186.967 ns/op
# Warmup Iteration   2: 1539633.679 ns/op
# Warmup Iteration   3: 1409677.585 ns/op
# Warmup Iteration   4: 1384026.143 ns/op
# Warmup Iteration   5: 1347544.047 ns/op
Iteration   1: 1328213.741 ns/op
Iteration   2: 1322387.620 ns/op
Iteration   3: 1323170.667 ns/op
Iteration   4: 1323969.063 ns/op
Iteration   5: 1327021.205 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  1324952.459 ±(99.9%) 9748.276 ns/op [Average]
  (min, avg, max) = (1322387.620, 1324952.459, 1328213.741), stdev = 2531.596
  CI (99.9%): [1315204.183, 1334700.736] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 82.05% complete, ETA 00:24:59
# Fork: 1 of 1
# Warmup Iteration   1: 25069.093 ns/op
# Warmup Iteration   2: 12417.723 ns/op
# Warmup Iteration   3: 12853.771 ns/op
# Warmup Iteration   4: 12016.037 ns/op
# Warmup Iteration   5: 11733.108 ns/op
Iteration   1: 11898.143 ns/op
Iteration   2: 11682.017 ns/op
Iteration   3: 11658.316 ns/op
Iteration   4: 11650.606 ns/op
Iteration   5: 11719.657 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  11721.748 ±(99.9%) 393.554 ns/op [Average]
  (min, avg, max) = (11650.606, 11721.748, 11898.143), stdev = 102.205
  CI (99.9%): [11328.194, 12115.301] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 82.31% complete, ETA 00:24:38
# Fork: 1 of 1
# Warmup Iteration   1: 34212.078 ns/op
# Warmup Iteration   2: 24007.238 ns/op
# Warmup Iteration   3: 23354.222 ns/op
# Warmup Iteration   4: 23032.939 ns/op
# Warmup Iteration   5: 24308.898 ns/op
Iteration   1: 22349.239 ns/op
Iteration   2: 22367.528 ns/op
Iteration   3: 22367.462 ns/op
Iteration   4: 22284.993 ns/op
Iteration   5: 22233.543 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  22320.553 ±(99.9%) 228.337 ns/op [Average]
  (min, avg, max) = (22233.543, 22320.553, 22367.528), stdev = 59.298
  CI (99.9%): [22092.216, 22548.890] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 82.56% complete, ETA 00:24:17
# Fork: 1 of 1
# Warmup Iteration   1: 71671.826 ns/op
# Warmup Iteration   2: 53033.283 ns/op
# Warmup Iteration   3: 52809.879 ns/op
# Warmup Iteration   4: 51972.050 ns/op
# Warmup Iteration   5: 51720.987 ns/op
Iteration   1: 51008.589 ns/op
Iteration   2: 50734.242 ns/op
Iteration   3: 50566.184 ns/op
Iteration   4: 50356.835 ns/op
Iteration   5: 50552.879 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  50643.746 ±(99.9%) 939.056 ns/op [Average]
  (min, avg, max) = (50356.835, 50643.746, 51008.589), stdev = 243.870
  CI (99.9%): [49704.689, 51582.802] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 82.82% complete, ETA 00:23:56
# Fork: 1 of 1
# Warmup Iteration   1: 227215.596 ns/op
# Warmup Iteration   2: 126845.775 ns/op
# Warmup Iteration   3: 124805.607 ns/op
# Warmup Iteration   4: 123995.512 ns/op
# Warmup Iteration   5: 123097.881 ns/op
Iteration   1: 121124.953 ns/op
Iteration   2: 119737.816 ns/op
Iteration   3: 120228.790 ns/op
Iteration   4: 119897.392 ns/op
Iteration   5: 119756.407 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  120149.072 ±(99.9%) 2233.174 ns/op [Average]
  (min, avg, max) = (119737.816, 120149.072, 121124.953), stdev = 579.948
  CI (99.9%): [117915.898, 122382.245] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 83.08% complete, ETA 00:23:35
# Fork: 1 of 1
# Warmup Iteration   1: 1713596.605 ns/op
# Warmup Iteration   2: 1032894.523 ns/op
# Warmup Iteration   3: 1082808.327 ns/op
# Warmup Iteration   4: 1021725.365 ns/op
# Warmup Iteration   5: 985602.328 ns/op
Iteration   1: 990215.995 ns/op
Iteration   2: 998489.367 ns/op
Iteration   3: 980478.466 ns/op
Iteration   4: 983785.842 ns/op
Iteration   5: 985638.075 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  987721.549 ±(99.9%) 26848.481 ns/op [Average]
  (min, avg, max) = (980478.466, 987721.549, 998489.367), stdev = 6972.465
  CI (99.9%): [960873.068, 1014570.030] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 83.33% complete, ETA 00:23:14
# Fork: 1 of 1
# Warmup Iteration   1: 13839.104 ns/op
# Warmup Iteration   2: 5411.700 ns/op
# Warmup Iteration   3: 5362.361 ns/op
# Warmup Iteration   4: 5221.273 ns/op
# Warmup Iteration   5: 5219.833 ns/op
Iteration   1: 5122.683 ns/op
Iteration   2: 5187.542 ns/op
Iteration   3: 5062.017 ns/op
Iteration   4: 5050.859 ns/op
Iteration   5: 5093.557 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  5103.332 ±(99.9%) 211.100 ns/op [Average]
  (min, avg, max) = (5050.859, 5103.332, 5187.542), stdev = 54.822
  CI (99.9%): [4892.232, 5314.432] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 83.59% complete, ETA 00:22:53
# Fork: 1 of 1
# Warmup Iteration   1: 81993.395 ns/op
# Warmup Iteration   2: 16041.224 ns/op
# Warmup Iteration   3: 11157.075 ns/op
# Warmup Iteration   4: 11427.290 ns/op
# Warmup Iteration   5: 10855.942 ns/op
Iteration   1: 10597.465 ns/op
Iteration   2: 10542.169 ns/op
Iteration   3: 10514.889 ns/op
Iteration   4: 10531.288 ns/op
Iteration   5: 10668.187 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  10570.800 ±(99.9%) 241.259 ns/op [Average]
  (min, avg, max) = (10514.889, 10570.800, 10668.187), stdev = 62.654
  CI (99.9%): [10329.541, 10812.058] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 83.85% complete, ETA 00:22:31
# Fork: 1 of 1
# Warmup Iteration   1: 174897.263 ns/op
# Warmup Iteration   2: 35020.628 ns/op
# Warmup Iteration   3: 20943.031 ns/op
# Warmup Iteration   4: 20226.775 ns/op
# Warmup Iteration   5: 20296.653 ns/op
Iteration   1: 20351.187 ns/op
Iteration   2: 19637.682 ns/op
Iteration   3: 19602.275 ns/op
Iteration   4: 19568.378 ns/op
Iteration   5: 19682.894 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  19768.483 ±(99.9%) 1264.932 ns/op [Average]
  (min, avg, max) = (19568.378, 19768.483, 20351.187), stdev = 328.499
  CI (99.9%): [18503.551, 21033.415] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 84.10% complete, ETA 00:22:10
# Fork: 1 of 1
# Warmup Iteration   1: 281435.066 ns/op
# Warmup Iteration   2: 58776.580 ns/op
# Warmup Iteration   3: 39898.172 ns/op
# Warmup Iteration   4: 39660.570 ns/op
# Warmup Iteration   5: 39457.746 ns/op
Iteration   1: 38626.428 ns/op
Iteration   2: 38123.454 ns/op
Iteration   3: 38284.069 ns/op
Iteration   4: 38170.670 ns/op
Iteration   5: 38104.035 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  38261.731 ±(99.9%) 829.865 ns/op [Average]
  (min, avg, max) = (38104.035, 38261.731, 38626.428), stdev = 215.513
  CI (99.9%): [37431.866, 39091.596] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 84.36% complete, ETA 00:21:49
# Fork: 1 of 1
# Warmup Iteration   1: 3681419.742 ns/op
# Warmup Iteration   2: 336020.997 ns/op
# Warmup Iteration   3: 317003.435 ns/op
# Warmup Iteration   4: 302008.397 ns/op
# Warmup Iteration   5: 303205.244 ns/op
Iteration   1: 293007.891 ns/op
Iteration   2: 294112.503 ns/op
Iteration   3: 291158.702 ns/op
Iteration   4: 292359.053 ns/op
Iteration   5: 293601.793 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  292847.988 ±(99.9%) 4426.372 ns/op [Average]
  (min, avg, max) = (291158.702, 292847.988, 294112.503), stdev = 1149.515
  CI (99.9%): [288421.616, 297274.361] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 84.62% complete, ETA 00:21:28
# Fork: 1 of 1
# Warmup Iteration   1: 26397.521 ns/op
# Warmup Iteration   2: 3529.343 ns/op
# Warmup Iteration   3: 3422.281 ns/op
# Warmup Iteration   4: 3362.567 ns/op
# Warmup Iteration   5: 3366.121 ns/op
Iteration   1: 3324.096 ns/op
Iteration   2: 3301.471 ns/op
Iteration   3: 3281.392 ns/op
Iteration   4: 3282.061 ns/op
Iteration   5: 3283.266 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  3294.457 ±(99.9%) 71.452 ns/op [Average]
  (min, avg, max) = (3281.392, 3294.457, 3324.096), stdev = 18.556
  CI (99.9%): [3223.005, 3365.910] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 84.87% complete, ETA 00:21:07
# Fork: 1 of 1
# Warmup Iteration   1: 23615.441 ns/op
# Warmup Iteration   2: 7082.674 ns/op
# Warmup Iteration   3: 6886.231 ns/op
# Warmup Iteration   4: 6877.152 ns/op
# Warmup Iteration   5: 6844.211 ns/op
Iteration   1: 6942.632 ns/op
Iteration   2: 6716.222 ns/op
Iteration   3: 6718.908 ns/op
Iteration   4: 6713.606 ns/op
Iteration   5: 6715.261 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  6761.326 ±(99.9%) 390.345 ns/op [Average]
  (min, avg, max) = (6713.606, 6761.326, 6942.632), stdev = 101.371
  CI (99.9%): [6370.981, 7151.671] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 85.13% complete, ETA 00:20:45
# Fork: 1 of 1
# Warmup Iteration   1: 54193.727 ns/op
# Warmup Iteration   2: 13985.671 ns/op
# Warmup Iteration   3: 13679.429 ns/op
# Warmup Iteration   4: 13580.888 ns/op
# Warmup Iteration   5: 13203.122 ns/op
Iteration   1: 13428.604 ns/op
Iteration   2: 13013.308 ns/op
Iteration   3: 13025.217 ns/op
Iteration   4: 13055.534 ns/op
Iteration   5: 13152.724 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  13135.077 ±(99.9%) 666.099 ns/op [Average]
  (min, avg, max) = (13013.308, 13135.077, 13428.604), stdev = 172.984
  CI (99.9%): [12468.978, 13801.177] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 85.38% complete, ETA 00:20:24
# Fork: 1 of 1
# Warmup Iteration   1: 42762.319 ns/op
# Warmup Iteration   2: 27432.524 ns/op
# Warmup Iteration   3: 26359.457 ns/op
# Warmup Iteration   4: 26259.216 ns/op
# Warmup Iteration   5: 26163.821 ns/op
Iteration   1: 25563.815 ns/op
Iteration   2: 25761.675 ns/op
Iteration   3: 25485.794 ns/op
Iteration   4: 25887.351 ns/op
Iteration   5: 26117.059 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  25763.139 ±(99.9%) 976.692 ns/op [Average]
  (min, avg, max) = (25485.794, 25763.139, 26117.059), stdev = 253.644
  CI (99.9%): [24786.447, 26739.830] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 85.64% complete, ETA 00:20:03
# Fork: 1 of 1
# Warmup Iteration   1: 314582.013 ns/op
# Warmup Iteration   2: 242922.231 ns/op
# Warmup Iteration   3: 228891.723 ns/op
# Warmup Iteration   4: 227935.720 ns/op
# Warmup Iteration   5: 220565.321 ns/op
Iteration   1: 221830.092 ns/op
Iteration   2: 220402.277 ns/op
Iteration   3: 220414.098 ns/op
Iteration   4: 223374.452 ns/op
Iteration   5: 219795.286 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  221163.241 ±(99.9%) 5562.058 ns/op [Average]
  (min, avg, max) = (219795.286, 221163.241, 223374.452), stdev = 1444.449
  CI (99.9%): [215601.183, 226725.299] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 85.90% complete, ETA 00:19:42
# Fork: 1 of 1
# Warmup Iteration   1: 8763.440 ns/op
# Warmup Iteration   2: 4470.582 ns/op
# Warmup Iteration   3: 4278.146 ns/op
# Warmup Iteration   4: 4254.848 ns/op
# Warmup Iteration   5: 4231.420 ns/op
Iteration   1: 4137.465 ns/op
Iteration   2: 4330.112 ns/op
Iteration   3: 4120.737 ns/op
Iteration   4: 4122.181 ns/op
Iteration   5: 4161.572 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  4174.413 ±(99.9%) 341.068 ns/op [Average]
  (min, avg, max) = (4120.737, 4174.413, 4330.112), stdev = 88.574
  CI (99.9%): [3833.346, 4515.481] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 86.15% complete, ETA 00:19:20
# Fork: 1 of 1
# Warmup Iteration   1: 59491.637 ns/op
# Warmup Iteration   2: 8905.688 ns/op
# Warmup Iteration   3: 8213.969 ns/op
# Warmup Iteration   4: 8084.524 ns/op
# Warmup Iteration   5: 8089.694 ns/op
Iteration   1: 8042.301 ns/op
Iteration   2: 7929.244 ns/op
Iteration   3: 7931.356 ns/op
Iteration   4: 7875.873 ns/op
Iteration   5: 7959.999 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  7947.755 ±(99.9%) 234.758 ns/op [Average]
  (min, avg, max) = (7875.873, 7947.755, 8042.301), stdev = 60.966
  CI (99.9%): [7712.996, 8182.513] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 86.41% complete, ETA 00:18:59
# Fork: 1 of 1
# Warmup Iteration   1: 282722.100 ns/op
# Warmup Iteration   2: 39694.213 ns/op
# Warmup Iteration   3: 15844.361 ns/op
# Warmup Iteration   4: 16105.062 ns/op
# Warmup Iteration   5: 14971.213 ns/op
Iteration   1: 14731.765 ns/op
Iteration   2: 14572.188 ns/op
Iteration   3: 14559.051 ns/op
Iteration   4: 14543.882 ns/op
Iteration   5: 14647.210 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  14610.819 ±(99.9%) 302.006 ns/op [Average]
  (min, avg, max) = (14543.882, 14610.819, 14731.765), stdev = 78.430
  CI (99.9%): [14308.813, 14912.826] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 86.67% complete, ETA 00:18:38
# Fork: 1 of 1
# Warmup Iteration   1: 205729.356 ns/op
# Warmup Iteration   2: 29210.670 ns/op
# Warmup Iteration   3: 26861.880 ns/op
# Warmup Iteration   4: 26663.667 ns/op
# Warmup Iteration   5: 26247.442 ns/op
Iteration   1: 26557.954 ns/op
Iteration   2: 26493.107 ns/op
Iteration   3: 26067.970 ns/op
Iteration   4: 26684.242 ns/op
Iteration   5: 26088.285 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  26378.312 ±(99.9%) 1088.224 ns/op [Average]
  (min, avg, max) = (26067.970, 26378.312, 26684.242), stdev = 282.608
  CI (99.9%): [25290.088, 27466.535] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 86.92% complete, ETA 00:18:17
# Fork: 1 of 1
# Warmup Iteration   1: 3420111.550 ns/op
# Warmup Iteration   2: 237720.481 ns/op
# Warmup Iteration   3: 201074.160 ns/op
# Warmup Iteration   4: 198350.958 ns/op
# Warmup Iteration   5: 197892.039 ns/op
Iteration   1: 196716.475 ns/op
Iteration   2: 198716.815 ns/op
Iteration   3: 194935.842 ns/op
Iteration   4: 193327.381 ns/op
Iteration   5: 198343.721 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  196408.047 ±(99.9%) 8787.204 ns/op [Average]
  (min, avg, max) = (193327.381, 196408.047, 198716.815), stdev = 2282.009
  CI (99.9%): [187620.843, 205195.251] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 87.18% complete, ETA 00:17:55
# Fork: 1 of 1
# Warmup Iteration   1: 18123.102 ns/op
# Warmup Iteration   2: 6404.306 ns/op
# Warmup Iteration   3: 4629.353 ns/op
# Warmup Iteration   4: 2449.829 ns/op
# Warmup Iteration   5: 2400.030 ns/op
Iteration   1: 2385.040 ns/op
Iteration   2: 2341.748 ns/op
Iteration   3: 2465.701 ns/op
Iteration   4: 2331.445 ns/op
Iteration   5: 2370.629 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  2378.913 ±(99.9%) 204.418 ns/op [Average]
  (min, avg, max) = (2331.445, 2378.913, 2465.701), stdev = 53.087
  CI (99.9%): [2174.494, 2583.331] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 87.44% complete, ETA 00:17:34
# Fork: 1 of 1
# Warmup Iteration   1: 18067.401 ns/op
# Warmup Iteration   2: 5640.821 ns/op
# Warmup Iteration   3: 5435.637 ns/op
# Warmup Iteration   4: 5434.086 ns/op
# Warmup Iteration   5: 5397.456 ns/op
Iteration   1: 5322.299 ns/op
Iteration   2: 5284.793 ns/op
Iteration   3: 5329.803 ns/op
Iteration   4: 5298.352 ns/op
Iteration   5: 5282.951 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  5303.640 ±(99.9%) 82.674 ns/op [Average]
  (min, avg, max) = (5282.951, 5303.640, 5329.803), stdev = 21.470
  CI (99.9%): [5220.966, 5386.313] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 87.69% complete, ETA 00:17:13
# Fork: 1 of 1
# Warmup Iteration   1: 25906.449 ns/op
# Warmup Iteration   2: 10230.702 ns/op
# Warmup Iteration   3: 9857.207 ns/op
# Warmup Iteration   4: 9852.331 ns/op
# Warmup Iteration   5: 9847.212 ns/op
Iteration   1: 9606.694 ns/op
Iteration   2: 9561.375 ns/op
Iteration   3: 9557.873 ns/op
Iteration   4: 9563.943 ns/op
Iteration   5: 9565.993 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  9571.176 ±(99.9%) 77.342 ns/op [Average]
  (min, avg, max) = (9557.873, 9571.176, 9606.694), stdev = 20.086
  CI (99.9%): [9493.833, 9648.518] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 87.95% complete, ETA 00:16:51
# Fork: 1 of 1
# Warmup Iteration   1: 42023.801 ns/op
# Warmup Iteration   2: 18297.947 ns/op
# Warmup Iteration   3: 17588.752 ns/op
# Warmup Iteration   4: 17054.797 ns/op
# Warmup Iteration   5: 16857.390 ns/op
Iteration   1: 17320.950 ns/op
Iteration   2: 16576.704 ns/op
Iteration   3: 16634.090 ns/op
Iteration   4: 16610.187 ns/op
Iteration   5: 16569.296 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  16742.245 ±(99.9%) 1249.757 ns/op [Average]
  (min, avg, max) = (16569.296, 16742.245, 17320.950), stdev = 324.558
  CI (99.9%): [15492.488, 17992.003] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 88.21% complete, ETA 00:16:30
# Fork: 1 of 1
# Warmup Iteration   1: 795221.750 ns/op
# Warmup Iteration   2: 164418.009 ns/op
# Warmup Iteration   3: 147336.148 ns/op
# Warmup Iteration   4: 151679.703 ns/op
# Warmup Iteration   5: 144505.801 ns/op
Iteration   1: 143934.726 ns/op
Iteration   2: 143158.913 ns/op
Iteration   3: 142616.725 ns/op
Iteration   4: 142929.379 ns/op
Iteration   5: 143029.682 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  143133.885 ±(99.9%) 1888.493 ns/op [Average]
  (min, avg, max) = (142616.725, 143133.885, 143934.726), stdev = 490.436
  CI (99.9%): [141245.392, 145022.378] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 88.46% complete, ETA 00:16:09
# Fork: 1 of 1
# Warmup Iteration   1: 20545.472 ns/op
# Warmup Iteration   2: 4274.308 ns/op
# Warmup Iteration   3: 3861.662 ns/op
# Warmup Iteration   4: 3682.575 ns/op
# Warmup Iteration   5: 3680.260 ns/op
Iteration   1: 3675.285 ns/op
Iteration   2: 3743.540 ns/op
Iteration   3: 3683.760 ns/op
Iteration   4: 3679.302 ns/op
Iteration   5: 3681.628 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  3692.703 ±(99.9%) 110.097 ns/op [Average]
  (min, avg, max) = (3675.285, 3692.703, 3743.540), stdev = 28.592
  CI (99.9%): [3582.606, 3802.800] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 88.72% complete, ETA 00:15:47
# Fork: 1 of 1
# Warmup Iteration   1: 44283.837 ns/op
# Warmup Iteration   2: 8615.564 ns/op
# Warmup Iteration   3: 7767.356 ns/op
# Warmup Iteration   4: 7132.494 ns/op
# Warmup Iteration   5: 7117.813 ns/op
Iteration   1: 7095.541 ns/op
Iteration   2: 7099.914 ns/op
Iteration   3: 7081.907 ns/op
Iteration   4: 7168.576 ns/op
Iteration   5: 7094.753 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  7108.138 ±(99.9%) 132.642 ns/op [Average]
  (min, avg, max) = (7081.907, 7108.138, 7168.576), stdev = 34.447
  CI (99.9%): [6975.497, 7240.780] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 88.97% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 65137.362 ns/op
# Warmup Iteration   2: 14785.077 ns/op
# Warmup Iteration   3: 12813.284 ns/op
# Warmup Iteration   4: 12258.693 ns/op
# Warmup Iteration   5: 12248.229 ns/op
Iteration   1: 12202.666 ns/op
Iteration   2: 12206.345 ns/op
Iteration   3: 12185.060 ns/op
Iteration   4: 12287.417 ns/op
Iteration   5: 12327.055 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  12241.709 ±(99.9%) 238.594 ns/op [Average]
  (min, avg, max) = (12185.060, 12241.709, 12327.055), stdev = 61.962
  CI (99.9%): [12003.114, 12480.303] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 89.23% complete, ETA 00:15:05
# Fork: 1 of 1
# Warmup Iteration   1: 110899.775 ns/op
# Warmup Iteration   2: 28534.987 ns/op
# Warmup Iteration   3: 24953.832 ns/op
# Warmup Iteration   4: 24042.563 ns/op
# Warmup Iteration   5: 23901.167 ns/op
Iteration   1: 23902.003 ns/op
Iteration   2: 24062.270 ns/op
Iteration   3: 23853.850 ns/op
Iteration   4: 23845.779 ns/op
Iteration   5: 23830.077 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  23898.796 ±(99.9%) 366.759 ns/op [Average]
  (min, avg, max) = (23830.077, 23898.796, 24062.270), stdev = 95.246
  CI (99.9%): [23532.037, 24265.555] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 89.49% complete, ETA 00:14:43
# Fork: 1 of 1
# Warmup Iteration   1: 1196920.943 ns/op
# Warmup Iteration   2: 344553.896 ns/op
# Warmup Iteration   3: 310716.118 ns/op
# Warmup Iteration   4: 288790.858 ns/op
# Warmup Iteration   5: 286332.041 ns/op
Iteration   1: 290975.980 ns/op
Iteration   2: 285730.835 ns/op
Iteration   3: 286334.839 ns/op
Iteration   4: 285514.203 ns/op
Iteration   5: 285816.852 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  286874.542 ±(99.9%) 8904.560 ns/op [Average]
  (min, avg, max) = (285514.203, 286874.542, 290975.980), stdev = 2312.486
  CI (99.9%): [277969.981, 295779.102] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 89.74% complete, ETA 00:14:22
# Fork: 1 of 1
# Warmup Iteration   1: 25373.320 ns/op
# Warmup Iteration   2: 5784.784 ns/op
# Warmup Iteration   3: 4220.366 ns/op
# Warmup Iteration   4: 3955.283 ns/op
# Warmup Iteration   5: 3942.834 ns/op
Iteration   1: 3995.783 ns/op
Iteration   2: 3942.359 ns/op
Iteration   3: 3932.720 ns/op
Iteration   4: 3942.640 ns/op
Iteration   5: 3954.419 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  3953.584 ±(99.9%) 95.542 ns/op [Average]
  (min, avg, max) = (3932.720, 3953.584, 3995.783), stdev = 24.812
  CI (99.9%): [3858.042, 4049.126] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 90.00% complete, ETA 00:14:00
# Fork: 1 of 1
# Warmup Iteration   1: 50519.921 ns/op
# Warmup Iteration   2: 9991.226 ns/op
# Warmup Iteration   3: 8288.646 ns/op
# Warmup Iteration   4: 7884.609 ns/op
# Warmup Iteration   5: 7852.120 ns/op
Iteration   1: 7815.843 ns/op
Iteration   2: 7828.049 ns/op
Iteration   3: 7841.189 ns/op
Iteration   4: 7975.596 ns/op
Iteration   5: 7837.826 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  7859.701 ±(99.9%) 252.344 ns/op [Average]
  (min, avg, max) = (7815.843, 7859.701, 7975.596), stdev = 65.533
  CI (99.9%): [7607.357, 8112.044] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 90.26% complete, ETA 00:13:39
# Fork: 1 of 1
# Warmup Iteration   1: 65831.268 ns/op
# Warmup Iteration   2: 18786.068 ns/op
# Warmup Iteration   3: 16252.331 ns/op
# Warmup Iteration   4: 15762.374 ns/op
# Warmup Iteration   5: 15708.401 ns/op
Iteration   1: 15739.391 ns/op
Iteration   2: 15890.754 ns/op
Iteration   3: 16197.309 ns/op
Iteration   4: 15757.558 ns/op
Iteration   5: 15692.399 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  15855.482 ±(99.9%) 788.565 ns/op [Average]
  (min, avg, max) = (15692.399, 15855.482, 16197.309), stdev = 204.788
  CI (99.9%): [15066.917, 16644.047] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 90.51% complete, ETA 00:13:18
# Fork: 1 of 1
# Warmup Iteration   1: 77780.162 ns/op
# Warmup Iteration   2: 34666.742 ns/op
# Warmup Iteration   3: 30648.960 ns/op
# Warmup Iteration   4: 29417.857 ns/op
# Warmup Iteration   5: 29314.106 ns/op
Iteration   1: 29243.305 ns/op
Iteration   2: 29677.437 ns/op
Iteration   3: 29802.554 ns/op
Iteration   4: 29234.931 ns/op
Iteration   5: 29848.800 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  29561.406 ±(99.9%) 1158.374 ns/op [Average]
  (min, avg, max) = (29234.931, 29561.406, 29848.800), stdev = 300.826
  CI (99.9%): [28403.032, 30719.780] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 90.77% complete, ETA 00:12:56
# Fork: 1 of 1
# Warmup Iteration   1: 1162932.433 ns/op
# Warmup Iteration   2: 377133.102 ns/op
# Warmup Iteration   3: 347638.251 ns/op
# Warmup Iteration   4: 337196.075 ns/op
# Warmup Iteration   5: 315194.101 ns/op
Iteration   1: 320192.333 ns/op
Iteration   2: 315538.617 ns/op
Iteration   3: 315117.514 ns/op
Iteration   4: 314887.823 ns/op
Iteration   5: 314756.202 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  316098.498 ±(99.9%) 8886.310 ns/op [Average]
  (min, avg, max) = (314756.202, 316098.498, 320192.333), stdev = 2307.746
  CI (99.9%): [307212.188, 324984.808] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 91.03% complete, ETA 00:12:35
# Fork: 1 of 1
# Warmup Iteration   1: 71444.163 ns/op
# Warmup Iteration   2: 32350.259 ns/op
# Warmup Iteration   3: 29296.740 ns/op
# Warmup Iteration   4: 27920.898 ns/op
# Warmup Iteration   5: 28060.687 ns/op
Iteration   1: 27752.363 ns/op
Iteration   2: 27838.126 ns/op
Iteration   3: 27751.973 ns/op
Iteration   4: 27550.005 ns/op
Iteration   5: 27521.454 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  27682.784 ±(99.9%) 535.700 ns/op [Average]
  (min, avg, max) = (27521.454, 27682.784, 27838.126), stdev = 139.120
  CI (99.9%): [27147.085, 28218.484] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 91.28% complete, ETA 00:12:13
# Fork: 1 of 1
# Warmup Iteration   1: 132456.228 ns/op
# Warmup Iteration   2: 49798.101 ns/op
# Warmup Iteration   3: 41501.009 ns/op
# Warmup Iteration   4: 40484.073 ns/op
# Warmup Iteration   5: 41392.462 ns/op
Iteration   1: 40848.747 ns/op
Iteration   2: 40333.592 ns/op
Iteration   3: 40214.051 ns/op
Iteration   4: 40100.791 ns/op
Iteration   5: 39839.617 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  40267.360 ±(99.9%) 1435.559 ns/op [Average]
  (min, avg, max) = (39839.617, 40267.360, 40848.747), stdev = 372.810
  CI (99.9%): [38831.801, 41702.918] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 91.54% complete, ETA 00:11:52
# Fork: 1 of 1
# Warmup Iteration   1: 156122.905 ns/op
# Warmup Iteration   2: 73594.163 ns/op
# Warmup Iteration   3: 65778.655 ns/op
# Warmup Iteration   4: 64141.879 ns/op
# Warmup Iteration   5: 64274.161 ns/op
Iteration   1: 62595.787 ns/op
Iteration   2: 61995.280 ns/op
Iteration   3: 61921.229 ns/op
Iteration   4: 61727.607 ns/op
Iteration   5: 61877.909 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  62023.562 ±(99.9%) 1287.978 ns/op [Average]
  (min, avg, max) = (61727.607, 62023.562, 62595.787), stdev = 334.484
  CI (99.9%): [60735.584, 63311.540] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 91.79% complete, ETA 00:11:30
# Fork: 1 of 1
# Warmup Iteration   1: 368419.445 ns/op
# Warmup Iteration   2: 145864.844 ns/op
# Warmup Iteration   3: 131307.947 ns/op
# Warmup Iteration   4: 129809.821 ns/op
# Warmup Iteration   5: 130500.313 ns/op
Iteration   1: 128211.879 ns/op
Iteration   2: 126306.775 ns/op
Iteration   3: 125858.715 ns/op
Iteration   4: 126179.317 ns/op
Iteration   5: 125808.705 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  126473.079 ±(99.9%) 3829.511 ns/op [Average]
  (min, avg, max) = (125808.705, 126473.079, 128211.879), stdev = 994.512
  CI (99.9%): [122643.568, 130302.589] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 92.05% complete, ETA 00:11:09
# Fork: 1 of 1
# Warmup Iteration   1: 1647612.045 ns/op
# Warmup Iteration   2: 1158979.908 ns/op
# Warmup Iteration   3: 1045328.448 ns/op
# Warmup Iteration   4: 1045370.844 ns/op
# Warmup Iteration   5: 1051799.998 ns/op
Iteration   1: 1020178.538 ns/op
Iteration   2: 1007021.296 ns/op
Iteration   3: 1008772.300 ns/op
Iteration   4: 1007292.038 ns/op
Iteration   5: 1010214.557 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  1010695.746 ±(99.9%) 20997.606 ns/op [Average]
  (min, avg, max) = (1007021.296, 1010695.746, 1020178.538), stdev = 5453.012
  CI (99.9%): [989698.139, 1031693.352] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 92.31% complete, ETA 00:10:47
# Fork: 1 of 1
# Warmup Iteration   1: 4835.898 ns/op
# Warmup Iteration   2: 2704.405 ns/op
# Warmup Iteration   3: 2589.486 ns/op
# Warmup Iteration   4: 2564.960 ns/op
# Warmup Iteration   5: 2584.248 ns/op
Iteration   1: 2570.418 ns/op
Iteration   2: 2584.905 ns/op
Iteration   3: 2554.675 ns/op
Iteration   4: 2562.875 ns/op
Iteration   5: 2563.061 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  2567.187 ±(99.9%) 43.757 ns/op [Average]
  (min, avg, max) = (2554.675, 2567.187, 2584.905), stdev = 11.363
  CI (99.9%): [2523.430, 2610.944] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 92.56% complete, ETA 00:10:26
# Fork: 1 of 1
# Warmup Iteration   1: 8454.403 ns/op
# Warmup Iteration   2: 5131.950 ns/op
# Warmup Iteration   3: 4797.123 ns/op
# Warmup Iteration   4: 4716.263 ns/op
# Warmup Iteration   5: 4685.328 ns/op
Iteration   1: 4762.578 ns/op
Iteration   2: 4698.083 ns/op
Iteration   3: 4723.000 ns/op
Iteration   4: 4701.625 ns/op
Iteration   5: 4718.361 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  4720.729 ±(99.9%) 98.923 ns/op [Average]
  (min, avg, max) = (4698.083, 4720.729, 4762.578), stdev = 25.690
  CI (99.9%): [4621.807, 4819.652] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 92.82% complete, ETA 00:10:04
# Fork: 1 of 1
# Warmup Iteration   1: 14564.440 ns/op
# Warmup Iteration   2: 8345.442 ns/op
# Warmup Iteration   3: 8023.880 ns/op
# Warmup Iteration   4: 7716.843 ns/op
# Warmup Iteration   5: 7707.466 ns/op
Iteration   1: 7718.729 ns/op
Iteration   2: 7735.749 ns/op
Iteration   3: 7680.041 ns/op
Iteration   4: 7681.862 ns/op
Iteration   5: 7695.089 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  7702.294 ±(99.9%) 93.411 ns/op [Average]
  (min, avg, max) = (7680.041, 7702.294, 7735.749), stdev = 24.258
  CI (99.9%): [7608.883, 7795.705] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 93.08% complete, ETA 00:09:43
# Fork: 1 of 1
# Warmup Iteration   1: 21870.983 ns/op
# Warmup Iteration   2: 14142.207 ns/op
# Warmup Iteration   3: 13789.823 ns/op
# Warmup Iteration   4: 13363.823 ns/op
# Warmup Iteration   5: 13824.601 ns/op
Iteration   1: 13609.026 ns/op
Iteration   2: 13241.123 ns/op
Iteration   3: 13369.276 ns/op
Iteration   4: 13704.267 ns/op
Iteration   5: 13229.448 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  13430.628 ±(99.9%) 832.252 ns/op [Average]
  (min, avg, max) = (13229.448, 13430.628, 13704.267), stdev = 216.133
  CI (99.9%): [12598.376, 14262.879] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 93.33% complete, ETA 00:09:21
# Fork: 1 of 1
# Warmup Iteration   1: 191954.623 ns/op
# Warmup Iteration   2: 125229.541 ns/op
# Warmup Iteration   3: 125540.830 ns/op
# Warmup Iteration   4: 119065.850 ns/op
# Warmup Iteration   5: 119851.724 ns/op
Iteration   1: 118114.514 ns/op
Iteration   2: 117683.081 ns/op
Iteration   3: 118063.330 ns/op
Iteration   4: 117893.368 ns/op
Iteration   5: 118206.241 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  117992.107 ±(99.9%) 796.526 ns/op [Average]
  (min, avg, max) = (117683.081, 117992.107, 118206.241), stdev = 206.855
  CI (99.9%): [117195.581, 118788.633] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 93.59% complete, ETA 00:09:00
# Fork: 1 of 1
# Warmup Iteration   1: 9256.255 ns/op
# Warmup Iteration   2: 6873.072 ns/op
# Warmup Iteration   3: 6451.306 ns/op
# Warmup Iteration   4: 6929.685 ns/op
# Warmup Iteration   5: 6450.515 ns/op
Iteration   1: 8085.077 ns/op
Iteration   2: 6809.705 ns/op
Iteration   3: 7236.099 ns/op
Iteration   4: 7769.643 ns/op
Iteration   5: 8057.117 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  7591.528 ±(99.9%) 2134.995 ns/op [Average]
  (min, avg, max) = (6809.705, 7591.528, 8085.077), stdev = 554.451
  CI (99.9%): [5456.533, 9726.523] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 93.85% complete, ETA 00:08:38
# Fork: 1 of 1
# Warmup Iteration   1: 13602.576 ns/op
# Warmup Iteration   2: 10314.483 ns/op
# Warmup Iteration   3: 10457.776 ns/op
# Warmup Iteration   4: 10421.997 ns/op
# Warmup Iteration   5: 10168.354 ns/op
Iteration   1: 10287.772 ns/op
Iteration   2: 10307.174 ns/op
Iteration   3: 10188.986 ns/op
Iteration   4: 10219.522 ns/op
Iteration   5: 10194.283 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  10239.547 ±(99.9%) 210.075 ns/op [Average]
  (min, avg, max) = (10188.986, 10239.547, 10307.174), stdev = 54.556
  CI (99.9%): [10029.472, 10449.623] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 94.10% complete, ETA 00:08:17
# Fork: 1 of 1
# Warmup Iteration   1: 33855.234 ns/op
# Warmup Iteration   2: 18122.256 ns/op
# Warmup Iteration   3: 17513.005 ns/op
# Warmup Iteration   4: 18629.689 ns/op
# Warmup Iteration   5: 18889.373 ns/op
Iteration   1: 18782.284 ns/op
Iteration   2: 18928.438 ns/op
Iteration   3: 18767.847 ns/op
Iteration   4: 18734.003 ns/op
Iteration   5: 18562.343 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  18754.983 ±(99.9%) 504.081 ns/op [Average]
  (min, avg, max) = (18562.343, 18754.983, 18928.438), stdev = 130.908
  CI (99.9%): [18250.902, 19259.064] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 94.36% complete, ETA 00:07:55
# Fork: 1 of 1
# Warmup Iteration   1: 47833.125 ns/op
# Warmup Iteration   2: 34551.461 ns/op
# Warmup Iteration   3: 33824.701 ns/op
# Warmup Iteration   4: 43085.885 ns/op
# Warmup Iteration   5: 63215.534 ns/op
Iteration   1: 62470.462 ns/op
Iteration   2: 63598.194 ns/op
Iteration   3: 63199.264 ns/op
Iteration   4: 62652.632 ns/op
Iteration   5: 63585.696 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  63101.250 ±(99.9%) 2010.463 ns/op [Average]
  (min, avg, max) = (62470.462, 63101.250, 63598.194), stdev = 522.111
  CI (99.9%): [61090.786, 65111.713] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 94.62% complete, ETA 00:07:34
# Fork: 1 of 1
# Warmup Iteration   1: 667346.266 ns/op
# Warmup Iteration   2: 507858.912 ns/op
# Warmup Iteration   3: 510209.948 ns/op
# Warmup Iteration   4: 487080.194 ns/op
# Warmup Iteration   5: 498417.123 ns/op
Iteration   1: 491223.074 ns/op
Iteration   2: 489678.770 ns/op
Iteration   3: 488757.582 ns/op
Iteration   4: 488551.845 ns/op
Iteration   5: 490308.880 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  489704.030 ±(99.9%) 4260.693 ns/op [Average]
  (min, avg, max) = (488551.845, 489704.030, 491223.074), stdev = 1106.489
  CI (99.9%): [485443.337, 493964.723] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 94.87% complete, ETA 00:07:12
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 95.13% complete, ETA 00:06:50
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 95.38% complete, ETA 00:06:27
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 95.64% complete, ETA 00:06:05
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 95.90% complete, ETA 00:05:42
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:33)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 96.15% complete, ETA 00:05:20
# Fork: 1 of 1
# Warmup Iteration   1: 34347.410 ns/op
# Warmup Iteration   2: 21016.888 ns/op
# Warmup Iteration   3: 18894.327 ns/op
# Warmup Iteration   4: 18600.886 ns/op
# Warmup Iteration   5: 18594.363 ns/op
Iteration   1: 18631.517 ns/op
Iteration   2: 18543.896 ns/op
Iteration   3: 18519.566 ns/op
Iteration   4: 18645.960 ns/op
Iteration   5: 18697.400 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  18607.668 ±(99.9%) 285.023 ns/op [Average]
  (min, avg, max) = (18519.566, 18607.668, 18697.400), stdev = 74.019
  CI (99.9%): [18322.645, 18892.690] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 96.41% complete, ETA 00:04:59
# Fork: 1 of 1
# Warmup Iteration   1: 71448.294 ns/op
# Warmup Iteration   2: 40014.884 ns/op
# Warmup Iteration   3: 37245.604 ns/op
# Warmup Iteration   4: 36597.589 ns/op
# Warmup Iteration   5: 36635.088 ns/op
Iteration   1: 36540.865 ns/op
Iteration   2: 36558.813 ns/op
Iteration   3: 36519.628 ns/op
Iteration   4: 36583.898 ns/op
Iteration   5: 36549.361 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  36550.513 ±(99.9%) 90.954 ns/op [Average]
  (min, avg, max) = (36519.628, 36550.513, 36583.898), stdev = 23.621
  CI (99.9%): [36459.559, 36641.467] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 96.67% complete, ETA 00:04:38
# Fork: 1 of 1
# Warmup Iteration   1: 156747.482 ns/op
# Warmup Iteration   2: 97014.893 ns/op
# Warmup Iteration   3: 82127.102 ns/op
# Warmup Iteration   4: 80801.131 ns/op
# Warmup Iteration   5: 80635.207 ns/op
Iteration   1: 80348.498 ns/op
Iteration   2: 80594.216 ns/op
Iteration   3: 80213.593 ns/op
Iteration   4: 80526.020 ns/op
Iteration   5: 80398.752 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  80416.216 ±(99.9%) 576.594 ns/op [Average]
  (min, avg, max) = (80213.593, 80416.216, 80594.216), stdev = 149.740
  CI (99.9%): [79839.622, 80992.810] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 96.92% complete, ETA 00:04:16
# Fork: 1 of 1
# Warmup Iteration   1: 405905.146 ns/op
# Warmup Iteration   2: 210952.608 ns/op
# Warmup Iteration   3: 181134.244 ns/op
# Warmup Iteration   4: 179884.765 ns/op
# Warmup Iteration   5: 180423.778 ns/op
Iteration   1: 179541.930 ns/op
Iteration   2: 181483.898 ns/op
Iteration   3: 180426.784 ns/op
Iteration   4: 178810.465 ns/op
Iteration   5: 178440.449 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  179740.705 ±(99.9%) 4757.123 ns/op [Average]
  (min, avg, max) = (178440.449, 179740.705, 181483.898), stdev = 1235.410
  CI (99.9%): [174983.583, 184497.828] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 97.18% complete, ETA 00:03:55
# Fork: 1 of 1
# Warmup Iteration   1: 3020446.320 ns/op
# Warmup Iteration   2: 1669281.825 ns/op
# Warmup Iteration   3: 1596476.736 ns/op
# Warmup Iteration   4: 1559088.273 ns/op
# Warmup Iteration   5: 1579964.018 ns/op
Iteration   1: 1542047.882 ns/op
Iteration   2: 1529954.404 ns/op
Iteration   3: 1539093.076 ns/op
Iteration   4: 1565240.907 ns/op
Iteration   5: 1525513.003 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  1540369.855 ±(99.9%) 59411.793 ns/op [Average]
  (min, avg, max) = (1525513.003, 1540369.855, 1565240.907), stdev = 15429.054
  CI (99.9%): [1480958.062, 1599781.647] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 97.44% complete, ETA 00:03:34
# Fork: 1 of 1
# Warmup Iteration   1: 21985.672 ns/op
# Warmup Iteration   2: 12534.533 ns/op
# Warmup Iteration   3: 13159.756 ns/op
# Warmup Iteration   4: 11778.677 ns/op
# Warmup Iteration   5: 11762.537 ns/op
Iteration   1: 11691.646 ns/op
Iteration   2: 11882.428 ns/op
Iteration   3: 11701.085 ns/op
Iteration   4: 11713.766 ns/op
Iteration   5: 11720.180 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  11741.821 ±(99.9%) 305.651 ns/op [Average]
  (min, avg, max) = (11691.646, 11741.821, 11882.428), stdev = 79.377
  CI (99.9%): [11436.169, 12047.472] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 97.69% complete, ETA 00:03:12
# Fork: 1 of 1
# Warmup Iteration   1: 44206.215 ns/op
# Warmup Iteration   2: 22721.674 ns/op
# Warmup Iteration   3: 21987.022 ns/op
# Warmup Iteration   4: 20644.815 ns/op
# Warmup Iteration   5: 21854.861 ns/op
Iteration   1: 20842.451 ns/op
Iteration   2: 20877.685 ns/op
Iteration   3: 20628.566 ns/op
Iteration   4: 20636.456 ns/op
Iteration   5: 20678.202 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  20732.672 ±(99.9%) 456.195 ns/op [Average]
  (min, avg, max) = (20628.566, 20732.672, 20877.685), stdev = 118.472
  CI (99.9%): [20276.477, 21188.867] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 97.95% complete, ETA 00:02:51
# Fork: 1 of 1
# Warmup Iteration   1: 152486.680 ns/op
# Warmup Iteration   2: 51559.871 ns/op
# Warmup Iteration   3: 50874.175 ns/op
# Warmup Iteration   4: 46522.842 ns/op
# Warmup Iteration   5: 48422.295 ns/op
Iteration   1: 46372.824 ns/op
Iteration   2: 47562.536 ns/op
Iteration   3: 46563.306 ns/op
Iteration   4: 46307.606 ns/op
Iteration   5: 46319.179 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  46625.090 ±(99.9%) 2056.256 ns/op [Average]
  (min, avg, max) = (46307.606, 46625.090, 47562.536), stdev = 534.003
  CI (99.9%): [44568.834, 48681.346] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 98.21% complete, ETA 00:02:29
# Fork: 1 of 1
# Warmup Iteration   1: 186921.054 ns/op
# Warmup Iteration   2: 108870.740 ns/op
# Warmup Iteration   3: 105009.198 ns/op
# Warmup Iteration   4: 102782.786 ns/op
# Warmup Iteration   5: 111833.558 ns/op
Iteration   1: 101480.371 ns/op
Iteration   2: 101522.329 ns/op
Iteration   3: 101193.418 ns/op
Iteration   4: 101255.057 ns/op
Iteration   5: 101336.087 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  101357.452 ±(99.9%) 545.045 ns/op [Average]
  (min, avg, max) = (101193.418, 101357.452, 101522.329), stdev = 141.546
  CI (99.9%): [100812.408, 101902.497] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 98.46% complete, ETA 00:02:08
# Fork: 1 of 1
# Warmup Iteration   1: 1263507.181 ns/op
# Warmup Iteration   2: 856063.121 ns/op
# Warmup Iteration   3: 831514.632 ns/op
# Warmup Iteration   4: 822831.616 ns/op
# Warmup Iteration   5: 800161.416 ns/op
Iteration   1: 794824.698 ns/op
Iteration   2: 788534.847 ns/op
Iteration   3: 790235.090 ns/op
Iteration   4: 790873.609 ns/op
Iteration   5: 797643.725 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  792422.394 ±(99.9%) 14321.266 ns/op [Average]
  (min, avg, max) = (788534.847, 792422.394, 797643.725), stdev = 3719.187
  CI (99.9%): [778101.128, 806743.660] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 98.72% complete, ETA 00:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 25356.364 ns/op
# Warmup Iteration   2: 12422.170 ns/op
# Warmup Iteration   3: 10987.430 ns/op
# Warmup Iteration   4: 10873.601 ns/op
# Warmup Iteration   5: 10690.192 ns/op
Iteration   1: 10767.102 ns/op
Iteration   2: 10671.660 ns/op
Iteration   3: 10678.933 ns/op
Iteration   4: 10643.382 ns/op
Iteration   5: 10814.650 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  10715.145 ±(99.9%) 278.694 ns/op [Average]
  (min, avg, max) = (10643.382, 10715.145, 10814.650), stdev = 72.376
  CI (99.9%): [10436.452, 10993.839] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 98.97% complete, ETA 00:01:25
# Fork: 1 of 1
# Warmup Iteration   1: 30874.713 ns/op
# Warmup Iteration   2: 20558.800 ns/op
# Warmup Iteration   3: 19043.074 ns/op
# Warmup Iteration   4: 19068.859 ns/op
# Warmup Iteration   5: 19058.285 ns/op
Iteration   1: 19016.147 ns/op
Iteration   2: 19505.460 ns/op
Iteration   3: 19189.630 ns/op
Iteration   4: 18959.155 ns/op
Iteration   5: 19267.785 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  19187.636 ±(99.9%) 837.132 ns/op [Average]
  (min, avg, max) = (18959.155, 19187.636, 19505.460), stdev = 217.400
  CI (99.9%): [18350.504, 20024.767] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 99.23% complete, ETA 00:01:04
# Fork: 1 of 1
# Warmup Iteration   1: 83747.529 ns/op
# Warmup Iteration   2: 48920.739 ns/op
# Warmup Iteration   3: 45479.668 ns/op
# Warmup Iteration   4: 45048.829 ns/op
# Warmup Iteration   5: 47715.136 ns/op
Iteration   1: 45395.525 ns/op
Iteration   2: 44923.275 ns/op
Iteration   3: 45000.794 ns/op
Iteration   4: 45581.537 ns/op
Iteration   5: 44900.473 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  45160.321 ±(99.9%) 1189.819 ns/op [Average]
  (min, avg, max) = (44900.473, 45160.321, 45581.537), stdev = 308.992
  CI (99.9%): [43970.502, 46350.139] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 99.49% complete, ETA 00:00:42
# Fork: 1 of 1
# Warmup Iteration   1: 491044.820 ns/op
# Warmup Iteration   2: 136319.269 ns/op
# Warmup Iteration   3: 115145.580 ns/op
# Warmup Iteration   4: 112124.694 ns/op
# Warmup Iteration   5: 109976.998 ns/op
Iteration   1: 109527.690 ns/op
Iteration   2: 109705.758 ns/op
Iteration   3: 108948.398 ns/op
Iteration   4: 109197.868 ns/op
Iteration   5: 108972.652 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  109270.473 ±(99.9%) 1296.322 ns/op [Average]
  (min, avg, max) = (108948.398, 109270.473, 109705.758), stdev = 336.651
  CI (99.9%): [107974.151, 110566.795] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 3 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 99.74% complete, ETA 00:00:21
# Fork: 1 of 1
# Warmup Iteration   1: 1519846.937 ns/op
# Warmup Iteration   2: 916798.523 ns/op
# Warmup Iteration   3: 834544.504 ns/op
# Warmup Iteration   4: 861864.799 ns/op
# Warmup Iteration   5: 827566.627 ns/op
Iteration   1: 824989.848 ns/op
Iteration   2: 823350.179 ns/op
Iteration   3: 823342.261 ns/op
Iteration   4: 835462.305 ns/op
Iteration   5: 824267.596 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  826282.438 ±(99.9%) 19938.298 ns/op [Average]
  (min, avg, max) = (823342.261, 826282.438, 835462.305), stdev = 5177.913
  CI (99.9%): [806344.140, 846220.736] (assumes normal distribution)


# Run complete. Total time: 02:19:25

Benchmark                       (converterType)  (inputType)  Mode  Cnt         Score        Error  Units
EventBenchmark.both                        JSON         _1_K  avgt    5     25097.564 ±   1443.714  ns/op
EventBenchmark.both                        JSON         _2_K  avgt    5     48330.965 ±   2375.338  ns/op
EventBenchmark.both                        JSON         _4_K  avgt    5     97051.959 ±   2564.009  ns/op
EventBenchmark.both                        JSON         _8_K  avgt    5    215728.461 ±   3960.506  ns/op
EventBenchmark.both                        JSON        _64_K  avgt    5   2018421.915 ±  51491.301  ns/op
EventBenchmark.both                        CBOR         _1_K  avgt    5     23823.442 ±    982.676  ns/op
EventBenchmark.both                        CBOR         _2_K  avgt    5     41465.938 ±    150.013  ns/op
EventBenchmark.both                        CBOR         _4_K  avgt    5     82562.527 ±   2501.193  ns/op
EventBenchmark.both                        CBOR         _8_K  avgt    5    178990.143 ±   3375.430  ns/op
EventBenchmark.both                        CBOR        _64_K  avgt    5   1691699.834 ±  10939.454  ns/op
EventBenchmark.both                       SMILE         _1_K  avgt    5     24863.538 ±    497.902  ns/op
EventBenchmark.both                       SMILE         _2_K  avgt    5     45575.535 ±   2950.876  ns/op
EventBenchmark.both                       SMILE         _4_K  avgt    5     85281.355 ±   2316.771  ns/op
EventBenchmark.both                       SMILE         _8_K  avgt    5    201035.688 ±   3981.221  ns/op
EventBenchmark.both                       SMILE        _64_K  avgt    5   1945361.321 ±  58097.864  ns/op
EventBenchmark.both                    SCALA_PB         _1_K  avgt    5      9504.016 ±    121.521  ns/op
EventBenchmark.both                    SCALA_PB         _2_K  avgt    5     18577.976 ±    933.583  ns/op
EventBenchmark.both                    SCALA_PB         _4_K  avgt    5     33984.172 ±   1060.358  ns/op
EventBenchmark.both                    SCALA_PB         _8_K  avgt    5     69912.772 ±    659.511  ns/op
EventBenchmark.both                    SCALA_PB        _64_K  avgt    5    691378.613 ±   7203.421  ns/op
EventBenchmark.both                     JAVA_PB         _1_K  avgt    5      9669.974 ±    418.335  ns/op
EventBenchmark.both                     JAVA_PB         _2_K  avgt    5     18839.131 ±    197.091  ns/op
EventBenchmark.both                     JAVA_PB         _4_K  avgt    5     35213.100 ±    472.259  ns/op
EventBenchmark.both                     JAVA_PB         _8_K  avgt    5     74983.780 ±   2724.742  ns/op
EventBenchmark.both                     JAVA_PB        _64_K  avgt    5    861535.495 ±  40098.549  ns/op
EventBenchmark.both                 JAVA_THRIFT         _1_K  avgt    5     11167.954 ±    270.425  ns/op
EventBenchmark.both                 JAVA_THRIFT         _2_K  avgt    5     21306.086 ±    305.345  ns/op
EventBenchmark.both                 JAVA_THRIFT         _4_K  avgt    5     41928.405 ±    115.487  ns/op
EventBenchmark.both                 JAVA_THRIFT         _8_K  avgt    5     91347.528 ±   1802.184  ns/op
EventBenchmark.both                 JAVA_THRIFT        _64_K  avgt    5    986735.286 ±  54044.330  ns/op
EventBenchmark.both                SERIALIZABLE         _1_K  avgt    5    142321.446 ±   1823.279  ns/op
EventBenchmark.both                SERIALIZABLE         _2_K  avgt    5    257824.216 ±   2154.928  ns/op
EventBenchmark.both                SERIALIZABLE         _4_K  avgt    5    606511.709 ±  14478.451  ns/op
EventBenchmark.both                SERIALIZABLE         _8_K  avgt    5   1497792.831 ±  22000.883  ns/op
EventBenchmark.both                SERIALIZABLE        _64_K  avgt    5  12810832.331 ± 192109.239  ns/op
EventBenchmark.both                   BOOPICKLE         _1_K  avgt    5      7095.494 ±    635.180  ns/op
EventBenchmark.both                   BOOPICKLE         _2_K  avgt    5     13642.682 ±    295.115  ns/op
EventBenchmark.both                   BOOPICKLE         _4_K  avgt    5     24713.412 ±    312.373  ns/op
EventBenchmark.both                   BOOPICKLE         _8_K  avgt    5     49572.004 ±   4545.279  ns/op
EventBenchmark.both                   BOOPICKLE        _64_K  avgt    5    477108.394 ±  17557.714  ns/op
EventBenchmark.both                       CHILL         _1_K  avgt    5     66907.790 ±  11620.409  ns/op
EventBenchmark.both                       CHILL         _2_K  avgt    5    118236.521 ±  28623.314  ns/op
EventBenchmark.both                       CHILL         _4_K  avgt    5    255173.619 ±  16979.354  ns/op
EventBenchmark.both                       CHILL         _8_K  avgt    5    571980.827 ±  32409.055  ns/op
EventBenchmark.both                       CHILL        _64_K  avgt    5   5378263.684 ± 907057.811  ns/op
EventBenchmark.both                       CIRCE         _1_K  avgt    5    187093.111 ±   7956.753  ns/op
EventBenchmark.both                       CIRCE         _2_K  avgt    5    281215.556 ±  10731.297  ns/op
EventBenchmark.both                       CIRCE         _4_K  avgt    5    589812.633 ±  16967.536  ns/op
EventBenchmark.both                       CIRCE         _8_K  avgt    5   1362433.566 ±  94338.113  ns/op
EventBenchmark.both                       CIRCE        _64_K  avgt    5  12786617.147 ± 299928.240  ns/op
EventBenchmark.both                UPICKLE_JSON         _1_K  avgt    5     46904.659 ±   1079.701  ns/op
EventBenchmark.both                UPICKLE_JSON         _2_K  avgt    5     89716.210 ±   1698.471  ns/op
EventBenchmark.both                UPICKLE_JSON         _4_K  avgt    5    210213.137 ±   2816.423  ns/op
EventBenchmark.both                UPICKLE_JSON         _8_K  avgt    5    493655.169 ±  16322.828  ns/op
EventBenchmark.both                UPICKLE_JSON        _64_K  avgt    5   4682659.290 ±  63635.918  ns/op
EventBenchmark.both             UPICKLE_MSGPACK         _1_K  avgt    5     38327.909 ±    252.736  ns/op
EventBenchmark.both             UPICKLE_MSGPACK         _2_K  avgt    5     69924.514 ±    507.697  ns/op
EventBenchmark.both             UPICKLE_MSGPACK         _4_K  avgt    5    169961.823 ±   5639.529  ns/op
EventBenchmark.both             UPICKLE_MSGPACK         _8_K  avgt    5    441758.411 ±  40291.790  ns/op
EventBenchmark.both             UPICKLE_MSGPACK        _64_K  avgt    5   3827094.715 ± 149471.188  ns/op
EventBenchmark.deserialization             JSON         _1_K  avgt    5     14945.944 ±    471.703  ns/op
EventBenchmark.deserialization             JSON         _2_K  avgt    5     26975.468 ±    566.248  ns/op
EventBenchmark.deserialization             JSON         _4_K  avgt    5     53190.489 ±   1721.605  ns/op
EventBenchmark.deserialization             JSON         _8_K  avgt    5    120527.244 ±   1237.811  ns/op
EventBenchmark.deserialization             JSON        _64_K  avgt    5   1132340.214 ±   4261.102  ns/op
EventBenchmark.deserialization             CBOR         _1_K  avgt    5     15038.638 ±    100.296  ns/op
EventBenchmark.deserialization             CBOR         _2_K  avgt    5     27327.493 ±   1477.505  ns/op
EventBenchmark.deserialization             CBOR         _4_K  avgt    5     54691.815 ±   3580.339  ns/op
EventBenchmark.deserialization             CBOR         _8_K  avgt    5    102492.590 ±   4588.925  ns/op
EventBenchmark.deserialization             CBOR        _64_K  avgt    5   1028071.560 ±  33977.060  ns/op
EventBenchmark.deserialization            SMILE         _1_K  avgt    5     14419.649 ±    336.062  ns/op
EventBenchmark.deserialization            SMILE         _2_K  avgt    5     26921.885 ±   1782.505  ns/op
EventBenchmark.deserialization            SMILE         _4_K  avgt    5     49576.430 ±   2215.499  ns/op
EventBenchmark.deserialization            SMILE         _8_K  avgt    5    107204.455 ±   2284.652  ns/op
EventBenchmark.deserialization            SMILE        _64_K  avgt    5   1021814.416 ±  37313.014  ns/op
EventBenchmark.deserialization         SCALA_PB         _1_K  avgt    5      5924.125 ±     95.218  ns/op
EventBenchmark.deserialization         SCALA_PB         _2_K  avgt    5     11009.257 ±    242.266  ns/op
EventBenchmark.deserialization         SCALA_PB         _4_K  avgt    5     20849.900 ±    193.246  ns/op
EventBenchmark.deserialization         SCALA_PB         _8_K  avgt    5     44021.304 ±    836.812  ns/op
EventBenchmark.deserialization         SCALA_PB        _64_K  avgt    5    454670.495 ±   3191.873  ns/op
EventBenchmark.deserialization          JAVA_PB         _1_K  avgt    5      4168.266 ±    100.380  ns/op
EventBenchmark.deserialization          JAVA_PB         _2_K  avgt    5      8868.573 ±    254.361  ns/op
EventBenchmark.deserialization          JAVA_PB         _4_K  avgt    5     16652.437 ±    429.798  ns/op
EventBenchmark.deserialization          JAVA_PB         _8_K  avgt    5     34853.886 ±   3484.334  ns/op
EventBenchmark.deserialization          JAVA_PB        _64_K  avgt    5    369014.063 ±   2135.649  ns/op
EventBenchmark.deserialization      JAVA_THRIFT         _1_K  avgt    5      4689.945 ±    123.994  ns/op
EventBenchmark.deserialization      JAVA_THRIFT         _2_K  avgt    5      9025.215 ±    134.540  ns/op
EventBenchmark.deserialization      JAVA_THRIFT         _4_K  avgt    5     17440.484 ±    312.114  ns/op
EventBenchmark.deserialization      JAVA_THRIFT         _8_K  avgt    5     35276.806 ±    664.255  ns/op
EventBenchmark.deserialization      JAVA_THRIFT        _64_K  avgt    5    344240.605 ±  21719.278  ns/op
EventBenchmark.deserialization     SERIALIZABLE         _1_K  avgt    5    117321.733 ±   5644.414  ns/op
EventBenchmark.deserialization     SERIALIZABLE         _2_K  avgt    5    203639.494 ±   2766.790  ns/op
EventBenchmark.deserialization     SERIALIZABLE         _4_K  avgt    5    511653.372 ±  18200.096  ns/op
EventBenchmark.deserialization     SERIALIZABLE         _8_K  avgt    5   1149996.563 ±  21151.359  ns/op
EventBenchmark.deserialization     SERIALIZABLE        _64_K  avgt    5  10107517.587 ± 261844.855  ns/op
EventBenchmark.deserialization        BOOPICKLE         _1_K  avgt    5      2639.162 ±     61.894  ns/op
EventBenchmark.deserialization        BOOPICKLE         _2_K  avgt    5      5117.570 ±     27.513  ns/op
EventBenchmark.deserialization        BOOPICKLE         _4_K  avgt    5      9848.315 ±     55.832  ns/op
EventBenchmark.deserialization        BOOPICKLE         _8_K  avgt    5     19979.737 ±    114.518  ns/op
EventBenchmark.deserialization        BOOPICKLE        _64_K  avgt    5    227952.377 ±   7087.738  ns/op
EventBenchmark.deserialization            CHILL         _1_K  avgt    5     32205.978 ±   3100.995  ns/op
EventBenchmark.deserialization            CHILL         _2_K  avgt    5     64554.093 ±   8838.634  ns/op
EventBenchmark.deserialization            CHILL         _4_K  avgt    5    121103.406 ±  10207.030  ns/op
EventBenchmark.deserialization            CHILL         _8_K  avgt    5    281567.287 ±  21238.935  ns/op
EventBenchmark.deserialization            CHILL        _64_K  avgt    5   2729521.538 ± 269743.287  ns/op
EventBenchmark.deserialization            CIRCE         _1_K  avgt    5    146332.813 ±   7938.543  ns/op
EventBenchmark.deserialization            CIRCE         _2_K  avgt    5    206586.698 ±   5518.135  ns/op
EventBenchmark.deserialization            CIRCE         _4_K  avgt    5    415341.830 ±  10854.437  ns/op
EventBenchmark.deserialization            CIRCE         _8_K  avgt    5    959063.348 ±  23319.307  ns/op
EventBenchmark.deserialization            CIRCE        _64_K  avgt    5   9149860.525 ± 319831.217  ns/op
EventBenchmark.deserialization     UPICKLE_JSON         _1_K  avgt    5     23180.595 ±    199.331  ns/op
EventBenchmark.deserialization     UPICKLE_JSON         _2_K  avgt    5     44131.726 ±   1246.006  ns/op
EventBenchmark.deserialization     UPICKLE_JSON         _4_K  avgt    5    101194.629 ±   1839.433  ns/op
EventBenchmark.deserialization     UPICKLE_JSON         _8_K  avgt    5    239693.159 ±  10981.235  ns/op
EventBenchmark.deserialization     UPICKLE_JSON        _64_K  avgt    5   2314596.990 ± 172424.667  ns/op
EventBenchmark.deserialization  UPICKLE_MSGPACK         _1_K  avgt    5     16182.997 ±    471.135  ns/op
EventBenchmark.deserialization  UPICKLE_MSGPACK         _2_K  avgt    5     31933.435 ±   1354.220  ns/op
EventBenchmark.deserialization  UPICKLE_MSGPACK         _4_K  avgt    5     77625.963 ±   1680.872  ns/op
EventBenchmark.deserialization  UPICKLE_MSGPACK         _8_K  avgt    5    193084.702 ±   4730.543  ns/op
EventBenchmark.deserialization  UPICKLE_MSGPACK        _64_K  avgt    5   2078470.707 ±  38611.150  ns/op
EventBenchmark.serialization               JSON         _1_K  avgt    5     10444.151 ±    189.580  ns/op
EventBenchmark.serialization               JSON         _2_K  avgt    5     19948.980 ±    584.615  ns/op
EventBenchmark.serialization               JSON         _4_K  avgt    5     36605.262 ±    232.178  ns/op
EventBenchmark.serialization               JSON         _8_K  avgt    5     83478.513 ±  10716.512  ns/op
EventBenchmark.serialization               JSON        _64_K  avgt    5    820651.785 ±  46036.372  ns/op
EventBenchmark.serialization               CBOR         _1_K  avgt    5      8730.894 ±    341.973  ns/op
EventBenchmark.serialization               CBOR         _2_K  avgt    5     14223.493 ±    211.043  ns/op
EventBenchmark.serialization               CBOR         _4_K  avgt    5     31636.171 ±    588.028  ns/op
EventBenchmark.serialization               CBOR         _8_K  avgt    5     76298.052 ±   1201.655  ns/op
EventBenchmark.serialization               CBOR        _64_K  avgt    5    658307.680 ±  19355.465  ns/op
EventBenchmark.serialization              SMILE         _1_K  avgt    5     10480.846 ±    112.027  ns/op
EventBenchmark.serialization              SMILE         _2_K  avgt    5     19382.032 ±    596.384  ns/op
EventBenchmark.serialization              SMILE         _4_K  avgt    5     40343.961 ±    577.804  ns/op
EventBenchmark.serialization              SMILE         _8_K  avgt    5     70775.500 ±   1775.913  ns/op
EventBenchmark.serialization              SMILE        _64_K  avgt    5    811407.794 ±  42494.278  ns/op
EventBenchmark.serialization           SCALA_PB         _1_K  avgt    5      3127.037 ±     13.627  ns/op
EventBenchmark.serialization           SCALA_PB         _2_K  avgt    5      6464.363 ±    160.214  ns/op
EventBenchmark.serialization           SCALA_PB         _4_K  avgt    5     12041.522 ±    598.795  ns/op
EventBenchmark.serialization           SCALA_PB         _8_K  avgt    5     23039.569 ±     92.960  ns/op
EventBenchmark.serialization           SCALA_PB        _64_K  avgt    5    246043.730 ±   8402.298  ns/op
EventBenchmark.serialization            JAVA_PB         _1_K  avgt    5      4538.987 ±    230.186  ns/op
EventBenchmark.serialization            JAVA_PB         _2_K  avgt    5     10016.130 ±    175.798  ns/op
EventBenchmark.serialization            JAVA_PB         _4_K  avgt    5     18471.722 ±    762.072  ns/op
EventBenchmark.serialization            JAVA_PB         _8_K  avgt    5     37703.537 ±    291.710  ns/op
EventBenchmark.serialization            JAVA_PB        _64_K  avgt    5    445445.085 ±  17693.786  ns/op
EventBenchmark.serialization        JAVA_THRIFT         _1_K  avgt    5      5981.122 ±     91.216  ns/op
EventBenchmark.serialization        JAVA_THRIFT         _2_K  avgt    5     11989.892 ±    534.389  ns/op
EventBenchmark.serialization        JAVA_THRIFT         _4_K  avgt    5     23967.394 ±    500.732  ns/op
EventBenchmark.serialization        JAVA_THRIFT         _8_K  avgt    5     53468.919 ±    210.828  ns/op
EventBenchmark.serialization        JAVA_THRIFT        _64_K  avgt    5    580413.553 ±   2275.677  ns/op
EventBenchmark.serialization       SERIALIZABLE         _1_K  avgt    5     26614.310 ±    621.521  ns/op
EventBenchmark.serialization       SERIALIZABLE         _2_K  avgt    5     48412.459 ±     98.244  ns/op
EventBenchmark.serialization       SERIALIZABLE         _4_K  avgt    5    107374.774 ±   2769.407  ns/op
EventBenchmark.serialization       SERIALIZABLE         _8_K  avgt    5    253473.285 ±   2374.684  ns/op
EventBenchmark.serialization       SERIALIZABLE        _64_K  avgt    5   2278545.441 ±  34159.710  ns/op
EventBenchmark.serialization          BOOPICKLE         _1_K  avgt    5      4289.598 ±     83.992  ns/op
EventBenchmark.serialization          BOOPICKLE         _2_K  avgt    5      7738.519 ±    270.604  ns/op
EventBenchmark.serialization          BOOPICKLE         _4_K  avgt    5     13593.273 ±    527.813  ns/op
EventBenchmark.serialization          BOOPICKLE         _8_K  avgt    5     27164.026 ±    665.049  ns/op
EventBenchmark.serialization          BOOPICKLE        _64_K  avgt    5    254858.690 ±   2070.634  ns/op
EventBenchmark.serialization              CHILL         _1_K  avgt    5     31171.123 ±   6890.092  ns/op
EventBenchmark.serialization              CHILL         _2_K  avgt    5     61397.409 ±   2855.137  ns/op
EventBenchmark.serialization              CHILL         _4_K  avgt    5    126615.437 ±  25306.591  ns/op
EventBenchmark.serialization              CHILL         _8_K  avgt    5    287809.538 ±  34128.433  ns/op
EventBenchmark.serialization              CHILL        _64_K  avgt    5   2488118.633 ± 201382.124  ns/op
EventBenchmark.serialization              CIRCE         _1_K  avgt    5     39786.504 ±   1233.067  ns/op
EventBenchmark.serialization              CIRCE         _2_K  avgt    5     74119.721 ±   1144.870  ns/op
EventBenchmark.serialization              CIRCE         _4_K  avgt    5    153012.879 ±   4180.413  ns/op
EventBenchmark.serialization              CIRCE         _8_K  avgt    5    348991.870 ±   8748.562  ns/op
EventBenchmark.serialization              CIRCE        _64_K  avgt    5   3245726.148 ±  71399.802  ns/op
EventBenchmark.serialization       UPICKLE_JSON         _1_K  avgt    5     25384.794 ±    225.169  ns/op
EventBenchmark.serialization       UPICKLE_JSON         _2_K  avgt    5     37210.031 ±    163.597  ns/op
EventBenchmark.serialization       UPICKLE_JSON         _4_K  avgt    5     87752.436 ±   2768.091  ns/op
EventBenchmark.serialization       UPICKLE_JSON         _8_K  avgt    5    221757.570 ±   4084.243  ns/op
EventBenchmark.serialization       UPICKLE_JSON        _64_K  avgt    5   1827463.604 ±  13574.845  ns/op
EventBenchmark.serialization    UPICKLE_MSGPACK         _1_K  avgt    5     18210.423 ±    364.711  ns/op
EventBenchmark.serialization    UPICKLE_MSGPACK         _2_K  avgt    5     35655.169 ±   1336.664  ns/op
EventBenchmark.serialization    UPICKLE_MSGPACK         _4_K  avgt    5     77144.974 ±    611.238  ns/op
EventBenchmark.serialization    UPICKLE_MSGPACK         _8_K  avgt    5    200121.065 ±   4200.425  ns/op
EventBenchmark.serialization    UPICKLE_MSGPACK        _64_K  avgt    5   1758964.666 ±  50855.666  ns/op
SiteBenchmark.both                         JSON         _1_K  avgt    5     15903.916 ±    634.289  ns/op
SiteBenchmark.both                         JSON         _2_K  avgt    5     28217.351 ±   1267.857  ns/op
SiteBenchmark.both                         JSON         _4_K  avgt    5     52291.837 ±   1048.024  ns/op
SiteBenchmark.both                         JSON         _8_K  avgt    5    104287.341 ±   2433.944  ns/op
SiteBenchmark.both                         JSON        _64_K  avgt    5    802337.813 ±  21257.240  ns/op
SiteBenchmark.both                         CBOR         _1_K  avgt    5     13371.340 ±    281.352  ns/op
SiteBenchmark.both                         CBOR         _2_K  avgt    5     21193.111 ±    834.735  ns/op
SiteBenchmark.both                         CBOR         _4_K  avgt    5     40410.145 ±   1393.178  ns/op
SiteBenchmark.both                         CBOR         _8_K  avgt    5     81385.445 ±   1533.989  ns/op
SiteBenchmark.both                         CBOR        _64_K  avgt    5    621747.102 ±   5677.161  ns/op
SiteBenchmark.both                        SMILE         _1_K  avgt    5     13112.187 ±    354.676  ns/op
SiteBenchmark.both                        SMILE         _2_K  avgt    5     23033.226 ±    986.545  ns/op
SiteBenchmark.both                        SMILE         _4_K  avgt    5     40462.276 ±    547.790  ns/op
SiteBenchmark.both                        SMILE         _8_K  avgt    5     79884.274 ±   4213.233  ns/op
SiteBenchmark.both                        SMILE        _64_K  avgt    5    570657.552 ±  23475.484  ns/op
SiteBenchmark.both                     SCALA_PB         _1_K  avgt    5      5897.936 ±     35.218  ns/op
SiteBenchmark.both                     SCALA_PB         _2_K  avgt    5     12152.804 ±    288.772  ns/op
SiteBenchmark.both                     SCALA_PB         _4_K  avgt    5     22403.310 ±   2180.646  ns/op
SiteBenchmark.both                     SCALA_PB         _8_K  avgt    5     40481.427 ±   3470.383  ns/op
SiteBenchmark.both                     SCALA_PB        _64_K  avgt    5    319496.778 ±   3655.793  ns/op
SiteBenchmark.both                      JAVA_PB         _1_K  avgt    5      8916.964 ±     24.862  ns/op
SiteBenchmark.both                      JAVA_PB         _2_K  avgt    5     16804.603 ±    413.164  ns/op
SiteBenchmark.both                      JAVA_PB         _4_K  avgt    5     29455.461 ±    454.602  ns/op
SiteBenchmark.both                      JAVA_PB         _8_K  avgt    5     57554.336 ±    398.969  ns/op
SiteBenchmark.both                      JAVA_PB        _64_K  avgt    5    547856.420 ±   6796.475  ns/op
SiteBenchmark.both                  JAVA_THRIFT         _1_K  avgt    5      8983.832 ±    244.760  ns/op
SiteBenchmark.both                  JAVA_THRIFT         _2_K  avgt    5     16571.250 ±    855.606  ns/op
SiteBenchmark.both                  JAVA_THRIFT         _4_K  avgt    5     29287.050 ±   1180.788  ns/op
SiteBenchmark.both                  JAVA_THRIFT         _8_K  avgt    5     59362.537 ±   1190.484  ns/op
SiteBenchmark.both                  JAVA_THRIFT        _64_K  avgt    5    542479.312 ±   2657.153  ns/op
SiteBenchmark.both                 SERIALIZABLE         _1_K  avgt    5    130722.938 ±   8407.002  ns/op
SiteBenchmark.both                 SERIALIZABLE         _2_K  avgt    5    175791.364 ±   3920.018  ns/op
SiteBenchmark.both                 SERIALIZABLE         _4_K  avgt    5    229901.100 ±   4971.362  ns/op
SiteBenchmark.both                 SERIALIZABLE         _8_K  avgt    5    342933.197 ±   9117.703  ns/op
SiteBenchmark.both                 SERIALIZABLE        _64_K  avgt    5   1994986.148 ±  59045.596  ns/op
SiteBenchmark.both                    BOOPICKLE         _1_K  avgt    5      5225.132 ±     45.989  ns/op
SiteBenchmark.both                    BOOPICKLE         _2_K  avgt    5      9828.755 ±    153.623  ns/op
SiteBenchmark.both                    BOOPICKLE         _4_K  avgt    5     17038.152 ±    120.024  ns/op
SiteBenchmark.both                    BOOPICKLE         _8_K  avgt    5     31567.564 ±    955.228  ns/op
SiteBenchmark.both                    BOOPICKLE        _64_K  avgt    5    281895.829 ±   4929.429  ns/op
SiteBenchmark.both                        CHILL         _1_K  avgt    5     12502.592 ±    263.108  ns/op
SiteBenchmark.both                        CHILL         _2_K  avgt    5     21942.212 ±    779.545  ns/op
SiteBenchmark.both                        CHILL         _4_K  avgt    5     36383.999 ±    349.399  ns/op
SiteBenchmark.both                        CHILL         _8_K  avgt    5     81110.833 ±   2863.554  ns/op
SiteBenchmark.both                        CHILL        _64_K  avgt    5    743366.868 ± 159498.856  ns/op
SiteBenchmark.both                        CIRCE         _1_K  avgt    5     44248.798 ±    936.719  ns/op
SiteBenchmark.both                        CIRCE         _2_K  avgt    5     77571.909 ±    699.483  ns/op
SiteBenchmark.both                        CIRCE         _4_K  avgt    5    177455.767 ±   3052.398  ns/op
SiteBenchmark.both                        CIRCE         _8_K  avgt    5    410624.071 ±  11406.498  ns/op
SiteBenchmark.both                        CIRCE        _64_K  avgt    5   3244387.477 ± 199684.185  ns/op
SiteBenchmark.both                 UPICKLE_JSON         _1_K  avgt    5     30091.615 ±    163.742  ns/op
SiteBenchmark.both                 UPICKLE_JSON         _2_K  avgt    5     55936.215 ±   1083.739  ns/op
SiteBenchmark.both                 UPICKLE_JSON         _4_K  avgt    5    122543.461 ±    947.334  ns/op
SiteBenchmark.both                 UPICKLE_JSON         _8_K  avgt    5    292962.521 ±   2602.788  ns/op
SiteBenchmark.both                 UPICKLE_JSON        _64_K  avgt    5   2158547.838 ±  64526.175  ns/op
SiteBenchmark.both              UPICKLE_MSGPACK         _1_K  avgt    5     23272.603 ±     61.070  ns/op
SiteBenchmark.both              UPICKLE_MSGPACK         _2_K  avgt    5     42648.464 ±   1016.060  ns/op
SiteBenchmark.both              UPICKLE_MSGPACK         _4_K  avgt    5     97710.364 ±   1871.757  ns/op
SiteBenchmark.both              UPICKLE_MSGPACK         _8_K  avgt    5    230816.457 ±   4155.852  ns/op
SiteBenchmark.both              UPICKLE_MSGPACK        _64_K  avgt    5   1988006.617 ±  56555.639  ns/op
SiteBenchmark.deserialization              JSON         _1_K  avgt    5      8812.885 ±     86.921  ns/op
SiteBenchmark.deserialization              JSON         _2_K  avgt    5     15989.565 ±    340.537  ns/op
SiteBenchmark.deserialization              JSON         _4_K  avgt    5     30153.139 ±   1104.663  ns/op
SiteBenchmark.deserialization              JSON         _8_K  avgt    5     60816.285 ±   1557.001  ns/op
SiteBenchmark.deserialization              JSON        _64_K  avgt    5    470039.642 ±  14639.018  ns/op
SiteBenchmark.deserialization              CBOR         _1_K  avgt    5      7711.814 ±     66.111  ns/op
SiteBenchmark.deserialization              CBOR         _2_K  avgt    5     13613.283 ±    264.069  ns/op
SiteBenchmark.deserialization              CBOR         _4_K  avgt    5     24231.419 ±    925.949  ns/op
SiteBenchmark.deserialization              CBOR         _8_K  avgt    5     51577.777 ±   1224.080  ns/op
SiteBenchmark.deserialization              CBOR        _64_K  avgt    5    394061.116 ±  19581.228  ns/op
SiteBenchmark.deserialization             SMILE         _1_K  avgt    5      8636.553 ±    234.150  ns/op
SiteBenchmark.deserialization             SMILE         _2_K  avgt    5     14031.946 ±    433.917  ns/op
SiteBenchmark.deserialization             SMILE         _4_K  avgt    5     25146.193 ±    560.851  ns/op
SiteBenchmark.deserialization             SMILE         _8_K  avgt    5     47321.850 ±    742.520  ns/op
SiteBenchmark.deserialization             SMILE        _64_K  avgt    5    341187.823 ±  15271.579  ns/op
SiteBenchmark.deserialization          SCALA_PB         _1_K  avgt    5      3063.382 ±    206.156  ns/op
SiteBenchmark.deserialization          SCALA_PB         _2_K  avgt    5      5649.434 ±    131.918  ns/op
SiteBenchmark.deserialization          SCALA_PB         _4_K  avgt    5     10848.255 ±    419.002  ns/op
SiteBenchmark.deserialization          SCALA_PB         _8_K  avgt    5     21143.284 ±    100.688  ns/op
SiteBenchmark.deserialization          SCALA_PB        _64_K  avgt    5    183913.042 ±    282.277  ns/op
SiteBenchmark.deserialization           JAVA_PB         _1_K  avgt    5      4635.642 ±     74.408  ns/op
SiteBenchmark.deserialization           JAVA_PB         _2_K  avgt    5      8455.300 ±     75.617  ns/op
SiteBenchmark.deserialization           JAVA_PB         _4_K  avgt    5     14952.044 ±    243.717  ns/op
SiteBenchmark.deserialization           JAVA_PB         _8_K  avgt    5     29718.532 ±    544.935  ns/op
SiteBenchmark.deserialization           JAVA_PB        _64_K  avgt    5    264820.478 ±  15890.886  ns/op
SiteBenchmark.deserialization       JAVA_THRIFT         _1_K  avgt    5      4192.588 ±     87.663  ns/op
SiteBenchmark.deserialization       JAVA_THRIFT         _2_K  avgt    5      7485.348 ±    183.486  ns/op
SiteBenchmark.deserialization       JAVA_THRIFT         _4_K  avgt    5     12834.284 ±    205.365  ns/op
SiteBenchmark.deserialization       JAVA_THRIFT         _8_K  avgt    5     24552.950 ±   2189.438  ns/op
SiteBenchmark.deserialization       JAVA_THRIFT        _64_K  avgt    5    222370.288 ±   3190.769  ns/op
SiteBenchmark.deserialization      SERIALIZABLE         _1_K  avgt    5    100078.796 ±   4196.723  ns/op
SiteBenchmark.deserialization      SERIALIZABLE         _2_K  avgt    5    135959.537 ±   3352.842  ns/op
SiteBenchmark.deserialization      SERIALIZABLE         _4_K  avgt    5    162073.009 ±   4290.615  ns/op
SiteBenchmark.deserialization      SERIALIZABLE         _8_K  avgt    5    202890.309 ±  10427.113  ns/op
SiteBenchmark.deserialization      SERIALIZABLE        _64_K  avgt    5    860714.726 ±  14521.528  ns/op
SiteBenchmark.deserialization         BOOPICKLE         _1_K  avgt    5      2261.472 ±     60.217  ns/op
SiteBenchmark.deserialization         BOOPICKLE         _2_K  avgt    5      4509.680 ±     67.311  ns/op
SiteBenchmark.deserialization         BOOPICKLE         _4_K  avgt    5      8377.393 ±    223.495  ns/op
SiteBenchmark.deserialization         BOOPICKLE         _8_K  avgt    5     15938.478 ±     76.460  ns/op
SiteBenchmark.deserialization         BOOPICKLE        _64_K  avgt    5    156591.993 ±   2113.782  ns/op
SiteBenchmark.deserialization             CHILL         _1_K  avgt    5      6283.495 ±    264.525  ns/op
SiteBenchmark.deserialization             CHILL         _2_K  avgt    5     10631.146 ±    220.233  ns/op
SiteBenchmark.deserialization             CHILL         _4_K  avgt    5     17573.784 ±    759.565  ns/op
SiteBenchmark.deserialization             CHILL         _8_K  avgt    5     29187.917 ±    621.051  ns/op
SiteBenchmark.deserialization             CHILL        _64_K  avgt    5    252459.531 ±   7085.155  ns/op
SiteBenchmark.deserialization             CIRCE         _1_K  avgt    5     22850.654 ±    344.430  ns/op
SiteBenchmark.deserialization             CIRCE         _2_K  avgt    5     38919.196 ±    768.074  ns/op
SiteBenchmark.deserialization             CIRCE         _4_K  avgt    5     93083.385 ±    716.336  ns/op
SiteBenchmark.deserialization             CIRCE         _8_K  avgt    5    220863.884 ±   9734.251  ns/op
SiteBenchmark.deserialization             CIRCE        _64_K  avgt    5   1640922.153 ±  78412.980  ns/op
SiteBenchmark.deserialization      UPICKLE_JSON         _1_K  avgt    5     16970.388 ±    849.527  ns/op
SiteBenchmark.deserialization      UPICKLE_JSON         _2_K  avgt    5     31647.091 ±    215.952  ns/op
SiteBenchmark.deserialization      UPICKLE_JSON         _4_K  avgt    5     73775.071 ±    985.230  ns/op
SiteBenchmark.deserialization      UPICKLE_JSON         _8_K  avgt    5    168863.647 ±    863.003  ns/op
SiteBenchmark.deserialization      UPICKLE_JSON        _64_K  avgt    5   1324952.459 ±   9748.276  ns/op
SiteBenchmark.deserialization   UPICKLE_MSGPACK         _1_K  avgt    5     11721.748 ±    393.554  ns/op
SiteBenchmark.deserialization   UPICKLE_MSGPACK         _2_K  avgt    5     22320.553 ±    228.337  ns/op
SiteBenchmark.deserialization   UPICKLE_MSGPACK         _4_K  avgt    5     50643.746 ±    939.056  ns/op
SiteBenchmark.deserialization   UPICKLE_MSGPACK         _8_K  avgt    5    120149.072 ±   2233.174  ns/op
SiteBenchmark.deserialization   UPICKLE_MSGPACK        _64_K  avgt    5    987721.549 ±  26848.481  ns/op
SiteBenchmark.serialization                JSON         _1_K  avgt    5      5103.332 ±    211.100  ns/op
SiteBenchmark.serialization                JSON         _2_K  avgt    5     10570.800 ±    241.259  ns/op
SiteBenchmark.serialization                JSON         _4_K  avgt    5     19768.483 ±   1264.932  ns/op
SiteBenchmark.serialization                JSON         _8_K  avgt    5     38261.731 ±    829.865  ns/op
SiteBenchmark.serialization                JSON        _64_K  avgt    5    292847.988 ±   4426.372  ns/op
SiteBenchmark.serialization                CBOR         _1_K  avgt    5      3294.457 ±     71.452  ns/op
SiteBenchmark.serialization                CBOR         _2_K  avgt    5      6761.326 ±    390.345  ns/op
SiteBenchmark.serialization                CBOR         _4_K  avgt    5     13135.077 ±    666.099  ns/op
SiteBenchmark.serialization                CBOR         _8_K  avgt    5     25763.139 ±    976.692  ns/op
SiteBenchmark.serialization                CBOR        _64_K  avgt    5    221163.241 ±   5562.058  ns/op
SiteBenchmark.serialization               SMILE         _1_K  avgt    5      4174.413 ±    341.068  ns/op
SiteBenchmark.serialization               SMILE         _2_K  avgt    5      7947.755 ±    234.758  ns/op
SiteBenchmark.serialization               SMILE         _4_K  avgt    5     14610.819 ±    302.006  ns/op
SiteBenchmark.serialization               SMILE         _8_K  avgt    5     26378.312 ±   1088.224  ns/op
SiteBenchmark.serialization               SMILE        _64_K  avgt    5    196408.047 ±   8787.204  ns/op
SiteBenchmark.serialization            SCALA_PB         _1_K  avgt    5      2378.913 ±    204.418  ns/op
SiteBenchmark.serialization            SCALA_PB         _2_K  avgt    5      5303.640 ±     82.674  ns/op
SiteBenchmark.serialization            SCALA_PB         _4_K  avgt    5      9571.176 ±     77.342  ns/op
SiteBenchmark.serialization            SCALA_PB         _8_K  avgt    5     16742.245 ±   1249.757  ns/op
SiteBenchmark.serialization            SCALA_PB        _64_K  avgt    5    143133.885 ±   1888.493  ns/op
SiteBenchmark.serialization             JAVA_PB         _1_K  avgt    5      3692.703 ±    110.097  ns/op
SiteBenchmark.serialization             JAVA_PB         _2_K  avgt    5      7108.138 ±    132.642  ns/op
SiteBenchmark.serialization             JAVA_PB         _4_K  avgt    5     12241.709 ±    238.594  ns/op
SiteBenchmark.serialization             JAVA_PB         _8_K  avgt    5     23898.796 ±    366.759  ns/op
SiteBenchmark.serialization             JAVA_PB        _64_K  avgt    5    286874.542 ±   8904.560  ns/op
SiteBenchmark.serialization         JAVA_THRIFT         _1_K  avgt    5      3953.584 ±     95.542  ns/op
SiteBenchmark.serialization         JAVA_THRIFT         _2_K  avgt    5      7859.701 ±    252.344  ns/op
SiteBenchmark.serialization         JAVA_THRIFT         _4_K  avgt    5     15855.482 ±    788.565  ns/op
SiteBenchmark.serialization         JAVA_THRIFT         _8_K  avgt    5     29561.406 ±   1158.374  ns/op
SiteBenchmark.serialization         JAVA_THRIFT        _64_K  avgt    5    316098.498 ±   8886.310  ns/op
SiteBenchmark.serialization        SERIALIZABLE         _1_K  avgt    5     27682.784 ±    535.700  ns/op
SiteBenchmark.serialization        SERIALIZABLE         _2_K  avgt    5     40267.360 ±   1435.559  ns/op
SiteBenchmark.serialization        SERIALIZABLE         _4_K  avgt    5     62023.562 ±   1287.978  ns/op
SiteBenchmark.serialization        SERIALIZABLE         _8_K  avgt    5    126473.079 ±   3829.511  ns/op
SiteBenchmark.serialization        SERIALIZABLE        _64_K  avgt    5   1010695.746 ±  20997.606  ns/op
SiteBenchmark.serialization           BOOPICKLE         _1_K  avgt    5      2567.187 ±     43.757  ns/op
SiteBenchmark.serialization           BOOPICKLE         _2_K  avgt    5      4720.729 ±     98.923  ns/op
SiteBenchmark.serialization           BOOPICKLE         _4_K  avgt    5      7702.294 ±     93.411  ns/op
SiteBenchmark.serialization           BOOPICKLE         _8_K  avgt    5     13430.628 ±    832.252  ns/op
SiteBenchmark.serialization           BOOPICKLE        _64_K  avgt    5    117992.107 ±    796.526  ns/op
SiteBenchmark.serialization               CHILL         _1_K  avgt    5      7591.528 ±   2134.995  ns/op
SiteBenchmark.serialization               CHILL         _2_K  avgt    5     10239.547 ±    210.075  ns/op
SiteBenchmark.serialization               CHILL         _4_K  avgt    5     18754.983 ±    504.081  ns/op
SiteBenchmark.serialization               CHILL         _8_K  avgt    5     63101.250 ±   2010.463  ns/op
SiteBenchmark.serialization               CHILL        _64_K  avgt    5    489704.030 ±   4260.693  ns/op
SiteBenchmark.serialization               CIRCE         _1_K  avgt    5     18607.668 ±    285.023  ns/op
SiteBenchmark.serialization               CIRCE         _2_K  avgt    5     36550.513 ±     90.954  ns/op
SiteBenchmark.serialization               CIRCE         _4_K  avgt    5     80416.216 ±    576.594  ns/op
SiteBenchmark.serialization               CIRCE         _8_K  avgt    5    179740.705 ±   4757.123  ns/op
SiteBenchmark.serialization               CIRCE        _64_K  avgt    5   1540369.855 ±  59411.793  ns/op
SiteBenchmark.serialization        UPICKLE_JSON         _1_K  avgt    5     11741.821 ±    305.651  ns/op
SiteBenchmark.serialization        UPICKLE_JSON         _2_K  avgt    5     20732.672 ±    456.195  ns/op
SiteBenchmark.serialization        UPICKLE_JSON         _4_K  avgt    5     46625.090 ±   2056.256  ns/op
SiteBenchmark.serialization        UPICKLE_JSON         _8_K  avgt    5    101357.452 ±    545.045  ns/op
SiteBenchmark.serialization        UPICKLE_JSON        _64_K  avgt    5    792422.394 ±  14321.266  ns/op
SiteBenchmark.serialization     UPICKLE_MSGPACK         _1_K  avgt    5     10715.145 ±    278.694  ns/op
SiteBenchmark.serialization     UPICKLE_MSGPACK         _2_K  avgt    5     19187.636 ±    837.132  ns/op
SiteBenchmark.serialization     UPICKLE_MSGPACK         _4_K  avgt    5     45160.321 ±   1189.819  ns/op
SiteBenchmark.serialization     UPICKLE_MSGPACK         _8_K  avgt    5    109270.473 ±   1296.322  ns/op
SiteBenchmark.serialization     UPICKLE_MSGPACK        _64_K  avgt    5    826282.438 ±  19938.298  ns/op

Benchmark result is saved to /static/data/charts/scala-serialization-2022/jdk8.json
