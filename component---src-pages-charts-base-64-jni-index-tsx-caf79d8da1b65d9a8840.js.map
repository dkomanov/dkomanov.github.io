{"version":3,"file":"component---src-pages-charts-base-64-jni-index-tsx-caf79d8da1b65d9a8840.js","mappings":"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","sources":["webpack://komanov.com/./src/pages/charts/base64-jni/index.tsx"],"sourcesContent":["import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { JmhBenchmarkRun } from '../../..';\nimport {\n  ChartAndTable,\n  Choose, getChooseItems, JmhChartComponentProps,\n  JmhChartPage,\n  TimeUnits\n} from '../../../components';\nimport { loadJson } from '../../../util';\n\ntype JdkVersion = 'openjdk-17' | 'openjdk-11' | 'openjdk-8';\nconst jdks: JdkVersion[] = ['openjdk-17', 'openjdk-11', 'openjdk-8'];\nconst Lengths = ['1', '10', '50', '100', '500', '1000', '10000'];\nconst DefaultLength = '10000';\ntype Dataset = 'fixed' | 'random';\nconst DefaultDataset: Dataset = 'fixed';\ntype Action = 'all' | 'encode' | 'decode';\nconst actions: Action[] = ['all', 'encode', 'decode'];\n\nconst xDesc = {\n  title: 'Library and Operation',\n  prop: 'method',\n  values: [\n    {\n      name: 'j.u.Base64 encode',\n      value: 'jdk_url_encode',\n    },\n    {\n      name: 'base64 encode',\n      value: 'jni_url_encodeConfig',\n    },\n    {\n      name: 'encode_config_slice (no cache)',\n      value: 'jni_url_encodeConfigSlice1NoCache',\n    },\n    {\n      name: 'encode_config_slice (cache output)',\n      value: 'jni_url_encodeConfigSlice1Cache',\n    },\n    {\n      name: 'encode_config_slice (cache input/output)',\n      value: 'jni_url_encodeConfigSlice2CacheInputOutput',\n    },\n    {\n      name: 'j.u.Base64 decode',\n      value: 'jdk_url_decode',\n    },\n    {\n      name: 'decode_config #1',\n      value: 'jni_url_decodeConfig1',\n    },\n    {\n      name: 'decode_config #2 (get_byte_array_elements)',\n      value: 'jni_url_decodeConfig2',\n    },\n    {\n      name: 'decode_config #3 (explicit size)',\n      value: 'jni_url_decodeConfig3',\n    },\n    {\n      name: 'decode_config #4 (get_primitive_array_critical)',\n      value: 'jni_url_decodeConfig4',\n    },\n    {\n      name: 'decode_config_slice JNI',\n      value: 'jni_url_decodeConfigSlice1',\n    },\n    {\n      name: 'decode_config_slice (no cache)',\n      value: 'jni_url_decodeConfigSlice1NoCache',\n    },\n    {\n      name: 'decode_config_slice (cache output)',\n      value: 'jni_url_decodeConfigSlice2Cache',\n    },\n    {\n      name: 'decode_config_slice (cache input/output)',\n      value: 'jni_url_decodeConfigSlice3CacheInputOutput',\n    },\n  ],\n};\n\nconst yDesc = {\n  title: 'JDK',\n  prop: 'jdk',\n  values: jdks,\n};\n\nconst Base64JniPerformanceImpl = ({ jmhList }: JmhChartComponentProps) => {\n  const [action, actionSet] = useState(actions[0]);\n  const [length, lengthSet] = useState(DefaultLength);\n  const [dataset, datasetSet] = useState<Dataset>(DefaultDataset);\n  const [jdk, jdkSet] = useState<JdkVersion>('openjdk-17');\n  const [extractor, extractorSet] = useState({ func: null });\n\n  const filterByAction = (p: any) =>\n    action === 'all' || p.method.indexOf(action) !== -1;\n  const filteredXDesc = Object.assign({}, xDesc, {\n    values:\n      action === 'all'\n        ? xDesc.values\n        : xDesc.values.filter((v) => v.name.indexOf(action) !== -1),\n  });\n\n  return (\n    <div className=\"markdown\">\n      <h3>Introduction</h3>\n\n      <p>\n        Here are benchmarking results for{' '}\n        <Link to=\"/p/base64-encoding-via-jni-performance\">\n          &laquo;Base64 Encoding via JNI Performance&raquo;\n        </Link>{' '}\n        blog post.\n      </p>\n\n      <p>\n        The performance tests are performed via{' '}\n        <a href=\"https://github.com/openjdk/jmh\">JMH</a>. The configuration of a\n        hardware is Intel® Core™ i7-1165G7 @ 2.80GHz × 8 (4 core + 4 HT) with 16\n        GB RAM. Scala version: 2.13.6.\n      </p>\n\n      <h3>Charts</h3>\n\n      <Choose\n        label=\"Data length:\"\n        items={getChooseItems(Lengths, (v) => v === DefaultLength)}\n        onChange={(value: string) => lengthSet(value)}\n      />\n      <Choose\n        label=\"Data set:\"\n        items={getChooseItems(['fixed', 'random'], (v) => v === DefaultDataset)}\n        onChange={(value: Dataset) => datasetSet(value)}\n      />\n      <Choose\n        label=\"Method:\"\n        items={getChooseItems(actions, (_, index) => index === 0)}\n        onChange={(value: Action) => actionSet(value)}\n      />\n      <TimeUnits onChange={(func: any) => extractorSet({ func })} />\n\n      <h4>Encoding/Decoding Performance for various JDKs</h4>\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.length === length && p.dataset === dataset && filterByAction(p)}\n        title=\"Encoding/Decoding, nanos\"\n        xDesc={filteredXDesc}\n        yDesc={yDesc}\n      />\n\n      <h4>Performance for different data sizes</h4>\n\n      <Choose\n        label=\"JDK:\"\n        items={getChooseItems(jdks, (_, index) => index === 0)}\n        onChange={(value: JdkVersion) => jdkSet(value)}\n      />\n\n      <ChartAndTable\n        chartType=\"LineChart\"\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.jdk === jdk && p.dataset === dataset && filterByAction(p)}\n        xDesc={filteredXDesc}\n        yDesc={{\n          title: 'Data length',\n          prop: 'length',\n          values: Lengths,\n        }}\n        options={{\n          hAxis: {\n            title: 'Data length',\n          },\n          vAxis: {\n            title: 'time, nanoseconds',\n            logScale: true,\n            //maxValue: 2000,\n          },\n        }}\n      />\n\n      <p>\n        Full JMH logs:\n        <a href={filePath('jdk8.log.txt')}>openjdk-8</a>,{' '}\n        <a href={filePath('jdk11.log.txt')}>openjdk-11</a>,{' '}\n        <a href={filePath('jdk17.log.txt')}>openjdk-17</a>.\n      </p>\n    </div>\n  );\n};\n\nfunction exportDimensions(benchmark: string, params: any) {\n  //'com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode'\n\n  const method = benchmark.substring(benchmark.lastIndexOf('.') + 1); // jniBase64_url_decode\n\n  return {\n    method,\n    ...params,\n  };\n}\n\nconst filePath = (name: string) => `/data/charts/base64-jni/${name}`;\n\nconst fetchAndCombineResults = () => {\n  return Promise.all([\n    loadJson(filePath('jdk8.json')),\n    loadJson(filePath('jdk11.json')),\n    loadJson(filePath('jdk17.json')),\n  ]).then((values: any[]) => {\n    function setJdk(index: number, jdk: JdkVersion) {\n      const list: JmhBenchmarkRun[] = values[index].data;\n      list.forEach((v) => (v.params = { ...v.params, jdk }));\n      return list;\n    }\n\n    return {\n      data: [\n        ...setJdk(0, 'openjdk-8'),\n        ...setJdk(1, 'openjdk-11'),\n        ...setJdk(2, 'openjdk-17'),\n      ],\n    };\n  });\n};\n\nconst Base64JniPerformance = JmhChartPage(Base64JniPerformanceImpl, {\n  fetchFunc: fetchAndCombineResults,\n  exportDimensionsFunc: exportDimensions,\n  headerText: 'Base64 Encoding via JNI Performance (Charts)',\n});\n\nexport default Base64JniPerformance;\n"],"names":["jdks","Lengths","DefaultLength","DefaultDataset","actions","xDesc","title","prop","values","name","value","yDesc","filePath","Base64JniPerformance","JmhChartPage","jmhList","useState","action","actionSet","length","lengthSet","dataset","datasetSet","jdk","jdkSet","func","extractor","extractorSet","filterByAction","p","method","indexOf","filteredXDesc","Object","assign","filter","v","React","className","Link","to","href","Choose","label","items","getChooseItems","onChange","_","index","TimeUnits","ChartAndTable","dataTable","chartType","options","hAxis","vAxis","logScale","fetchFunc","Promise","all","loadJson","then","setJdk","list","data","forEach","params","exportDimensionsFunc","benchmark","substring","lastIndexOf","headerText"],"sourceRoot":""}