{"version":3,"file":"component---src-pages-charts-read-lines-index-js-0cadeb5082b712e1f468.js","mappings":"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","sources":["webpack://komanov.com/./src/pages/charts/read-lines/index.js"],"sourcesContent":["import React from 'react';\nimport {Changelog, ChartAndTable, Choose, JmhChartPage} from '../../../components';\nimport {loadJson} from '../../../util';\n\nconst runs = [\n  {\n    date: '2017-12-17',\n    comment:\n      <ul>\n        <li>Initial version of benchmark.</li>\n      </ul>,\n  },\n];\nlet currentRunDate = runs[0].date;\nlet currentHardDriveType = 'ssd';\n\nconst xDesc = {\n  title: 'Method',\n  prop: 'method',\n  values: [\n    {\n      name: 'CPU only',\n      value: 'baseline',\n    },\n    {\n      name: 'Files.readAllLines',\n      value: 'filesReadLines',\n    },\n    {\n      name: 'Files.readAllBytes',\n      value: 'filesReadBytes',\n    },\n    {\n      name: 'Files.readAllBytes2',\n      value: 'filesReadBytes2',\n    },\n    {\n      name: 'BufferedReader inline',\n      value: 'forEachInline',\n    },\n    {\n      name: 'BufferedReader func',\n      value: 'forEachIndirect',\n    },\n    {\n      name: 'Files.lines',\n      value: 'forEachJava',\n    },\n  ],\n};\n\nconst yDesc = {\n  title: 'CPU cycles',\n  prop: 'cpuTokens',\n  values: [0, 10, 25, 50, 100, 250, 500, 1000].map(v => v.toString(10)),\n};\n\nclass LineCounts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // \"1\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"\n    this.items = [1, 10, 100, 1000, 10000, 100000, 1000000].map(v => {\n      return {\n        label: v.toString(10),\n        value: v,\n        default: v === 1000,\n      };\n    });\n  }\n\n  render() {\n    const {onChange} = this.props;\n    return (\n      <Choose label=\"Line count: \" onChange={onChange} items={this.items}/>\n    );\n  }\n}\n\nclass HardDriveTypes extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.items = [\n      {\n        label: 'SSD',\n        value: 'ssd',\n        default: true,\n      },\n      {\n        label: 'HDD',\n        value: 'hdd',\n      },\n    ];\n  }\n\n  render() {\n    const {onChange} = this.props;\n    return (\n      <Choose label=\"Hard Drive Type: \" onChange={onChange} items={this.items}/>\n    );\n  }\n}\n\nclass CpuTokens extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.items = yDesc.values.map(v => {\n      return {\n        label: v,\n        value: v,\n        default: parseInt(v, 10) <= 100,\n      };\n    });\n  }\n\n  render() {\n    const {onChange} = this.props;\n    return (\n      <Choose multiple label=\"CPU cycles: \" onChange={onChange} items={this.items}/>\n    );\n  }\n}\n\nclass ReadLinesImpl extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    const {lineCount, cpuTokensMap} = this.state;\n    const {jmhList} = this.props;\n\n    return (\n      <div class=\"markdown\">\n        <h3>Introduction</h3>\n\n        <p>\n          The legend for tests. &laquo;Line count&raquo; is how many lines of different size are in a file,{' '}\n          &laquo;CPU cycles&raquo; is how many abstract cycles spent for each line (modeling file processing).\n        </p>\n\n        <p>\n          Please notice, that unlike the article, here the performance tests are performed\n          via <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">JMH</a>.\n          The configuration of a hardware is Intel® Core™ i7–5600U CPU @ 2.60GHz × 4 (2 core + 2 HT) with 16 GB RAM.\n        </p>\n\n        <Changelog runs={runs} onChange={this.handleRunChange}/>\n        <HardDriveTypes onChange={this.handleHardDriveTypeChange}/>\n        <LineCounts onChange={lineCount => this.setState({lineCount})}/>\n        <CpuTokens onChange={cpuTokensMap => this.setState({cpuTokensMap})}/>\n\n        <h3>Chart</h3>\n\n        <ChartAndTable\n          chartType=\"Bar\"\n          dataTable={jmhList}\n          extractor={pm => Math.floor(pm.score / 1000)}\n          filter={d => d.lineCount === lineCount && cpuTokensMap[d.cpuTokens] === true}\n          title=\"time, usec\"\n          xDesc={xDesc}\n          yDesc={yDesc}\n          options={{\n            hAxis: {\n              logScale: false,\n            },\n          }}\n        />\n\n        <p>\n          Full JMH log is <a href={`/data/charts/read-lines/jmh_${currentRunDate}.log.txt`}>here</a>.\n        </p>\n\n      </div>\n    );\n  }\n\n  handleRunChange = date => {\n    currentRunDate = date;\n    this.props.refetch();\n  };\n\n  handleHardDriveTypeChange = hdt => {\n    currentHardDriveType = hdt;\n    this.props.refetch();\n  };\n}\n\nfunction exportDimensions(benchmark, params) {\n  //'com.komanov.readlines.jmh.ReadLinesBenchmark.forEachIndirect'\n\n  const [, method, ...otherBenchmark] = benchmark.split('ReadLinesBenchmark.');\n  if (!method || otherBenchmark.length > 0) {\n    throw new Error('Expected 2 parts in a benchmark: ' + benchmark);\n  }\n\n  return {\n    method,\n    cpuTokens: params.cpuTokens,\n    lineCount: parseInt(params.lineCount, 10),\n  };\n}\n\nconst ReadLines = JmhChartPage(\n  ReadLinesImpl,\n  {\n    fetchFunc: () => loadJson(`/data/charts/read-lines/jmh_${currentRunDate}_${currentHardDriveType}.json`),\n    exportDimensionsFunc: exportDimensions,\n    headerText: 'Exploring readLine Performance (Charts)',\n  },\n);\n\nexport default ReadLines;\n"],"names":["runs","date","comment","currentRunDate","currentHardDriveType","xDesc","title","prop","values","name","value","yDesc","map","v","toString","LineCounts","props","items","label","default","render","onChange","this","React","HardDriveTypes","CpuTokens","parseInt","multiple","ReadLinesImpl","handleRunChange","refetch","handleHardDriveTypeChange","hdt","state","lineCount","cpuTokensMap","jmhList","class","href","setState","chartType","dataTable","extractor","pm","Math","floor","score","filter","d","cpuTokens","options","hAxis","logScale","ReadLines","JmhChartPage","fetchFunc","loadJson","exportDimensionsFunc","benchmark","params","split","method","otherBenchmark","length","Error","headerText"],"sourceRoot":""}