{"version":3,"file":"component---src-pages-charts-scala-string-format-index-js-777fb117f352dc73665f.js","mappings":"4KAKMA,EAAQ,CACZC,MAAO,SACPC,KAAM,OACNC,OAAQ,CAAC,aAAc,eAAgB,gBAAiB,cAAe,mBAAoB,mBAAoB,wBAAyB,QAAS,gBAAiB,gBAAiB,kBAAmB,oBAGlMC,EAAQ,CACZH,MAAO,gBACPC,KAAM,WACNC,OAAQ,CACN,CACEE,KAAM,WACNC,MAAO,QAET,CACED,KAAM,kBACNC,MAAO,aAET,CACED,KAAM,aACNC,MAAO,SAET,CACED,KAAM,cACNC,MAAO,UAET,CACED,KAAM,aACNC,MAAO,QAET,CACED,KAAM,mBACNC,MAAO,YAET,CACED,KAAM,6BACNC,MAAO,sBAKPC,EAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,YAAAA,IAAAA,CA0CH,OA1CGA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,UACJC,OAAA,WAAU,IAAD,OACAC,GAAaC,KAAKC,OAAS,CAAC,GAA5BF,UACAG,EAAWF,KAAKG,MAAhBD,QAEP,OACE,uBAAKE,UAAU,YACb,0CAEA,8IACqH,IADrH,QAEO,gBAAC,EAAAC,KAAD,CAAMC,GAAG,6CAAT,6CAFP,KAKA,qHAIA,gDACsB,qBAAGC,KAAK,oDAAR,OADtB,wPAMA,mCAEA,gBAAC,KAAD,CAAWC,SAAU,SAAAT,GAAS,OAAI,EAAKU,SAAS,CAACV,UAAAA,GAAnB,IAE9B,gBAAC,KAAD,CACEW,UAAWR,EACXH,UAAWA,EACXY,OAAQ,SAAAC,GAAC,QAAMA,EAAEC,QAAR,EACTtB,MAAM,iCACND,MAAOA,EACPI,MAAOA,IAGT,4CACkB,qBAAGa,KAAK,4CAAR,QADlB,KAKL,IA1CGV,CAA8BiB,EAAAA,WA2DpC,IAAMC,GAAoBC,EAAAA,EAAAA,IACxBnB,EACA,CACEoB,UAAW,kBAAMC,EAAAA,EAAAA,IAAS,mDAAf,EACXC,qBAlBJ,SAA0BC,EAAWC,GAGnC,IAAMC,EAAQF,EAAUG,YAAY,KACpC,IAAe,IAAXD,EACF,MAAM,IAAIE,MAAM,kCAAoCJ,GAGtD,MAAO,CACLzB,KAAMyB,EAAUK,UAAUH,EAAQ,GAClCT,SAAUQ,GAAUA,EAAOK,IAE9B,EAOGC,WAAY,qDAIhB,W","sources":["webpack://komanov.com/./src/pages/charts/scala-string-format/index.js"],"sourcesContent":["import {Link} from 'gatsby';\nimport React from 'react';\nimport {ChartAndTable, JmhChartPage, TimeUnits} from '../../../components';\nimport {loadJson} from '../../../util';\n\nconst xDesc = {\n  title: 'Method',\n  prop: 'name',\n  values: ['javaConcat', 'stringFormat', 'messageFormat', 'scalaConcat', 'concatOptimized1', 'concatOptimized2', 'concatOptimizedMacros', 'slf4j', 'sInterpolator', 'fInterpolator', 'rawInterpolator', 'sfiInterpolator'],\n};\n\nconst yDesc = {\n  title: 'string length',\n  prop: 'dataSize',\n  values: [\n    {\n      name: 'tiny (7)',\n      value: 'Tiny',\n    },\n    {\n      name: 'very short (17)',\n      value: 'VeryShort',\n    },\n    {\n      name: 'short (29)',\n      value: 'Short',\n    },\n    {\n      name: 'medium (75)',\n      value: 'Medium',\n    },\n    {\n      name: 'long (212)',\n      value: 'Long',\n    },\n    {\n      name: 'very long (1004)',\n      value: 'VeryLong',\n    },\n    {\n      name: 'very long size miss (1006)',\n      value: 'VeryLongSizeMiss',\n    },\n  ],\n};\n\nclass ScalaStringFormatImpl extends React.Component {\n  render() {\n    const {extractor} = this.state || {};\n    const {jmhList} = this.props;\n\n    return (\n      <div className=\"markdown\">\n        <h3>Introduction</h3>\n\n        <p>\n          Here are present actual charts for performance comparison of string formatting in Java/Scala for the corresponding{' '}\n          post <Link to=\"/p/scala-string-interpolation-performance\">&laquo;Scala: String Interpolation Performance&raquo;</Link>.\n        </p>\n\n        <p>\n          The legend for tests. &laquo;String length&raquo; is a length of a result string (after formatting).\n        </p>\n\n        <p>\n          Tests performed via <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">JMH</a>, 2 forks, 3 warmup\n          runs and 7 iteration (3 seconds each). Ubuntu 16.04, linux-kernel 4.4.0-51-generic, JDK 1.8.0_91, scala library 2.12.\n          The configuration of a hardware is Intel® Core™ i7–5600U CPU @ 2.60GHz × 4 (2 core + 2 HT) with 16 GB RAM.\n        </p>\n\n        <h3>Chart</h3>\n\n        <TimeUnits onChange={extractor => this.setState({extractor})}/>\n\n        <ChartAndTable\n          dataTable={jmhList}\n          extractor={extractor}\n          filter={d => !!d.dataSize}\n          title=\"String formatting times, nanos\"\n          xDesc={xDesc}\n          yDesc={yDesc}\n        />\n\n        <p>\n          Full JMH log is <a href=\"/data/charts/scala-string-format/jmh.log\">here</a>.\n        </p>\n      </div>\n    );\n  }\n}\n\nfunction exportDimensions(benchmark, params) {\n  //'com.komanov.stringformat.jmh.ManyParamsBenchmark.concat'\n\n  const index = benchmark.lastIndexOf('.');\n  if (index === -1) {\n    throw new Error('Expected a dot in a benchmark: ' + benchmark);\n  }\n\n  return {\n    name: benchmark.substring(index + 1),\n    dataSize: params && params.arg,\n  };\n}\n\nconst ScalaStringFormat = JmhChartPage(\n  ScalaStringFormatImpl,\n  {\n    fetchFunc: () => loadJson('/data/charts/scala-string-format/jmh-result.json'),\n    exportDimensionsFunc: exportDimensions,\n    headerText: 'Scala: String Interpolation Performance (Charts)',\n  },\n);\n\nexport default ScalaStringFormat;\n"],"names":["xDesc","title","prop","values","yDesc","name","value","ScalaStringFormatImpl","render","extractor","this","state","jmhList","props","className","Link","to","href","onChange","setState","dataTable","filter","d","dataSize","React","ScalaStringFormat","JmhChartPage","fetchFunc","loadJson","exportDimensionsFunc","benchmark","params","index","lastIndexOf","Error","substring","arg","headerText"],"sourceRoot":""}