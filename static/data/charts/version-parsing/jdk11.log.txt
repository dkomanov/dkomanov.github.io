# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber
# Parameters: (encoded = 1.0.0)

# Run progress: 0.00% complete, ETA 01:08:10
# Fork: 1 of 1
# Warmup Iteration   1: 19.113 ns/op
# Warmup Iteration   2: 19.223 ns/op
# Warmup Iteration   3: 15.489 ns/op
# Warmup Iteration   4: 15.509 ns/op
# Warmup Iteration   5: 15.500 ns/op
Iteration   1: 15.522 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15.383 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.385 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.959 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.508 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber":
  15.551 ±(99.9%) 0.913 ns/op [Average]
  (min, avg, max) = (15.383, 15.551, 15.959), stdev = 0.237
  CI (99.9%): [14.638, 16.464] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber
# Parameters: (encoded = 200.200.200)

# Run progress: 0.24% complete, ETA 01:12:04
# Fork: 1 of 1
# Warmup Iteration   1: 31.984 ns/op
# Warmup Iteration   2: 30.589 ns/op
# Warmup Iteration   3: 25.715 ns/op
# Warmup Iteration   4: 25.741 ns/op
# Warmup Iteration   5: 25.723 ns/op
Iteration   1: 25.870 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 25.702 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 25.710 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 25.788 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 25.770 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber":
  25.768 ±(99.9%) 0.262 ns/op [Average]
  (min, avg, max) = (25.702, 25.768, 25.870), stdev = 0.068
  CI (99.9%): [25.506, 26.030] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 0.49% complete, ETA 01:11:43
# Fork: 1 of 1
# Warmup Iteration   1: 35.925 ns/op
# Warmup Iteration   2: 35.117 ns/op
# Warmup Iteration   3: 32.191 ns/op
# Warmup Iteration   4: 32.176 ns/op
# Warmup Iteration   5: 32.169 ns/op
Iteration   1: 32.178 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.151 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.124 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.150 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.168 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber":
  32.154 ±(99.9%) 0.080 ns/op [Average]
  (min, avg, max) = (32.124, 32.154, 32.178), stdev = 0.021
  CI (99.9%): [32.074, 32.234] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber2
# Parameters: (encoded = 1.0.0)

# Run progress: 0.73% complete, ETA 01:11:27
# Fork: 1 of 1
# Warmup Iteration   1: 19.429 ns/op
# Warmup Iteration   2: 19.452 ns/op
# Warmup Iteration   3: 15.587 ns/op
# Warmup Iteration   4: 15.539 ns/op
# Warmup Iteration   5: 15.496 ns/op
Iteration   1: 15.452 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.294 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.542 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.682 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.556 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2":
  15.705 ±(99.9%) 1.305 ns/op [Average]
  (min, avg, max) = (15.452, 15.705, 16.294), stdev = 0.339
  CI (99.9%): [14.400, 17.011] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber2
# Parameters: (encoded = 200.200.200)

# Run progress: 0.98% complete, ETA 01:11:12
# Fork: 1 of 1
# Warmup Iteration   1: 31.646 ns/op
# Warmup Iteration   2: 29.850 ns/op
# Warmup Iteration   3: 24.158 ns/op
# Warmup Iteration   4: 24.299 ns/op
# Warmup Iteration   5: 24.588 ns/op
Iteration   1: 24.261 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 24.308 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 24.995 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 24.261 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 24.323 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2":
  24.430 ±(99.9%) 1.221 ns/op [Average]
  (min, avg, max) = (24.261, 24.430, 24.995), stdev = 0.317
  CI (99.9%): [23.209, 25.651] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber2
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 1.22% complete, ETA 01:10:58
# Fork: 1 of 1
# Warmup Iteration   1: 35.508 ns/op
# Warmup Iteration   2: 35.477 ns/op
# Warmup Iteration   3: 32.195 ns/op
# Warmup Iteration   4: 32.187 ns/op
# Warmup Iteration   5: 32.175 ns/op
Iteration   1: 32.610 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.089 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.192 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.146 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.167 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2":
  32.241 ±(99.9%) 0.808 ns/op [Average]
  (min, avg, max) = (32.089, 32.241, 32.610), stdev = 0.210
  CI (99.9%): [31.432, 33.049] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber3
# Parameters: (encoded = 1.0.0)

# Run progress: 1.47% complete, ETA 01:10:46
# Fork: 1 of 1
# Warmup Iteration   1: 18.239 ns/op
# Warmup Iteration   2: 18.714 ns/op
# Warmup Iteration   3: 14.502 ns/op
# Warmup Iteration   4: 14.456 ns/op
# Warmup Iteration   5: 15.261 ns/op
Iteration   1: 14.510 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14.536 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.021 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14.465 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14.528 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3":
  14.812 ±(99.9%) 2.606 ns/op [Average]
  (min, avg, max) = (14.465, 14.812, 16.021), stdev = 0.677
  CI (99.9%): [12.206, 17.418] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber3
# Parameters: (encoded = 200.200.200)

# Run progress: 1.71% complete, ETA 01:10:34
# Fork: 1 of 1
# Warmup Iteration   1: 28.334 ns/op
# Warmup Iteration   2: 29.216 ns/op
# Warmup Iteration   3: 22.831 ns/op
# Warmup Iteration   4: 22.679 ns/op
# Warmup Iteration   5: 22.828 ns/op
Iteration   1: 22.809 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 22.730 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 22.855 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 22.806 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 22.557 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3":
  22.751 ±(99.9%) 0.453 ns/op [Average]
  (min, avg, max) = (22.557, 22.751, 22.855), stdev = 0.118
  CI (99.9%): [22.298, 23.204] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber3
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 1.96% complete, ETA 01:10:23
# Fork: 1 of 1
# Warmup Iteration   1: 32.817 ns/op
# Warmup Iteration   2: 31.470 ns/op
# Warmup Iteration   3: 28.479 ns/op
# Warmup Iteration   4: 28.277 ns/op
# Warmup Iteration   5: 28.141 ns/op
Iteration   1: 28.282 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 28.302 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 28.698 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 28.132 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.979 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3":
  28.279 ±(99.9%) 1.033 ns/op [Average]
  (min, avg, max) = (27.979, 28.279, 28.698), stdev = 0.268
  CI (99.9%): [27.246, 29.312] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic
# Parameters: (encoded = )

# Run progress: 2.20% complete, ETA 01:10:11
# Fork: 1 of 1
# Warmup Iteration   1: 7.099 ns/op
# Warmup Iteration   2: 6.159 ns/op
# Warmup Iteration   3: 5.307 ns/op
# Warmup Iteration   4: 5.307 ns/op
# Warmup Iteration   5: 5.309 ns/op
Iteration   1: 5.304 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.303 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.301 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.308 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.313 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic":
  5.306 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (5.301, 5.306, 5.313), stdev = 0.005
  CI (99.9%): [5.287, 5.324] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic
# Parameters: (encoded = 0.0.0)

# Run progress: 2.44% complete, ETA 01:09:57
# Fork: 1 of 1
# Warmup Iteration   1: 22.935 ns/op
# Warmup Iteration   2: 15.874 ns/op
# Warmup Iteration   3: 15.212 ns/op
# Warmup Iteration   4: 15.239 ns/op
# Warmup Iteration   5: 15.229 ns/op
Iteration   1: 15.195 ns/op
                 ·gc.alloc.rate:      5019.283 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            33.000 ms

Iteration   2: 15.338 ns/op
                 ·gc.alloc.rate:      4972.077 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            42.000 ms

Iteration   3: 15.183 ns/op
                 ·gc.alloc.rate:      5022.976 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            31.000 ms

Iteration   4: 15.163 ns/op
                 ·gc.alloc.rate:      5027.336 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            33.000 ms

Iteration   5: 15.029 ns/op
                 ·gc.alloc.rate:      5068.605 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            22.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic":
  15.181 ±(99.9%) 0.423 ns/op [Average]
  (min, avg, max) = (15.029, 15.181, 15.338), stdev = 0.110
  CI (99.9%): [14.758, 15.605] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate":
  5022.055 ±(99.9%) 132.009 MB/sec [Average]
  (min, avg, max) = (4972.077, 5022.055, 5068.605), stdev = 34.282
  CI (99.9%): [4890.046, 5154.064] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.count":
  86.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (17.000, 17.200, 18.000), stdev = 0.447
  CI (99.9%): [86.000, 86.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.time":
  161.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (22.000, 32.200, 42.000), stdev = 7.120
  CI (99.9%): [161.000, 161.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic
# Parameters: (encoded = 1.0.0)

# Run progress: 2.69% complete, ETA 01:09:43
# Fork: 1 of 1
# Warmup Iteration   1: 27.407 ns/op
# Warmup Iteration   2: 17.455 ns/op
# Warmup Iteration   3: 17.008 ns/op
# Warmup Iteration   4: 16.026 ns/op
# Warmup Iteration   5: 16.015 ns/op
Iteration   1: 16.049 ns/op
                 ·gc.alloc.rate:      7603.215 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            41.000 ms

Iteration   2: 16.154 ns/op
                 ·gc.alloc.rate:      7553.174 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            47.000 ms

Iteration   3: 15.946 ns/op
                 ·gc.alloc.rate:      7652.301 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            41.000 ms

Iteration   4: 16.289 ns/op
                 ·gc.alloc.rate:      7486.492 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            40.000 ms

Iteration   5: 16.598 ns/op
                 ·gc.alloc.rate:      7350.623 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            33.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic":
  16.207 ±(99.9%) 0.973 ns/op [Average]
  (min, avg, max) = (15.946, 16.207, 16.598), stdev = 0.253
  CI (99.9%): [15.234, 17.180] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate":
  7529.161 ±(99.9%) 451.202 MB/sec [Average]
  (min, avg, max) = (7350.623, 7529.161, 7652.301), stdev = 117.176
  CI (99.9%): [7077.959, 7980.362] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm":
  64.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
  CI (99.9%): [64.000, 64.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.count":
  107.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 21.400, 22.000), stdev = 0.548
  CI (99.9%): [107.000, 107.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.time":
  202.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (33.000, 40.400, 47.000), stdev = 4.980
  CI (99.9%): [202.000, 202.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic
# Parameters: (encoded = 200.200.200)

# Run progress: 2.93% complete, ETA 01:09:29
# Fork: 1 of 1
# Warmup Iteration   1: 26.487 ns/op
# Warmup Iteration   2: 17.511 ns/op
# Warmup Iteration   3: 16.416 ns/op
# Warmup Iteration   4: 16.750 ns/op
# Warmup Iteration   5: 15.997 ns/op
Iteration   1: 16.219 ns/op
                 ·gc.alloc.rate:      7522.497 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            51.000 ms

Iteration   2: 16.119 ns/op
                 ·gc.alloc.rate:      7570.209 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            43.000 ms

Iteration   3: 16.023 ns/op
                 ·gc.alloc.rate:      7615.681 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            38.000 ms

Iteration   4: 16.520 ns/op
                 ·gc.alloc.rate:      7380.650 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            29.000 ms

Iteration   5: 16.465 ns/op
                 ·gc.alloc.rate:      7401.953 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            36.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic":
  16.269 ±(99.9%) 0.833 ns/op [Average]
  (min, avg, max) = (16.023, 16.269, 16.520), stdev = 0.216
  CI (99.9%): [15.436, 17.102] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate":
  7498.198 ±(99.9%) 397.658 MB/sec [Average]
  (min, avg, max) = (7380.650, 7498.198, 7615.681), stdev = 103.271
  CI (99.9%): [7100.540, 7895.856] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm":
  64.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
  CI (99.9%): [64.000, 64.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.count":
  114.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.800, 23.000), stdev = 0.447
  CI (99.9%): [114.000, 114.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.time":
  197.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (29.000, 39.400, 51.000), stdev = 8.204
  CI (99.9%): [197.000, 197.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 3.18% complete, ETA 01:09:16
# Fork: 1 of 1
# Warmup Iteration   1: 26.623 ns/op
# Warmup Iteration   2: 17.480 ns/op
# Warmup Iteration   3: 16.038 ns/op
# Warmup Iteration   4: 16.179 ns/op
# Warmup Iteration   5: 16.138 ns/op
Iteration   1: 16.199 ns/op
                 ·gc.alloc.rate:      7532.464 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            46.000 ms

Iteration   2: 15.960 ns/op
                 ·gc.alloc.rate:      7644.203 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            36.000 ms

Iteration   3: 16.066 ns/op
                 ·gc.alloc.rate:      7594.989 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            43.000 ms

Iteration   4: 16.662 ns/op
                 ·gc.alloc.rate:      7318.967 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            33.000 ms

Iteration   5: 16.015 ns/op
                 ·gc.alloc.rate:      7617.933 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            42.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic":
  16.180 ±(99.9%) 1.092 ns/op [Average]
  (min, avg, max) = (15.960, 16.180, 16.662), stdev = 0.284
  CI (99.9%): [15.088, 17.273] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate":
  7541.711 ±(99.9%) 505.203 MB/sec [Average]
  (min, avg, max) = (7318.967, 7541.711, 7644.203), stdev = 131.200
  CI (99.9%): [7036.508, 8046.914] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm":
  64.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
  CI (99.9%): [64.000, 64.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.count":
  122.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (23.000, 24.400, 25.000), stdev = 0.894
  CI (99.9%): [122.000, 122.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.time":
  200.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (33.000, 40.000, 46.000), stdev = 5.339
  CI (99.9%): [200.000, 200.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined
# Parameters: (encoded = )

# Run progress: 3.42% complete, ETA 01:09:05
# Fork: 1 of 1
# Warmup Iteration   1: 7.592 ns/op
# Warmup Iteration   2: 6.170 ns/op
# Warmup Iteration   3: 5.291 ns/op
# Warmup Iteration   4: 5.281 ns/op
# Warmup Iteration   5: 5.300 ns/op
Iteration   1: 5.412 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.311 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.317 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.374 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.455 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined":
  5.374 ±(99.9%) 0.237 ns/op [Average]
  (min, avg, max) = (5.311, 5.374, 5.455), stdev = 0.061
  CI (99.9%): [5.137, 5.610] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined
# Parameters: (encoded = 0.0.0)

# Run progress: 3.67% complete, ETA 01:08:52
# Fork: 1 of 1
# Warmup Iteration   1: 22.486 ns/op
# Warmup Iteration   2: 17.433 ns/op
# Warmup Iteration   3: 16.542 ns/op
# Warmup Iteration   4: 16.193 ns/op
# Warmup Iteration   5: 16.371 ns/op
Iteration   1: 17.264 ns/op
                 ·gc.alloc.rate:      4417.305 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            30.000 ms

Iteration   2: 16.528 ns/op
                 ·gc.alloc.rate:      4614.357 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            32.000 ms

Iteration   3: 16.520 ns/op
                 ·gc.alloc.rate:      4616.425 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            33.000 ms

Iteration   4: 16.335 ns/op
                 ·gc.alloc.rate:      4666.619 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            25.000 ms

Iteration   5: 15.746 ns/op
                 ·gc.alloc.rate:      4843.132 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            36.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined":
  16.478 ±(99.9%) 2.090 ns/op [Average]
  (min, avg, max) = (15.746, 16.478, 17.264), stdev = 0.543
  CI (99.9%): [14.388, 18.568] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate":
  4631.568 ±(99.9%) 585.316 MB/sec [Average]
  (min, avg, max) = (4417.305, 4631.568, 4843.132), stdev = 152.005
  CI (99.9%): [4046.252, 5216.883] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.count":
  96.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (18.000, 19.200, 20.000), stdev = 0.837
  CI (99.9%): [96.000, 96.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.time":
  156.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (25.000, 31.200, 36.000), stdev = 4.087
  CI (99.9%): [156.000, 156.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined
# Parameters: (encoded = 1.0.0)

# Run progress: 3.91% complete, ETA 01:08:39
# Fork: 1 of 1
# Warmup Iteration   1: 25.495 ns/op
# Warmup Iteration   2: 17.600 ns/op
# Warmup Iteration   3: 16.350 ns/op
# Warmup Iteration   4: 16.591 ns/op
# Warmup Iteration   5: 16.522 ns/op
Iteration   1: 15.869 ns/op
                 ·gc.alloc.rate:      7688.928 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            33.000 ms

Iteration   2: 15.967 ns/op
                 ·gc.alloc.rate:      7641.350 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            38.000 ms

Iteration   3: 17.134 ns/op
                 ·gc.alloc.rate:      7121.917 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            30.000 ms

Iteration   4: 15.913 ns/op
                 ·gc.alloc.rate:      7663.765 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            36.000 ms

Iteration   5: 16.235 ns/op
                 ·gc.alloc.rate:      7505.965 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            47.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined":
  16.223 ±(99.9%) 2.035 ns/op [Average]
  (min, avg, max) = (15.869, 16.223, 17.134), stdev = 0.528
  CI (99.9%): [14.189, 18.258] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate":
  7524.385 ±(99.9%) 908.176 MB/sec [Average]
  (min, avg, max) = (7121.917, 7524.385, 7688.928), stdev = 235.851
  CI (99.9%): [6616.209, 8432.561] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm":
  64.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
  CI (99.9%): [64.000, 64.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.count":
  107.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (20.000, 21.400, 22.000), stdev = 0.894
  CI (99.9%): [107.000, 107.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.time":
  184.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (30.000, 36.800, 47.000), stdev = 6.458
  CI (99.9%): [184.000, 184.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined
# Parameters: (encoded = 200.200.200)

# Run progress: 4.16% complete, ETA 01:08:29
# Fork: 1 of 1
# Warmup Iteration   1: 27.026 ns/op
# Warmup Iteration   2: 17.533 ns/op
# Warmup Iteration   3: 16.099 ns/op
# Warmup Iteration   4: 16.458 ns/op
# Warmup Iteration   5: 16.034 ns/op
Iteration   1: 16.018 ns/op
                 ·gc.alloc.rate:      7617.376 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            42.000 ms

Iteration   2: 16.059 ns/op
                 ·gc.alloc.rate:      7597.039 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            41.000 ms

Iteration   3: 16.196 ns/op
                 ·gc.alloc.rate:      7533.318 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            39.000 ms

Iteration   4: 15.947 ns/op
                 ·gc.alloc.rate:      7646.413 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            32.000 ms

Iteration   5: 15.886 ns/op
                 ·gc.alloc.rate:      7671.532 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            29.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined":
  16.021 ±(99.9%) 0.455 ns/op [Average]
  (min, avg, max) = (15.886, 16.021, 16.196), stdev = 0.118
  CI (99.9%): [15.567, 16.476] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate":
  7613.136 ±(99.9%) 203.442 MB/sec [Average]
  (min, avg, max) = (7533.318, 7613.136, 7671.532), stdev = 52.833
  CI (99.9%): [7409.694, 7816.577] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm":
  64.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
  CI (99.9%): [64.000, 64.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.count":
  107.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 21.400, 22.000), stdev = 0.548
  CI (99.9%): [107.000, 107.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.time":
  183.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (29.000, 36.600, 42.000), stdev = 5.771
  CI (99.9%): [183.000, 183.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 4.40% complete, ETA 01:08:17
# Fork: 1 of 1
# Warmup Iteration   1: 26.604 ns/op
# Warmup Iteration   2: 17.646 ns/op
# Warmup Iteration   3: 16.214 ns/op
# Warmup Iteration   4: 16.528 ns/op
# Warmup Iteration   5: 16.052 ns/op
Iteration   1: 16.130 ns/op
                 ·gc.alloc.rate:      7564.314 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            46.000 ms

Iteration   2: 16.262 ns/op
                 ·gc.alloc.rate:      7503.090 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            48.000 ms

Iteration   3: 15.927 ns/op
                 ·gc.alloc.rate:      7660.756 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            33.000 ms

Iteration   4: 16.056 ns/op
                 ·gc.alloc.rate:      7595.912 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            39.000 ms

Iteration   5: 16.027 ns/op
                 ·gc.alloc.rate:      7613.606 MB/sec
                 ·gc.alloc.rate.norm: 64.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            40.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined":
  16.080 ±(99.9%) 0.482 ns/op [Average]
  (min, avg, max) = (15.927, 16.080, 16.262), stdev = 0.125
  CI (99.9%): [15.599, 16.562] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate":
  7587.535 ±(99.9%) 226.022 MB/sec [Average]
  (min, avg, max) = (7503.090, 7587.535, 7660.756), stdev = 58.697
  CI (99.9%): [7361.513, 7813.558] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm":
  64.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
  CI (99.9%): [64.000, 64.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.count":
  129.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (25.000, 25.800, 26.000), stdev = 0.447
  CI (99.9%): [129.000, 129.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.time":
  206.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (33.000, 41.200, 48.000), stdev = 5.975
  CI (99.9%): [206.000, 206.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = )

# Run progress: 4.65% complete, ETA 01:08:06
# Fork: 1 of 1
# Warmup Iteration   1: 7.339 ns/op
# Warmup Iteration   2: 6.828 ns/op
# Warmup Iteration   3: 7.231 ns/op
# Warmup Iteration   4: 6.204 ns/op
# Warmup Iteration   5: 6.205 ns/op
Iteration   1: 6.349 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.263 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.206 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.215 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.146 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  6.236 ±(99.9%) 0.291 ns/op [Average]
  (min, avg, max) = (6.146, 6.236, 6.349), stdev = 0.076
  CI (99.9%): [5.945, 6.527] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200)

# Run progress: 4.89% complete, ETA 01:07:53
# Fork: 1 of 1
# Warmup Iteration   1: 9.899 ns/op
# Warmup Iteration   2: 8.629 ns/op
# Warmup Iteration   3: 8.886 ns/op
# Warmup Iteration   4: 8.769 ns/op
# Warmup Iteration   5: 8.743 ns/op
Iteration   1: 8.714 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.767 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.831 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.763 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.606 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  8.736 ±(99.9%) 0.322 ns/op [Average]
  (min, avg, max) = (8.606, 8.736, 8.831), stdev = 0.084
  CI (99.9%): [8.414, 9.058] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.)

# Run progress: 5.13% complete, ETA 01:07:40
# Fork: 1 of 1
# Warmup Iteration   1: 12.863 ns/op
# Warmup Iteration   2: 10.372 ns/op
# Warmup Iteration   3: 9.558 ns/op
# Warmup Iteration   4: 9.541 ns/op
# Warmup Iteration   5: 9.535 ns/op
Iteration   1: 9.528 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.563 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.536 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.512 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.520 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  9.532 ±(99.9%) 0.076 ns/op [Average]
  (min, avg, max) = (9.512, 9.532, 9.563), stdev = 0.020
  CI (99.9%): [9.456, 9.607] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200)

# Run progress: 5.38% complete, ETA 01:07:28
# Fork: 1 of 1
# Warmup Iteration   1: 16.064 ns/op
# Warmup Iteration   2: 13.696 ns/op
# Warmup Iteration   3: 13.070 ns/op
# Warmup Iteration   4: 13.063 ns/op
# Warmup Iteration   5: 13.076 ns/op
Iteration   1: 13.082 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13.076 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13.354 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13.048 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13.062 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  13.124 ±(99.9%) 0.497 ns/op [Average]
  (min, avg, max) = (13.048, 13.124, 13.354), stdev = 0.129
  CI (99.9%): [12.627, 13.621] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.)

# Run progress: 5.62% complete, ETA 01:07:15
# Fork: 1 of 1
# Warmup Iteration   1: 34.625 ns/op
# Warmup Iteration   2: 31.244 ns/op
# Warmup Iteration   3: 29.593 ns/op
# Warmup Iteration   4: 31.438 ns/op
# Warmup Iteration   5: 29.593 ns/op
Iteration   1: 29.545 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.600 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.546 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.608 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.574 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  29.575 ±(99.9%) 0.113 ns/op [Average]
  (min, avg, max) = (29.545, 29.575, 29.608), stdev = 0.029
  CI (99.9%): [29.462, 29.688] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = a.200.200)

# Run progress: 5.87% complete, ETA 01:07:03
# Fork: 1 of 1
# Warmup Iteration   1: 21.999 ns/op
# Warmup Iteration   2: 20.125 ns/op
# Warmup Iteration   3: 18.993 ns/op
# Warmup Iteration   4: 18.971 ns/op
# Warmup Iteration   5: 18.984 ns/op
Iteration   1: 18.986 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.967 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.243 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.975 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  19.048 ±(99.9%) 0.449 ns/op [Average]
  (min, avg, max) = (18.967, 19.048, 19.243), stdev = 0.117
  CI (99.9%): [18.599, 19.497] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.a.200)

# Run progress: 6.11% complete, ETA 01:06:51
# Fork: 1 of 1
# Warmup Iteration   1: 30.841 ns/op
# Warmup Iteration   2: 28.829 ns/op
# Warmup Iteration   3: 25.768 ns/op
# Warmup Iteration   4: 25.783 ns/op
# Warmup Iteration   5: 25.733 ns/op
Iteration   1: 25.782 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 25.800 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 25.758 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.857 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.146 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  26.069 ±(99.9%) 1.805 ns/op [Average]
  (min, avg, max) = (25.758, 26.069, 26.857), stdev = 0.469
  CI (99.9%): [24.264, 27.873] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.a)

# Run progress: 6.36% complete, ETA 01:06:39
# Fork: 1 of 1
# Warmup Iteration   1: 38.341 ns/op
# Warmup Iteration   2: 35.428 ns/op
# Warmup Iteration   3: 33.994 ns/op
# Warmup Iteration   4: 34.181 ns/op
# Warmup Iteration   5: 34.121 ns/op
Iteration   1: 34.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 36.603 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 34.166 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 34.140 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 34.109 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  34.618 ±(99.9%) 4.276 ns/op [Average]
  (min, avg, max) = (34.070, 34.618, 36.603), stdev = 1.110
  CI (99.9%): [30.342, 38.893] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.200.200)

# Run progress: 6.60% complete, ETA 01:06:27
# Fork: 1 of 1
# Warmup Iteration   1: 22.756 ns/op
# Warmup Iteration   2: 20.729 ns/op
# Warmup Iteration   3: 19.770 ns/op
# Warmup Iteration   4: 20.161 ns/op
# Warmup Iteration   5: 19.724 ns/op
Iteration   1: 19.688 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.684 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.722 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.680 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 20.239 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  19.803 ±(99.9%) 0.942 ns/op [Average]
  (min, avg, max) = (19.680, 19.803, 20.239), stdev = 0.245
  CI (99.9%): [18.861, 20.745] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.99999)

# Run progress: 6.85% complete, ETA 01:06:15
# Fork: 1 of 1
# Warmup Iteration   1: 217.303 ns/op
# Warmup Iteration   2: 144.252 ns/op
# Warmup Iteration   3: 135.412 ns/op
# Warmup Iteration   4: 135.584 ns/op
# Warmup Iteration   5: 139.880 ns/op
Iteration   1: 135.365 ns/op
                 ·gc.alloc.rate:      1689.981 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 135.234 ns/op
                 ·gc.alloc.rate:      1691.423 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 135.023 ns/op
                 ·gc.alloc.rate:      1694.574 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 134.997 ns/op
                 ·gc.alloc.rate:      1693.997 MB/sec
                 ·gc.alloc.rate.norm: 120.001 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 135.059 ns/op
                 ·gc.alloc.rate:      1694.150 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  135.136 ±(99.9%) 0.608 ns/op [Average]
  (min, avg, max) = (134.997, 135.136, 135.365), stdev = 0.158
  CI (99.9%): [134.527, 135.744] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  1692.825 ±(99.9%) 7.759 MB/sec [Average]
  (min, avg, max) = (1689.981, 1692.825, 1694.574), stdev = 2.015
  CI (99.9%): [1685.066, 1700.584] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  120.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (120.000, 120.000, 120.001), stdev = 0.001
  CI (99.9%): [119.998, 120.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  51.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
  CI (99.9%): [51.000, 51.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.time":
  22.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.-200)

# Run progress: 7.09% complete, ETA 01:06:04
# Fork: 1 of 1
# Warmup Iteration   1: 41.574 ns/op
# Warmup Iteration   2: 38.442 ns/op
# Warmup Iteration   3: 35.552 ns/op
# Warmup Iteration   4: 37.028 ns/op
# Warmup Iteration   5: 35.408 ns/op
Iteration   1: 35.445 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 35.446 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 35.410 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 35.456 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 35.394 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  35.430 ±(99.9%) 0.102 ns/op [Average]
  (min, avg, max) = (35.394, 35.430, 35.456), stdev = 0.027
  CI (99.9%): [35.328, 35.533] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 1.0.0)

# Run progress: 7.33% complete, ETA 01:05:53
# Fork: 1 of 1
# Warmup Iteration   1: 152.724 ns/op
# Warmup Iteration   2: 108.516 ns/op
# Warmup Iteration   3: 108.008 ns/op
# Warmup Iteration   4: 105.541 ns/op
# Warmup Iteration   5: 102.658 ns/op
Iteration   1: 102.202 ns/op
                 ·gc.alloc.rate:      2984.750 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            20.000 ms

Iteration   2: 103.140 ns/op
                 ·gc.alloc.rate:      2957.690 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            25.000 ms

Iteration   3: 103.699 ns/op
                 ·gc.alloc.rate:      2941.466 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            34.000 ms

Iteration   4: 103.095 ns/op
                 ·gc.alloc.rate:      2957.200 MB/sec
                 ·gc.alloc.rate.norm: 160.001 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            24.000 ms

Iteration   5: 112.250 ns/op
                 ·gc.alloc.rate:      2721.506 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            33.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  104.877 ±(99.9%) 16.004 ns/op [Average]
  (min, avg, max) = (102.202, 104.877, 112.250), stdev = 4.156
  CI (99.9%): [88.873, 120.881] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  2912.523 ±(99.9%) 415.521 MB/sec [Average]
  (min, avg, max) = (2721.506, 2912.523, 2984.750), stdev = 107.910
  CI (99.9%): [2497.001, 3328.044] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  160.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (160.000, 160.000, 160.001), stdev = 0.001
  CI (99.9%): [159.998, 160.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  65.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 13.000, 14.000), stdev = 0.707
  CI (99.9%): [65.000, 65.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.time":
  136.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (20.000, 27.200, 34.000), stdev = 6.058
  CI (99.9%): [136.000, 136.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.200)

# Run progress: 7.58% complete, ETA 01:05:42
# Fork: 1 of 1
# Warmup Iteration   1: 199.715 ns/op
# Warmup Iteration   2: 141.949 ns/op
# Warmup Iteration   3: 132.951 ns/op
# Warmup Iteration   4: 132.853 ns/op
# Warmup Iteration   5: 132.587 ns/op
Iteration   1: 132.749 ns/op
                 ·gc.alloc.rate:      2298.088 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 132.787 ns/op
                 ·gc.alloc.rate:      2296.913 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 132.670 ns/op
                 ·gc.alloc.rate:      2299.176 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 136.564 ns/op
                 ·gc.alloc.rate:      2233.008 MB/sec
                 ·gc.alloc.rate.norm: 160.002 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 132.391 ns/op
                 ·gc.alloc.rate:      2304.210 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  133.432 ±(99.9%) 6.769 ns/op [Average]
  (min, avg, max) = (132.391, 133.432, 136.564), stdev = 1.758
  CI (99.9%): [126.663, 140.201] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  2286.279 ±(99.9%) 115.168 MB/sec [Average]
  (min, avg, max) = (2233.008, 2286.279, 2304.210), stdev = 29.909
  CI (99.9%): [2171.111, 2401.447] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  160.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (160.000, 160.000, 160.002), stdev = 0.001
  CI (99.9%): [159.998, 160.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  61.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 12.200, 13.000), stdev = 0.447
  CI (99.9%): [61.000, 61.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 7.82% complete, ETA 01:05:30
# Fork: 1 of 1
# Warmup Iteration   1: 232.126 ns/op
# Warmup Iteration   2: 152.813 ns/op
# Warmup Iteration   3: 140.831 ns/op
# Warmup Iteration   4: 140.641 ns/op
# Warmup Iteration   5: 140.759 ns/op
Iteration   1: 140.735 ns/op
                 ·gc.alloc.rate:      2167.668 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 140.669 ns/op
                 ·gc.alloc.rate:      2168.313 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 140.771 ns/op
                 ·gc.alloc.rate:      2166.713 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 157.345 ns/op
                 ·gc.alloc.rate:      1937.369 MB/sec
                 ·gc.alloc.rate.norm: 160.002 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 140.525 ns/op
                 ·gc.alloc.rate:      2170.921 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  144.009 ±(99.9%) 28.709 ns/op [Average]
  (min, avg, max) = (140.525, 144.009, 157.345), stdev = 7.456
  CI (99.9%): [115.300, 172.718] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  2122.197 ±(99.9%) 397.902 MB/sec [Average]
  (min, avg, max) = (1937.369, 2122.197, 2170.921), stdev = 103.334
  CI (99.9%): [1724.295, 2520.099] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  160.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (160.000, 160.000, 160.002), stdev = 0.001
  CI (99.9%): [159.997, 160.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  54.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.800, 11.000), stdev = 0.447
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.time":
  24.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 8.07% complete, ETA 01:05:19
# Fork: 1 of 1
# Warmup Iteration   1: 229.709 ns/op
# Warmup Iteration   2: 162.399 ns/op
# Warmup Iteration   3: 152.535 ns/op
# Warmup Iteration   4: 152.958 ns/op
# Warmup Iteration   5: 152.155 ns/op
Iteration   1: 152.215 ns/op
                 ·gc.alloc.rate:      2003.991 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 151.929 ns/op
                 ·gc.alloc.rate:      2007.657 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 152.356 ns/op
                 ·gc.alloc.rate:      2002.115 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 152.304 ns/op
                 ·gc.alloc.rate:      2002.143 MB/sec
                 ·gc.alloc.rate.norm: 160.002 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 152.342 ns/op
                 ·gc.alloc.rate:      2002.413 MB/sec
                 ·gc.alloc.rate.norm: 160.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  152.229 ±(99.9%) 0.680 ns/op [Average]
  (min, avg, max) = (151.929, 152.229, 152.356), stdev = 0.177
  CI (99.9%): [151.549, 152.909] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  2003.664 ±(99.9%) 9.098 MB/sec [Average]
  (min, avg, max) = (2002.115, 2003.664, 2007.657), stdev = 2.363
  CI (99.9%): [1994.566, 2012.762] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  160.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (160.000, 160.000, 160.002), stdev = 0.001
  CI (99.9%): [159.998, 160.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  54.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.800, 11.000), stdev = 0.447
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.time":
  25.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = )

# Run progress: 8.31% complete, ETA 01:05:08
# Fork: 1 of 1
# Warmup Iteration   1: 7.234 ns/op
# Warmup Iteration   2: 6.774 ns/op
# Warmup Iteration   3: 7.214 ns/op
# Warmup Iteration   4: 6.210 ns/op
# Warmup Iteration   5: 6.247 ns/op
Iteration   1: 6.250 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.244 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.354 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.250 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.169 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  6.253 ±(99.9%) 0.254 ns/op [Average]
  (min, avg, max) = (6.169, 6.253, 6.354), stdev = 0.066
  CI (99.9%): [6.000, 6.507] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200)

# Run progress: 8.56% complete, ETA 01:04:57
# Fork: 1 of 1
# Warmup Iteration   1: 9.512 ns/op
# Warmup Iteration   2: 8.656 ns/op
# Warmup Iteration   3: 8.494 ns/op
# Warmup Iteration   4: 8.523 ns/op
# Warmup Iteration   5: 8.732 ns/op
Iteration   1: 8.711 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.938 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.940 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.948 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.822 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  8.872 ±(99.9%) 0.400 ns/op [Average]
  (min, avg, max) = (8.711, 8.872, 8.948), stdev = 0.104
  CI (99.9%): [8.471, 9.272] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.)

# Run progress: 8.80% complete, ETA 01:04:45
# Fork: 1 of 1
# Warmup Iteration   1: 12.712 ns/op
# Warmup Iteration   2: 10.433 ns/op
# Warmup Iteration   3: 9.506 ns/op
# Warmup Iteration   4: 9.505 ns/op
# Warmup Iteration   5: 9.528 ns/op
Iteration   1: 9.731 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.491 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.479 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.474 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.488 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  9.533 ±(99.9%) 0.427 ns/op [Average]
  (min, avg, max) = (9.474, 9.533, 9.731), stdev = 0.111
  CI (99.9%): [9.105, 9.960] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200)

# Run progress: 9.05% complete, ETA 01:04:34
# Fork: 1 of 1
# Warmup Iteration   1: 15.402 ns/op
# Warmup Iteration   2: 13.822 ns/op
# Warmup Iteration   3: 13.081 ns/op
# Warmup Iteration   4: 13.061 ns/op
# Warmup Iteration   5: 13.057 ns/op
Iteration   1: 13.054 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13.404 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13.091 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13.078 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13.074 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  13.140 ±(99.9%) 0.570 ns/op [Average]
  (min, avg, max) = (13.054, 13.140, 13.404), stdev = 0.148
  CI (99.9%): [12.571, 13.710] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.)

# Run progress: 9.29% complete, ETA 01:04:23
# Fork: 1 of 1
# Warmup Iteration   1: 33.781 ns/op
# Warmup Iteration   2: 30.649 ns/op
# Warmup Iteration   3: 29.036 ns/op
# Warmup Iteration   4: 29.075 ns/op
# Warmup Iteration   5: 29.081 ns/op
Iteration   1: 30.786 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.327 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.149 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.093 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.132 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  29.497 ±(99.9%) 2.796 ns/op [Average]
  (min, avg, max) = (29.093, 29.497, 30.786), stdev = 0.726
  CI (99.9%): [26.702, 32.293] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = a.200.200)

# Run progress: 9.54% complete, ETA 01:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 23.019 ns/op
# Warmup Iteration   2: 21.256 ns/op
# Warmup Iteration   3: 19.952 ns/op
# Warmup Iteration   4: 19.901 ns/op
# Warmup Iteration   5: 19.898 ns/op
Iteration   1: 19.879 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.890 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.966 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.967 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 20.010 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  19.942 ±(99.9%) 0.217 ns/op [Average]
  (min, avg, max) = (19.879, 19.942, 20.010), stdev = 0.056
  CI (99.9%): [19.726, 20.159] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.a.200)

# Run progress: 9.78% complete, ETA 01:04:01
# Fork: 1 of 1
# Warmup Iteration   1: 33.318 ns/op
# Warmup Iteration   2: 31.252 ns/op
# Warmup Iteration   3: 27.232 ns/op
# Warmup Iteration   4: 27.275 ns/op
# Warmup Iteration   5: 27.273 ns/op
Iteration   1: 27.301 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.278 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.292 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.224 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.248 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  27.269 ±(99.9%) 0.123 ns/op [Average]
  (min, avg, max) = (27.224, 27.269, 27.301), stdev = 0.032
  CI (99.9%): [27.145, 27.392] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.a)

# Run progress: 10.02% complete, ETA 01:03:50
# Fork: 1 of 1
# Warmup Iteration   1: 38.647 ns/op
# Warmup Iteration   2: 34.736 ns/op
# Warmup Iteration   3: 33.203 ns/op
# Warmup Iteration   4: 33.163 ns/op
# Warmup Iteration   5: 33.194 ns/op
Iteration   1: 33.203 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 33.178 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 33.005 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.016 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 33.220 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  33.124 ±(99.9%) 0.404 ns/op [Average]
  (min, avg, max) = (33.005, 33.124, 33.220), stdev = 0.105
  CI (99.9%): [32.721, 33.528] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.200.200)

# Run progress: 10.27% complete, ETA 01:03:39
# Fork: 1 of 1
# Warmup Iteration   1: 23.249 ns/op
# Warmup Iteration   2: 20.527 ns/op
# Warmup Iteration   3: 19.940 ns/op
# Warmup Iteration   4: 19.965 ns/op
# Warmup Iteration   5: 19.988 ns/op
Iteration   1: 20.497 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.906 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.874 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.955 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 20.756 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  20.198 ±(99.9%) 1.553 ns/op [Average]
  (min, avg, max) = (19.874, 20.198, 20.756), stdev = 0.403
  CI (99.9%): [18.645, 21.750] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.99999)

# Run progress: 10.51% complete, ETA 01:03:28
# Fork: 1 of 1
# Warmup Iteration   1: 98.184 ns/op
# Warmup Iteration   2: 86.322 ns/op
# Warmup Iteration   3: 83.281 ns/op
# Warmup Iteration   4: 81.007 ns/op
# Warmup Iteration   5: 82.472 ns/op
Iteration   1: 80.992 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 81.069 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 80.956 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 80.939 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 80.978 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  80.987 ±(99.9%) 0.195 ns/op [Average]
  (min, avg, max) = (80.939, 80.987, 81.069), stdev = 0.051
  CI (99.9%): [80.792, 81.181] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.-200)

# Run progress: 10.76% complete, ETA 01:03:17
# Fork: 1 of 1
# Warmup Iteration   1: 39.719 ns/op
# Warmup Iteration   2: 36.423 ns/op
# Warmup Iteration   3: 35.112 ns/op
# Warmup Iteration   4: 35.157 ns/op
# Warmup Iteration   5: 35.176 ns/op
Iteration   1: 35.145 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 35.113 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 35.125 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 35.111 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 35.238 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  35.146 ±(99.9%) 0.204 ns/op [Average]
  (min, avg, max) = (35.111, 35.146, 35.238), stdev = 0.053
  CI (99.9%): [34.943, 35.350] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 1.0.0)

# Run progress: 11.00% complete, ETA 01:03:07
# Fork: 1 of 1
# Warmup Iteration   1: 66.066 ns/op
# Warmup Iteration   2: 57.078 ns/op
# Warmup Iteration   3: 52.887 ns/op
# Warmup Iteration   4: 52.853 ns/op
# Warmup Iteration   5: 52.826 ns/op
Iteration   1: 52.891 ns/op
                 ·gc.alloc.rate:      1441.689 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 52.869 ns/op
                 ·gc.alloc.rate:      1442.472 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 52.943 ns/op
                 ·gc.alloc.rate:      1439.842 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 52.960 ns/op
                 ·gc.alloc.rate:      1440.094 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 56.097 ns/op
                 ·gc.alloc.rate:      1359.605 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  53.552 ±(99.9%) 5.480 ns/op [Average]
  (min, avg, max) = (52.869, 53.552, 56.097), stdev = 1.423
  CI (99.9%): [48.072, 59.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  1424.740 ±(99.9%) 140.273 MB/sec [Average]
  (min, avg, max) = (1359.605, 1424.740, 1442.472), stdev = 36.428
  CI (99.9%): [1284.468, 1565.013] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  43.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
  CI (99.9%): [43.000, 43.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.200)

# Run progress: 11.25% complete, ETA 01:02:56
# Fork: 1 of 1
# Warmup Iteration   1: 104.123 ns/op
# Warmup Iteration   2: 83.872 ns/op
# Warmup Iteration   3: 80.175 ns/op
# Warmup Iteration   4: 78.763 ns/op
# Warmup Iteration   5: 78.817 ns/op
Iteration   1: 78.690 ns/op
                 ·gc.alloc.rate:      969.153 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 78.756 ns/op
                 ·gc.alloc.rate:      968.163 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 78.702 ns/op
                 ·gc.alloc.rate:      968.916 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 78.761 ns/op
                 ·gc.alloc.rate:      967.777 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 79.986 ns/op
                 ·gc.alloc.rate:      953.489 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  78.979 ±(99.9%) 2.170 ns/op [Average]
  (min, avg, max) = (78.690, 78.979, 79.986), stdev = 0.564
  CI (99.9%): [76.808, 81.149] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  965.500 ±(99.9%) 25.943 MB/sec [Average]
  (min, avg, max) = (953.489, 965.500, 969.153), stdev = 6.737
  CI (99.9%): [939.557, 991.443] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 11.49% complete, ETA 01:02:45
# Fork: 1 of 1
# Warmup Iteration   1: 115.733 ns/op
# Warmup Iteration   2: 94.296 ns/op
# Warmup Iteration   3: 91.704 ns/op
# Warmup Iteration   4: 89.991 ns/op
# Warmup Iteration   5: 90.092 ns/op
Iteration   1: 89.875 ns/op
                 ·gc.alloc.rate:      848.580 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 89.801 ns/op
                 ·gc.alloc.rate:      849.257 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 89.715 ns/op
                 ·gc.alloc.rate:      850.015 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 89.786 ns/op
                 ·gc.alloc.rate:      848.900 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 89.830 ns/op
                 ·gc.alloc.rate:      849.063 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  89.801 ±(99.9%) 0.226 ns/op [Average]
  (min, avg, max) = (89.715, 89.801, 89.875), stdev = 0.059
  CI (99.9%): [89.575, 90.028] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  849.163 ±(99.9%) 2.068 MB/sec [Average]
  (min, avg, max) = (848.580, 849.163, 850.015), stdev = 0.537
  CI (99.9%): [847.095, 851.231] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 11.74% complete, ETA 01:02:35
# Fork: 1 of 1
# Warmup Iteration   1: 128.590 ns/op
# Warmup Iteration   2: 105.579 ns/op
# Warmup Iteration   3: 104.595 ns/op
# Warmup Iteration   4: 102.540 ns/op
# Warmup Iteration   5: 101.451 ns/op
Iteration   1: 101.208 ns/op
                 ·gc.alloc.rate:      753.519 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 101.293 ns/op
                 ·gc.alloc.rate:      752.880 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 101.222 ns/op
                 ·gc.alloc.rate:      753.481 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 101.293 ns/op
                 ·gc.alloc.rate:      752.647 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 101.169 ns/op
                 ·gc.alloc.rate:      753.834 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  101.237 ±(99.9%) 0.211 ns/op [Average]
  (min, avg, max) = (101.169, 101.237, 101.293), stdev = 0.055
  CI (99.9%): [101.027, 101.448] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  753.272 ±(99.9%) 1.891 MB/sec [Average]
  (min, avg, max) = (752.647, 753.272, 753.834), stdev = 0.491
  CI (99.9%): [751.381, 755.164] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.998, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  26.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
  CI (99.9%): [26.000, 26.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = )

# Run progress: 11.98% complete, ETA 01:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 7.090 ns/op
# Warmup Iteration   2: 6.711 ns/op
# Warmup Iteration   3: 5.899 ns/op
# Warmup Iteration   4: 5.837 ns/op
# Warmup Iteration   5: 5.823 ns/op
Iteration   1: 6.777 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.828 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.825 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.837 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.833 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  6.020 ±(99.9%) 1.630 ns/op [Average]
  (min, avg, max) = (5.825, 6.020, 6.777), stdev = 0.423
  CI (99.9%): [4.390, 7.650] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200)

# Run progress: 12.22% complete, ETA 01:02:13
# Fork: 1 of 1
# Warmup Iteration   1: 13.782 ns/op
# Warmup Iteration   2: 12.820 ns/op
# Warmup Iteration   3: 12.038 ns/op
# Warmup Iteration   4: 12.069 ns/op
# Warmup Iteration   5: 12.023 ns/op
Iteration   1: 12.068 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12.052 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12.108 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.025 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12.022 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  12.055 ±(99.9%) 0.137 ns/op [Average]
  (min, avg, max) = (12.022, 12.055, 12.108), stdev = 0.035
  CI (99.9%): [11.918, 12.192] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.)

# Run progress: 12.47% complete, ETA 01:02:02
# Fork: 1 of 1
# Warmup Iteration   1: 33.570 ns/op
# Warmup Iteration   2: 31.092 ns/op
# Warmup Iteration   3: 31.560 ns/op
# Warmup Iteration   4: 31.571 ns/op
# Warmup Iteration   5: 31.571 ns/op
Iteration   1: 31.579 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.454 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.158 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31.409 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.457 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  31.611 ±(99.9%) 1.201 ns/op [Average]
  (min, avg, max) = (31.409, 31.611, 32.158), stdev = 0.312
  CI (99.9%): [30.411, 32.812] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200)

# Run progress: 12.71% complete, ETA 01:01:52
# Fork: 1 of 1
# Warmup Iteration   1: 38.249 ns/op
# Warmup Iteration   2: 35.937 ns/op
# Warmup Iteration   3: 41.477 ns/op
# Warmup Iteration   4: 41.477 ns/op
# Warmup Iteration   5: 41.502 ns/op
Iteration   1: 41.483 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 41.510 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 41.483 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 41.480 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 41.598 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  41.511 ±(99.9%) 0.193 ns/op [Average]
  (min, avg, max) = (41.480, 41.511, 41.598), stdev = 0.050
  CI (99.9%): [41.318, 41.704] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.)

# Run progress: 12.96% complete, ETA 01:01:41
# Fork: 1 of 1
# Warmup Iteration   1: 58.329 ns/op
# Warmup Iteration   2: 51.827 ns/op
# Warmup Iteration   3: 50.240 ns/op
# Warmup Iteration   4: 50.239 ns/op
# Warmup Iteration   5: 50.274 ns/op
Iteration   1: 50.267 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 50.308 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 50.237 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 50.390 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 50.289 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  50.298 ±(99.9%) 0.222 ns/op [Average]
  (min, avg, max) = (50.237, 50.298, 50.390), stdev = 0.058
  CI (99.9%): [50.076, 50.520] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = a.200.200)

# Run progress: 13.20% complete, ETA 01:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 8.730 ns/op
# Warmup Iteration   2: 7.048 ns/op
# Warmup Iteration   3: 6.106 ns/op
# Warmup Iteration   4: 6.110 ns/op
# Warmup Iteration   5: 6.113 ns/op
Iteration   1: 6.115 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.115 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.109 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.112 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.105 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  6.111 ±(99.9%) 0.017 ns/op [Average]
  (min, avg, max) = (6.105, 6.111, 6.115), stdev = 0.004
  CI (99.9%): [6.094, 6.128] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.a.200)

# Run progress: 13.45% complete, ETA 01:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 36.269 ns/op
# Warmup Iteration   2: 32.322 ns/op
# Warmup Iteration   3: 31.797 ns/op
# Warmup Iteration   4: 31.703 ns/op
# Warmup Iteration   5: 31.770 ns/op
Iteration   1: 31.760 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.797 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.783 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.650 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.796 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  31.957 ±(99.9%) 1.492 ns/op [Average]
  (min, avg, max) = (31.760, 31.957, 32.650), stdev = 0.388
  CI (99.9%): [30.465, 33.450] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.a)

# Run progress: 13.69% complete, ETA 01:01:09
# Fork: 1 of 1
# Warmup Iteration   1: 70.209 ns/op
# Warmup Iteration   2: 64.066 ns/op
# Warmup Iteration   3: 62.286 ns/op
# Warmup Iteration   4: 62.209 ns/op
# Warmup Iteration   5: 62.626 ns/op
Iteration   1: 63.553 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 62.345 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 62.367 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 62.251 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 62.363 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  62.576 ±(99.9%) 2.112 ns/op [Average]
  (min, avg, max) = (62.251, 62.576, 63.553), stdev = 0.548
  CI (99.9%): [60.464, 64.687] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.200.200)

# Run progress: 13.94% complete, ETA 01:00:58
# Fork: 1 of 1
# Warmup Iteration   1: 66.210 ns/op
# Warmup Iteration   2: 60.839 ns/op
# Warmup Iteration   3: 59.039 ns/op
# Warmup Iteration   4: 58.977 ns/op
# Warmup Iteration   5: 58.922 ns/op
Iteration   1: 60.041 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 58.928 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 58.892 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 58.894 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 62.466 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  59.844 ±(99.9%) 5.953 ns/op [Average]
  (min, avg, max) = (58.892, 59.844, 62.466), stdev = 1.546
  CI (99.9%): [53.891, 65.797] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.99999)

# Run progress: 14.18% complete, ETA 01:00:47
# Fork: 1 of 1
# Warmup Iteration   1: 98.512 ns/op
# Warmup Iteration   2: 88.500 ns/op
# Warmup Iteration   3: 85.936 ns/op
# Warmup Iteration   4: 85.985 ns/op
# Warmup Iteration   5: 85.971 ns/op
Iteration   1: 85.953 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 86.047 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 86.057 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 85.963 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 85.993 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  86.003 ±(99.9%) 0.184 ns/op [Average]
  (min, avg, max) = (85.953, 86.003, 86.057), stdev = 0.048
  CI (99.9%): [85.819, 86.186] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.-200)

# Run progress: 14.43% complete, ETA 01:00:37
# Fork: 1 of 1
# Warmup Iteration   1: 74.324 ns/op
# Warmup Iteration   2: 69.201 ns/op
# Warmup Iteration   3: 67.006 ns/op
# Warmup Iteration   4: 66.995 ns/op
# Warmup Iteration   5: 67.010 ns/op
Iteration   1: 67.045 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 67.005 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 67.003 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 66.964 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 67.005 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  67.005 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (66.964, 67.005, 67.045), stdev = 0.028
  CI (99.9%): [66.895, 67.114] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 1.0.0)

# Run progress: 14.67% complete, ETA 01:00:26
# Fork: 1 of 1
# Warmup Iteration   1: 60.596 ns/op
# Warmup Iteration   2: 51.986 ns/op
# Warmup Iteration   3: 48.749 ns/op
# Warmup Iteration   4: 48.747 ns/op
# Warmup Iteration   5: 48.604 ns/op
Iteration   1: 48.578 ns/op
                 ·gc.alloc.rate:      1569.789 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 48.566 ns/op
                 ·gc.alloc.rate:      1570.268 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 48.610 ns/op
                 ·gc.alloc.rate:      1568.905 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 52.076 ns/op
                 ·gc.alloc.rate:      1463.700 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 48.856 ns/op
                 ·gc.alloc.rate:      1560.979 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  49.337 ±(99.9%) 5.913 ns/op [Average]
  (min, avg, max) = (48.566, 49.337, 52.076), stdev = 1.536
  CI (99.9%): [43.424, 55.250] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  1546.728 ±(99.9%) 179.319 MB/sec [Average]
  (min, avg, max) = (1463.700, 1546.728, 1570.268), stdev = 46.569
  CI (99.9%): [1367.409, 1726.047] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  47.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
  CI (99.9%): [47.000, 47.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.200)

# Run progress: 14.91% complete, ETA 01:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 106.772 ns/op
# Warmup Iteration   2: 91.242 ns/op
# Warmup Iteration   3: 87.997 ns/op
# Warmup Iteration   4: 86.140 ns/op
# Warmup Iteration   5: 86.120 ns/op
Iteration   1: 86.059 ns/op
                 ·gc.alloc.rate:      886.068 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 86.094 ns/op
                 ·gc.alloc.rate:      885.712 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 86.037 ns/op
                 ·gc.alloc.rate:      886.391 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 85.941 ns/op
                 ·gc.alloc.rate:      887.076 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 85.859 ns/op
                 ·gc.alloc.rate:      888.239 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  85.998 ±(99.9%) 0.370 ns/op [Average]
  (min, avg, max) = (85.859, 85.998, 86.094), stdev = 0.096
  CI (99.9%): [85.628, 86.368] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  886.697 ±(99.9%) 3.841 MB/sec [Average]
  (min, avg, max) = (885.712, 886.697, 888.239), stdev = 0.998
  CI (99.9%): [882.856, 890.538] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 15.16% complete, ETA 01:00:05
# Fork: 1 of 1
# Warmup Iteration   1: 136.937 ns/op
# Warmup Iteration   2: 113.099 ns/op
# Warmup Iteration   3: 110.261 ns/op
# Warmup Iteration   4: 108.601 ns/op
# Warmup Iteration   5: 107.504 ns/op
Iteration   1: 107.509 ns/op
                 ·gc.alloc.rate:      709.275 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 107.455 ns/op
                 ·gc.alloc.rate:      709.521 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 107.518 ns/op
                 ·gc.alloc.rate:      709.204 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 107.491 ns/op
                 ·gc.alloc.rate:      709.254 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 107.561 ns/op
                 ·gc.alloc.rate:      708.983 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  107.507 ±(99.9%) 0.149 ns/op [Average]
  (min, avg, max) = (107.455, 107.507, 107.561), stdev = 0.039
  CI (99.9%): [107.358, 107.656] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  709.247 ±(99.9%) 0.740 MB/sec [Average]
  (min, avg, max) = (708.983, 709.247, 709.521), stdev = 0.192
  CI (99.9%): [708.508, 709.987] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.998, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  25.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.time":
  10.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 15.40% complete, ETA 00:59:54
# Fork: 1 of 1
# Warmup Iteration   1: 147.770 ns/op
# Warmup Iteration   2: 125.809 ns/op
# Warmup Iteration   3: 123.504 ns/op
# Warmup Iteration   4: 125.795 ns/op
# Warmup Iteration   5: 121.937 ns/op
Iteration   1: 121.784 ns/op
                 ·gc.alloc.rate:      626.187 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            1.000 ms

Iteration   2: 122.462 ns/op
                 ·gc.alloc.rate:      622.752 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 121.836 ns/op
                 ·gc.alloc.rate:      625.901 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 121.695 ns/op
                 ·gc.alloc.rate:      626.411 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 121.811 ns/op
                 ·gc.alloc.rate:      626.080 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            1.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  121.918 ±(99.9%) 1.189 ns/op [Average]
  (min, avg, max) = (121.695, 121.918, 122.462), stdev = 0.309
  CI (99.9%): [120.729, 123.107] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  625.466 ±(99.9%) 5.886 MB/sec [Average]
  (min, avg, max) = (622.752, 625.466, 626.411), stdev = 1.528
  CI (99.9%): [619.580, 631.351] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.998, 40.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  21.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.time":
  8.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
  CI (99.9%): [8.000, 8.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = )

# Run progress: 15.65% complete, ETA 00:59:44
# Fork: 1 of 1
# Warmup Iteration   1: 7.193 ns/op
# Warmup Iteration   2: 6.767 ns/op
# Warmup Iteration   3: 6.112 ns/op
# Warmup Iteration   4: 5.835 ns/op
# Warmup Iteration   5: 5.831 ns/op
Iteration   1: 5.826 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.826 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.831 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.805 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.805 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  5.818 ±(99.9%) 0.049 ns/op [Average]
  (min, avg, max) = (5.805, 5.818, 5.831), stdev = 0.013
  CI (99.9%): [5.769, 5.868] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200)

# Run progress: 15.89% complete, ETA 00:59:33
# Fork: 1 of 1
# Warmup Iteration   1: 13.583 ns/op
# Warmup Iteration   2: 13.131 ns/op
# Warmup Iteration   3: 12.083 ns/op
# Warmup Iteration   4: 12.279 ns/op
# Warmup Iteration   5: 12.137 ns/op
Iteration   1: 12.134 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12.111 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12.128 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.115 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12.105 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  12.118 ±(99.9%) 0.046 ns/op [Average]
  (min, avg, max) = (12.105, 12.118, 12.134), stdev = 0.012
  CI (99.9%): [12.073, 12.164] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.)

# Run progress: 16.14% complete, ETA 00:59:22
# Fork: 1 of 1
# Warmup Iteration   1: 29.558 ns/op
# Warmup Iteration   2: 27.354 ns/op
# Warmup Iteration   3: 26.996 ns/op
# Warmup Iteration   4: 27.012 ns/op
# Warmup Iteration   5: 27.560 ns/op
Iteration   1: 27.029 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.078 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.021 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.005 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.007 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  27.028 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (27.005, 27.028, 27.078), stdev = 0.030
  CI (99.9%): [26.914, 27.142] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200)

# Run progress: 16.38% complete, ETA 00:59:12
# Fork: 1 of 1
# Warmup Iteration   1: 36.186 ns/op
# Warmup Iteration   2: 32.954 ns/op
# Warmup Iteration   3: 32.327 ns/op
# Warmup Iteration   4: 32.343 ns/op
# Warmup Iteration   5: 32.464 ns/op
Iteration   1: 32.344 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.273 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.428 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.297 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.350 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  32.338 ±(99.9%) 0.230 ns/op [Average]
  (min, avg, max) = (32.273, 32.338, 32.428), stdev = 0.060
  CI (99.9%): [32.109, 32.568] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.)

# Run progress: 16.63% complete, ETA 00:59:01
# Fork: 1 of 1
# Warmup Iteration   1: 59.648 ns/op
# Warmup Iteration   2: 53.204 ns/op
# Warmup Iteration   3: 51.678 ns/op
# Warmup Iteration   4: 51.680 ns/op
# Warmup Iteration   5: 51.703 ns/op
Iteration   1: 51.707 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 51.699 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 51.752 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 51.784 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 52.702 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  51.929 ±(99.9%) 1.670 ns/op [Average]
  (min, avg, max) = (51.699, 51.929, 52.702), stdev = 0.434
  CI (99.9%): [50.259, 53.599] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = a.200.200)

# Run progress: 16.87% complete, ETA 00:58:51
# Fork: 1 of 1
# Warmup Iteration   1: 7.488 ns/op
# Warmup Iteration   2: 7.031 ns/op
# Warmup Iteration   3: 6.117 ns/op
# Warmup Iteration   4: 6.495 ns/op
# Warmup Iteration   5: 6.127 ns/op
Iteration   1: 6.119 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.117 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.133 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.117 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.115 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  6.120 ±(99.9%) 0.028 ns/op [Average]
  (min, avg, max) = (6.115, 6.120, 6.133), stdev = 0.007
  CI (99.9%): [6.093, 6.148] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.a.200)

# Run progress: 17.11% complete, ETA 00:58:40
# Fork: 1 of 1
# Warmup Iteration   1: 29.076 ns/op
# Warmup Iteration   2: 27.630 ns/op
# Warmup Iteration   3: 26.527 ns/op
# Warmup Iteration   4: 26.566 ns/op
# Warmup Iteration   5: 26.497 ns/op
Iteration   1: 26.558 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.538 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.524 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.530 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.532 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  26.536 ±(99.9%) 0.051 ns/op [Average]
  (min, avg, max) = (26.524, 26.536, 26.558), stdev = 0.013
  CI (99.9%): [26.485, 26.587] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.a)

# Run progress: 17.36% complete, ETA 00:58:30
# Fork: 1 of 1
# Warmup Iteration   1: 63.938 ns/op
# Warmup Iteration   2: 57.651 ns/op
# Warmup Iteration   3: 56.174 ns/op
# Warmup Iteration   4: 56.115 ns/op
# Warmup Iteration   5: 56.117 ns/op
Iteration   1: 56.157 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 56.082 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 56.096 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 56.080 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 56.140 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  56.111 ±(99.9%) 0.137 ns/op [Average]
  (min, avg, max) = (56.080, 56.111, 56.157), stdev = 0.035
  CI (99.9%): [55.974, 56.248] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.200.200)

# Run progress: 17.60% complete, ETA 00:58:19
# Fork: 1 of 1
# Warmup Iteration   1: 72.657 ns/op
# Warmup Iteration   2: 67.445 ns/op
# Warmup Iteration   3: 65.230 ns/op
# Warmup Iteration   4: 65.181 ns/op
# Warmup Iteration   5: 66.108 ns/op
Iteration   1: 65.180 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 65.190 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 65.249 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 65.901 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 65.208 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  65.346 ±(99.9%) 1.200 ns/op [Average]
  (min, avg, max) = (65.180, 65.346, 65.901), stdev = 0.312
  CI (99.9%): [64.145, 66.546] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.99999)

# Run progress: 17.85% complete, ETA 00:58:08
# Fork: 1 of 1
# Warmup Iteration   1: 90.465 ns/op
# Warmup Iteration   2: 82.084 ns/op
# Warmup Iteration   3: 79.491 ns/op
# Warmup Iteration   4: 79.487 ns/op
# Warmup Iteration   5: 79.468 ns/op
Iteration   1: 79.479 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 79.496 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 79.522 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 79.498 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 79.528 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  79.505 ±(99.9%) 0.077 ns/op [Average]
  (min, avg, max) = (79.479, 79.505, 79.528), stdev = 0.020
  CI (99.9%): [79.427, 79.582] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.-200)

# Run progress: 18.09% complete, ETA 00:57:58
# Fork: 1 of 1
# Warmup Iteration   1: 61.867 ns/op
# Warmup Iteration   2: 57.125 ns/op
# Warmup Iteration   3: 55.388 ns/op
# Warmup Iteration   4: 55.350 ns/op
# Warmup Iteration   5: 55.343 ns/op
Iteration   1: 55.357 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 55.453 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 55.483 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 55.409 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 58.066 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  55.954 ±(99.9%) 4.551 ns/op [Average]
  (min, avg, max) = (55.357, 55.954, 58.066), stdev = 1.182
  CI (99.9%): [51.403, 60.504] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 1.0.0)

# Run progress: 18.34% complete, ETA 00:57:47
# Fork: 1 of 1
# Warmup Iteration   1: 60.483 ns/op
# Warmup Iteration   2: 51.881 ns/op
# Warmup Iteration   3: 47.350 ns/op
# Warmup Iteration   4: 47.344 ns/op
# Warmup Iteration   5: 47.393 ns/op
Iteration   1: 47.390 ns/op
                 ·gc.alloc.rate:      1609.322 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 47.335 ns/op
                 ·gc.alloc.rate:      1610.908 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 47.319 ns/op
                 ·gc.alloc.rate:      1611.707 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 47.223 ns/op
                 ·gc.alloc.rate:      1614.032 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 47.514 ns/op
                 ·gc.alloc.rate:      1605.003 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            8.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  47.356 ±(99.9%) 0.411 ns/op [Average]
  (min, avg, max) = (47.223, 47.356, 47.514), stdev = 0.107
  CI (99.9%): [46.945, 47.767] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  1610.194 ±(99.9%) 12.950 MB/sec [Average]
  (min, avg, max) = (1605.003, 1610.194, 1614.032), stdev = 3.363
  CI (99.9%): [1597.244, 1623.144] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  44.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.time":
  24.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.200)

# Run progress: 18.58% complete, ETA 00:57:37
# Fork: 1 of 1
# Warmup Iteration   1: 103.227 ns/op
# Warmup Iteration   2: 90.777 ns/op
# Warmup Iteration   3: 87.560 ns/op
# Warmup Iteration   4: 85.876 ns/op
# Warmup Iteration   5: 85.931 ns/op
Iteration   1: 86.003 ns/op
                 ·gc.alloc.rate:      886.637 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 85.704 ns/op
                 ·gc.alloc.rate:      889.690 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 85.628 ns/op
                 ·gc.alloc.rate:      890.527 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 88.808 ns/op
                 ·gc.alloc.rate:      858.032 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 87.987 ns/op
                 ·gc.alloc.rate:      866.652 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  86.826 ±(99.9%) 5.662 ns/op [Average]
  (min, avg, max) = (85.628, 86.826, 88.808), stdev = 1.470
  CI (99.9%): [81.164, 92.487] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  878.308 ±(99.9%) 57.605 MB/sec [Average]
  (min, avg, max) = (858.032, 878.308, 890.527), stdev = 14.960
  CI (99.9%): [820.703, 935.913] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 18.83% complete, ETA 00:57:26
# Fork: 1 of 1
# Warmup Iteration   1: 137.863 ns/op
# Warmup Iteration   2: 113.748 ns/op
# Warmup Iteration   3: 109.293 ns/op
# Warmup Iteration   4: 108.062 ns/op
# Warmup Iteration   5: 107.467 ns/op
Iteration   1: 107.279 ns/op
                 ·gc.alloc.rate:      710.794 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 107.177 ns/op
                 ·gc.alloc.rate:      711.575 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 107.222 ns/op
                 ·gc.alloc.rate:      711.196 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 107.153 ns/op
                 ·gc.alloc.rate:      711.463 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 107.210 ns/op
                 ·gc.alloc.rate:      711.324 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  107.208 ±(99.9%) 0.184 ns/op [Average]
  (min, avg, max) = (107.153, 107.208, 107.279), stdev = 0.048
  CI (99.9%): [107.024, 107.393] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  711.270 ±(99.9%) 1.163 MB/sec [Average]
  (min, avg, max) = (710.794, 711.270, 711.575), stdev = 0.302
  CI (99.9%): [710.107, 712.434] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.998, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  25.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.time":
  11.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
  CI (99.9%): [11.000, 11.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 19.07% complete, ETA 00:57:16
# Fork: 1 of 1
# Warmup Iteration   1: 137.415 ns/op
# Warmup Iteration   2: 117.232 ns/op
# Warmup Iteration   3: 112.820 ns/op
# Warmup Iteration   4: 110.616 ns/op
# Warmup Iteration   5: 109.347 ns/op
Iteration   1: 109.091 ns/op
                 ·gc.alloc.rate:      699.100 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 109.030 ns/op
                 ·gc.alloc.rate:      699.390 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 108.864 ns/op
                 ·gc.alloc.rate:      700.463 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            1.000 ms

Iteration   4: 109.122 ns/op
                 ·gc.alloc.rate:      698.629 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 109.375 ns/op
                 ·gc.alloc.rate:      697.203 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  109.096 ±(99.9%) 0.712 ns/op [Average]
  (min, avg, max) = (108.864, 109.096, 109.375), stdev = 0.185
  CI (99.9%): [108.385, 109.808] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  698.957 ±(99.9%) 4.580 MB/sec [Average]
  (min, avg, max) = (697.203, 698.957, 700.463), stdev = 1.189
  CI (99.9%): [694.377, 703.537] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.998, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  24.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.time":
  10.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = )

# Run progress: 19.32% complete, ETA 00:57:05
# Fork: 1 of 1
# Warmup Iteration   1: 7.323 ns/op
# Warmup Iteration   2: 8.008 ns/op
# Warmup Iteration   3: 5.813 ns/op
# Warmup Iteration   4: 5.817 ns/op
# Warmup Iteration   5: 5.811 ns/op
Iteration   1: 5.829 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.862 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.831 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.824 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.824 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  5.834 ±(99.9%) 0.061 ns/op [Average]
  (min, avg, max) = (5.824, 5.834, 5.862), stdev = 0.016
  CI (99.9%): [5.774, 5.895] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200)

# Run progress: 19.56% complete, ETA 00:56:55
# Fork: 1 of 1
# Warmup Iteration   1: 13.660 ns/op
# Warmup Iteration   2: 12.936 ns/op
# Warmup Iteration   3: 12.209 ns/op
# Warmup Iteration   4: 12.196 ns/op
# Warmup Iteration   5: 12.255 ns/op
Iteration   1: 12.156 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12.274 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12.467 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.241 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12.105 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  12.249 ±(99.9%) 0.536 ns/op [Average]
  (min, avg, max) = (12.105, 12.249, 12.467), stdev = 0.139
  CI (99.9%): [11.713, 12.785] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.)

# Run progress: 19.80% complete, ETA 00:56:44
# Fork: 1 of 1
# Warmup Iteration   1: 29.203 ns/op
# Warmup Iteration   2: 25.989 ns/op
# Warmup Iteration   3: 25.326 ns/op
# Warmup Iteration   4: 26.041 ns/op
# Warmup Iteration   5: 26.934 ns/op
Iteration   1: 25.671 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 25.656 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 25.687 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 25.589 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 25.354 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  25.591 ±(99.9%) 0.531 ns/op [Average]
  (min, avg, max) = (25.354, 25.591, 25.687), stdev = 0.138
  CI (99.9%): [25.060, 26.123] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200)

# Run progress: 20.05% complete, ETA 00:56:34
# Fork: 1 of 1
# Warmup Iteration   1: 34.132 ns/op
# Warmup Iteration   2: 31.384 ns/op
# Warmup Iteration   3: 29.822 ns/op
# Warmup Iteration   4: 29.714 ns/op
# Warmup Iteration   5: 29.746 ns/op
Iteration   1: 29.743 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.798 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.814 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.715 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.759 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  29.766 ±(99.9%) 0.155 ns/op [Average]
  (min, avg, max) = (29.715, 29.766, 29.814), stdev = 0.040
  CI (99.9%): [29.611, 29.921] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.)

# Run progress: 20.29% complete, ETA 00:56:23
# Fork: 1 of 1
# Warmup Iteration   1: 61.826 ns/op
# Warmup Iteration   2: 55.127 ns/op
# Warmup Iteration   3: 53.270 ns/op
# Warmup Iteration   4: 53.234 ns/op
# Warmup Iteration   5: 53.331 ns/op
Iteration   1: 55.341 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 53.399 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 53.340 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 53.292 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 53.327 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  53.740 ±(99.9%) 3.450 ns/op [Average]
  (min, avg, max) = (53.292, 53.740, 55.341), stdev = 0.896
  CI (99.9%): [50.290, 57.189] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = a.200.200)

# Run progress: 20.54% complete, ETA 00:56:13
# Fork: 1 of 1
# Warmup Iteration   1: 7.966 ns/op
# Warmup Iteration   2: 7.074 ns/op
# Warmup Iteration   3: 6.063 ns/op
# Warmup Iteration   4: 6.059 ns/op
# Warmup Iteration   5: 6.057 ns/op
Iteration   1: 6.048 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.080 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.064 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.064 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.056 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  6.062 ±(99.9%) 0.046 ns/op [Average]
  (min, avg, max) = (6.048, 6.062, 6.080), stdev = 0.012
  CI (99.9%): [6.016, 6.108] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.a.200)

# Run progress: 20.78% complete, ETA 00:56:02
# Fork: 1 of 1
# Warmup Iteration   1: 29.216 ns/op
# Warmup Iteration   2: 27.357 ns/op
# Warmup Iteration   3: 24.277 ns/op
# Warmup Iteration   4: 24.300 ns/op
# Warmup Iteration   5: 24.283 ns/op
Iteration   1: 24.352 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 25.181 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 24.279 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 24.275 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 24.305 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  24.478 ±(99.9%) 1.516 ns/op [Average]
  (min, avg, max) = (24.275, 24.478, 25.181), stdev = 0.394
  CI (99.9%): [22.962, 25.995] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.a)

# Run progress: 21.03% complete, ETA 00:55:52
# Fork: 1 of 1
# Warmup Iteration   1: 60.952 ns/op
# Warmup Iteration   2: 54.942 ns/op
# Warmup Iteration   3: 53.496 ns/op
# Warmup Iteration   4: 53.343 ns/op
# Warmup Iteration   5: 53.379 ns/op
Iteration   1: 54.260 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 53.348 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 53.330 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 53.495 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 53.340 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  53.555 ±(99.9%) 1.541 ns/op [Average]
  (min, avg, max) = (53.330, 53.555, 54.260), stdev = 0.400
  CI (99.9%): [52.014, 55.096] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.200.200)

# Run progress: 21.27% complete, ETA 00:55:41
# Fork: 1 of 1
# Warmup Iteration   1: 71.477 ns/op
# Warmup Iteration   2: 65.370 ns/op
# Warmup Iteration   3: 61.429 ns/op
# Warmup Iteration   4: 61.418 ns/op
# Warmup Iteration   5: 61.445 ns/op
Iteration   1: 61.323 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 63.136 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 61.414 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 64.944 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 61.223 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  62.408 ±(99.9%) 6.248 ns/op [Average]
  (min, avg, max) = (61.223, 62.408, 64.944), stdev = 1.623
  CI (99.9%): [56.160, 68.656] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.99999)

# Run progress: 21.52% complete, ETA 00:55:31
# Fork: 1 of 1
# Warmup Iteration   1: 96.812 ns/op
# Warmup Iteration   2: 88.400 ns/op
# Warmup Iteration   3: 86.599 ns/op
# Warmup Iteration   4: 86.663 ns/op
# Warmup Iteration   5: 86.629 ns/op
Iteration   1: 86.636 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 86.643 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 86.577 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 86.628 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 86.870 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  86.671 ±(99.9%) 0.439 ns/op [Average]
  (min, avg, max) = (86.577, 86.671, 86.870), stdev = 0.114
  CI (99.9%): [86.231, 87.110] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.-200)

# Run progress: 21.76% complete, ETA 00:55:20
# Fork: 1 of 1
# Warmup Iteration   1: 63.058 ns/op
# Warmup Iteration   2: 57.467 ns/op
# Warmup Iteration   3: 55.647 ns/op
# Warmup Iteration   4: 55.584 ns/op
# Warmup Iteration   5: 55.601 ns/op
Iteration   1: 55.629 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 55.608 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 55.637 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 56.497 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 55.632 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  55.800 ±(99.9%) 1.499 ns/op [Average]
  (min, avg, max) = (55.608, 55.800, 56.497), stdev = 0.389
  CI (99.9%): [54.302, 57.299] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 1.0.0)

# Run progress: 22.00% complete, ETA 00:55:10
# Fork: 1 of 1
# Warmup Iteration   1: 58.338 ns/op
# Warmup Iteration   2: 47.891 ns/op
# Warmup Iteration   3: 44.767 ns/op
# Warmup Iteration   4: 44.734 ns/op
# Warmup Iteration   5: 44.736 ns/op
Iteration   1: 44.814 ns/op
                 ·gc.alloc.rate:      1701.645 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 44.994 ns/op
                 ·gc.alloc.rate:      1694.966 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 44.867 ns/op
                 ·gc.alloc.rate:      1699.770 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 44.732 ns/op
                 ·gc.alloc.rate:      1704.198 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 46.867 ns/op
                 ·gc.alloc.rate:      1627.320 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  45.255 ±(99.9%) 3.489 ns/op [Average]
  (min, avg, max) = (44.732, 45.255, 46.867), stdev = 0.906
  CI (99.9%): [41.766, 48.744] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  1685.580 ±(99.9%) 126.081 MB/sec [Average]
  (min, avg, max) = (1627.320, 1685.580, 1704.198), stdev = 32.743
  CI (99.9%): [1559.499, 1811.660] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  50.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 10.000, 11.000), stdev = 0.707
  CI (99.9%): [50.000, 50.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time":
  22.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.200)

# Run progress: 22.25% complete, ETA 00:54:59
# Fork: 1 of 1
# Warmup Iteration   1: 91.714 ns/op
# Warmup Iteration   2: 75.134 ns/op
# Warmup Iteration   3: 73.460 ns/op
# Warmup Iteration   4: 73.136 ns/op
# Warmup Iteration   5: 73.221 ns/op
Iteration   1: 73.151 ns/op
                 ·gc.alloc.rate:      1042.507 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 73.133 ns/op
                 ·gc.alloc.rate:      1042.661 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 73.318 ns/op
                 ·gc.alloc.rate:      1040.037 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 73.344 ns/op
                 ·gc.alloc.rate:      1038.941 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 71.254 ns/op
                 ·gc.alloc.rate:      1070.449 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  72.840 ±(99.9%) 3.434 ns/op [Average]
  (min, avg, max) = (71.254, 72.840, 73.344), stdev = 0.892
  CI (99.9%): [69.406, 76.274] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  1046.919 ±(99.9%) 51.021 MB/sec [Average]
  (min, avg, max) = (1038.941, 1046.919, 1070.449), stdev = 13.250
  CI (99.9%): [995.898, 1097.940] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  36.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 22.49% complete, ETA 00:54:49
# Fork: 1 of 1
# Warmup Iteration   1: 119.131 ns/op
# Warmup Iteration   2: 99.460 ns/op
# Warmup Iteration   3: 95.547 ns/op
# Warmup Iteration   4: 94.548 ns/op
# Warmup Iteration   5: 93.131 ns/op
Iteration   1: 92.843 ns/op
                 ·gc.alloc.rate:      821.288 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 92.799 ns/op
                 ·gc.alloc.rate:      821.617 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 92.936 ns/op
                 ·gc.alloc.rate:      820.465 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 92.861 ns/op
                 ·gc.alloc.rate:      821.002 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 93.016 ns/op
                 ·gc.alloc.rate:      819.785 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  92.891 ±(99.9%) 0.330 ns/op [Average]
  (min, avg, max) = (92.799, 92.891, 93.016), stdev = 0.086
  CI (99.9%): [92.561, 93.221] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  820.831 ±(99.9%) 2.779 MB/sec [Average]
  (min, avg, max) = (819.785, 820.831, 821.617), stdev = 0.722
  CI (99.9%): [818.052, 823.611] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 22.74% complete, ETA 00:54:38
# Fork: 1 of 1
# Warmup Iteration   1: 138.542 ns/op
# Warmup Iteration   2: 109.872 ns/op
# Warmup Iteration   3: 105.333 ns/op
# Warmup Iteration   4: 104.216 ns/op
# Warmup Iteration   5: 103.117 ns/op
Iteration   1: 103.118 ns/op
                 ·gc.alloc.rate:      739.601 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 103.144 ns/op
                 ·gc.alloc.rate:      739.252 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 103.071 ns/op
                 ·gc.alloc.rate:      739.832 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 103.329 ns/op
                 ·gc.alloc.rate:      737.550 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 103.290 ns/op
                 ·gc.alloc.rate:      738.403 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  103.190 ±(99.9%) 0.434 ns/op [Average]
  (min, avg, max) = (103.071, 103.190, 103.329), stdev = 0.113
  CI (99.9%): [102.756, 103.624] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  738.928 ±(99.9%) 3.627 MB/sec [Average]
  (min, avg, max) = (737.550, 738.928, 739.832), stdev = 0.942
  CI (99.9%): [735.300, 742.555] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.998, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  25.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = )

# Run progress: 22.98% complete, ETA 00:54:28
# Fork: 1 of 1
# Warmup Iteration   1: 7.151 ns/op
# Warmup Iteration   2: 6.819 ns/op
# Warmup Iteration   3: 6.511 ns/op
# Warmup Iteration   4: 5.803 ns/op
# Warmup Iteration   5: 5.814 ns/op
Iteration   1: 5.805 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.804 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.801 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.803 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.953 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  5.833 ±(99.9%) 0.258 ns/op [Average]
  (min, avg, max) = (5.801, 5.833, 5.953), stdev = 0.067
  CI (99.9%): [5.575, 6.091] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200)

# Run progress: 23.23% complete, ETA 00:54:17
# Fork: 1 of 1
# Warmup Iteration   1: 17.379 ns/op
# Warmup Iteration   2: 16.454 ns/op
# Warmup Iteration   3: 16.234 ns/op
# Warmup Iteration   4: 16.199 ns/op
# Warmup Iteration   5: 16.160 ns/op
Iteration   1: 16.114 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.577 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.237 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.101 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.160 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  16.238 ±(99.9%) 0.760 ns/op [Average]
  (min, avg, max) = (16.101, 16.238, 16.577), stdev = 0.197
  CI (99.9%): [15.478, 16.997] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.)

# Run progress: 23.47% complete, ETA 00:54:07
# Fork: 1 of 1
# Warmup Iteration   1: 20.434 ns/op
# Warmup Iteration   2: 19.345 ns/op
# Warmup Iteration   3: 20.036 ns/op
# Warmup Iteration   4: 19.740 ns/op
# Warmup Iteration   5: 19.767 ns/op
Iteration   1: 19.755 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.787 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.758 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.754 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.761 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  19.763 ±(99.9%) 0.053 ns/op [Average]
  (min, avg, max) = (19.754, 19.763, 19.787), stdev = 0.014
  CI (99.9%): [19.710, 19.816] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200)

# Run progress: 23.72% complete, ETA 00:53:56
# Fork: 1 of 1
# Warmup Iteration   1: 34.301 ns/op
# Warmup Iteration   2: 32.681 ns/op
# Warmup Iteration   3: 28.182 ns/op
# Warmup Iteration   4: 28.050 ns/op
# Warmup Iteration   5: 28.069 ns/op
Iteration   1: 28.004 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 28.005 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 28.034 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 28.042 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.963 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  28.010 ±(99.9%) 0.120 ns/op [Average]
  (min, avg, max) = (27.963, 28.010, 28.042), stdev = 0.031
  CI (99.9%): [27.890, 28.130] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.)

# Run progress: 23.96% complete, ETA 00:53:46
# Fork: 1 of 1
# Warmup Iteration   1: 36.359 ns/op
# Warmup Iteration   2: 33.731 ns/op
# Warmup Iteration   3: 32.630 ns/op
# Warmup Iteration   4: 32.640 ns/op
# Warmup Iteration   5: 32.641 ns/op
Iteration   1: 32.624 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.665 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.671 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.721 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.681 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  32.672 ±(99.9%) 0.134 ns/op [Average]
  (min, avg, max) = (32.624, 32.672, 32.721), stdev = 0.035
  CI (99.9%): [32.538, 32.806] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = a.200.200)

# Run progress: 24.21% complete, ETA 00:53:36
# Fork: 1 of 1
# Warmup Iteration   1: 7.380 ns/op
# Warmup Iteration   2: 7.023 ns/op
# Warmup Iteration   3: 6.110 ns/op
# Warmup Iteration   4: 6.100 ns/op
# Warmup Iteration   5: 6.105 ns/op
Iteration   1: 6.108 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.108 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.094 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.111 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.104 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  6.105 ±(99.9%) 0.026 ns/op [Average]
  (min, avg, max) = (6.094, 6.105, 6.111), stdev = 0.007
  CI (99.9%): [6.079, 6.131] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.a.200)

# Run progress: 24.45% complete, ETA 00:53:25
# Fork: 1 of 1
# Warmup Iteration   1: 22.004 ns/op
# Warmup Iteration   2: 20.463 ns/op
# Warmup Iteration   3: 21.500 ns/op
# Warmup Iteration   4: 21.490 ns/op
# Warmup Iteration   5: 21.483 ns/op
Iteration   1: 21.531 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.502 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.477 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.506 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.462 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  21.496 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (21.462, 21.496, 21.531), stdev = 0.027
  CI (99.9%): [21.392, 21.599] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.a)

# Run progress: 24.69% complete, ETA 00:53:15
# Fork: 1 of 1
# Warmup Iteration   1: 35.100 ns/op
# Warmup Iteration   2: 33.118 ns/op
# Warmup Iteration   3: 31.828 ns/op
# Warmup Iteration   4: 31.869 ns/op
# Warmup Iteration   5: 32.299 ns/op
Iteration   1: 31.837 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.880 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.856 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.324 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.899 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  32.159 ±(99.9%) 2.509 ns/op [Average]
  (min, avg, max) = (31.837, 32.159, 33.324), stdev = 0.652
  CI (99.9%): [29.649, 34.668] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.200.200)

# Run progress: 24.94% complete, ETA 00:53:04
# Fork: 1 of 1
# Warmup Iteration   1: 46.174 ns/op
# Warmup Iteration   2: 42.893 ns/op
# Warmup Iteration   3: 40.969 ns/op
# Warmup Iteration   4: 40.923 ns/op
# Warmup Iteration   5: 40.891 ns/op
Iteration   1: 40.906 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 40.881 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 40.869 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 41.146 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 40.932 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  40.947 ±(99.9%) 0.438 ns/op [Average]
  (min, avg, max) = (40.869, 40.947, 41.146), stdev = 0.114
  CI (99.9%): [40.508, 41.385] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.99999)

# Run progress: 25.18% complete, ETA 00:52:54
# Fork: 1 of 1
# Warmup Iteration   1: 50.349 ns/op
# Warmup Iteration   2: 47.042 ns/op
# Warmup Iteration   3: 44.557 ns/op
# Warmup Iteration   4: 44.454 ns/op
# Warmup Iteration   5: 44.510 ns/op
Iteration   1: 44.465 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 44.483 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 44.432 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 44.453 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 45.198 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  44.606 ±(99.9%) 1.276 ns/op [Average]
  (min, avg, max) = (44.432, 44.606, 45.198), stdev = 0.331
  CI (99.9%): [43.330, 45.882] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.-200)

# Run progress: 25.43% complete, ETA 00:52:43
# Fork: 1 of 1
# Warmup Iteration   1: 36.011 ns/op
# Warmup Iteration   2: 33.260 ns/op
# Warmup Iteration   3: 32.307 ns/op
# Warmup Iteration   4: 32.316 ns/op
# Warmup Iteration   5: 32.264 ns/op
Iteration   1: 32.328 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.284 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.299 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.374 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.347 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  32.327 ±(99.9%) 0.140 ns/op [Average]
  (min, avg, max) = (32.284, 32.327, 32.374), stdev = 0.036
  CI (99.9%): [32.187, 32.467] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 1.0.0)

# Run progress: 25.67% complete, ETA 00:52:33
# Fork: 1 of 1
# Warmup Iteration   1: 35.787 ns/op
# Warmup Iteration   2: 29.588 ns/op
# Warmup Iteration   3: 26.169 ns/op
# Warmup Iteration   4: 26.034 ns/op
# Warmup Iteration   5: 26.003 ns/op
Iteration   1: 26.017 ns/op
                 ·gc.alloc.rate:      2931.301 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 27.085 ns/op
                 ·gc.alloc.rate:      2815.799 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 26.054 ns/op
                 ·gc.alloc.rate:      2926.863 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 26.065 ns/op
                 ·gc.alloc.rate:      2923.882 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 26.083 ns/op
                 ·gc.alloc.rate:      2924.017 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  26.261 ±(99.9%) 1.775 ns/op [Average]
  (min, avg, max) = (26.017, 26.261, 27.085), stdev = 0.461
  CI (99.9%): [24.486, 28.036] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  2904.372 ±(99.9%) 191.013 MB/sec [Average]
  (min, avg, max) = (2815.799, 2904.372, 2931.301), stdev = 49.606
  CI (99.9%): [2713.359, 3095.386] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  79.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.800, 16.000), stdev = 0.447
  CI (99.9%): [79.000, 79.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.time":
  28.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.200)

# Run progress: 25.92% complete, ETA 00:52:22
# Fork: 1 of 1
# Warmup Iteration   1: 56.089 ns/op
# Warmup Iteration   2: 50.638 ns/op
# Warmup Iteration   3: 45.083 ns/op
# Warmup Iteration   4: 44.905 ns/op
# Warmup Iteration   5: 45.040 ns/op
Iteration   1: 45.034 ns/op
                 ·gc.alloc.rate:      1693.393 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 45.064 ns/op
                 ·gc.alloc.rate:      1692.440 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 45.024 ns/op
                 ·gc.alloc.rate:      1693.980 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 45.045 ns/op
                 ·gc.alloc.rate:      1692.076 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 44.987 ns/op
                 ·gc.alloc.rate:      1695.426 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  45.031 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (44.987, 45.031, 45.064), stdev = 0.029
  CI (99.9%): [44.921, 45.141] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  1693.463 ±(99.9%) 5.128 MB/sec [Average]
  (min, avg, max) = (1692.076, 1693.463, 1695.426), stdev = 1.332
  CI (99.9%): [1688.335, 1698.591] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  51.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
  CI (99.9%): [51.000, 51.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 26.16% complete, ETA 00:52:12
# Fork: 1 of 1
# Warmup Iteration   1: 70.822 ns/op
# Warmup Iteration   2: 62.390 ns/op
# Warmup Iteration   3: 58.706 ns/op
# Warmup Iteration   4: 56.829 ns/op
# Warmup Iteration   5: 56.930 ns/op
Iteration   1: 56.904 ns/op
                 ·gc.alloc.rate:      1340.161 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 57.290 ns/op
                 ·gc.alloc.rate:      1331.243 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 57.198 ns/op
                 ·gc.alloc.rate:      1333.385 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 56.930 ns/op
                 ·gc.alloc.rate:      1338.649 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 56.702 ns/op
                 ·gc.alloc.rate:      1344.976 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  57.005 ±(99.9%) 0.915 ns/op [Average]
  (min, avg, max) = (56.702, 57.005, 57.290), stdev = 0.238
  CI (99.9%): [56.090, 57.919] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  1337.683 ±(99.9%) 21.109 MB/sec [Average]
  (min, avg, max) = (1331.243, 1337.683, 1344.976), stdev = 5.482
  CI (99.9%): [1316.574, 1358.792] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  40.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 26.41% complete, ETA 00:52:02
# Fork: 1 of 1
# Warmup Iteration   1: 78.003 ns/op
# Warmup Iteration   2: 68.319 ns/op
# Warmup Iteration   3: 64.216 ns/op
# Warmup Iteration   4: 63.994 ns/op
# Warmup Iteration   5: 63.875 ns/op
Iteration   1: 63.856 ns/op
                 ·gc.alloc.rate:      1194.359 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 63.900 ns/op
                 ·gc.alloc.rate:      1193.277 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 63.833 ns/op
                 ·gc.alloc.rate:      1194.446 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 63.825 ns/op
                 ·gc.alloc.rate:      1194.165 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 62.275 ns/op
                 ·gc.alloc.rate:      1224.429 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  63.538 ±(99.9%) 2.720 ns/op [Average]
  (min, avg, max) = (62.275, 63.538, 63.900), stdev = 0.706
  CI (99.9%): [60.818, 66.257] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  1200.135 ±(99.9%) 52.325 MB/sec [Average]
  (min, avg, max) = (1193.277, 1200.135, 1224.429), stdev = 13.589
  CI (99.9%): [1147.810, 1252.460] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  42.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
  CI (99.9%): [42.000, 42.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = )

# Run progress: 26.65% complete, ETA 00:51:51
# Fork: 1 of 1
# Warmup Iteration   1: 7.269 ns/op
# Warmup Iteration   2: 7.285 ns/op
# Warmup Iteration   3: 5.748 ns/op
# Warmup Iteration   4: 5.737 ns/op
# Warmup Iteration   5: 5.757 ns/op
Iteration   1: 5.756 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.745 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.855 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.739 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.746 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  5.768 ±(99.9%) 0.189 ns/op [Average]
  (min, avg, max) = (5.739, 5.768, 5.855), stdev = 0.049
  CI (99.9%): [5.579, 5.957] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200)

# Run progress: 26.89% complete, ETA 00:51:41
# Fork: 1 of 1
# Warmup Iteration   1: 20.491 ns/op
# Warmup Iteration   2: 17.998 ns/op
# Warmup Iteration   3: 19.993 ns/op
# Warmup Iteration   4: 19.950 ns/op
# Warmup Iteration   5: 19.952 ns/op
Iteration   1: 19.939 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.956 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.968 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.964 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 20.428 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  20.051 ±(99.9%) 0.813 ns/op [Average]
  (min, avg, max) = (19.939, 20.051, 20.428), stdev = 0.211
  CI (99.9%): [19.238, 20.864] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.)

# Run progress: 27.14% complete, ETA 00:51:30
# Fork: 1 of 1
# Warmup Iteration   1: 18.821 ns/op
# Warmup Iteration   2: 16.771 ns/op
# Warmup Iteration   3: 18.772 ns/op
# Warmup Iteration   4: 18.814 ns/op
# Warmup Iteration   5: 18.811 ns/op
Iteration   1: 18.828 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.825 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.806 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.814 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.799 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  18.815 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (18.799, 18.815, 18.828), stdev = 0.012
  CI (99.9%): [18.767, 18.862] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200)

# Run progress: 27.38% complete, ETA 00:51:20
# Fork: 1 of 1
# Warmup Iteration   1: 45.648 ns/op
# Warmup Iteration   2: 41.544 ns/op
# Warmup Iteration   3: 37.477 ns/op
# Warmup Iteration   4: 37.518 ns/op
# Warmup Iteration   5: 37.450 ns/op
Iteration   1: 37.416 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 37.408 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 37.427 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 37.385 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 37.371 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  37.401 ±(99.9%) 0.088 ns/op [Average]
  (min, avg, max) = (37.371, 37.401, 37.427), stdev = 0.023
  CI (99.9%): [37.313, 37.490] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.)

# Run progress: 27.63% complete, ETA 00:51:09
# Fork: 1 of 1
# Warmup Iteration   1: 37.627 ns/op
# Warmup Iteration   2: 35.105 ns/op
# Warmup Iteration   3: 34.486 ns/op
# Warmup Iteration   4: 34.494 ns/op
# Warmup Iteration   5: 34.520 ns/op
Iteration   1: 34.483 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 34.460 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 34.477 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 34.454 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 34.521 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  34.479 ±(99.9%) 0.102 ns/op [Average]
  (min, avg, max) = (34.454, 34.479, 34.521), stdev = 0.026
  CI (99.9%): [34.377, 34.581] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = a.200.200)

# Run progress: 27.87% complete, ETA 00:50:59
# Fork: 1 of 1
# Warmup Iteration   1: 7.832 ns/op
# Warmup Iteration   2: 7.358 ns/op
# Warmup Iteration   3: 6.522 ns/op
# Warmup Iteration   4: 6.518 ns/op
# Warmup Iteration   5: 6.550 ns/op
Iteration   1: 6.524 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.607 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.518 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.523 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.527 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  6.540 ±(99.9%) 0.146 ns/op [Average]
  (min, avg, max) = (6.518, 6.540, 6.607), stdev = 0.038
  CI (99.9%): [6.394, 6.685] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.a.200)

# Run progress: 28.12% complete, ETA 00:50:48
# Fork: 1 of 1
# Warmup Iteration   1: 25.209 ns/op
# Warmup Iteration   2: 22.736 ns/op
# Warmup Iteration   3: 24.590 ns/op
# Warmup Iteration   4: 24.454 ns/op
# Warmup Iteration   5: 24.442 ns/op
Iteration   1: 24.668 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 24.432 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 24.445 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 24.464 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 24.438 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  24.490 ±(99.9%) 0.387 ns/op [Average]
  (min, avg, max) = (24.432, 24.490, 24.668), stdev = 0.101
  CI (99.9%): [24.102, 24.877] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.a)

# Run progress: 28.36% complete, ETA 00:50:38
# Fork: 1 of 1
# Warmup Iteration   1: 44.430 ns/op
# Warmup Iteration   2: 42.916 ns/op
# Warmup Iteration   3: 39.473 ns/op
# Warmup Iteration   4: 39.301 ns/op
# Warmup Iteration   5: 39.334 ns/op
Iteration   1: 39.372 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 39.316 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 39.290 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 39.333 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 39.287 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  39.320 ±(99.9%) 0.135 ns/op [Average]
  (min, avg, max) = (39.287, 39.320, 39.372), stdev = 0.035
  CI (99.9%): [39.185, 39.455] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.200.200)

# Run progress: 28.61% complete, ETA 00:50:28
# Fork: 1 of 1
# Warmup Iteration   1: 64.196 ns/op
# Warmup Iteration   2: 60.022 ns/op
# Warmup Iteration   3: 58.511 ns/op
# Warmup Iteration   4: 58.408 ns/op
# Warmup Iteration   5: 58.385 ns/op
Iteration   1: 59.128 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 59.393 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 58.663 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 58.619 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 58.537 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  58.868 ±(99.9%) 1.437 ns/op [Average]
  (min, avg, max) = (58.537, 58.868, 59.393), stdev = 0.373
  CI (99.9%): [57.431, 60.305] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.99999)

# Run progress: 28.85% complete, ETA 00:50:17
# Fork: 1 of 1
# Warmup Iteration   1: 72.022 ns/op
# Warmup Iteration   2: 67.646 ns/op
# Warmup Iteration   3: 64.045 ns/op
# Warmup Iteration   4: 64.010 ns/op
# Warmup Iteration   5: 63.862 ns/op
Iteration   1: 63.918 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 63.945 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 64.130 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 64.334 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 63.638 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  63.993 ±(99.9%) 0.999 ns/op [Average]
  (min, avg, max) = (63.638, 63.993, 64.334), stdev = 0.260
  CI (99.9%): [62.993, 64.992] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.-200)

# Run progress: 29.10% complete, ETA 00:50:07
# Fork: 1 of 1
# Warmup Iteration   1: 44.468 ns/op
# Warmup Iteration   2: 42.682 ns/op
# Warmup Iteration   3: 39.290 ns/op
# Warmup Iteration   4: 39.525 ns/op
# Warmup Iteration   5: 39.680 ns/op
Iteration   1: 39.691 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 39.625 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 39.647 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 40.912 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 39.571 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  39.889 ±(99.9%) 2.207 ns/op [Average]
  (min, avg, max) = (39.571, 39.889, 40.912), stdev = 0.573
  CI (99.9%): [37.682, 42.097] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 1.0.0)

# Run progress: 29.34% complete, ETA 00:49:56
# Fork: 1 of 1
# Warmup Iteration   1: 50.277 ns/op
# Warmup Iteration   2: 41.211 ns/op
# Warmup Iteration   3: 41.884 ns/op
# Warmup Iteration   4: 42.118 ns/op
# Warmup Iteration   5: 41.798 ns/op
Iteration   1: 41.818 ns/op
                 ·gc.alloc.rate:      1823.556 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 41.813 ns/op
                 ·gc.alloc.rate:      1823.564 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 41.810 ns/op
                 ·gc.alloc.rate:      1823.608 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 41.790 ns/op
                 ·gc.alloc.rate:      1824.008 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 38.354 ns/op
                 ·gc.alloc.rate:      1988.525 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  41.117 ±(99.9%) 5.948 ns/op [Average]
  (min, avg, max) = (38.354, 41.117, 41.818), stdev = 1.545
  CI (99.9%): [35.169, 47.065] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  1856.652 ±(99.9%) 283.868 MB/sec [Average]
  (min, avg, max) = (1823.556, 1856.652, 1988.525), stdev = 73.720
  CI (99.9%): [1572.784, 2140.520] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  50.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 10.000, 11.000), stdev = 0.707
  CI (99.9%): [50.000, 50.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.200)

# Run progress: 29.58% complete, ETA 00:49:46
# Fork: 1 of 1
# Warmup Iteration   1: 82.641 ns/op
# Warmup Iteration   2: 72.287 ns/op
# Warmup Iteration   3: 69.769 ns/op
# Warmup Iteration   4: 69.469 ns/op
# Warmup Iteration   5: 69.169 ns/op
Iteration   1: 69.086 ns/op
                 ·gc.alloc.rate:      1103.866 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 69.129 ns/op
                 ·gc.alloc.rate:      1103.189 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 69.070 ns/op
                 ·gc.alloc.rate:      1103.992 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 69.151 ns/op
                 ·gc.alloc.rate:      1102.189 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 69.224 ns/op
                 ·gc.alloc.rate:      1101.615 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  69.132 ±(99.9%) 0.235 ns/op [Average]
  (min, avg, max) = (69.070, 69.132, 69.224), stdev = 0.061
  CI (99.9%): [68.897, 69.367] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  1102.970 ±(99.9%) 4.012 MB/sec [Average]
  (min, avg, max) = (1101.615, 1102.970, 1103.992), stdev = 1.042
  CI (99.9%): [1098.959, 1106.982] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  38.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
  CI (99.9%): [38.000, 38.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 29.83% complete, ETA 00:49:35
# Fork: 1 of 1
# Warmup Iteration   1: 96.143 ns/op
# Warmup Iteration   2: 84.521 ns/op
# Warmup Iteration   3: 82.322 ns/op
# Warmup Iteration   4: 81.170 ns/op
# Warmup Iteration   5: 81.003 ns/op
Iteration   1: 81.023 ns/op
                 ·gc.alloc.rate:      941.280 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 80.952 ns/op
                 ·gc.alloc.rate:      942.024 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 80.893 ns/op
                 ·gc.alloc.rate:      942.638 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 80.907 ns/op
                 ·gc.alloc.rate:      942.100 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 81.103 ns/op
                 ·gc.alloc.rate:      940.220 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  80.976 ±(99.9%) 0.337 ns/op [Average]
  (min, avg, max) = (80.893, 80.976, 81.103), stdev = 0.088
  CI (99.9%): [80.639, 81.313] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  941.653 ±(99.9%) 3.603 MB/sec [Average]
  (min, avg, max) = (940.220, 941.653, 942.638), stdev = 0.936
  CI (99.9%): [938.050, 945.255] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 30.07% complete, ETA 00:49:25
# Fork: 1 of 1
# Warmup Iteration   1: 107.177 ns/op
# Warmup Iteration   2: 92.866 ns/op
# Warmup Iteration   3: 91.320 ns/op
# Warmup Iteration   4: 88.834 ns/op
# Warmup Iteration   5: 88.874 ns/op
Iteration   1: 88.798 ns/op
                 ·gc.alloc.rate:      858.727 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 88.894 ns/op
                 ·gc.alloc.rate:      857.797 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 88.781 ns/op
                 ·gc.alloc.rate:      858.918 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 88.740 ns/op
                 ·gc.alloc.rate:      858.916 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 88.722 ns/op
                 ·gc.alloc.rate:      859.617 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  88.787 ±(99.9%) 0.259 ns/op [Average]
  (min, avg, max) = (88.722, 88.787, 88.894), stdev = 0.067
  CI (99.9%): [88.528, 89.046] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  858.795 ±(99.9%) 2.515 MB/sec [Average]
  (min, avg, max) = (857.797, 858.795, 859.617), stdev = 0.653
  CI (99.9%): [856.280, 861.310] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = )

# Run progress: 30.32% complete, ETA 00:49:15
# Fork: 1 of 1
# Warmup Iteration   1: 7.283 ns/op
# Warmup Iteration   2: 6.814 ns/op
# Warmup Iteration   3: 6.521 ns/op
# Warmup Iteration   4: 5.990 ns/op
# Warmup Iteration   5: 5.826 ns/op
Iteration   1: 5.845 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.950 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.831 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.823 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.806 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  5.851 ±(99.9%) 0.221 ns/op [Average]
  (min, avg, max) = (5.806, 5.851, 5.950), stdev = 0.057
  CI (99.9%): [5.630, 6.071] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200)

# Run progress: 30.56% complete, ETA 00:49:04
# Fork: 1 of 1
# Warmup Iteration   1: 15.972 ns/op
# Warmup Iteration   2: 15.997 ns/op
# Warmup Iteration   3: 13.975 ns/op
# Warmup Iteration   4: 13.551 ns/op
# Warmup Iteration   5: 13.547 ns/op
Iteration   1: 13.531 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13.530 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13.549 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.676 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.689 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  14.395 ±(99.9%) 4.526 ns/op [Average]
  (min, avg, max) = (13.530, 14.395, 15.689), stdev = 1.175
  CI (99.9%): [9.869, 18.921] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.)

# Run progress: 30.81% complete, ETA 00:48:54
# Fork: 1 of 1
# Warmup Iteration   1: 19.574 ns/op
# Warmup Iteration   2: 19.329 ns/op
# Warmup Iteration   3: 16.946 ns/op
# Warmup Iteration   4: 16.968 ns/op
# Warmup Iteration   5: 16.951 ns/op
Iteration   1: 16.945 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.971 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.937 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.934 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.990 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  16.955 ±(99.9%) 0.093 ns/op [Average]
  (min, avg, max) = (16.934, 16.955, 16.990), stdev = 0.024
  CI (99.9%): [16.862, 17.049] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200)

# Run progress: 31.05% complete, ETA 00:48:43
# Fork: 1 of 1
# Warmup Iteration   1: 30.089 ns/op
# Warmup Iteration   2: 29.691 ns/op
# Warmup Iteration   3: 24.163 ns/op
# Warmup Iteration   4: 24.156 ns/op
# Warmup Iteration   5: 24.202 ns/op
Iteration   1: 24.134 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 24.083 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 24.210 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 24.176 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 24.220 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  24.165 ±(99.9%) 0.218 ns/op [Average]
  (min, avg, max) = (24.083, 24.165, 24.220), stdev = 0.057
  CI (99.9%): [23.947, 24.382] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.)

# Run progress: 31.30% complete, ETA 00:48:33
# Fork: 1 of 1
# Warmup Iteration   1: 33.806 ns/op
# Warmup Iteration   2: 32.737 ns/op
# Warmup Iteration   3: 32.770 ns/op
# Warmup Iteration   4: 32.764 ns/op
# Warmup Iteration   5: 32.764 ns/op
Iteration   1: 32.761 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.770 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.751 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.755 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 33.038 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  32.815 ±(99.9%) 0.481 ns/op [Average]
  (min, avg, max) = (32.751, 32.815, 33.038), stdev = 0.125
  CI (99.9%): [32.334, 33.296] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = a.200.200)

# Run progress: 31.54% complete, ETA 00:48:23
# Fork: 1 of 1
# Warmup Iteration   1: 7.573 ns/op
# Warmup Iteration   2: 8.113 ns/op
# Warmup Iteration   3: 6.107 ns/op
# Warmup Iteration   4: 6.106 ns/op
# Warmup Iteration   5: 6.106 ns/op
Iteration   1: 6.101 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.167 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.115 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.117 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.107 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  6.121 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (6.101, 6.121, 6.167), stdev = 0.026
  CI (99.9%): [6.021, 6.222] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.a.200)

# Run progress: 31.78% complete, ETA 00:48:12
# Fork: 1 of 1
# Warmup Iteration   1: 20.379 ns/op
# Warmup Iteration   2: 20.944 ns/op
# Warmup Iteration   3: 17.211 ns/op
# Warmup Iteration   4: 17.216 ns/op
# Warmup Iteration   5: 17.646 ns/op
Iteration   1: 17.204 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 17.246 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 17.237 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 17.339 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 17.192 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  17.244 ±(99.9%) 0.222 ns/op [Average]
  (min, avg, max) = (17.192, 17.244, 17.339), stdev = 0.058
  CI (99.9%): [17.022, 17.466] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.a)

# Run progress: 32.03% complete, ETA 00:48:02
# Fork: 1 of 1
# Warmup Iteration   1: 32.541 ns/op
# Warmup Iteration   2: 32.097 ns/op
# Warmup Iteration   3: 31.450 ns/op
# Warmup Iteration   4: 32.528 ns/op
# Warmup Iteration   5: 31.412 ns/op
Iteration   1: 31.507 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.480 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.459 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31.459 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.538 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  31.489 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (31.459, 31.489, 31.538), stdev = 0.034
  CI (99.9%): [31.359, 31.619] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.200.200)

# Run progress: 32.27% complete, ETA 00:47:51
# Fork: 1 of 1
# Warmup Iteration   1: 38.167 ns/op
# Warmup Iteration   2: 38.099 ns/op
# Warmup Iteration   3: 40.465 ns/op
# Warmup Iteration   4: 40.282 ns/op
# Warmup Iteration   5: 40.421 ns/op
Iteration   1: 40.385 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 40.550 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 40.530 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 40.434 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 41.223 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  40.624 ±(99.9%) 1.315 ns/op [Average]
  (min, avg, max) = (40.385, 40.624, 41.223), stdev = 0.342
  CI (99.9%): [39.309, 41.940] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.99999)

# Run progress: 32.52% complete, ETA 00:47:41
# Fork: 1 of 1
# Warmup Iteration   1: 45.516 ns/op
# Warmup Iteration   2: 41.480 ns/op
# Warmup Iteration   3: 41.798 ns/op
# Warmup Iteration   4: 41.767 ns/op
# Warmup Iteration   5: 41.823 ns/op
Iteration   1: 41.847 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 41.857 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 41.756 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 41.808 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 41.829 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  41.819 ±(99.9%) 0.154 ns/op [Average]
  (min, avg, max) = (41.756, 41.819, 41.857), stdev = 0.040
  CI (99.9%): [41.665, 41.974] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.-200)

# Run progress: 32.76% complete, ETA 00:47:30
# Fork: 1 of 1
# Warmup Iteration   1: 34.934 ns/op
# Warmup Iteration   2: 32.597 ns/op
# Warmup Iteration   3: 31.004 ns/op
# Warmup Iteration   4: 30.954 ns/op
# Warmup Iteration   5: 30.987 ns/op
Iteration   1: 30.973 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 30.964 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.003 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 30.972 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 30.982 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  30.979 ±(99.9%) 0.058 ns/op [Average]
  (min, avg, max) = (30.964, 30.979, 31.003), stdev = 0.015
  CI (99.9%): [30.921, 31.036] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 1.0.0)

# Run progress: 33.01% complete, ETA 00:47:20
# Fork: 1 of 1
# Warmup Iteration   1: 33.842 ns/op
# Warmup Iteration   2: 28.812 ns/op
# Warmup Iteration   3: 25.499 ns/op
# Warmup Iteration   4: 26.114 ns/op
# Warmup Iteration   5: 25.459 ns/op
Iteration   1: 25.258 ns/op
                 ·gc.alloc.rate:      3019.180 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            23.000 ms

Iteration   2: 25.138 ns/op
                 ·gc.alloc.rate:      3033.750 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            19.000 ms

Iteration   3: 25.499 ns/op
                 ·gc.alloc.rate:      2990.745 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            31.000 ms

Iteration   4: 25.073 ns/op
                 ·gc.alloc.rate:      3039.543 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            13.000 ms

Iteration   5: 26.240 ns/op
                 ·gc.alloc.rate:      2906.246 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            14.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  25.442 ±(99.9%) 1.829 ns/op [Average]
  (min, avg, max) = (25.073, 25.442, 26.240), stdev = 0.475
  CI (99.9%): [23.613, 27.271] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  2997.893 ±(99.9%) 210.238 MB/sec [Average]
  (min, avg, max) = (2906.246, 2997.893, 3039.543), stdev = 54.598
  CI (99.9%): [2787.655, 3208.131] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  63.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 12.600, 13.000), stdev = 0.548
  CI (99.9%): [63.000, 63.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.time":
  100.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (13.000, 20.000, 31.000), stdev = 7.348
  CI (99.9%): [100.000, 100.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.200)

# Run progress: 33.25% complete, ETA 00:47:10
# Fork: 1 of 1
# Warmup Iteration   1: 53.102 ns/op
# Warmup Iteration   2: 47.253 ns/op
# Warmup Iteration   3: 44.729 ns/op
# Warmup Iteration   4: 43.998 ns/op
# Warmup Iteration   5: 43.947 ns/op
Iteration   1: 44.049 ns/op
                 ·gc.alloc.rate:      1731.160 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 43.974 ns/op
                 ·gc.alloc.rate:      1733.920 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 44.080 ns/op
                 ·gc.alloc.rate:      1729.969 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 44.084 ns/op
                 ·gc.alloc.rate:      1729.466 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 44.153 ns/op
                 ·gc.alloc.rate:      1727.225 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  44.068 ±(99.9%) 0.251 ns/op [Average]
  (min, avg, max) = (43.974, 44.068, 44.153), stdev = 0.065
  CI (99.9%): [43.817, 44.319] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  1730.348 ±(99.9%) 9.451 MB/sec [Average]
  (min, avg, max) = (1727.225, 1730.348, 1733.920), stdev = 2.454
  CI (99.9%): [1720.897, 1739.799] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  52.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
  CI (99.9%): [52.000, 52.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 33.50% complete, ETA 00:46:59
# Fork: 1 of 1
# Warmup Iteration   1: 71.174 ns/op
# Warmup Iteration   2: 63.813 ns/op
# Warmup Iteration   3: 57.704 ns/op
# Warmup Iteration   4: 57.624 ns/op
# Warmup Iteration   5: 57.612 ns/op
Iteration   1: 57.640 ns/op
                 ·gc.alloc.rate:      1322.871 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 57.644 ns/op
                 ·gc.alloc.rate:      1322.892 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 57.713 ns/op
                 ·gc.alloc.rate:      1321.183 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 57.687 ns/op
                 ·gc.alloc.rate:      1321.199 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 57.607 ns/op
                 ·gc.alloc.rate:      1323.781 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  57.658 ±(99.9%) 0.160 ns/op [Average]
  (min, avg, max) = (57.607, 57.658, 57.713), stdev = 0.042
  CI (99.9%): [57.498, 57.819] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  1322.385 ±(99.9%) 4.430 MB/sec [Average]
  (min, avg, max) = (1321.183, 1322.385, 1323.781), stdev = 1.150
  CI (99.9%): [1317.955, 1326.815] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  46.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.time":
  20.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
  CI (99.9%): [20.000, 20.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 33.74% complete, ETA 00:46:49
# Fork: 1 of 1
# Warmup Iteration   1: 78.825 ns/op
# Warmup Iteration   2: 66.837 ns/op
# Warmup Iteration   3: 63.969 ns/op
# Warmup Iteration   4: 63.440 ns/op
# Warmup Iteration   5: 63.621 ns/op
Iteration   1: 63.494 ns/op
                 ·gc.alloc.rate:      1201.084 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 63.760 ns/op
                 ·gc.alloc.rate:      1195.973 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 64.711 ns/op
                 ·gc.alloc.rate:      1178.405 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 67.571 ns/op
                 ·gc.alloc.rate:      1128.051 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 63.425 ns/op
                 ·gc.alloc.rate:      1202.452 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  64.592 ±(99.9%) 6.711 ns/op [Average]
  (min, avg, max) = (63.425, 64.592, 67.571), stdev = 1.743
  CI (99.9%): [57.881, 71.303] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  1181.193 ±(99.9%) 120.204 MB/sec [Average]
  (min, avg, max) = (1128.051, 1181.193, 1202.452), stdev = 31.217
  CI (99.9%): [1060.988, 1301.397] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  40.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = )

# Run progress: 33.99% complete, ETA 00:46:38
# Fork: 1 of 1
# Warmup Iteration   1: 94.746 ns/op
# Warmup Iteration   2: 77.363 ns/op
# Warmup Iteration   3: 72.788 ns/op
# Warmup Iteration   4: 70.672 ns/op
# Warmup Iteration   5: 71.008 ns/op
Iteration   1: 70.198 ns/op
                 ·gc.alloc.rate:      3910.717 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            22.000 ms

Iteration   2: 71.105 ns/op
                 ·gc.alloc.rate:      3861.138 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            32.000 ms

Iteration   3: 71.371 ns/op
                 ·gc.alloc.rate:      3846.784 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            36.000 ms

Iteration   4: 70.888 ns/op
                 ·gc.alloc.rate:      3870.057 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            35.000 ms

Iteration   5: 70.624 ns/op
                 ·gc.alloc.rate:      3887.675 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            30.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  70.837 ±(99.9%) 1.737 ns/op [Average]
  (min, avg, max) = (70.198, 70.837, 71.371), stdev = 0.451
  CI (99.9%): [69.100, 72.575] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  3875.274 ±(99.9%) 95.274 MB/sec [Average]
  (min, avg, max) = (3846.784, 3875.274, 3910.717), stdev = 24.742
  CI (99.9%): [3780.001, 3970.548] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.001), stdev = 0.001
  CI (99.9%): [143.999, 144.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  84.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.800, 17.000), stdev = 0.447
  CI (99.9%): [84.000, 84.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  155.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (22.000, 31.000, 36.000), stdev = 5.568
  CI (99.9%): [155.000, 155.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200)

# Run progress: 34.23% complete, ETA 00:46:28
# Fork: 1 of 1
# Warmup Iteration   1: 208.700 ns/op
# Warmup Iteration   2: 150.943 ns/op
# Warmup Iteration   3: 142.812 ns/op
# Warmup Iteration   4: 141.548 ns/op
# Warmup Iteration   5: 142.842 ns/op
Iteration   1: 144.269 ns/op
                 ·gc.alloc.rate:      2854.401 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            30.000 ms

Iteration   2: 146.565 ns/op
                 ·gc.alloc.rate:      2809.307 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            21.000 ms

Iteration   3: 143.228 ns/op
                 ·gc.alloc.rate:      2874.889 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            28.000 ms

Iteration   4: 151.001 ns/op
                 ·gc.alloc.rate:      2725.222 MB/sec
                 ·gc.alloc.rate.norm: 216.002 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            20.000 ms

Iteration   5: 141.778 ns/op
                 ·gc.alloc.rate:      2904.719 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            19.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  145.368 ±(99.9%) 13.863 ns/op [Average]
  (min, avg, max) = (141.778, 145.368, 151.001), stdev = 3.600
  CI (99.9%): [131.506, 159.231] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  2833.708 ±(99.9%) 269.072 MB/sec [Average]
  (min, avg, max) = (2725.222, 2833.708, 2904.719), stdev = 69.877
  CI (99.9%): [2564.636, 3102.780] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.002), stdev = 0.001
  CI (99.9%): [215.998, 216.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  65.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 13.000, 14.000), stdev = 0.707
  CI (99.9%): [65.000, 65.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  118.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 23.600, 30.000), stdev = 5.030
  CI (99.9%): [118.000, 118.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.)

# Run progress: 34.47% complete, ETA 00:46:18
# Fork: 1 of 1
# Warmup Iteration   1: 472.267 ns/op
# Warmup Iteration   2: 208.501 ns/op
# Warmup Iteration   3: 186.855 ns/op
# Warmup Iteration   4: 186.761 ns/op
# Warmup Iteration   5: 186.896 ns/op
Iteration   1: 186.558 ns/op
                 ·gc.alloc.rate:      2207.310 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 186.858 ns/op
                 ·gc.alloc.rate:      2203.877 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 186.864 ns/op
                 ·gc.alloc.rate:      2203.818 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 185.917 ns/op
                 ·gc.alloc.rate:      2213.906 MB/sec
                 ·gc.alloc.rate.norm: 216.002 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 185.949 ns/op
                 ·gc.alloc.rate:      2214.809 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  186.429 ±(99.9%) 1.808 ns/op [Average]
  (min, avg, max) = (185.917, 186.429, 186.864), stdev = 0.470
  CI (99.9%): [184.621, 188.237] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  2208.744 ±(99.9%) 20.506 MB/sec [Average]
  (min, avg, max) = (2203.818, 2208.744, 2214.809), stdev = 5.325
  CI (99.9%): [2188.238, 2229.250] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.002), stdev = 0.001
  CI (99.9%): [215.997, 216.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  66.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.200, 14.000), stdev = 0.447
  CI (99.9%): [66.000, 66.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200)

# Run progress: 34.72% complete, ETA 00:46:07
# Fork: 1 of 1
# Warmup Iteration   1: 694.711 ns/op
# Warmup Iteration   2: 262.327 ns/op
# Warmup Iteration   3: 245.619 ns/op
# Warmup Iteration   4: 241.519 ns/op
# Warmup Iteration   5: 240.814 ns/op
Iteration   1: 240.831 ns/op
                 ·gc.alloc.rate:      1709.823 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 240.902 ns/op
                 ·gc.alloc.rate:      1709.393 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 240.584 ns/op
                 ·gc.alloc.rate:      1711.639 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 240.513 ns/op
                 ·gc.alloc.rate:      1711.703 MB/sec
                 ·gc.alloc.rate.norm: 216.003 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 240.892 ns/op
                 ·gc.alloc.rate:      1709.714 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  240.744 ±(99.9%) 0.703 ns/op [Average]
  (min, avg, max) = (240.513, 240.744, 240.902), stdev = 0.183
  CI (99.9%): [240.041, 241.447] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1710.454 ±(99.9%) 4.321 MB/sec [Average]
  (min, avg, max) = (1709.393, 1710.454, 1711.703), stdev = 1.122
  CI (99.9%): [1706.133, 1714.775] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (216.000, 216.001, 216.003), stdev = 0.001
  CI (99.9%): [215.996, 216.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  51.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
  CI (99.9%): [51.000, 51.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.)

# Run progress: 34.96% complete, ETA 00:45:57
# Fork: 1 of 1
# Warmup Iteration   1: 850.191 ns/op
# Warmup Iteration   2: 280.843 ns/op
# Warmup Iteration   3: 266.817 ns/op
# Warmup Iteration   4: 262.101 ns/op
# Warmup Iteration   5: 261.894 ns/op
Iteration   1: 262.385 ns/op
                 ·gc.alloc.rate:      1569.460 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 261.728 ns/op
                 ·gc.alloc.rate:      1573.204 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 261.635 ns/op
                 ·gc.alloc.rate:      1573.804 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 262.090 ns/op
                 ·gc.alloc.rate:      1570.778 MB/sec
                 ·gc.alloc.rate.norm: 216.003 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 261.964 ns/op
                 ·gc.alloc.rate:      1572.096 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  261.960 ±(99.9%) 1.151 ns/op [Average]
  (min, avg, max) = (261.635, 261.960, 262.385), stdev = 0.299
  CI (99.9%): [260.810, 263.111] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1571.868 ±(99.9%) 6.827 MB/sec [Average]
  (min, avg, max) = (1569.460, 1571.868, 1573.804), stdev = 1.773
  CI (99.9%): [1565.041, 1578.696] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (216.000, 216.001, 216.003), stdev = 0.001
  CI (99.9%): [215.996, 216.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  48.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
  CI (99.9%): [48.000, 48.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = a.200.200)

# Run progress: 35.21% complete, ETA 00:45:47
# Fork: 1 of 1
# Warmup Iteration   1: 95.650 ns/op
# Warmup Iteration   2: 74.060 ns/op
# Warmup Iteration   3: 72.116 ns/op
# Warmup Iteration   4: 72.226 ns/op
# Warmup Iteration   5: 71.936 ns/op
Iteration   1: 72.110 ns/op
                 ·gc.alloc.rate:      3806.992 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            24.000 ms

Iteration   2: 71.773 ns/op
                 ·gc.alloc.rate:      3825.045 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            19.000 ms

Iteration   3: 72.862 ns/op
                 ·gc.alloc.rate:      3768.380 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            27.000 ms

Iteration   4: 71.969 ns/op
                 ·gc.alloc.rate:      3813.627 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            29.000 ms

Iteration   5: 71.537 ns/op
                 ·gc.alloc.rate:      3837.862 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            23.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  72.050 ±(99.9%) 1.934 ns/op [Average]
  (min, avg, max) = (71.537, 72.050, 72.862), stdev = 0.502
  CI (99.9%): [70.116, 73.984] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  3810.381 ±(99.9%) 101.082 MB/sec [Average]
  (min, avg, max) = (3768.380, 3810.381, 3837.862), stdev = 26.251
  CI (99.9%): [3709.299, 3911.463] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.001), stdev = 0.001
  CI (99.9%): [143.999, 144.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  83.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.600, 17.000), stdev = 0.548
  CI (99.9%): [83.000, 83.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  122.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 24.400, 29.000), stdev = 3.847
  CI (99.9%): [122.000, 122.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.a.200)

# Run progress: 35.45% complete, ETA 00:45:36
# Fork: 1 of 1
# Warmup Iteration   1: 309.231 ns/op
# Warmup Iteration   2: 192.468 ns/op
# Warmup Iteration   3: 183.585 ns/op
# Warmup Iteration   4: 183.432 ns/op
# Warmup Iteration   5: 183.651 ns/op
Iteration   1: 183.447 ns/op
                 ·gc.alloc.rate:      2244.677 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 183.497 ns/op
                 ·gc.alloc.rate:      2243.862 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 183.609 ns/op
                 ·gc.alloc.rate:      2242.912 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 183.512 ns/op
                 ·gc.alloc.rate:      2242.872 MB/sec
                 ·gc.alloc.rate.norm: 216.002 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 184.189 ns/op
                 ·gc.alloc.rate:      2236.107 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  183.651 ±(99.9%) 1.181 ns/op [Average]
  (min, avg, max) = (183.447, 183.651, 184.189), stdev = 0.307
  CI (99.9%): [182.470, 184.832] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  2242.086 ±(99.9%) 13.187 MB/sec [Average]
  (min, avg, max) = (2236.107, 2242.086, 2244.677), stdev = 3.425
  CI (99.9%): [2228.899, 2255.273] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.002), stdev = 0.001
  CI (99.9%): [215.997, 216.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  67.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.400, 14.000), stdev = 0.548
  CI (99.9%): [67.000, 67.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.a)

# Run progress: 35.70% complete, ETA 00:45:26
# Fork: 1 of 1
# Warmup Iteration   1: 408.846 ns/op
# Warmup Iteration   2: 275.409 ns/op
# Warmup Iteration   3: 260.379 ns/op
# Warmup Iteration   4: 260.431 ns/op
# Warmup Iteration   5: 260.319 ns/op
Iteration   1: 260.225 ns/op
                 ·gc.alloc.rate:      1582.697 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 260.549 ns/op
                 ·gc.alloc.rate:      1580.381 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 260.305 ns/op
                 ·gc.alloc.rate:      1582.179 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 260.459 ns/op
                 ·gc.alloc.rate:      1580.625 MB/sec
                 ·gc.alloc.rate.norm: 216.003 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 259.869 ns/op
                 ·gc.alloc.rate:      1584.713 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  260.281 ±(99.9%) 1.013 ns/op [Average]
  (min, avg, max) = (259.869, 260.281, 260.549), stdev = 0.263
  CI (99.9%): [259.268, 261.295] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1582.119 ±(99.9%) 6.757 MB/sec [Average]
  (min, avg, max) = (1580.381, 1582.119, 1584.713), stdev = 1.755
  CI (99.9%): [1575.362, 1588.877] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (216.000, 216.001, 216.003), stdev = 0.001
  CI (99.9%): [215.996, 216.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  47.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
  CI (99.9%): [47.000, 47.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  24.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.200.200)

# Run progress: 35.94% complete, ETA 00:45:15
# Fork: 1 of 1
# Warmup Iteration   1: 2693.299 ns/op
# Warmup Iteration   2: 350.000 ns/op
# Warmup Iteration   3: 338.286 ns/op
# Warmup Iteration   4: 331.415 ns/op
# Warmup Iteration   5: 365.734 ns/op
Iteration   1: 330.671 ns/op
                 ·gc.alloc.rate:      1245.260 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 331.191 ns/op
                 ·gc.alloc.rate:      1243.389 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 332.112 ns/op
                 ·gc.alloc.rate:      1239.821 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 341.577 ns/op
                 ·gc.alloc.rate:      1204.822 MB/sec
                 ·gc.alloc.rate.norm: 216.004 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 330.585 ns/op
                 ·gc.alloc.rate:      1245.691 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  333.227 ±(99.9%) 18.124 ns/op [Average]
  (min, avg, max) = (330.585, 333.227, 341.577), stdev = 4.707
  CI (99.9%): [315.103, 351.351] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1235.796 ±(99.9%) 67.268 MB/sec [Average]
  (min, avg, max) = (1204.822, 1235.796, 1245.691), stdev = 17.469
  CI (99.9%): [1168.528, 1303.065] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.001 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (216.000, 216.001, 216.004), stdev = 0.002
  CI (99.9%): [215.995, 216.007] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  43.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
  CI (99.9%): [43.000, 43.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.99999)

# Run progress: 36.19% complete, ETA 00:45:05
# Fork: 1 of 1
# Warmup Iteration   1: 1288.578 ns/op
# Warmup Iteration   2: 404.075 ns/op
# Warmup Iteration   3: 376.376 ns/op
# Warmup Iteration   4: 376.316 ns/op
# Warmup Iteration   5: 376.403 ns/op
Iteration   1: 376.350 ns/op
                 ·gc.alloc.rate:      1823.457 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 375.906 ns/op
                 ·gc.alloc.rate:      1825.572 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 375.603 ns/op
                 ·gc.alloc.rate:      1827.370 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 375.604 ns/op
                 ·gc.alloc.rate:      1826.801 MB/sec
                 ·gc.alloc.rate.norm: 360.004 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 375.603 ns/op
                 ·gc.alloc.rate:      1827.189 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  375.813 ±(99.9%) 1.261 ns/op [Average]
  (min, avg, max) = (375.603, 375.813, 376.350), stdev = 0.327
  CI (99.9%): [374.552, 377.074] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1826.078 ±(99.9%) 6.253 MB/sec [Average]
  (min, avg, max) = (1823.457, 1826.078, 1827.370), stdev = 1.624
  CI (99.9%): [1819.825, 1832.331] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.004), stdev = 0.002
  CI (99.9%): [359.994, 360.008] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  54.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.800, 11.000), stdev = 0.447
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.-200)

# Run progress: 36.43% complete, ETA 00:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 438.014 ns/op
# Warmup Iteration   2: 291.511 ns/op
# Warmup Iteration   3: 276.934 ns/op
# Warmup Iteration   4: 275.640 ns/op
# Warmup Iteration   5: 275.732 ns/op
Iteration   1: 277.142 ns/op
                 ·gc.alloc.rate:      1485.876 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 276.591 ns/op
                 ·gc.alloc.rate:      1488.804 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 276.433 ns/op
                 ·gc.alloc.rate:      1489.930 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 275.936 ns/op
                 ·gc.alloc.rate:      1491.601 MB/sec
                 ·gc.alloc.rate.norm: 216.003 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 274.762 ns/op
                 ·gc.alloc.rate:      1498.874 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  276.173 ±(99.9%) 3.460 ns/op [Average]
  (min, avg, max) = (274.762, 276.173, 277.142), stdev = 0.898
  CI (99.9%): [272.713, 279.632] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1491.017 ±(99.9%) 18.725 MB/sec [Average]
  (min, avg, max) = (1485.876, 1491.017, 1498.874), stdev = 4.863
  CI (99.9%): [1472.293, 1509.742] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (216.000, 216.001, 216.003), stdev = 0.001
  CI (99.9%): [215.996, 216.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  45.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
  CI (99.9%): [45.000, 45.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 1.0.0)

# Run progress: 36.67% complete, ETA 00:44:44
# Fork: 1 of 1
# Warmup Iteration   1: 672.949 ns/op
# Warmup Iteration   2: 295.473 ns/op
# Warmup Iteration   3: 282.661 ns/op
# Warmup Iteration   4: 273.108 ns/op
# Warmup Iteration   5: 272.455 ns/op
Iteration   1: 270.955 ns/op
                 ·gc.alloc.rate:      2814.687 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            17.000 ms

Iteration   2: 272.546 ns/op
                 ·gc.alloc.rate:      2797.698 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            20.000 ms

Iteration   3: 272.209 ns/op
                 ·gc.alloc.rate:      2801.644 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            21.000 ms

Iteration   4: 271.053 ns/op
                 ·gc.alloc.rate:      2812.346 MB/sec
                 ·gc.alloc.rate.norm: 400.003 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            20.000 ms

Iteration   5: 270.849 ns/op
                 ·gc.alloc.rate:      2815.630 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            19.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  271.522 ±(99.9%) 3.053 ns/op [Average]
  (min, avg, max) = (270.849, 271.522, 272.546), stdev = 0.793
  CI (99.9%): [268.469, 274.576] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  2808.401 ±(99.9%) 31.491 MB/sec [Average]
  (min, avg, max) = (2797.698, 2808.401, 2815.630), stdev = 8.178
  CI (99.9%): [2776.910, 2839.893] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  400.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (400.000, 400.001, 400.003), stdev = 0.001
  CI (99.9%): [399.996, 400.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  66.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.200, 14.000), stdev = 0.447
  CI (99.9%): [66.000, 66.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  97.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (17.000, 19.400, 21.000), stdev = 1.517
  CI (99.9%): [97.000, 97.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.200)

# Run progress: 36.92% complete, ETA 00:44:34
# Fork: 1 of 1
# Warmup Iteration   1: 4168.369 ns/op
# Warmup Iteration   2: 452.760 ns/op
# Warmup Iteration   3: 382.452 ns/op
# Warmup Iteration   4: 373.229 ns/op
# Warmup Iteration   5: 373.420 ns/op
Iteration   1: 373.070 ns/op
                 ·gc.alloc.rate:      2043.860 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 373.437 ns/op
                 ·gc.alloc.rate:      2041.812 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 373.221 ns/op
                 ·gc.alloc.rate:      2043.386 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 374.151 ns/op
                 ·gc.alloc.rate:      2037.009 MB/sec
                 ·gc.alloc.rate.norm: 400.004 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 374.119 ns/op
                 ·gc.alloc.rate:      2038.508 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  373.599 ±(99.9%) 1.949 ns/op [Average]
  (min, avg, max) = (373.070, 373.599, 374.151), stdev = 0.506
  CI (99.9%): [371.650, 375.549] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  2040.915 ±(99.9%) 11.653 MB/sec [Average]
  (min, avg, max) = (2037.009, 2040.915, 2043.860), stdev = 3.026
  CI (99.9%): [2029.262, 2052.568] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  400.001 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (400.000, 400.001, 400.004), stdev = 0.002
  CI (99.9%): [399.994, 400.008] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  61.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 12.200, 13.000), stdev = 0.447
  CI (99.9%): [61.000, 61.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 37.16% complete, ETA 00:44:24
# Fork: 1 of 1
# Warmup Iteration   1: 1944.170 ns/op
# Warmup Iteration   2: 448.774 ns/op
# Warmup Iteration   3: 428.099 ns/op
# Warmup Iteration   4: 421.843 ns/op
# Warmup Iteration   5: 422.430 ns/op
Iteration   1: 422.520 ns/op
                 ·gc.alloc.rate:      1804.664 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 422.180 ns/op
                 ·gc.alloc.rate:      1806.206 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 421.377 ns/op
                 ·gc.alloc.rate:      1809.597 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 434.407 ns/op
                 ·gc.alloc.rate:      1754.473 MB/sec
                 ·gc.alloc.rate.norm: 400.005 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 421.465 ns/op
                 ·gc.alloc.rate:      1809.446 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  424.390 ±(99.9%) 21.642 ns/op [Average]
  (min, avg, max) = (421.377, 424.390, 434.407), stdev = 5.620
  CI (99.9%): [402.747, 446.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1796.877 ±(99.9%) 91.641 MB/sec [Average]
  (min, avg, max) = (1754.473, 1796.877, 1809.597), stdev = 23.799
  CI (99.9%): [1705.236, 1888.518] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  400.001 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (400.000, 400.001, 400.005), stdev = 0.002
  CI (99.9%): [399.993, 400.009] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  54.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.800, 11.000), stdev = 0.447
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 37.41% complete, ETA 00:44:13
# Fork: 1 of 1
# Warmup Iteration   1: 1919.653 ns/op
# Warmup Iteration   2: 461.356 ns/op
# Warmup Iteration   3: 442.966 ns/op
# Warmup Iteration   4: 436.575 ns/op
# Warmup Iteration   5: 437.768 ns/op
Iteration   1: 440.565 ns/op
                 ·gc.alloc.rate:      1730.902 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 443.076 ns/op
                 ·gc.alloc.rate:      1721.303 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 436.632 ns/op
                 ·gc.alloc.rate:      1746.677 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 436.674 ns/op
                 ·gc.alloc.rate:      1745.787 MB/sec
                 ·gc.alloc.rate.norm: 400.005 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 436.710 ns/op
                 ·gc.alloc.rate:      1746.403 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  438.732 ±(99.9%) 11.384 ns/op [Average]
  (min, avg, max) = (436.632, 438.732, 443.076), stdev = 2.956
  CI (99.9%): [427.347, 450.116] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1738.214 ±(99.9%) 44.554 MB/sec [Average]
  (min, avg, max) = (1721.303, 1738.214, 1746.677), stdev = 11.571
  CI (99.9%): [1693.660, 1782.768] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  400.001 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (400.000, 400.001, 400.005), stdev = 0.002
  CI (99.9%): [399.993, 400.009] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  52.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
  CI (99.9%): [52.000, 52.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = )

# Run progress: 37.65% complete, ETA 00:44:03
# Fork: 1 of 1
# Warmup Iteration   1: 2964.341 ns/op
# Warmup Iteration   2: 2265.931 ns/op
# Warmup Iteration   3: 2213.291 ns/op
# Warmup Iteration   4: 2189.196 ns/op
# Warmup Iteration   5: 2170.866 ns/op
Iteration   1: 2165.364 ns/op
                 ·gc.alloc.rate:      753.741 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2164.830 ns/op
                 ·gc.alloc.rate:      753.840 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2164.279 ns/op
                 ·gc.alloc.rate:      754.001 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2161.986 ns/op
                 ·gc.alloc.rate:      754.257 MB/sec
                 ·gc.alloc.rate.norm: 856.024 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2050.089 ns/op
                 ·gc.alloc.rate:      796.135 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2141.310 ±(99.9%) 196.422 ns/op [Average]
  (min, avg, max) = (2050.089, 2141.310, 2165.364), stdev = 51.010
  CI (99.9%): [1944.888, 2337.731] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  762.395 ±(99.9%) 72.633 MB/sec [Average]
  (min, avg, max) = (753.741, 762.395, 796.135), stdev = 18.863
  CI (99.9%): [689.762, 835.028] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  856.006 ±(99.9%) 0.040 B/op [Average]
  (min, avg, max) = (856.001, 856.006, 856.024), stdev = 0.010
  CI (99.9%): [855.966, 856.045] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200)

# Run progress: 37.90% complete, ETA 00:43:53
# Fork: 1 of 1
# Warmup Iteration   1: 2682.184 ns/op
# Warmup Iteration   2: 1801.452 ns/op
# Warmup Iteration   3: 1751.185 ns/op
# Warmup Iteration   4: 1702.609 ns/op
# Warmup Iteration   5: 1701.991 ns/op
Iteration   1: 1800.119 ns/op
                 ·gc.alloc.rate:      864.229 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1705.001 ns/op
                 ·gc.alloc.rate:      912.398 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1711.176 ns/op
                 ·gc.alloc.rate:      908.995 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1707.772 ns/op
                 ·gc.alloc.rate:      910.483 MB/sec
                 ·gc.alloc.rate.norm: 816.019 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1589.075 ns/op
                 ·gc.alloc.rate:      979.040 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  1702.628 ±(99.9%) 288.824 ns/op [Average]
  (min, avg, max) = (1589.075, 1702.628, 1800.119), stdev = 75.007
  CI (99.9%): [1413.805, 1991.452] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  915.029 ±(99.9%) 158.089 MB/sec [Average]
  (min, avg, max) = (864.229, 915.029, 979.040), stdev = 41.055
  CI (99.9%): [756.940, 1073.118] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  816.005 ±(99.9%) 0.031 B/op [Average]
  (min, avg, max) = (816.001, 816.005, 816.019), stdev = 0.008
  CI (99.9%): [815.973, 816.036] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.)

# Run progress: 38.14% complete, ETA 00:43:42
# Fork: 1 of 1
# Warmup Iteration   1: 3792.726 ns/op
# Warmup Iteration   2: 2030.800 ns/op
# Warmup Iteration   3: 1992.012 ns/op
# Warmup Iteration   4: 1938.761 ns/op
# Warmup Iteration   5: 1933.289 ns/op
Iteration   1: 1934.895 ns/op
                 ·gc.alloc.rate:      977.360 MB/sec
                 ·gc.alloc.rate.norm: 992.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1936.145 ns/op
                 ·gc.alloc.rate:      976.687 MB/sec
                 ·gc.alloc.rate.norm: 992.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1935.053 ns/op
                 ·gc.alloc.rate:      977.263 MB/sec
                 ·gc.alloc.rate.norm: 992.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1932.492 ns/op
                 ·gc.alloc.rate:      978.179 MB/sec
                 ·gc.alloc.rate.norm: 992.022 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1818.877 ns/op
                 ·gc.alloc.rate:      1039.848 MB/sec
                 ·gc.alloc.rate.norm: 992.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  1911.492 ±(99.9%) 199.427 ns/op [Average]
  (min, avg, max) = (1818.877, 1911.492, 1936.145), stdev = 51.791
  CI (99.9%): [1712.065, 2110.919] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  989.867 ±(99.9%) 107.607 MB/sec [Average]
  (min, avg, max) = (976.687, 989.867, 1039.848), stdev = 27.945
  CI (99.9%): [882.260, 1097.475] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  992.005 ±(99.9%) 0.036 B/op [Average]
  (min, avg, max) = (992.001, 992.005, 992.022), stdev = 0.009
  CI (99.9%): [991.969, 992.041] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200)

# Run progress: 38.39% complete, ETA 00:43:32
# Fork: 1 of 1
# Warmup Iteration   1: 3558.499 ns/op
# Warmup Iteration   2: 2333.742 ns/op
# Warmup Iteration   3: 2031.771 ns/op
# Warmup Iteration   4: 1973.918 ns/op
# Warmup Iteration   5: 1974.727 ns/op
Iteration   1: 1974.833 ns/op
                 ·gc.alloc.rate:      980.839 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1976.549 ns/op
                 ·gc.alloc.rate:      979.981 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1970.873 ns/op
                 ·gc.alloc.rate:      982.830 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 1973.223 ns/op
                 ·gc.alloc.rate:      981.267 MB/sec
                 ·gc.alloc.rate.norm: 1016.022 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1856.431 ns/op
                 ·gc.alloc.rate:      1043.468 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  1950.382 ±(99.9%) 202.396 ns/op [Average]
  (min, avg, max) = (1856.431, 1950.382, 1976.549), stdev = 52.562
  CI (99.9%): [1747.985, 2152.778] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  993.677 ±(99.9%) 107.253 MB/sec [Average]
  (min, avg, max) = (979.981, 993.677, 1043.468), stdev = 27.853
  CI (99.9%): [886.424, 1100.930] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1016.005 ±(99.9%) 0.036 B/op [Average]
  (min, avg, max) = (1016.001, 1016.005, 1016.022), stdev = 0.009
  CI (99.9%): [1015.969, 1016.041] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.)

# Run progress: 38.63% complete, ETA 00:43:21
# Fork: 1 of 1
# Warmup Iteration   1: 3720.452 ns/op
# Warmup Iteration   2: 2233.364 ns/op
# Warmup Iteration   3: 2057.012 ns/op
# Warmup Iteration   4: 2011.416 ns/op
# Warmup Iteration   5: 2007.664 ns/op
Iteration   1: 2006.892 ns/op
                 ·gc.alloc.rate:      1003.070 MB/sec
                 ·gc.alloc.rate.norm: 1056.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2009.530 ns/op
                 ·gc.alloc.rate:      1001.751 MB/sec
                 ·gc.alloc.rate.norm: 1056.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 2005.647 ns/op
                 ·gc.alloc.rate:      1003.690 MB/sec
                 ·gc.alloc.rate.norm: 1056.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2004.861 ns/op
                 ·gc.alloc.rate:      1003.835 MB/sec
                 ·gc.alloc.rate.norm: 1056.022 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1883.496 ns/op
                 ·gc.alloc.rate:      1068.912 MB/sec
                 ·gc.alloc.rate.norm: 1056.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  1982.085 ±(99.9%) 212.330 ns/op [Average]
  (min, avg, max) = (1883.496, 1982.085, 2009.530), stdev = 55.141
  CI (99.9%): [1769.755, 2194.415] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  1016.252 ±(99.9%) 113.399 MB/sec [Average]
  (min, avg, max) = (1001.751, 1016.252, 1068.912), stdev = 29.449
  CI (99.9%): [902.852, 1129.651] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1056.005 ±(99.9%) 0.037 B/op [Average]
  (min, avg, max) = (1056.001, 1056.005, 1056.022), stdev = 0.009
  CI (99.9%): [1055.969, 1056.042] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = a.200.200)

# Run progress: 38.88% complete, ETA 00:43:11
# Fork: 1 of 1
# Warmup Iteration   1: 4471.444 ns/op
# Warmup Iteration   2: 2761.238 ns/op
# Warmup Iteration   3: 2648.573 ns/op
# Warmup Iteration   4: 2603.465 ns/op
# Warmup Iteration   5: 2559.800 ns/op
Iteration   1: 2560.522 ns/op
                 ·gc.alloc.rate:      833.841 MB/sec
                 ·gc.alloc.rate.norm: 1120.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2561.281 ns/op
                 ·gc.alloc.rate:      833.619 MB/sec
                 ·gc.alloc.rate.norm: 1120.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2560.911 ns/op
                 ·gc.alloc.rate:      833.806 MB/sec
                 ·gc.alloc.rate.norm: 1120.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2566.263 ns/op
                 ·gc.alloc.rate:      831.466 MB/sec
                 ·gc.alloc.rate.norm: 1120.029 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2471.685 ns/op
                 ·gc.alloc.rate:      863.916 MB/sec
                 ·gc.alloc.rate.norm: 1120.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2544.132 ±(99.9%) 156.207 ns/op [Average]
  (min, avg, max) = (2471.685, 2544.132, 2566.263), stdev = 40.567
  CI (99.9%): [2387.925, 2700.340] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  839.329 ±(99.9%) 53.062 MB/sec [Average]
  (min, avg, max) = (831.466, 839.329, 863.916), stdev = 13.780
  CI (99.9%): [786.267, 892.392] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1120.007 ±(99.9%) 0.048 B/op [Average]
  (min, avg, max) = (1120.001, 1120.007, 1120.029), stdev = 0.012
  CI (99.9%): [1119.959, 1120.054] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.a.200)

# Run progress: 39.12% complete, ETA 00:43:01
# Fork: 1 of 1
# Warmup Iteration   1: 4519.670 ns/op
# Warmup Iteration   2: 2631.267 ns/op
# Warmup Iteration   3: 2729.635 ns/op
# Warmup Iteration   4: 2684.010 ns/op
# Warmup Iteration   5: 2671.743 ns/op
Iteration   1: 2669.027 ns/op
                 ·gc.alloc.rate:      800.019 MB/sec
                 ·gc.alloc.rate.norm: 1120.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2666.267 ns/op
                 ·gc.alloc.rate:      800.941 MB/sec
                 ·gc.alloc.rate.norm: 1120.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2669.762 ns/op
                 ·gc.alloc.rate:      799.793 MB/sec
                 ·gc.alloc.rate.norm: 1120.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2673.561 ns/op
                 ·gc.alloc.rate:      798.390 MB/sec
                 ·gc.alloc.rate.norm: 1120.030 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2571.592 ns/op
                 ·gc.alloc.rate:      830.355 MB/sec
                 ·gc.alloc.rate.norm: 1120.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2650.042 ±(99.9%) 169.167 ns/op [Average]
  (min, avg, max) = (2571.592, 2650.042, 2673.561), stdev = 43.932
  CI (99.9%): [2480.875, 2819.209] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  805.900 ±(99.9%) 52.759 MB/sec [Average]
  (min, avg, max) = (798.390, 805.900, 830.355), stdev = 13.701
  CI (99.9%): [753.141, 858.658] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1120.007 ±(99.9%) 0.049 B/op [Average]
  (min, avg, max) = (1120.001, 1120.007, 1120.030), stdev = 0.013
  CI (99.9%): [1119.958, 1120.056] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.a)

# Run progress: 39.36% complete, ETA 00:42:50
# Fork: 1 of 1
# Warmup Iteration   1: 4594.633 ns/op
# Warmup Iteration   2: 2821.654 ns/op
# Warmup Iteration   3: 2795.391 ns/op
# Warmup Iteration   4: 2690.179 ns/op
# Warmup Iteration   5: 2667.430 ns/op
Iteration   1: 2661.999 ns/op
                 ·gc.alloc.rate:      813.627 MB/sec
                 ·gc.alloc.rate.norm: 1136.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2661.180 ns/op
                 ·gc.alloc.rate:      813.714 MB/sec
                 ·gc.alloc.rate.norm: 1136.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2663.722 ns/op
                 ·gc.alloc.rate:      813.038 MB/sec
                 ·gc.alloc.rate.norm: 1136.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2748.035 ns/op
                 ·gc.alloc.rate:      787.849 MB/sec
                 ·gc.alloc.rate.norm: 1136.030 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2532.595 ns/op
                 ·gc.alloc.rate:      855.286 MB/sec
                 ·gc.alloc.rate.norm: 1136.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2653.506 ±(99.9%) 296.965 ns/op [Average]
  (min, avg, max) = (2532.595, 2653.506, 2748.035), stdev = 77.121
  CI (99.9%): [2356.542, 2950.471] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  816.703 ±(99.9%) 93.393 MB/sec [Average]
  (min, avg, max) = (787.849, 816.703, 855.286), stdev = 24.254
  CI (99.9%): [723.310, 910.096] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1136.007 ±(99.9%) 0.050 B/op [Average]
  (min, avg, max) = (1136.001, 1136.007, 1136.030), stdev = 0.013
  CI (99.9%): [1135.957, 1136.057] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.200.200)

# Run progress: 39.61% complete, ETA 00:42:40
# Fork: 1 of 1
# Warmup Iteration   1: 3815.540 ns/op
# Warmup Iteration   2: 2207.676 ns/op
# Warmup Iteration   3: 2152.980 ns/op
# Warmup Iteration   4: 2110.338 ns/op
# Warmup Iteration   5: 2109.175 ns/op
Iteration   1: 2108.227 ns/op
                 ·gc.alloc.rate:      1049.128 MB/sec
                 ·gc.alloc.rate.norm: 1160.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2107.247 ns/op
                 ·gc.alloc.rate:      1049.513 MB/sec
                 ·gc.alloc.rate.norm: 1160.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2107.574 ns/op
                 ·gc.alloc.rate:      1049.491 MB/sec
                 ·gc.alloc.rate.norm: 1160.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2111.954 ns/op
                 ·gc.alloc.rate:      1046.728 MB/sec
                 ·gc.alloc.rate.norm: 1160.023 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1978.226 ns/op
                 ·gc.alloc.rate:      1118.088 MB/sec
                 ·gc.alloc.rate.norm: 1160.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2082.645 ±(99.9%) 224.888 ns/op [Average]
  (min, avg, max) = (1978.226, 2082.645, 2111.954), stdev = 58.403
  CI (99.9%): [1857.757, 2307.534] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  1062.590 ±(99.9%) 119.548 MB/sec [Average]
  (min, avg, max) = (1046.728, 1062.590, 1118.088), stdev = 31.046
  CI (99.9%): [943.042, 1182.138] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1160.006 ±(99.9%) 0.038 B/op [Average]
  (min, avg, max) = (1160.001, 1160.006, 1160.023), stdev = 0.010
  CI (99.9%): [1159.967, 1160.044] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  36.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.99999)

# Run progress: 39.85% complete, ETA 00:42:29
# Fork: 1 of 1
# Warmup Iteration   1: 3494.292 ns/op
# Warmup Iteration   2: 2203.200 ns/op
# Warmup Iteration   3: 2133.356 ns/op
# Warmup Iteration   4: 2093.143 ns/op
# Warmup Iteration   5: 2096.218 ns/op
Iteration   1: 2092.851 ns/op
                 ·gc.alloc.rate:      1122.311 MB/sec
                 ·gc.alloc.rate.norm: 1232.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2092.247 ns/op
                 ·gc.alloc.rate:      1122.506 MB/sec
                 ·gc.alloc.rate.norm: 1232.002 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2094.720 ns/op
                 ·gc.alloc.rate:      1121.202 MB/sec
                 ·gc.alloc.rate.norm: 1232.002 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2094.251 ns/op
                 ·gc.alloc.rate:      1121.012 MB/sec
                 ·gc.alloc.rate.norm: 1232.023 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1986.334 ns/op
                 ·gc.alloc.rate:      1182.594 MB/sec
                 ·gc.alloc.rate.norm: 1232.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2072.081 ±(99.9%) 184.616 ns/op [Average]
  (min, avg, max) = (1986.334, 2072.081, 2094.720), stdev = 47.944
  CI (99.9%): [1887.464, 2256.697] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  1133.925 ±(99.9%) 104.795 MB/sec [Average]
  (min, avg, max) = (1121.012, 1133.925, 1182.594), stdev = 27.215
  CI (99.9%): [1029.130, 1238.720] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1232.006 ±(99.9%) 0.038 B/op [Average]
  (min, avg, max) = (1232.001, 1232.006, 1232.023), stdev = 0.010
  CI (99.9%): [1231.968, 1232.044] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  39.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
  CI (99.9%): [39.000, 39.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.-200)

# Run progress: 40.10% complete, ETA 00:42:19
# Fork: 1 of 1
# Warmup Iteration   1: 4277.851 ns/op
# Warmup Iteration   2: 2214.313 ns/op
# Warmup Iteration   3: 2128.896 ns/op
# Warmup Iteration   4: 2093.035 ns/op
# Warmup Iteration   5: 2098.526 ns/op
Iteration   1: 2170.581 ns/op
                 ·gc.alloc.rate:      1082.141 MB/sec
                 ·gc.alloc.rate.norm: 1232.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2092.964 ns/op
                 ·gc.alloc.rate:      1122.244 MB/sec
                 ·gc.alloc.rate.norm: 1232.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 2091.627 ns/op
                 ·gc.alloc.rate:      1122.952 MB/sec
                 ·gc.alloc.rate.norm: 1232.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 2086.518 ns/op
                 ·gc.alloc.rate:      1125.396 MB/sec
                 ·gc.alloc.rate.norm: 1232.023 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1976.306 ns/op
                 ·gc.alloc.rate:      1188.585 MB/sec
                 ·gc.alloc.rate.norm: 1232.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2083.599 ±(99.9%) 267.047 ns/op [Average]
  (min, avg, max) = (1976.306, 2083.599, 2170.581), stdev = 69.351
  CI (99.9%): [1816.552, 2350.646] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  1128.263 ±(99.9%) 147.116 MB/sec [Average]
  (min, avg, max) = (1082.141, 1128.263, 1188.585), stdev = 38.206
  CI (99.9%): [981.147, 1275.379] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1232.006 ±(99.9%) 0.038 B/op [Average]
  (min, avg, max) = (1232.001, 1232.006, 1232.023), stdev = 0.010
  CI (99.9%): [1231.967, 1232.044] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  38.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
  CI (99.9%): [38.000, 38.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 1.0.0)

# Run progress: 40.34% complete, ETA 00:42:09
# Fork: 1 of 1
# Warmup Iteration   1: 443.726 ns/op
# Warmup Iteration   2: 256.586 ns/op
# Warmup Iteration   3: 227.226 ns/op
# Warmup Iteration   4: 227.502 ns/op
# Warmup Iteration   5: 229.173 ns/op
Iteration   1: 228.918 ns/op
                 ·gc.alloc.rate:      2998.073 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            28.000 ms

Iteration   2: 227.123 ns/op
                 ·gc.alloc.rate:      3021.851 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            21.000 ms

Iteration   3: 238.639 ns/op
                 ·gc.alloc.rate:      2876.230 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            12.000 ms

Iteration   4: 228.649 ns/op
                 ·gc.alloc.rate:      2998.914 MB/sec
                 ·gc.alloc.rate.norm: 360.003 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            23.000 ms

Iteration   5: 229.417 ns/op
                 ·gc.alloc.rate:      2992.053 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            29.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  230.549 ±(99.9%) 17.724 ns/op [Average]
  (min, avg, max) = (227.123, 230.549, 238.639), stdev = 4.603
  CI (99.9%): [212.825, 248.273] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  2977.424 ±(99.9%) 222.174 MB/sec [Average]
  (min, avg, max) = (2876.230, 2977.424, 3021.851), stdev = 57.698
  CI (99.9%): [2755.250, 3199.598] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.003), stdev = 0.001
  CI (99.9%): [359.997, 360.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  69.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.800, 14.000), stdev = 0.447
  CI (99.9%): [69.000, 69.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  113.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 22.600, 29.000), stdev = 6.804
  CI (99.9%): [113.000, 113.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.200)

# Run progress: 40.59% complete, ETA 00:41:58
# Fork: 1 of 1
# Warmup Iteration   1: 540.835 ns/op
# Warmup Iteration   2: 302.854 ns/op
# Warmup Iteration   3: 278.403 ns/op
# Warmup Iteration   4: 278.581 ns/op
# Warmup Iteration   5: 282.600 ns/op
Iteration   1: 277.118 ns/op
                 ·gc.alloc.rate:      3687.304 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            22.000 ms

Iteration   2: 277.890 ns/op
                 ·gc.alloc.rate:      3677.143 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            25.000 ms

Iteration   3: 278.719 ns/op
                 ·gc.alloc.rate:      3666.645 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            29.000 ms

Iteration   4: 275.425 ns/op
                 ·gc.alloc.rate:      3708.006 MB/sec
                 ·gc.alloc.rate.norm: 536.003 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            19.000 ms

Iteration   5: 275.538 ns/op
                 ·gc.alloc.rate:      3709.218 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            20.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  276.938 ±(99.9%) 5.567 ns/op [Average]
  (min, avg, max) = (275.425, 276.938, 278.719), stdev = 1.446
  CI (99.9%): [271.371, 282.505] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  3689.663 ±(99.9%) 72.321 MB/sec [Average]
  (min, avg, max) = (3666.645, 3689.663, 3709.218), stdev = 18.782
  CI (99.9%): [3617.342, 3761.984] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  536.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (536.000, 536.001, 536.003), stdev = 0.001
  CI (99.9%): [535.996, 536.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  78.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.600, 16.000), stdev = 0.548
  CI (99.9%): [78.000, 78.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  115.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 23.000, 29.000), stdev = 4.062
  CI (99.9%): [115.000, 115.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 40.83% complete, ETA 00:41:48
# Fork: 1 of 1
# Warmup Iteration   1: 537.837 ns/op
# Warmup Iteration   2: 322.689 ns/op
# Warmup Iteration   3: 292.273 ns/op
# Warmup Iteration   4: 295.096 ns/op
# Warmup Iteration   5: 295.181 ns/op
Iteration   1: 296.945 ns/op
                 ·gc.alloc.rate:      3543.952 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            30.000 ms

Iteration   2: 301.710 ns/op
                 ·gc.alloc.rate:      3487.876 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            25.000 ms

Iteration   3: 296.751 ns/op
                 ·gc.alloc.rate:      3546.728 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            27.000 ms

Iteration   4: 294.880 ns/op
                 ·gc.alloc.rate:      3566.916 MB/sec
                 ·gc.alloc.rate.norm: 552.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            22.000 ms

Iteration   5: 293.593 ns/op
                 ·gc.alloc.rate:      3584.829 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            19.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  296.776 ±(99.9%) 11.884 ns/op [Average]
  (min, avg, max) = (293.593, 296.776, 301.710), stdev = 3.086
  CI (99.9%): [284.892, 308.660] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  3546.060 ±(99.9%) 140.538 MB/sec [Average]
  (min, avg, max) = (3487.876, 3546.060, 3584.829), stdev = 36.497
  CI (99.9%): [3405.522, 3686.599] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  552.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (552.000, 552.001, 552.003), stdev = 0.001
  CI (99.9%): [551.995, 552.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  78.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.600, 16.000), stdev = 0.548
  CI (99.9%): [78.000, 78.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  123.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 24.600, 30.000), stdev = 4.278
  CI (99.9%): [123.000, 123.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 41.08% complete, ETA 00:41:38
# Fork: 1 of 1
# Warmup Iteration   1: 593.780 ns/op
# Warmup Iteration   2: 294.683 ns/op
# Warmup Iteration   3: 273.577 ns/op
# Warmup Iteration   4: 273.074 ns/op
# Warmup Iteration   5: 273.014 ns/op
Iteration   1: 272.742 ns/op
                 ·gc.alloc.rate:      3914.063 MB/sec
                 ·gc.alloc.rate.norm: 560.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            7.000 ms

Iteration   2: 272.534 ns/op
                 ·gc.alloc.rate:      3917.058 MB/sec
                 ·gc.alloc.rate.norm: 560.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 273.288 ns/op
                 ·gc.alloc.rate:      3906.456 MB/sec
                 ·gc.alloc.rate.norm: 560.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 272.457 ns/op
                 ·gc.alloc.rate:      3916.972 MB/sec
                 ·gc.alloc.rate.norm: 560.003 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 272.771 ns/op
                 ·gc.alloc.rate:      3914.653 MB/sec
                 ·gc.alloc.rate.norm: 560.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  272.758 ±(99.9%) 1.251 ns/op [Average]
  (min, avg, max) = (272.457, 272.758, 273.288), stdev = 0.325
  CI (99.9%): [271.508, 274.009] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  3913.841 ±(99.9%) 16.719 MB/sec [Average]
  (min, avg, max) = (3906.456, 3913.841, 3917.058), stdev = 4.342
  CI (99.9%): [3897.121, 3930.560] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  560.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (560.000, 560.001, 560.003), stdev = 0.001
  CI (99.9%): [559.995, 560.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  101.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (20.000, 20.200, 21.000), stdev = 0.447
  CI (99.9%): [101.000, 101.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  40.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (7.000, 8.000, 9.000), stdev = 1.000
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = )

# Run progress: 41.32% complete, ETA 00:41:27
# Fork: 1 of 1
# Warmup Iteration   1: 3342.228 ns/op
# Warmup Iteration   2: 2283.109 ns/op
# Warmup Iteration   3: 2180.652 ns/op
# Warmup Iteration   4: 2155.636 ns/op
# Warmup Iteration   5: 2135.839 ns/op
Iteration   1: 2138.500 ns/op
                 ·gc.alloc.rate:      763.080 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2137.556 ns/op
                 ·gc.alloc.rate:      763.388 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2138.507 ns/op
                 ·gc.alloc.rate:      763.136 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2139.207 ns/op
                 ·gc.alloc.rate:      762.658 MB/sec
                 ·gc.alloc.rate.norm: 856.024 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2038.086 ns/op
                 ·gc.alloc.rate:      800.802 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  2118.371 ±(99.9%) 172.835 ns/op [Average]
  (min, avg, max) = (2038.086, 2118.371, 2139.207), stdev = 44.885
  CI (99.9%): [1945.537, 2291.206] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  770.613 ±(99.9%) 64.992 MB/sec [Average]
  (min, avg, max) = (762.658, 770.613, 800.802), stdev = 16.878
  CI (99.9%): [705.620, 835.605] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  856.006 ±(99.9%) 0.039 B/op [Average]
  (min, avg, max) = (856.001, 856.006, 856.024), stdev = 0.010
  CI (99.9%): [855.967, 856.045] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200)

# Run progress: 41.56% complete, ETA 00:41:17
# Fork: 1 of 1
# Warmup Iteration   1: 2675.826 ns/op
# Warmup Iteration   2: 1787.040 ns/op
# Warmup Iteration   3: 1754.158 ns/op
# Warmup Iteration   4: 1714.583 ns/op
# Warmup Iteration   5: 1716.309 ns/op
Iteration   1: 1715.011 ns/op
                 ·gc.alloc.rate:      906.930 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1714.470 ns/op
                 ·gc.alloc.rate:      907.254 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1712.586 ns/op
                 ·gc.alloc.rate:      908.323 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1715.772 ns/op
                 ·gc.alloc.rate:      906.175 MB/sec
                 ·gc.alloc.rate.norm: 816.019 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 1633.357 ns/op
                 ·gc.alloc.rate:      952.404 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  1698.239 ±(99.9%) 139.738 ns/op [Average]
  (min, avg, max) = (1633.357, 1698.239, 1715.772), stdev = 36.289
  CI (99.9%): [1558.501, 1837.977] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  916.217 ±(99.9%) 77.952 MB/sec [Average]
  (min, avg, max) = (906.175, 916.217, 952.404), stdev = 20.244
  CI (99.9%): [838.265, 994.169] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  816.005 ±(99.9%) 0.032 B/op [Average]
  (min, avg, max) = (816.001, 816.005, 816.019), stdev = 0.008
  CI (99.9%): [815.973, 816.036] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.)

# Run progress: 41.81% complete, ETA 00:41:07
# Fork: 1 of 1
# Warmup Iteration   1: 3448.454 ns/op
# Warmup Iteration   2: 2033.154 ns/op
# Warmup Iteration   3: 1993.104 ns/op
# Warmup Iteration   4: 1947.667 ns/op
# Warmup Iteration   5: 1947.889 ns/op
Iteration   1: 1948.593 ns/op
                 ·gc.alloc.rate:      970.475 MB/sec
                 ·gc.alloc.rate.norm: 992.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1945.540 ns/op
                 ·gc.alloc.rate:      972.046 MB/sec
                 ·gc.alloc.rate.norm: 992.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1946.565 ns/op
                 ·gc.alloc.rate:      971.586 MB/sec
                 ·gc.alloc.rate.norm: 992.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1948.006 ns/op
                 ·gc.alloc.rate:      970.451 MB/sec
                 ·gc.alloc.rate.norm: 992.022 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1830.414 ns/op
                 ·gc.alloc.rate:      1033.395 MB/sec
                 ·gc.alloc.rate.norm: 992.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  1923.823 ±(99.9%) 201.124 ns/op [Average]
  (min, avg, max) = (1830.414, 1923.823, 1948.593), stdev = 52.231
  CI (99.9%): [1722.699, 2124.948] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  983.591 ±(99.9%) 107.241 MB/sec [Average]
  (min, avg, max) = (970.451, 983.591, 1033.395), stdev = 27.850
  CI (99.9%): [876.350, 1090.831] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  992.005 ±(99.9%) 0.035 B/op [Average]
  (min, avg, max) = (992.001, 992.005, 992.022), stdev = 0.009
  CI (99.9%): [991.970, 992.041] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200)

# Run progress: 42.05% complete, ETA 00:40:56
# Fork: 1 of 1
# Warmup Iteration   1: 3691.343 ns/op
# Warmup Iteration   2: 2067.987 ns/op
# Warmup Iteration   3: 2007.420 ns/op
# Warmup Iteration   4: 1976.545 ns/op
# Warmup Iteration   5: 1978.226 ns/op
Iteration   1: 1971.598 ns/op
                 ·gc.alloc.rate:      982.432 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1969.380 ns/op
                 ·gc.alloc.rate:      983.483 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1968.707 ns/op
                 ·gc.alloc.rate:      983.837 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1969.211 ns/op
                 ·gc.alloc.rate:      982.998 MB/sec
                 ·gc.alloc.rate.norm: 1016.022 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1850.642 ns/op
                 ·gc.alloc.rate:      1046.686 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  1945.908 ±(99.9%) 205.111 ns/op [Average]
  (min, avg, max) = (1850.642, 1945.908, 1971.598), stdev = 53.267
  CI (99.9%): [1740.796, 2151.019] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  995.887 ±(99.9%) 109.368 MB/sec [Average]
  (min, avg, max) = (982.432, 995.887, 1046.686), stdev = 28.402
  CI (99.9%): [886.519, 1105.255] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1016.005 ±(99.9%) 0.036 B/op [Average]
  (min, avg, max) = (1016.001, 1016.005, 1016.022), stdev = 0.009
  CI (99.9%): [1015.969, 1016.042] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.)

# Run progress: 42.30% complete, ETA 00:40:46
# Fork: 1 of 1
# Warmup Iteration   1: 3741.998 ns/op
# Warmup Iteration   2: 2076.733 ns/op
# Warmup Iteration   3: 2037.318 ns/op
# Warmup Iteration   4: 1995.641 ns/op
# Warmup Iteration   5: 2039.754 ns/op
Iteration   1: 1993.113 ns/op
                 ·gc.alloc.rate:      1010.049 MB/sec
                 ·gc.alloc.rate.norm: 1056.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1994.602 ns/op
                 ·gc.alloc.rate:      1009.355 MB/sec
                 ·gc.alloc.rate.norm: 1056.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1993.616 ns/op
                 ·gc.alloc.rate:      1009.900 MB/sec
                 ·gc.alloc.rate.norm: 1056.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1995.789 ns/op
                 ·gc.alloc.rate:      1008.042 MB/sec
                 ·gc.alloc.rate.norm: 1056.022 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1867.820 ns/op
                 ·gc.alloc.rate:      1077.941 MB/sec
                 ·gc.alloc.rate.norm: 1056.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  1968.988 ±(99.9%) 217.807 ns/op [Average]
  (min, avg, max) = (1867.820, 1968.988, 1995.789), stdev = 56.564
  CI (99.9%): [1751.181, 2186.795] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  1023.058 ±(99.9%) 118.180 MB/sec [Average]
  (min, avg, max) = (1008.042, 1023.058, 1077.941), stdev = 30.691
  CI (99.9%): [904.877, 1141.238] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1056.005 ±(99.9%) 0.037 B/op [Average]
  (min, avg, max) = (1056.001, 1056.005, 1056.022), stdev = 0.009
  CI (99.9%): [1055.969, 1056.042] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  36.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = a.200.200)

# Run progress: 42.54% complete, ETA 00:40:35
# Fork: 1 of 1
# Warmup Iteration   1: 4346.133 ns/op
# Warmup Iteration   2: 2578.442 ns/op
# Warmup Iteration   3: 2480.791 ns/op
# Warmup Iteration   4: 2437.117 ns/op
# Warmup Iteration   5: 2430.021 ns/op
Iteration   1: 2429.776 ns/op
                 ·gc.alloc.rate:      866.224 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2428.283 ns/op
                 ·gc.alloc.rate:      866.821 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2426.909 ns/op
                 ·gc.alloc.rate:      867.239 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2427.292 ns/op
                 ·gc.alloc.rate:      866.604 MB/sec
                 ·gc.alloc.rate.norm: 1104.027 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2328.888 ns/op
                 ·gc.alloc.rate:      903.876 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  2408.230 ±(99.9%) 170.842 ns/op [Average]
  (min, avg, max) = (2328.888, 2408.230, 2429.776), stdev = 44.367
  CI (99.9%): [2237.388, 2579.072] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  874.153 ±(99.9%) 63.997 MB/sec [Average]
  (min, avg, max) = (866.224, 874.153, 903.876), stdev = 16.620
  CI (99.9%): [810.156, 938.150] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1104.006 ±(99.9%) 0.045 B/op [Average]
  (min, avg, max) = (1104.001, 1104.006, 1104.027), stdev = 0.012
  CI (99.9%): [1103.962, 1104.051] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.a.200)

# Run progress: 42.79% complete, ETA 00:40:25
# Fork: 1 of 1
# Warmup Iteration   1: 4428.989 ns/op
# Warmup Iteration   2: 2837.097 ns/op
# Warmup Iteration   3: 2681.619 ns/op
# Warmup Iteration   4: 2652.759 ns/op
# Warmup Iteration   5: 2628.098 ns/op
Iteration   1: 2623.869 ns/op
                 ·gc.alloc.rate:      825.442 MB/sec
                 ·gc.alloc.rate.norm: 1136.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2624.881 ns/op
                 ·gc.alloc.rate:      824.961 MB/sec
                 ·gc.alloc.rate.norm: 1136.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2634.920 ns/op
                 ·gc.alloc.rate:      821.860 MB/sec
                 ·gc.alloc.rate.norm: 1136.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2633.785 ns/op
                 ·gc.alloc.rate:      821.816 MB/sec
                 ·gc.alloc.rate.norm: 1136.029 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2509.782 ns/op
                 ·gc.alloc.rate:      862.860 MB/sec
                 ·gc.alloc.rate.norm: 1136.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  2605.447 ±(99.9%) 206.831 ns/op [Average]
  (min, avg, max) = (2509.782, 2605.447, 2634.920), stdev = 53.713
  CI (99.9%): [2398.616, 2812.278] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  831.388 ±(99.9%) 68.059 MB/sec [Average]
  (min, avg, max) = (821.816, 831.388, 862.860), stdev = 17.675
  CI (99.9%): [763.329, 899.446] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1136.007 ±(99.9%) 0.048 B/op [Average]
  (min, avg, max) = (1136.001, 1136.007, 1136.029), stdev = 0.013
  CI (99.9%): [1135.958, 1136.055] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.a)

# Run progress: 43.03% complete, ETA 00:40:15
# Fork: 1 of 1
# Warmup Iteration   1: 4345.249 ns/op
# Warmup Iteration   2: 2575.478 ns/op
# Warmup Iteration   3: 2484.794 ns/op
# Warmup Iteration   4: 2436.511 ns/op
# Warmup Iteration   5: 2429.702 ns/op
Iteration   1: 2433.115 ns/op
                 ·gc.alloc.rate:      883.822 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2432.685 ns/op
                 ·gc.alloc.rate:      883.971 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2518.480 ns/op
                 ·gc.alloc.rate:      853.944 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2435.111 ns/op
                 ·gc.alloc.rate:      882.462 MB/sec
                 ·gc.alloc.rate.norm: 1128.027 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2316.691 ns/op
                 ·gc.alloc.rate:      928.379 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  2427.216 ±(99.9%) 276.818 ns/op [Average]
  (min, avg, max) = (2316.691, 2427.216, 2518.480), stdev = 71.889
  CI (99.9%): [2150.398, 2704.034] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  886.515 ±(99.9%) 102.669 MB/sec [Average]
  (min, avg, max) = (853.944, 886.515, 928.379), stdev = 26.663
  CI (99.9%): [783.846, 989.185] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1128.006 ±(99.9%) 0.045 B/op [Average]
  (min, avg, max) = (1128.001, 1128.006, 1128.027), stdev = 0.012
  CI (99.9%): [1127.962, 1128.051] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.200.200)

# Run progress: 43.28% complete, ETA 00:40:04
# Fork: 1 of 1
# Warmup Iteration   1: 3616.981 ns/op
# Warmup Iteration   2: 2416.521 ns/op
# Warmup Iteration   3: 2307.003 ns/op
# Warmup Iteration   4: 2265.480 ns/op
# Warmup Iteration   5: 2267.186 ns/op
Iteration   1: 2265.391 ns/op
                 ·gc.alloc.rate:      989.720 MB/sec
                 ·gc.alloc.rate.norm: 1176.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2265.972 ns/op
                 ·gc.alloc.rate:      989.375 MB/sec
                 ·gc.alloc.rate.norm: 1176.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2265.507 ns/op
                 ·gc.alloc.rate:      989.505 MB/sec
                 ·gc.alloc.rate.norm: 1176.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2263.600 ns/op
                 ·gc.alloc.rate:      990.192 MB/sec
                 ·gc.alloc.rate.norm: 1176.025 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2153.130 ns/op
                 ·gc.alloc.rate:      1041.368 MB/sec
                 ·gc.alloc.rate.norm: 1176.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  2242.720 ±(99.9%) 192.880 ns/op [Average]
  (min, avg, max) = (2153.130, 2242.720, 2265.972), stdev = 50.090
  CI (99.9%): [2049.840, 2435.600] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  1000.032 ±(99.9%) 88.986 MB/sec [Average]
  (min, avg, max) = (989.375, 1000.032, 1041.368), stdev = 23.109
  CI (99.9%): [911.046, 1089.018] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1176.006 ±(99.9%) 0.041 B/op [Average]
  (min, avg, max) = (1176.001, 1176.006, 1176.025), stdev = 0.011
  CI (99.9%): [1175.965, 1176.047] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.99999)

# Run progress: 43.52% complete, ETA 00:39:54
# Fork: 1 of 1
# Warmup Iteration   1: 477.580 ns/op
# Warmup Iteration   2: 308.872 ns/op
# Warmup Iteration   3: 280.974 ns/op
# Warmup Iteration   4: 283.201 ns/op
# Warmup Iteration   5: 279.498 ns/op
Iteration   1: 279.175 ns/op
                 ·gc.alloc.rate:      3496.401 MB/sec
                 ·gc.alloc.rate.norm: 512.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            25.000 ms

Iteration   2: 278.773 ns/op
                 ·gc.alloc.rate:      3501.432 MB/sec
                 ·gc.alloc.rate.norm: 512.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            24.000 ms

Iteration   3: 279.960 ns/op
                 ·gc.alloc.rate:      3486.535 MB/sec
                 ·gc.alloc.rate.norm: 512.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            28.000 ms

Iteration   4: 276.919 ns/op
                 ·gc.alloc.rate:      3523.730 MB/sec
                 ·gc.alloc.rate.norm: 512.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            18.000 ms

Iteration   5: 278.150 ns/op
                 ·gc.alloc.rate:      3509.341 MB/sec
                 ·gc.alloc.rate.norm: 512.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            22.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  278.595 ±(99.9%) 4.408 ns/op [Average]
  (min, avg, max) = (276.919, 278.595, 279.960), stdev = 1.145
  CI (99.9%): [274.188, 283.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  3503.488 ±(99.9%) 53.972 MB/sec [Average]
  (min, avg, max) = (3486.535, 3503.488, 3523.730), stdev = 14.016
  CI (99.9%): [3449.515, 3557.460] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  512.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (512.000, 512.001, 512.003), stdev = 0.001
  CI (99.9%): [511.996, 512.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  77.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.400, 16.000), stdev = 0.548
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  117.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 23.400, 28.000), stdev = 3.715
  CI (99.9%): [117.000, 117.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.-200)

# Run progress: 43.77% complete, ETA 00:39:43
# Fork: 1 of 1
# Warmup Iteration   1: 600.844 ns/op
# Warmup Iteration   2: 318.616 ns/op
# Warmup Iteration   3: 278.942 ns/op
# Warmup Iteration   4: 269.449 ns/op
# Warmup Iteration   5: 269.236 ns/op
Iteration   1: 267.592 ns/op
                 ·gc.alloc.rate:      3647.444 MB/sec
                 ·gc.alloc.rate.norm: 512.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            21.000 ms

Iteration   2: 268.486 ns/op
                 ·gc.alloc.rate:      3636.059 MB/sec
                 ·gc.alloc.rate.norm: 512.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            24.000 ms

Iteration   3: 269.546 ns/op
                 ·gc.alloc.rate:      3620.811 MB/sec
                 ·gc.alloc.rate.norm: 512.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            29.000 ms

Iteration   4: 275.810 ns/op
                 ·gc.alloc.rate:      3537.359 MB/sec
                 ·gc.alloc.rate.norm: 512.003 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            33.000 ms

Iteration   5: 266.700 ns/op
                 ·gc.alloc.rate:      3659.893 MB/sec
                 ·gc.alloc.rate.norm: 512.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            19.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  269.627 ±(99.9%) 13.917 ns/op [Average]
  (min, avg, max) = (266.700, 269.627, 275.810), stdev = 3.614
  CI (99.9%): [255.711, 283.544] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  3620.313 ±(99.9%) 186.986 MB/sec [Average]
  (min, avg, max) = (3537.359, 3620.313, 3659.893), stdev = 48.560
  CI (99.9%): [3433.327, 3807.299] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  512.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (512.000, 512.001, 512.003), stdev = 0.001
  CI (99.9%): [511.995, 512.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  77.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.400, 16.000), stdev = 0.548
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  126.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 25.200, 33.000), stdev = 5.762
  CI (99.9%): [126.000, 126.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 1.0.0)

# Run progress: 44.01% complete, ETA 00:39:33
# Fork: 1 of 1
# Warmup Iteration   1: 403.143 ns/op
# Warmup Iteration   2: 262.054 ns/op
# Warmup Iteration   3: 238.187 ns/op
# Warmup Iteration   4: 237.573 ns/op
# Warmup Iteration   5: 237.354 ns/op
Iteration   1: 246.572 ns/op
                 ·gc.alloc.rate:      2783.115 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 238.612 ns/op
                 ·gc.alloc.rate:      2876.107 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 238.866 ns/op
                 ·gc.alloc.rate:      2873.634 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 237.592 ns/op
                 ·gc.alloc.rate:      2886.440 MB/sec
                 ·gc.alloc.rate.norm: 360.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 237.155 ns/op
                 ·gc.alloc.rate:      2893.689 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  239.759 ±(99.9%) 14.915 ns/op [Average]
  (min, avg, max) = (237.155, 239.759, 246.572), stdev = 3.873
  CI (99.9%): [224.844, 254.674] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  2862.597 ±(99.9%) 173.886 MB/sec [Average]
  (min, avg, max) = (2783.115, 2862.597, 2893.689), stdev = 45.158
  CI (99.9%): [2688.711, 3036.484] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.003), stdev = 0.001
  CI (99.9%): [359.996, 360.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  78.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.600, 16.000), stdev = 0.548
  CI (99.9%): [78.000, 78.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  33.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.200)

# Run progress: 44.25% complete, ETA 00:39:23
# Fork: 1 of 1
# Warmup Iteration   1: 567.071 ns/op
# Warmup Iteration   2: 290.824 ns/op
# Warmup Iteration   3: 262.714 ns/op
# Warmup Iteration   4: 261.275 ns/op
# Warmup Iteration   5: 276.534 ns/op
Iteration   1: 259.759 ns/op
                 ·gc.alloc.rate:      4051.460 MB/sec
                 ·gc.alloc.rate.norm: 551.999 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            22.000 ms

Iteration   2: 259.408 ns/op
                 ·gc.alloc.rate:      4056.954 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            23.000 ms

Iteration   3: 260.505 ns/op
                 ·gc.alloc.rate:      4040.241 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            27.000 ms

Iteration   4: 262.116 ns/op
                 ·gc.alloc.rate:      4013.888 MB/sec
                 ·gc.alloc.rate.norm: 552.003 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            33.000 ms

Iteration   5: 257.445 ns/op
                 ·gc.alloc.rate:      4087.784 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            15.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  259.847 ±(99.9%) 6.543 ns/op [Average]
  (min, avg, max) = (257.445, 259.847, 262.116), stdev = 1.699
  CI (99.9%): [253.303, 266.390] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  4050.065 ±(99.9%) 103.276 MB/sec [Average]
  (min, avg, max) = (4013.888, 4050.065, 4087.784), stdev = 26.821
  CI (99.9%): [3946.789, 4153.342] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  552.000 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (551.999, 552.000, 552.003), stdev = 0.001
  CI (99.9%): [551.995, 552.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  89.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (17.000, 17.800, 18.000), stdev = 0.447
  CI (99.9%): [89.000, 89.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  120.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (15.000, 24.000, 33.000), stdev = 6.633
  CI (99.9%): [120.000, 120.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 44.50% complete, ETA 00:39:12
# Fork: 1 of 1
# Warmup Iteration   1: 594.370 ns/op
# Warmup Iteration   2: 317.300 ns/op
# Warmup Iteration   3: 275.815 ns/op
# Warmup Iteration   4: 274.692 ns/op
# Warmup Iteration   5: 274.838 ns/op
Iteration   1: 284.567 ns/op
                 ·gc.alloc.rate:      3697.856 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            25.000 ms

Iteration   2: 273.358 ns/op
                 ·gc.alloc.rate:      3849.672 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            14.000 ms

Iteration   3: 275.426 ns/op
                 ·gc.alloc.rate:      3820.983 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            22.000 ms

Iteration   4: 275.740 ns/op
                 ·gc.alloc.rate:      3815.203 MB/sec
                 ·gc.alloc.rate.norm: 552.003 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            22.000 ms

Iteration   5: 279.202 ns/op
                 ·gc.alloc.rate:      3769.170 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            32.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  277.659 ±(99.9%) 16.924 ns/op [Average]
  (min, avg, max) = (273.358, 277.659, 284.567), stdev = 4.395
  CI (99.9%): [260.735, 294.583] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  3790.577 ±(99.9%) 228.446 MB/sec [Average]
  (min, avg, max) = (3697.856, 3790.577, 3849.672), stdev = 59.327
  CI (99.9%): [3562.131, 4019.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  552.000 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (552.000, 552.000, 552.003), stdev = 0.001
  CI (99.9%): [551.995, 552.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  77.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.400, 16.000), stdev = 0.548
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  115.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (14.000, 23.000, 32.000), stdev = 6.481
  CI (99.9%): [115.000, 115.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 44.74% complete, ETA 00:39:02
# Fork: 1 of 1
# Warmup Iteration   1: 602.834 ns/op
# Warmup Iteration   2: 330.581 ns/op
# Warmup Iteration   3: 294.475 ns/op
# Warmup Iteration   4: 291.101 ns/op
# Warmup Iteration   5: 292.030 ns/op
Iteration   1: 292.595 ns/op
                 ·gc.alloc.rate:      3596.808 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            27.000 ms

Iteration   2: 290.078 ns/op
                 ·gc.alloc.rate:      3628.049 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            18.000 ms

Iteration   3: 293.713 ns/op
                 ·gc.alloc.rate:      3582.727 MB/sec
                 ·gc.alloc.rate.norm: 552.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            28.000 ms

Iteration   4: 294.290 ns/op
                 ·gc.alloc.rate:      3574.484 MB/sec
                 ·gc.alloc.rate.norm: 552.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            30.000 ms

Iteration   5: 292.087 ns/op
                 ·gc.alloc.rate:      3603.075 MB/sec
                 ·gc.alloc.rate.norm: 551.999 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            21.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  292.553 ±(99.9%) 6.300 ns/op [Average]
  (min, avg, max) = (290.078, 292.553, 294.290), stdev = 1.636
  CI (99.9%): [286.253, 298.852] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  3597.029 ±(99.9%) 79.655 MB/sec [Average]
  (min, avg, max) = (3574.484, 3597.029, 3628.049), stdev = 20.686
  CI (99.9%): [3517.374, 3676.683] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  552.001 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (551.999, 552.001, 552.003), stdev = 0.002
  CI (99.9%): [551.995, 552.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  78.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.600, 16.000), stdev = 0.548
  CI (99.9%): [78.000, 78.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  124.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 24.800, 30.000), stdev = 5.070
  CI (99.9%): [124.000, 124.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = )

# Run progress: 44.99% complete, ETA 00:38:52
# Fork: 1 of 1
# Warmup Iteration   1: 3113.541 ns/op
# Warmup Iteration   2: 2168.530 ns/op
# Warmup Iteration   3: 2134.478 ns/op
# Warmup Iteration   4: 2086.459 ns/op
# Warmup Iteration   5: 2080.831 ns/op
Iteration   1: 2080.157 ns/op
                 ·gc.alloc.rate:      784.556 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2076.423 ns/op
                 ·gc.alloc.rate:      785.971 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2085.248 ns/op
                 ·gc.alloc.rate:      782.565 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2083.052 ns/op
                 ·gc.alloc.rate:      783.188 MB/sec
                 ·gc.alloc.rate.norm: 856.023 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1968.786 ns/op
                 ·gc.alloc.rate:      828.818 MB/sec
                 ·gc.alloc.rate.norm: 856.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2058.734 ±(99.9%) 194.037 ns/op [Average]
  (min, avg, max) = (1968.786, 2058.734, 2085.248), stdev = 50.391
  CI (99.9%): [1864.697, 2252.770] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  793.019 ±(99.9%) 77.225 MB/sec [Average]
  (min, avg, max) = (782.565, 793.019, 828.818), stdev = 20.055
  CI (99.9%): [715.795, 870.244] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  856.005 ±(99.9%) 0.038 B/op [Average]
  (min, avg, max) = (856.000, 856.005, 856.023), stdev = 0.010
  CI (99.9%): [855.967, 856.044] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200)

# Run progress: 45.23% complete, ETA 00:38:41
# Fork: 1 of 1
# Warmup Iteration   1: 2655.709 ns/op
# Warmup Iteration   2: 1692.085 ns/op
# Warmup Iteration   3: 1670.773 ns/op
# Warmup Iteration   4: 1638.961 ns/op
# Warmup Iteration   5: 1636.401 ns/op
Iteration   1: 1634.460 ns/op
                 ·gc.alloc.rate:      951.748 MB/sec
                 ·gc.alloc.rate.norm: 816.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1635.538 ns/op
                 ·gc.alloc.rate:      951.031 MB/sec
                 ·gc.alloc.rate.norm: 816.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 1636.862 ns/op
                 ·gc.alloc.rate:      950.442 MB/sec
                 ·gc.alloc.rate.norm: 816.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1637.494 ns/op
                 ·gc.alloc.rate:      949.599 MB/sec
                 ·gc.alloc.rate.norm: 816.018 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 1525.596 ns/op
                 ·gc.alloc.rate:      1019.792 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  1613.990 ±(99.9%) 190.329 ns/op [Average]
  (min, avg, max) = (1525.596, 1613.990, 1637.494), stdev = 49.428
  CI (99.9%): [1423.661, 1804.319] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  964.522 ±(99.9%) 119.011 MB/sec [Average]
  (min, avg, max) = (949.599, 964.522, 1019.792), stdev = 30.907
  CI (99.9%): [845.511, 1083.533] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  816.004 ±(99.9%) 0.031 B/op [Average]
  (min, avg, max) = (816.000, 816.004, 816.018), stdev = 0.008
  CI (99.9%): [815.973, 816.035] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.)

# Run progress: 45.48% complete, ETA 00:38:31
# Fork: 1 of 1
# Warmup Iteration   1: 3010.868 ns/op
# Warmup Iteration   2: 1880.175 ns/op
# Warmup Iteration   3: 1858.915 ns/op
# Warmup Iteration   4: 1815.158 ns/op
# Warmup Iteration   5: 1812.515 ns/op
Iteration   1: 1812.230 ns/op
                 ·gc.alloc.rate:      1009.959 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1813.222 ns/op
                 ·gc.alloc.rate:      1009.393 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1812.267 ns/op
                 ·gc.alloc.rate:      1009.925 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1810.313 ns/op
                 ·gc.alloc.rate:      1010.602 MB/sec
                 ·gc.alloc.rate.norm: 960.020 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 1709.341 ns/op
                 ·gc.alloc.rate:      1070.862 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  1791.475 ±(99.9%) 176.846 ns/op [Average]
  (min, avg, max) = (1709.341, 1791.475, 1813.222), stdev = 45.926
  CI (99.9%): [1614.628, 1968.321] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1022.148 ±(99.9%) 104.873 MB/sec [Average]
  (min, avg, max) = (1009.393, 1022.148, 1070.862), stdev = 27.235
  CI (99.9%): [917.275, 1127.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  960.005 ±(99.9%) 0.033 B/op [Average]
  (min, avg, max) = (960.001, 960.005, 960.020), stdev = 0.009
  CI (99.9%): [959.972, 960.038] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200)

# Run progress: 45.72% complete, ETA 00:38:21
# Fork: 1 of 1
# Warmup Iteration   1: 3212.320 ns/op
# Warmup Iteration   2: 1923.891 ns/op
# Warmup Iteration   3: 1899.037 ns/op
# Warmup Iteration   4: 1855.392 ns/op
# Warmup Iteration   5: 1852.763 ns/op
Iteration   1: 1854.487 ns/op
                 ·gc.alloc.rate:      1011.586 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1858.309 ns/op
                 ·gc.alloc.rate:      1009.329 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1857.664 ns/op
                 ·gc.alloc.rate:      1009.766 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1854.786 ns/op
                 ·gc.alloc.rate:      1010.999 MB/sec
                 ·gc.alloc.rate.norm: 984.021 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1746.591 ns/op
                 ·gc.alloc.rate:      1074.104 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  1834.367 ±(99.9%) 189.059 ns/op [Average]
  (min, avg, max) = (1746.591, 1834.367, 1858.309), stdev = 49.098
  CI (99.9%): [1645.309, 2023.426] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1023.157 ±(99.9%) 109.723 MB/sec [Average]
  (min, avg, max) = (1009.329, 1023.157, 1074.104), stdev = 28.495
  CI (99.9%): [913.433, 1132.880] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  984.005 ±(99.9%) 0.034 B/op [Average]
  (min, avg, max) = (984.001, 984.005, 984.021), stdev = 0.009
  CI (99.9%): [983.971, 984.039] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.)

# Run progress: 45.97% complete, ETA 00:38:10
# Fork: 1 of 1
# Warmup Iteration   1: 3083.404 ns/op
# Warmup Iteration   2: 1946.488 ns/op
# Warmup Iteration   3: 1906.378 ns/op
# Warmup Iteration   4: 1935.174 ns/op
# Warmup Iteration   5: 1870.511 ns/op
Iteration   1: 1871.544 ns/op
                 ·gc.alloc.rate:      1043.185 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1872.041 ns/op
                 ·gc.alloc.rate:      1042.812 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1869.857 ns/op
                 ·gc.alloc.rate:      1044.105 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1874.879 ns/op
                 ·gc.alloc.rate:      1040.929 MB/sec
                 ·gc.alloc.rate.norm: 1024.021 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1770.398 ns/op
                 ·gc.alloc.rate:      1102.747 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  1851.744 ±(99.9%) 175.241 ns/op [Average]
  (min, avg, max) = (1770.398, 1851.744, 1874.879), stdev = 45.510
  CI (99.9%): [1676.503, 2026.985] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1054.756 ±(99.9%) 103.401 MB/sec [Average]
  (min, avg, max) = (1040.929, 1054.756, 1102.747), stdev = 26.853
  CI (99.9%): [951.354, 1158.157] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1024.005 ±(99.9%) 0.034 B/op [Average]
  (min, avg, max) = (1024.001, 1024.005, 1024.021), stdev = 0.009
  CI (99.9%): [1023.971, 1024.039] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  36.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = a.200.200)

# Run progress: 46.21% complete, ETA 00:38:00
# Fork: 1 of 1
# Warmup Iteration   1: 3544.932 ns/op
# Warmup Iteration   2: 2434.930 ns/op
# Warmup Iteration   3: 2407.096 ns/op
# Warmup Iteration   4: 2354.020 ns/op
# Warmup Iteration   5: 2349.601 ns/op
Iteration   1: 2350.020 ns/op
                 ·gc.alloc.rate:      869.579 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2347.767 ns/op
                 ·gc.alloc.rate:      870.408 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2348.379 ns/op
                 ·gc.alloc.rate:      870.216 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2347.925 ns/op
                 ·gc.alloc.rate:      870.148 MB/sec
                 ·gc.alloc.rate.norm: 1072.026 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2240.244 ns/op
                 ·gc.alloc.rate:      912.410 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2326.867 ±(99.9%) 186.495 ns/op [Average]
  (min, avg, max) = (2240.244, 2326.867, 2350.020), stdev = 48.432
  CI (99.9%): [2140.372, 2513.362] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  878.552 ±(99.9%) 72.892 MB/sec [Average]
  (min, avg, max) = (869.579, 878.552, 912.410), stdev = 18.930
  CI (99.9%): [805.660, 951.444] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1072.006 ±(99.9%) 0.043 B/op [Average]
  (min, avg, max) = (1072.001, 1072.006, 1072.026), stdev = 0.011
  CI (99.9%): [1071.963, 1072.049] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.a.200)

# Run progress: 46.45% complete, ETA 00:37:49
# Fork: 1 of 1
# Warmup Iteration   1: 3517.589 ns/op
# Warmup Iteration   2: 2636.519 ns/op
# Warmup Iteration   3: 2435.587 ns/op
# Warmup Iteration   4: 2402.046 ns/op
# Warmup Iteration   5: 2388.784 ns/op
Iteration   1: 2391.032 ns/op
                 ·gc.alloc.rate:      867.595 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2391.212 ns/op
                 ·gc.alloc.rate:      867.374 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2392.244 ns/op
                 ·gc.alloc.rate:      866.998 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2458.856 ns/op
                 ·gc.alloc.rate:      842.938 MB/sec
                 ·gc.alloc.rate.norm: 1088.028 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2282.806 ns/op
                 ·gc.alloc.rate:      908.690 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2383.230 ±(99.9%) 243.612 ns/op [Average]
  (min, avg, max) = (2282.806, 2383.230, 2458.856), stdev = 63.265
  CI (99.9%): [2139.618, 2626.842] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  870.719 ±(99.9%) 91.292 MB/sec [Average]
  (min, avg, max) = (842.938, 870.719, 908.690), stdev = 23.708
  CI (99.9%): [779.427, 962.011] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1088.007 ±(99.9%) 0.045 B/op [Average]
  (min, avg, max) = (1088.001, 1088.007, 1088.028), stdev = 0.012
  CI (99.9%): [1087.961, 1088.052] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.a)

# Run progress: 46.70% complete, ETA 00:37:39
# Fork: 1 of 1
# Warmup Iteration   1: 4206.404 ns/op
# Warmup Iteration   2: 2566.579 ns/op
# Warmup Iteration   3: 2475.979 ns/op
# Warmup Iteration   4: 2415.056 ns/op
# Warmup Iteration   5: 2414.367 ns/op
Iteration   1: 2411.831 ns/op
                 ·gc.alloc.rate:      872.627 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2411.872 ns/op
                 ·gc.alloc.rate:      872.597 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2413.427 ns/op
                 ·gc.alloc.rate:      872.043 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2416.978 ns/op
                 ·gc.alloc.rate:      870.278 MB/sec
                 ·gc.alloc.rate.norm: 1104.027 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2312.984 ns/op
                 ·gc.alloc.rate:      909.921 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2393.418 ±(99.9%) 173.328 ns/op [Average]
  (min, avg, max) = (2312.984, 2393.418, 2416.978), stdev = 45.013
  CI (99.9%): [2220.091, 2566.746] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  879.493 ±(99.9%) 65.603 MB/sec [Average]
  (min, avg, max) = (870.278, 879.493, 909.921), stdev = 17.037
  CI (99.9%): [813.891, 945.096] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1104.006 ±(99.9%) 0.045 B/op [Average]
  (min, avg, max) = (1104.001, 1104.006, 1104.027), stdev = 0.012
  CI (99.9%): [1103.962, 1104.051] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.200.200)

# Run progress: 46.94% complete, ETA 00:37:29
# Fork: 1 of 1
# Warmup Iteration   1: 3199.972 ns/op
# Warmup Iteration   2: 2066.513 ns/op
# Warmup Iteration   3: 2031.523 ns/op
# Warmup Iteration   4: 2002.636 ns/op
# Warmup Iteration   5: 2000.189 ns/op
Iteration   1: 2088.363 ns/op
                 ·gc.alloc.rate:      1029.822 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2000.779 ns/op
                 ·gc.alloc.rate:      1074.719 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2003.055 ns/op
                 ·gc.alloc.rate:      1073.504 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2054.195 ns/op
                 ·gc.alloc.rate:      1045.958 MB/sec
                 ·gc.alloc.rate.norm: 1128.023 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1904.939 ns/op
                 ·gc.alloc.rate:      1129.093 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2010.266 ±(99.9%) 267.229 ns/op [Average]
  (min, avg, max) = (1904.939, 2010.266, 2088.363), stdev = 69.399
  CI (99.9%): [1743.037, 2277.495] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1070.619 ±(99.9%) 145.574 MB/sec [Average]
  (min, avg, max) = (1029.822, 1070.619, 1129.093), stdev = 37.805
  CI (99.9%): [925.045, 1216.194] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1128.005 ±(99.9%) 0.038 B/op [Average]
  (min, avg, max) = (1128.001, 1128.005, 1128.023), stdev = 0.010
  CI (99.9%): [1127.968, 1128.043] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  37.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
  CI (99.9%): [37.000, 37.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  20.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
  CI (99.9%): [20.000, 20.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.99999)

# Run progress: 47.19% complete, ETA 00:37:18
# Fork: 1 of 1
# Warmup Iteration   1: 431.818 ns/op
# Warmup Iteration   2: 261.312 ns/op
# Warmup Iteration   3: 252.005 ns/op
# Warmup Iteration   4: 254.611 ns/op
# Warmup Iteration   5: 250.624 ns/op
Iteration   1: 253.365 ns/op
                 ·gc.alloc.rate:      3611.917 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            34.000 ms

Iteration   2: 252.873 ns/op
                 ·gc.alloc.rate:      3619.009 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            32.000 ms

Iteration   3: 254.676 ns/op
                 ·gc.alloc.rate:      3593.231 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            40.000 ms

Iteration   4: 252.191 ns/op
                 ·gc.alloc.rate:      3627.316 MB/sec
                 ·gc.alloc.rate.norm: 480.003 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            30.000 ms

Iteration   5: 248.386 ns/op
                 ·gc.alloc.rate:      3684.581 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            15.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  252.298 ±(99.9%) 9.121 ns/op [Average]
  (min, avg, max) = (248.386, 252.298, 254.676), stdev = 2.369
  CI (99.9%): [243.178, 261.419] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3627.211 ±(99.9%) 132.654 MB/sec [Average]
  (min, avg, max) = (3593.231, 3627.211, 3684.581), stdev = 34.450
  CI (99.9%): [3494.557, 3759.865] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  480.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (480.000, 480.001, 480.003), stdev = 0.001
  CI (99.9%): [479.996, 480.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  81.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.200, 17.000), stdev = 0.447
  CI (99.9%): [81.000, 81.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  151.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (15.000, 30.200, 40.000), stdev = 9.284
  CI (99.9%): [151.000, 151.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.-200)

# Run progress: 47.43% complete, ETA 00:37:08
# Fork: 1 of 1
# Warmup Iteration   1: 509.976 ns/op
# Warmup Iteration   2: 283.540 ns/op
# Warmup Iteration   3: 258.749 ns/op
# Warmup Iteration   4: 259.341 ns/op
# Warmup Iteration   5: 258.907 ns/op
Iteration   1: 258.392 ns/op
                 ·gc.alloc.rate:      3719.177 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            8.000 ms

Iteration   2: 258.806 ns/op
                 ·gc.alloc.rate:      3713.130 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   3: 259.014 ns/op
                 ·gc.alloc.rate:      3709.518 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 258.647 ns/op
                 ·gc.alloc.rate:      3712.968 MB/sec
                 ·gc.alloc.rate.norm: 504.003 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 259.077 ns/op
                 ·gc.alloc.rate:      3709.079 MB/sec
                 ·gc.alloc.rate.norm: 504.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  258.787 ±(99.9%) 1.075 ns/op [Average]
  (min, avg, max) = (258.392, 258.787, 259.077), stdev = 0.279
  CI (99.9%): [257.712, 259.862] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3712.774 ±(99.9%) 15.573 MB/sec [Average]
  (min, avg, max) = (3709.079, 3712.774, 3719.177), stdev = 4.044
  CI (99.9%): [3697.202, 3728.347] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  504.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (504.000, 504.001, 504.003), stdev = 0.001
  CI (99.9%): [503.996, 504.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  96.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (19.000, 19.200, 20.000), stdev = 0.447
  CI (99.9%): [96.000, 96.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  46.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 9.200, 10.000), stdev = 0.837
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 1.0.0)

# Run progress: 47.68% complete, ETA 00:36:58
# Fork: 1 of 1
# Warmup Iteration   1: 409.564 ns/op
# Warmup Iteration   2: 214.988 ns/op
# Warmup Iteration   3: 202.487 ns/op
# Warmup Iteration   4: 201.611 ns/op
# Warmup Iteration   5: 202.007 ns/op
Iteration   1: 203.463 ns/op
                 ·gc.alloc.rate:      3073.273 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            9.000 ms

Iteration   2: 202.670 ns/op
                 ·gc.alloc.rate:      3085.347 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 202.380 ns/op
                 ·gc.alloc.rate:      3090.056 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 213.228 ns/op
                 ·gc.alloc.rate:      2931.017 MB/sec
                 ·gc.alloc.rate.norm: 328.002 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            8.000 ms

Iteration   5: 202.226 ns/op
                 ·gc.alloc.rate:      3091.962 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  204.793 ±(99.9%) 18.248 ns/op [Average]
  (min, avg, max) = (202.226, 204.793, 213.228), stdev = 4.739
  CI (99.9%): [186.545, 223.042] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3054.331 ±(99.9%) 266.915 MB/sec [Average]
  (min, avg, max) = (2931.017, 3054.331, 3091.962), stdev = 69.317
  CI (99.9%): [2787.416, 3321.246] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  328.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (328.000, 328.001, 328.002), stdev = 0.001
  CI (99.9%): [327.997, 328.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  81.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.200, 17.000), stdev = 0.447
  CI (99.9%): [81.000, 81.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  37.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.400, 9.000), stdev = 1.140
  CI (99.9%): [37.000, 37.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.200)

# Run progress: 47.92% complete, ETA 00:36:47
# Fork: 1 of 1
# Warmup Iteration   1: 504.718 ns/op
# Warmup Iteration   2: 276.846 ns/op
# Warmup Iteration   3: 255.562 ns/op
# Warmup Iteration   4: 254.617 ns/op
# Warmup Iteration   5: 256.595 ns/op
Iteration   1: 257.457 ns/op
                 ·gc.alloc.rate:      4028.126 MB/sec
                 ·gc.alloc.rate.norm: 544.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            33.000 ms

Iteration   2: 262.607 ns/op
                 ·gc.alloc.rate:      3949.298 MB/sec
                 ·gc.alloc.rate.norm: 544.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            27.000 ms

Iteration   3: 260.019 ns/op
                 ·gc.alloc.rate:      3988.952 MB/sec
                 ·gc.alloc.rate.norm: 544.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            34.000 ms

Iteration   4: 254.614 ns/op
                 ·gc.alloc.rate:      4072.130 MB/sec
                 ·gc.alloc.rate.norm: 544.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            22.000 ms

Iteration   5: 253.364 ns/op
                 ·gc.alloc.rate:      4093.701 MB/sec
                 ·gc.alloc.rate.norm: 544.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            18.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  257.612 ±(99.9%) 14.637 ns/op [Average]
  (min, avg, max) = (253.364, 257.612, 262.607), stdev = 3.801
  CI (99.9%): [242.975, 272.249] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  4026.441 ±(99.9%) 227.568 MB/sec [Average]
  (min, avg, max) = (3949.298, 4026.441, 4093.701), stdev = 59.099
  CI (99.9%): [3798.873, 4254.009] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  544.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (544.000, 544.001, 544.003), stdev = 0.001
  CI (99.9%): [543.996, 544.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  83.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.600, 18.000), stdev = 0.894
  CI (99.9%): [83.000, 83.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  134.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 26.800, 34.000), stdev = 6.907
  CI (99.9%): [134.000, 134.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 48.17% complete, ETA 00:36:37
# Fork: 1 of 1
# Warmup Iteration   1: 544.480 ns/op
# Warmup Iteration   2: 276.367 ns/op
# Warmup Iteration   3: 262.999 ns/op
# Warmup Iteration   4: 262.633 ns/op
# Warmup Iteration   5: 263.522 ns/op
Iteration   1: 263.281 ns/op
                 ·gc.alloc.rate:      3765.259 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   2: 263.027 ns/op
                 ·gc.alloc.rate:      3769.456 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   3: 263.501 ns/op
                 ·gc.alloc.rate:      3762.574 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 262.995 ns/op
                 ·gc.alloc.rate:      3767.008 MB/sec
                 ·gc.alloc.rate.norm: 520.003 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 263.078 ns/op
                 ·gc.alloc.rate:      3768.177 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  263.176 ±(99.9%) 0.820 ns/op [Average]
  (min, avg, max) = (262.995, 263.176, 263.501), stdev = 0.213
  CI (99.9%): [262.356, 263.996] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3766.495 ±(99.9%) 10.325 MB/sec [Average]
  (min, avg, max) = (3762.574, 3766.495, 3769.456), stdev = 2.681
  CI (99.9%): [3756.170, 3776.820] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  520.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (520.000, 520.001, 520.003), stdev = 0.001
  CI (99.9%): [519.996, 520.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  101.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (20.000, 20.200, 21.000), stdev = 0.447
  CI (99.9%): [101.000, 101.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  45.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
  CI (99.9%): [45.000, 45.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 48.41% complete, ETA 00:36:26
# Fork: 1 of 1
# Warmup Iteration   1: 563.922 ns/op
# Warmup Iteration   2: 310.654 ns/op
# Warmup Iteration   3: 291.058 ns/op
# Warmup Iteration   4: 291.696 ns/op
# Warmup Iteration   5: 290.915 ns/op
Iteration   1: 298.781 ns/op
                 ·gc.alloc.rate:      3318.595 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            44.000 ms

Iteration   2: 291.004 ns/op
                 ·gc.alloc.rate:      3406.517 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            29.000 ms

Iteration   3: 288.780 ns/op
                 ·gc.alloc.rate:      3432.830 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            19.000 ms

Iteration   4: 290.673 ns/op
                 ·gc.alloc.rate:      3408.346 MB/sec
                 ·gc.alloc.rate.norm: 520.003 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            26.000 ms

Iteration   5: 288.712 ns/op
                 ·gc.alloc.rate:      3433.883 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            18.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  291.590 ±(99.9%) 16.001 ns/op [Average]
  (min, avg, max) = (288.712, 291.590, 298.781), stdev = 4.155
  CI (99.9%): [275.589, 307.591] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3400.034 ±(99.9%) 182.294 MB/sec [Average]
  (min, avg, max) = (3318.595, 3400.034, 3433.883), stdev = 47.341
  CI (99.9%): [3217.740, 3582.328] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  520.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (520.000, 520.001, 520.003), stdev = 0.001
  CI (99.9%): [519.995, 520.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  76.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.200, 16.000), stdev = 0.447
  CI (99.9%): [76.000, 76.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  136.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 27.200, 44.000), stdev = 10.474
  CI (99.9%): [136.000, 136.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = )

# Run progress: 48.66% complete, ETA 00:36:16
# Fork: 1 of 1
# Warmup Iteration   1: 3074.521 ns/op
# Warmup Iteration   2: 2140.385 ns/op
# Warmup Iteration   3: 2133.072 ns/op
# Warmup Iteration   4: 2085.583 ns/op
# Warmup Iteration   5: 2070.080 ns/op
Iteration   1: 2070.564 ns/op
                 ·gc.alloc.rate:      788.257 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2070.682 ns/op
                 ·gc.alloc.rate:      788.154 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2072.839 ns/op
                 ·gc.alloc.rate:      787.275 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2072.171 ns/op
                 ·gc.alloc.rate:      787.198 MB/sec
                 ·gc.alloc.rate.norm: 856.023 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2017.059 ns/op
                 ·gc.alloc.rate:      809.127 MB/sec
                 ·gc.alloc.rate.norm: 856.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2060.663 ±(99.9%) 93.935 ns/op [Average]
  (min, avg, max) = (2017.059, 2060.663, 2072.839), stdev = 24.395
  CI (99.9%): [1966.728, 2154.598] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  792.002 ±(99.9%) 36.909 MB/sec [Average]
  (min, avg, max) = (787.198, 792.002, 809.127), stdev = 9.585
  CI (99.9%): [755.093, 828.912] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  856.005 ±(99.9%) 0.038 B/op [Average]
  (min, avg, max) = (856.000, 856.005, 856.023), stdev = 0.010
  CI (99.9%): [855.967, 856.043] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200)

# Run progress: 48.90% complete, ETA 00:36:06
# Fork: 1 of 1
# Warmup Iteration   1: 2435.777 ns/op
# Warmup Iteration   2: 1732.735 ns/op
# Warmup Iteration   3: 1675.600 ns/op
# Warmup Iteration   4: 1642.082 ns/op
# Warmup Iteration   5: 1643.516 ns/op
Iteration   1: 1642.450 ns/op
                 ·gc.alloc.rate:      947.145 MB/sec
                 ·gc.alloc.rate.norm: 816.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1641.397 ns/op
                 ·gc.alloc.rate:      947.815 MB/sec
                 ·gc.alloc.rate.norm: 816.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1640.629 ns/op
                 ·gc.alloc.rate:      948.172 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 1647.065 ns/op
                 ·gc.alloc.rate:      943.920 MB/sec
                 ·gc.alloc.rate.norm: 816.018 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1513.948 ns/op
                 ·gc.alloc.rate:      1027.568 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  1617.098 ±(99.9%) 222.246 ns/op [Average]
  (min, avg, max) = (1513.948, 1617.098, 1647.065), stdev = 57.717
  CI (99.9%): [1394.851, 1839.344] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  962.924 ±(99.9%) 139.301 MB/sec [Average]
  (min, avg, max) = (943.920, 962.924, 1027.568), stdev = 36.176
  CI (99.9%): [823.622, 1102.225] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  816.004 ±(99.9%) 0.031 B/op [Average]
  (min, avg, max) = (816.000, 816.004, 816.018), stdev = 0.008
  CI (99.9%): [815.973, 816.035] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.)

# Run progress: 49.14% complete, ETA 00:35:55
# Fork: 1 of 1
# Warmup Iteration   1: 2860.057 ns/op
# Warmup Iteration   2: 1884.124 ns/op
# Warmup Iteration   3: 1863.343 ns/op
# Warmup Iteration   4: 1822.923 ns/op
# Warmup Iteration   5: 1822.148 ns/op
Iteration   1: 1812.840 ns/op
                 ·gc.alloc.rate:      1009.518 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1813.479 ns/op
                 ·gc.alloc.rate:      1009.248 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 1812.858 ns/op
                 ·gc.alloc.rate:      1009.656 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1811.544 ns/op
                 ·gc.alloc.rate:      1009.848 MB/sec
                 ·gc.alloc.rate.norm: 960.020 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 1712.593 ns/op
                 ·gc.alloc.rate:      1068.809 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  1792.663 ±(99.9%) 172.378 ns/op [Average]
  (min, avg, max) = (1712.593, 1792.663, 1813.479), stdev = 44.766
  CI (99.9%): [1620.285, 1965.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  1021.416 ±(99.9%) 102.022 MB/sec [Average]
  (min, avg, max) = (1009.248, 1021.416, 1068.809), stdev = 26.495
  CI (99.9%): [919.394, 1123.437] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  960.005 ±(99.9%) 0.033 B/op [Average]
  (min, avg, max) = (960.001, 960.005, 960.020), stdev = 0.009
  CI (99.9%): [959.972, 960.038] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200)

# Run progress: 49.39% complete, ETA 00:35:45
# Fork: 1 of 1
# Warmup Iteration   1: 3269.615 ns/op
# Warmup Iteration   2: 1951.458 ns/op
# Warmup Iteration   3: 1904.537 ns/op
# Warmup Iteration   4: 1870.506 ns/op
# Warmup Iteration   5: 1913.213 ns/op
Iteration   1: 1869.996 ns/op
                 ·gc.alloc.rate:      1003.079 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1873.763 ns/op
                 ·gc.alloc.rate:      1001.104 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1872.910 ns/op
                 ·gc.alloc.rate:      1001.670 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1878.894 ns/op
                 ·gc.alloc.rate:      997.801 MB/sec
                 ·gc.alloc.rate.norm: 984.021 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 1774.223 ns/op
                 ·gc.alloc.rate:      1057.428 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  1853.957 ±(99.9%) 172.078 ns/op [Average]
  (min, avg, max) = (1774.223, 1853.957, 1878.894), stdev = 44.688
  CI (99.9%): [1681.879, 2026.035] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  1012.217 ±(99.9%) 97.606 MB/sec [Average]
  (min, avg, max) = (997.801, 1012.217, 1057.428), stdev = 25.348
  CI (99.9%): [914.610, 1109.823] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  984.005 ±(99.9%) 0.035 B/op [Average]
  (min, avg, max) = (984.001, 984.005, 984.021), stdev = 0.009
  CI (99.9%): [983.970, 984.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  20.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
  CI (99.9%): [20.000, 20.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.)

# Run progress: 49.63% complete, ETA 00:35:35
# Fork: 1 of 1
# Warmup Iteration   1: 2940.150 ns/op
# Warmup Iteration   2: 1945.190 ns/op
# Warmup Iteration   3: 1894.813 ns/op
# Warmup Iteration   4: 1927.077 ns/op
# Warmup Iteration   5: 1866.985 ns/op
Iteration   1: 1865.406 ns/op
                 ·gc.alloc.rate:      1070.911 MB/sec
                 ·gc.alloc.rate.norm: 1048.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1866.109 ns/op
                 ·gc.alloc.rate:      1070.609 MB/sec
                 ·gc.alloc.rate.norm: 1048.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1871.712 ns/op
                 ·gc.alloc.rate:      1067.433 MB/sec
                 ·gc.alloc.rate.norm: 1048.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1866.111 ns/op
                 ·gc.alloc.rate:      1070.013 MB/sec
                 ·gc.alloc.rate.norm: 1048.021 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1763.477 ns/op
                 ·gc.alloc.rate:      1133.036 MB/sec
                 ·gc.alloc.rate.norm: 1048.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  1846.563 ±(99.9%) 179.117 ns/op [Average]
  (min, avg, max) = (1763.477, 1846.563, 1871.712), stdev = 46.516
  CI (99.9%): [1667.446, 2025.679] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  1082.400 ±(99.9%) 109.124 MB/sec [Average]
  (min, avg, max) = (1067.433, 1082.400, 1133.036), stdev = 28.339
  CI (99.9%): [973.276, 1191.524] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1048.005 ±(99.9%) 0.034 B/op [Average]
  (min, avg, max) = (1048.001, 1048.005, 1048.021), stdev = 0.009
  CI (99.9%): [1047.971, 1048.039] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  37.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
  CI (99.9%): [37.000, 37.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = a.200.200)

# Run progress: 49.88% complete, ETA 00:35:24
# Fork: 1 of 1
# Warmup Iteration   1: 3954.998 ns/op
# Warmup Iteration   2: 2440.903 ns/op
# Warmup Iteration   3: 2415.493 ns/op
# Warmup Iteration   4: 2362.531 ns/op
# Warmup Iteration   5: 2363.985 ns/op
Iteration   1: 2369.771 ns/op
                 ·gc.alloc.rate:      862.407 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2355.831 ns/op
                 ·gc.alloc.rate:      867.438 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2353.707 ns/op
                 ·gc.alloc.rate:      868.209 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2355.107 ns/op
                 ·gc.alloc.rate:      867.124 MB/sec
                 ·gc.alloc.rate.norm: 1072.026 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2260.960 ns/op
                 ·gc.alloc.rate:      903.949 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2339.075 ±(99.9%) 169.998 ns/op [Average]
  (min, avg, max) = (2260.960, 2339.075, 2369.771), stdev = 44.148
  CI (99.9%): [2169.078, 2509.073] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  873.825 ±(99.9%) 65.435 MB/sec [Average]
  (min, avg, max) = (862.407, 873.825, 903.949), stdev = 16.993
  CI (99.9%): [808.390, 939.260] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1072.006 ±(99.9%) 0.043 B/op [Average]
  (min, avg, max) = (1072.001, 1072.006, 1072.026), stdev = 0.011
  CI (99.9%): [1071.963, 1072.050] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.a.200)

# Run progress: 50.12% complete, ETA 00:35:14
# Fork: 1 of 1
# Warmup Iteration   1: 4165.834 ns/op
# Warmup Iteration   2: 2543.091 ns/op
# Warmup Iteration   3: 2449.259 ns/op
# Warmup Iteration   4: 2412.926 ns/op
# Warmup Iteration   5: 2400.411 ns/op
Iteration   1: 2403.958 ns/op
                 ·gc.alloc.rate:      862.839 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2402.594 ns/op
                 ·gc.alloc.rate:      863.373 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2459.290 ns/op
                 ·gc.alloc.rate:      843.528 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2402.849 ns/op
                 ·gc.alloc.rate:      862.592 MB/sec
                 ·gc.alloc.rate.norm: 1088.027 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2320.114 ns/op
                 ·gc.alloc.rate:      894.078 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2397.761 ±(99.9%) 191.592 ns/op [Average]
  (min, avg, max) = (2320.114, 2397.761, 2459.290), stdev = 49.756
  CI (99.9%): [2206.169, 2589.353] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  865.282 ±(99.9%) 69.931 MB/sec [Average]
  (min, avg, max) = (843.528, 865.282, 894.078), stdev = 18.161
  CI (99.9%): [795.351, 935.213] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1088.006 ±(99.9%) 0.044 B/op [Average]
  (min, avg, max) = (1088.001, 1088.006, 1088.027), stdev = 0.012
  CI (99.9%): [1087.962, 1088.051] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.a)

# Run progress: 50.37% complete, ETA 00:35:04
# Fork: 1 of 1
# Warmup Iteration   1: 4297.763 ns/op
# Warmup Iteration   2: 2533.462 ns/op
# Warmup Iteration   3: 2500.166 ns/op
# Warmup Iteration   4: 2460.008 ns/op
# Warmup Iteration   5: 2445.009 ns/op
Iteration   1: 2449.083 ns/op
                 ·gc.alloc.rate:      859.405 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2449.865 ns/op
                 ·gc.alloc.rate:      859.158 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2449.263 ns/op
                 ·gc.alloc.rate:      859.268 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2448.399 ns/op
                 ·gc.alloc.rate:      858.966 MB/sec
                 ·gc.alloc.rate.norm: 1104.027 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2348.349 ns/op
                 ·gc.alloc.rate:      896.333 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2428.992 ±(99.9%) 173.601 ns/op [Average]
  (min, avg, max) = (2348.349, 2428.992, 2449.865), stdev = 45.084
  CI (99.9%): [2255.391, 2602.593] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  866.626 ±(99.9%) 63.949 MB/sec [Average]
  (min, avg, max) = (858.966, 866.626, 896.333), stdev = 16.607
  CI (99.9%): [802.677, 930.575] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1104.006 ±(99.9%) 0.045 B/op [Average]
  (min, avg, max) = (1104.001, 1104.006, 1104.027), stdev = 0.012
  CI (99.9%): [1103.961, 1104.052] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.200.200)

# Run progress: 50.61% complete, ETA 00:34:53
# Fork: 1 of 1
# Warmup Iteration   1: 3226.555 ns/op
# Warmup Iteration   2: 2100.210 ns/op
# Warmup Iteration   3: 2056.805 ns/op
# Warmup Iteration   4: 1986.908 ns/op
# Warmup Iteration   5: 1990.907 ns/op
Iteration   1: 1986.851 ns/op
                 ·gc.alloc.rate:      1082.532 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1989.636 ns/op
                 ·gc.alloc.rate:      1080.670 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1987.615 ns/op
                 ·gc.alloc.rate:      1082.002 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1988.114 ns/op
                 ·gc.alloc.rate:      1081.057 MB/sec
                 ·gc.alloc.rate.norm: 1128.022 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1884.187 ns/op
                 ·gc.alloc.rate:      1141.304 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  1967.281 ±(99.9%) 178.908 ns/op [Average]
  (min, avg, max) = (1884.187, 1967.281, 1989.636), stdev = 46.462
  CI (99.9%): [1788.373, 2146.188] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  1093.513 ±(99.9%) 102.914 MB/sec [Average]
  (min, avg, max) = (1080.670, 1093.513, 1141.304), stdev = 26.726
  CI (99.9%): [990.599, 1196.427] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1128.005 ±(99.9%) 0.037 B/op [Average]
  (min, avg, max) = (1128.001, 1128.005, 1128.022), stdev = 0.010
  CI (99.9%): [1127.969, 1128.042] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.99999)

# Run progress: 50.86% complete, ETA 00:34:43
# Fork: 1 of 1
# Warmup Iteration   1: 3329.049 ns/op
# Warmup Iteration   2: 2196.069 ns/op
# Warmup Iteration   3: 2130.974 ns/op
# Warmup Iteration   4: 2084.944 ns/op
# Warmup Iteration   5: 2084.995 ns/op
Iteration   1: 2076.585 ns/op
                 ·gc.alloc.rate:      1123.677 MB/sec
                 ·gc.alloc.rate.norm: 1224.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2079.976 ns/op
                 ·gc.alloc.rate:      1121.720 MB/sec
                 ·gc.alloc.rate.norm: 1224.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2077.806 ns/op
                 ·gc.alloc.rate:      1123.060 MB/sec
                 ·gc.alloc.rate.norm: 1224.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2079.903 ns/op
                 ·gc.alloc.rate:      1121.164 MB/sec
                 ·gc.alloc.rate.norm: 1224.023 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1988.090 ns/op
                 ·gc.alloc.rate:      1173.691 MB/sec
                 ·gc.alloc.rate.norm: 1224.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2060.472 ±(99.9%) 155.907 ns/op [Average]
  (min, avg, max) = (1988.090, 2060.472, 2079.976), stdev = 40.489
  CI (99.9%): [1904.565, 2216.379] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  1132.663 ±(99.9%) 88.402 MB/sec [Average]
  (min, avg, max) = (1121.164, 1132.663, 1173.691), stdev = 22.958
  CI (99.9%): [1044.260, 1221.065] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1224.006 ±(99.9%) 0.038 B/op [Average]
  (min, avg, max) = (1224.001, 1224.006, 1224.023), stdev = 0.010
  CI (99.9%): [1223.967, 1224.044] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  39.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
  CI (99.9%): [39.000, 39.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.-200)

# Run progress: 51.10% complete, ETA 00:34:32
# Fork: 1 of 1
# Warmup Iteration   1: 3281.414 ns/op
# Warmup Iteration   2: 2062.622 ns/op
# Warmup Iteration   3: 2018.810 ns/op
# Warmup Iteration   4: 1994.887 ns/op
# Warmup Iteration   5: 2004.585 ns/op
Iteration   1: 1997.551 ns/op
                 ·gc.alloc.rate:      1145.302 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1994.677 ns/op
                 ·gc.alloc.rate:      1147.064 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1994.835 ns/op
                 ·gc.alloc.rate:      1146.859 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1995.021 ns/op
                 ·gc.alloc.rate:      1146.403 MB/sec
                 ·gc.alloc.rate.norm: 1200.022 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1873.305 ns/op
                 ·gc.alloc.rate:      1221.347 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  1971.078 ±(99.9%) 210.511 ns/op [Average]
  (min, avg, max) = (1873.305, 1971.078, 1997.551), stdev = 54.669
  CI (99.9%): [1760.566, 2181.589] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  1161.395 ±(99.9%) 129.077 MB/sec [Average]
  (min, avg, max) = (1145.302, 1161.395, 1221.347), stdev = 33.521
  CI (99.9%): [1032.318, 1290.472] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1200.005 ±(99.9%) 0.036 B/op [Average]
  (min, avg, max) = (1200.001, 1200.005, 1200.022), stdev = 0.009
  CI (99.9%): [1199.969, 1200.042] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  39.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
  CI (99.9%): [39.000, 39.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 1.0.0)

# Run progress: 51.34% complete, ETA 00:34:22
# Fork: 1 of 1
# Warmup Iteration   1: 345.441 ns/op
# Warmup Iteration   2: 219.338 ns/op
# Warmup Iteration   3: 209.701 ns/op
# Warmup Iteration   4: 209.473 ns/op
# Warmup Iteration   5: 208.972 ns/op
Iteration   1: 209.817 ns/op
                 ·gc.alloc.rate:      2980.329 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            9.000 ms

Iteration   2: 209.619 ns/op
                 ·gc.alloc.rate:      2983.079 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 209.330 ns/op
                 ·gc.alloc.rate:      2987.458 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 209.587 ns/op
                 ·gc.alloc.rate:      2982.199 MB/sec
                 ·gc.alloc.rate.norm: 328.002 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            8.000 ms

Iteration   5: 209.371 ns/op
                 ·gc.alloc.rate:      2986.928 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  209.545 ±(99.9%) 0.765 ns/op [Average]
  (min, avg, max) = (209.330, 209.545, 209.817), stdev = 0.199
  CI (99.9%): [208.780, 210.310] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  2983.999 ±(99.9%) 11.885 MB/sec [Average]
  (min, avg, max) = (2980.329, 2983.999, 2987.458), stdev = 3.086
  CI (99.9%): [2972.114, 2995.884] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  328.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (328.000, 328.001, 328.002), stdev = 0.001
  CI (99.9%): [327.997, 328.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  79.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.800, 16.000), stdev = 0.447
  CI (99.9%): [79.000, 79.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  38.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
  CI (99.9%): [38.000, 38.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.200)

# Run progress: 51.59% complete, ETA 00:34:12
# Fork: 1 of 1
# Warmup Iteration   1: 460.297 ns/op
# Warmup Iteration   2: 270.382 ns/op
# Warmup Iteration   3: 244.071 ns/op
# Warmup Iteration   4: 245.205 ns/op
# Warmup Iteration   5: 252.037 ns/op
Iteration   1: 244.632 ns/op
                 ·gc.alloc.rate:      4052.622 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   2: 245.107 ns/op
                 ·gc.alloc.rate:      4045.002 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            9.000 ms

Iteration   3: 245.171 ns/op
                 ·gc.alloc.rate:      4044.058 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 244.129 ns/op
                 ·gc.alloc.rate:      4058.306 MB/sec
                 ·gc.alloc.rate.norm: 520.003 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 243.747 ns/op
                 ·gc.alloc.rate:      4067.312 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            8.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  244.557 ±(99.9%) 2.378 ns/op [Average]
  (min, avg, max) = (243.747, 244.557, 245.171), stdev = 0.617
  CI (99.9%): [242.180, 246.935] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  4053.460 ±(99.9%) 37.333 MB/sec [Average]
  (min, avg, max) = (4044.058, 4053.460, 4067.312), stdev = 9.695
  CI (99.9%): [4016.127, 4090.793] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  520.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (520.000, 520.001, 520.003), stdev = 0.001
  CI (99.9%): [519.996, 520.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  103.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (20.000, 20.600, 21.000), stdev = 0.548
  CI (99.9%): [103.000, 103.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  44.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 51.83% complete, ETA 00:34:01
# Fork: 1 of 1
# Warmup Iteration   1: 567.072 ns/op
# Warmup Iteration   2: 296.646 ns/op
# Warmup Iteration   3: 282.550 ns/op
# Warmup Iteration   4: 282.809 ns/op
# Warmup Iteration   5: 283.246 ns/op
Iteration   1: 284.067 ns/op
                 ·gc.alloc.rate:      3490.130 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            29.000 ms

Iteration   2: 284.363 ns/op
                 ·gc.alloc.rate:      3486.099 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            31.000 ms

Iteration   3: 281.777 ns/op
                 ·gc.alloc.rate:      3518.078 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            22.000 ms

Iteration   4: 283.082 ns/op
                 ·gc.alloc.rate:      3500.373 MB/sec
                 ·gc.alloc.rate.norm: 520.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            26.000 ms

Iteration   5: 281.732 ns/op
                 ·gc.alloc.rate:      3518.733 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            22.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  283.004 ±(99.9%) 4.758 ns/op [Average]
  (min, avg, max) = (281.732, 283.004, 284.363), stdev = 1.236
  CI (99.9%): [278.246, 287.762] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  3502.683 ±(99.9%) 58.795 MB/sec [Average]
  (min, avg, max) = (3486.099, 3502.683, 3518.733), stdev = 15.269
  CI (99.9%): [3443.888, 3561.478] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  520.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (520.000, 520.001, 520.003), stdev = 0.001
  CI (99.9%): [519.996, 520.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  78.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.600, 16.000), stdev = 0.548
  CI (99.9%): [78.000, 78.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  130.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (22.000, 26.000, 31.000), stdev = 4.062
  CI (99.9%): [130.000, 130.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 52.08% complete, ETA 00:33:51
# Fork: 1 of 1
# Warmup Iteration   1: 534.344 ns/op
# Warmup Iteration   2: 310.602 ns/op
# Warmup Iteration   3: 279.555 ns/op
# Warmup Iteration   4: 277.145 ns/op
# Warmup Iteration   5: 279.426 ns/op
Iteration   1: 274.739 ns/op
                 ·gc.alloc.rate:      3608.542 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            21.000 ms

Iteration   2: 276.759 ns/op
                 ·gc.alloc.rate:      3582.024 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            27.000 ms

Iteration   3: 278.983 ns/op
                 ·gc.alloc.rate:      3553.358 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            32.000 ms

Iteration   4: 274.293 ns/op
                 ·gc.alloc.rate:      3611.924 MB/sec
                 ·gc.alloc.rate.norm: 520.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            18.000 ms

Iteration   5: 284.041 ns/op
                 ·gc.alloc.rate:      3490.981 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            19.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  277.763 ±(99.9%) 15.293 ns/op [Average]
  (min, avg, max) = (274.293, 277.763, 284.041), stdev = 3.972
  CI (99.9%): [262.470, 293.056] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  3569.366 ±(99.9%) 191.631 MB/sec [Average]
  (min, avg, max) = (3490.981, 3569.366, 3611.924), stdev = 49.766
  CI (99.9%): [3377.734, 3760.997] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  520.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (520.000, 520.001, 520.003), stdev = 0.001
  CI (99.9%): [519.996, 520.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  81.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.200, 17.000), stdev = 0.447
  CI (99.9%): [81.000, 81.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  117.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 23.400, 32.000), stdev = 5.941
  CI (99.9%): [117.000, 117.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = )

# Run progress: 52.32% complete, ETA 00:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 7.275 ns/op
# Warmup Iteration   2: 6.289 ns/op
# Warmup Iteration   3: 6.503 ns/op
# Warmup Iteration   4: 5.325 ns/op
# Warmup Iteration   5: 5.327 ns/op
Iteration   1: 5.331 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.329 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.327 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.329 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.328 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  5.329 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (5.327, 5.329, 5.331), stdev = 0.002
  CI (99.9%): [5.323, 5.335] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200)

# Run progress: 52.57% complete, ETA 00:33:30
# Fork: 1 of 1
# Warmup Iteration   1: 11.494 ns/op
# Warmup Iteration   2: 8.413 ns/op
# Warmup Iteration   3: 8.220 ns/op
# Warmup Iteration   4: 8.183 ns/op
# Warmup Iteration   5: 8.197 ns/op
Iteration   1: 8.165 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.114 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.192 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.125 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.196 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  8.158 ±(99.9%) 0.145 ns/op [Average]
  (min, avg, max) = (8.114, 8.158, 8.196), stdev = 0.038
  CI (99.9%): [8.014, 8.303] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.)

# Run progress: 52.81% complete, ETA 00:33:20
# Fork: 1 of 1
# Warmup Iteration   1: 14.601 ns/op
# Warmup Iteration   2: 9.809 ns/op
# Warmup Iteration   3: 9.027 ns/op
# Warmup Iteration   4: 8.970 ns/op
# Warmup Iteration   5: 8.983 ns/op
Iteration   1: 8.947 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.973 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.987 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.009 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.006 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  8.984 ±(99.9%) 0.098 ns/op [Average]
  (min, avg, max) = (8.947, 8.984, 9.009), stdev = 0.025
  CI (99.9%): [8.887, 9.082] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200)

# Run progress: 53.06% complete, ETA 00:33:09
# Fork: 1 of 1
# Warmup Iteration   1: 17.591 ns/op
# Warmup Iteration   2: 13.298 ns/op
# Warmup Iteration   3: 12.790 ns/op
# Warmup Iteration   4: 12.494 ns/op
# Warmup Iteration   5: 12.472 ns/op
Iteration   1: 12.501 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12.456 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12.465 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.471 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12.485 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  12.476 ±(99.9%) 0.068 ns/op [Average]
  (min, avg, max) = (12.456, 12.476, 12.501), stdev = 0.018
  CI (99.9%): [12.408, 12.544] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.)

# Run progress: 53.30% complete, ETA 00:32:59
# Fork: 1 of 1
# Warmup Iteration   1: 40.336 ns/op
# Warmup Iteration   2: 30.479 ns/op
# Warmup Iteration   3: 29.398 ns/op
# Warmup Iteration   4: 30.765 ns/op
# Warmup Iteration   5: 29.424 ns/op
Iteration   1: 29.360 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.359 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.484 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.384 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.442 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  29.406 ±(99.9%) 0.213 ns/op [Average]
  (min, avg, max) = (29.359, 29.406, 29.484), stdev = 0.055
  CI (99.9%): [29.193, 29.619] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = a.200.200)

# Run progress: 53.55% complete, ETA 00:32:49
# Fork: 1 of 1
# Warmup Iteration   1: 25.093 ns/op
# Warmup Iteration   2: 19.889 ns/op
# Warmup Iteration   3: 18.529 ns/op
# Warmup Iteration   4: 18.481 ns/op
# Warmup Iteration   5: 18.482 ns/op
Iteration   1: 18.511 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.472 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.886 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.571 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.489 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  18.586 ±(99.9%) 0.661 ns/op [Average]
  (min, avg, max) = (18.472, 18.586, 18.886), stdev = 0.172
  CI (99.9%): [17.925, 19.247] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.a.200)

# Run progress: 53.79% complete, ETA 00:32:38
# Fork: 1 of 1
# Warmup Iteration   1: 36.229 ns/op
# Warmup Iteration   2: 29.015 ns/op
# Warmup Iteration   3: 25.256 ns/op
# Warmup Iteration   4: 25.220 ns/op
# Warmup Iteration   5: 25.245 ns/op
Iteration   1: 25.287 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 25.274 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 25.260 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 25.334 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 25.315 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  25.294 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (25.260, 25.294, 25.334), stdev = 0.030
  CI (99.9%): [25.178, 25.410] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.a)

# Run progress: 54.03% complete, ETA 00:32:28
# Fork: 1 of 1
# Warmup Iteration   1: 41.786 ns/op
# Warmup Iteration   2: 35.525 ns/op
# Warmup Iteration   3: 33.148 ns/op
# Warmup Iteration   4: 33.087 ns/op
# Warmup Iteration   5: 33.150 ns/op
Iteration   1: 33.103 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 33.059 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 33.084 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.152 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 33.290 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  33.137 ±(99.9%) 0.353 ns/op [Average]
  (min, avg, max) = (33.059, 33.137, 33.290), stdev = 0.092
  CI (99.9%): [32.784, 33.491] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.200.200)

# Run progress: 54.28% complete, ETA 00:32:18
# Fork: 1 of 1
# Warmup Iteration   1: 26.033 ns/op
# Warmup Iteration   2: 19.929 ns/op
# Warmup Iteration   3: 19.150 ns/op
# Warmup Iteration   4: 19.083 ns/op
# Warmup Iteration   5: 19.129 ns/op
Iteration   1: 19.091 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.095 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.062 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.074 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.121 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  19.089 ±(99.9%) 0.087 ns/op [Average]
  (min, avg, max) = (19.062, 19.089, 19.121), stdev = 0.023
  CI (99.9%): [19.001, 19.176] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.99999)

# Run progress: 54.52% complete, ETA 00:32:07
# Fork: 1 of 1
# Warmup Iteration   1: 222.206 ns/op
# Warmup Iteration   2: 148.770 ns/op
# Warmup Iteration   3: 135.465 ns/op
# Warmup Iteration   4: 135.271 ns/op
# Warmup Iteration   5: 135.858 ns/op
Iteration   1: 135.806 ns/op
                 ·gc.alloc.rate:      1684.614 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 135.688 ns/op
                 ·gc.alloc.rate:      1686.178 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 135.594 ns/op
                 ·gc.alloc.rate:      1687.002 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 135.424 ns/op
                 ·gc.alloc.rate:      1688.362 MB/sec
                 ·gc.alloc.rate.norm: 120.002 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 135.291 ns/op
                 ·gc.alloc.rate:      1691.157 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  135.561 ±(99.9%) 0.791 ns/op [Average]
  (min, avg, max) = (135.291, 135.561, 135.806), stdev = 0.205
  CI (99.9%): [134.770, 136.351] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  1687.463 ±(99.9%) 9.516 MB/sec [Average]
  (min, avg, max) = (1684.614, 1687.463, 1691.157), stdev = 2.471
  CI (99.9%): [1677.947, 1696.979] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  120.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (120.000, 120.000, 120.002), stdev = 0.001
  CI (99.9%): [119.998, 120.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  51.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
  CI (99.9%): [51.000, 51.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.-200)

# Run progress: 54.77% complete, ETA 00:31:57
# Fork: 1 of 1
# Warmup Iteration   1: 43.711 ns/op
# Warmup Iteration   2: 36.315 ns/op
# Warmup Iteration   3: 35.419 ns/op
# Warmup Iteration   4: 35.338 ns/op
# Warmup Iteration   5: 35.490 ns/op
Iteration   1: 35.467 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 35.503 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 35.235 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 35.353 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 35.267 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  35.365 ±(99.9%) 0.456 ns/op [Average]
  (min, avg, max) = (35.235, 35.365, 35.503), stdev = 0.118
  CI (99.9%): [34.909, 35.821] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 1.0.0)

# Run progress: 55.01% complete, ETA 00:31:46
# Fork: 1 of 1
# Warmup Iteration   1: 139.172 ns/op
# Warmup Iteration   2: 103.147 ns/op
# Warmup Iteration   3: 95.260 ns/op
# Warmup Iteration   4: 95.027 ns/op
# Warmup Iteration   5: 95.057 ns/op
Iteration   1: 96.918 ns/op
                 ·gc.alloc.rate:      2360.719 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   2: 95.014 ns/op
                 ·gc.alloc.rate:      2407.433 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 94.948 ns/op
                 ·gc.alloc.rate:      2409.593 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 97.509 ns/op
                 ·gc.alloc.rate:      2344.216 MB/sec
                 ·gc.alloc.rate.norm: 120.001 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 95.859 ns/op
                 ·gc.alloc.rate:      2386.651 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  96.050 ±(99.9%) 4.393 ns/op [Average]
  (min, avg, max) = (94.948, 96.050, 97.509), stdev = 1.141
  CI (99.9%): [91.657, 100.442] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  2381.722 ±(99.9%) 110.768 MB/sec [Average]
  (min, avg, max) = (2344.216, 2381.722, 2409.593), stdev = 28.766
  CI (99.9%): [2270.954, 2492.491] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  120.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (120.000, 120.000, 120.001), stdev = 0.001
  CI (99.9%): [119.998, 120.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  71.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 14.200, 15.000), stdev = 0.447
  CI (99.9%): [71.000, 71.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.time":
  31.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.200)

# Run progress: 55.26% complete, ETA 00:31:36
# Fork: 1 of 1
# Warmup Iteration   1: 206.112 ns/op
# Warmup Iteration   2: 140.468 ns/op
# Warmup Iteration   3: 129.162 ns/op
# Warmup Iteration   4: 129.125 ns/op
# Warmup Iteration   5: 129.402 ns/op
Iteration   1: 129.233 ns/op
                 ·gc.alloc.rate:      1770.342 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 129.131 ns/op
                 ·gc.alloc.rate:      1771.680 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 129.581 ns/op
                 ·gc.alloc.rate:      1765.559 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 129.485 ns/op
                 ·gc.alloc.rate:      1766.072 MB/sec
                 ·gc.alloc.rate.norm: 120.001 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 129.506 ns/op
                 ·gc.alloc.rate:      1766.838 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  129.387 ±(99.9%) 0.747 ns/op [Average]
  (min, avg, max) = (129.131, 129.387, 129.581), stdev = 0.194
  CI (99.9%): [128.640, 130.134] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  1768.098 ±(99.9%) 10.546 MB/sec [Average]
  (min, avg, max) = (1765.559, 1768.098, 1771.680), stdev = 2.739
  CI (99.9%): [1757.552, 1778.644] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  120.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (120.000, 120.000, 120.001), stdev = 0.001
  CI (99.9%): [119.998, 120.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  53.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
  CI (99.9%): [53.000, 53.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 55.50% complete, ETA 00:31:26
# Fork: 1 of 1
# Warmup Iteration   1: 224.638 ns/op
# Warmup Iteration   2: 147.734 ns/op
# Warmup Iteration   3: 136.928 ns/op
# Warmup Iteration   4: 136.651 ns/op
# Warmup Iteration   5: 136.607 ns/op
Iteration   1: 136.656 ns/op
                 ·gc.alloc.rate:      1674.046 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 137.441 ns/op
                 ·gc.alloc.rate:      1664.721 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 136.637 ns/op
                 ·gc.alloc.rate:      1674.467 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 140.980 ns/op
                 ·gc.alloc.rate:      1621.737 MB/sec
                 ·gc.alloc.rate.norm: 120.002 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 136.932 ns/op
                 ·gc.alloc.rate:      1670.927 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  137.729 ±(99.9%) 7.108 ns/op [Average]
  (min, avg, max) = (136.637, 137.729, 140.980), stdev = 1.846
  CI (99.9%): [130.621, 144.838] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  1661.180 ±(99.9%) 86.219 MB/sec [Average]
  (min, avg, max) = (1621.737, 1661.180, 1674.467), stdev = 22.391
  CI (99.9%): [1574.961, 1747.398] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  120.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (120.000, 120.000, 120.002), stdev = 0.001
  CI (99.9%): [119.998, 120.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  50.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
  CI (99.9%): [50.000, 50.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.time":
  20.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
  CI (99.9%): [20.000, 20.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 55.75% complete, ETA 00:31:15
# Fork: 1 of 1
# Warmup Iteration   1: 234.496 ns/op
# Warmup Iteration   2: 157.318 ns/op
# Warmup Iteration   3: 148.256 ns/op
# Warmup Iteration   4: 146.825 ns/op
# Warmup Iteration   5: 147.115 ns/op
Iteration   1: 146.956 ns/op
                 ·gc.alloc.rate:      1556.903 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 147.072 ns/op
                 ·gc.alloc.rate:      1555.532 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 146.796 ns/op
                 ·gc.alloc.rate:      1558.450 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 150.742 ns/op
                 ·gc.alloc.rate:      1516.682 MB/sec
                 ·gc.alloc.rate.norm: 120.002 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 147.287 ns/op
                 ·gc.alloc.rate:      1553.322 MB/sec
                 ·gc.alloc.rate.norm: 120.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  147.770 ±(99.9%) 6.433 ns/op [Average]
  (min, avg, max) = (146.796, 147.770, 150.742), stdev = 1.671
  CI (99.9%): [141.338, 154.203] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  1548.178 ±(99.9%) 68.183 MB/sec [Average]
  (min, avg, max) = (1516.682, 1548.178, 1558.450), stdev = 17.707
  CI (99.9%): [1479.995, 1616.361] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  120.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (120.000, 120.000, 120.002), stdev = 0.001
  CI (99.9%): [119.998, 120.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  42.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
  CI (99.9%): [42.000, 42.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = )

# Run progress: 55.99% complete, ETA 00:31:05
# Fork: 1 of 1
# Warmup Iteration   1: 7.086 ns/op
# Warmup Iteration   2: 6.258 ns/op
# Warmup Iteration   3: 5.322 ns/op
# Warmup Iteration   4: 5.323 ns/op
# Warmup Iteration   5: 5.325 ns/op
Iteration   1: 5.324 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.323 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.326 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.326 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.330 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  5.326 ±(99.9%) 0.010 ns/op [Average]
  (min, avg, max) = (5.323, 5.326, 5.330), stdev = 0.003
  CI (99.9%): [5.316, 5.336] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200)

# Run progress: 56.23% complete, ETA 00:30:55
# Fork: 1 of 1
# Warmup Iteration   1: 10.890 ns/op
# Warmup Iteration   2: 8.395 ns/op
# Warmup Iteration   3: 8.370 ns/op
# Warmup Iteration   4: 8.386 ns/op
# Warmup Iteration   5: 8.389 ns/op
Iteration   1: 8.431 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.407 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.387 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.433 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.363 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  8.404 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (8.363, 8.404, 8.433), stdev = 0.030
  CI (99.9%): [8.289, 8.519] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.)

# Run progress: 56.48% complete, ETA 00:30:44
# Fork: 1 of 1
# Warmup Iteration   1: 13.876 ns/op
# Warmup Iteration   2: 9.788 ns/op
# Warmup Iteration   3: 8.989 ns/op
# Warmup Iteration   4: 9.301 ns/op
# Warmup Iteration   5: 8.988 ns/op
Iteration   1: 8.959 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.992 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.969 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.985 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.989 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  8.979 ±(99.9%) 0.055 ns/op [Average]
  (min, avg, max) = (8.959, 8.979, 8.992), stdev = 0.014
  CI (99.9%): [8.924, 9.034] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200)

# Run progress: 56.72% complete, ETA 00:30:34
# Fork: 1 of 1
# Warmup Iteration   1: 17.425 ns/op
# Warmup Iteration   2: 13.167 ns/op
# Warmup Iteration   3: 12.476 ns/op
# Warmup Iteration   4: 12.482 ns/op
# Warmup Iteration   5: 12.516 ns/op
Iteration   1: 12.474 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12.456 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12.457 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.481 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12.581 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  12.490 ±(99.9%) 0.200 ns/op [Average]
  (min, avg, max) = (12.456, 12.490, 12.581), stdev = 0.052
  CI (99.9%): [12.290, 12.689] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.)

# Run progress: 56.97% complete, ETA 00:30:23
# Fork: 1 of 1
# Warmup Iteration   1: 40.438 ns/op
# Warmup Iteration   2: 30.766 ns/op
# Warmup Iteration   3: 28.933 ns/op
# Warmup Iteration   4: 28.957 ns/op
# Warmup Iteration   5: 28.971 ns/op
Iteration   1: 28.942 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 28.988 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 28.944 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 28.937 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 28.947 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  28.951 ±(99.9%) 0.079 ns/op [Average]
  (min, avg, max) = (28.937, 28.951, 28.988), stdev = 0.021
  CI (99.9%): [28.873, 29.030] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = a.200.200)

# Run progress: 57.21% complete, ETA 00:30:13
# Fork: 1 of 1
# Warmup Iteration   1: 26.242 ns/op
# Warmup Iteration   2: 20.132 ns/op
# Warmup Iteration   3: 19.849 ns/op
# Warmup Iteration   4: 19.826 ns/op
# Warmup Iteration   5: 19.822 ns/op
Iteration   1: 19.796 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 20.123 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.940 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.824 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.819 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  19.900 ±(99.9%) 0.526 ns/op [Average]
  (min, avg, max) = (19.796, 19.900, 20.123), stdev = 0.137
  CI (99.9%): [19.374, 20.427] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.a.200)

# Run progress: 57.46% complete, ETA 00:30:03
# Fork: 1 of 1
# Warmup Iteration   1: 38.584 ns/op
# Warmup Iteration   2: 29.924 ns/op
# Warmup Iteration   3: 27.065 ns/op
# Warmup Iteration   4: 27.113 ns/op
# Warmup Iteration   5: 27.096 ns/op
Iteration   1: 28.857 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.066 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.207 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.096 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.806 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  27.607 ±(99.9%) 2.930 ns/op [Average]
  (min, avg, max) = (27.066, 27.607, 28.857), stdev = 0.761
  CI (99.9%): [24.676, 30.537] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.a)

# Run progress: 57.70% complete, ETA 00:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 41.866 ns/op
# Warmup Iteration   2: 34.324 ns/op
# Warmup Iteration   3: 32.758 ns/op
# Warmup Iteration   4: 32.833 ns/op
# Warmup Iteration   5: 32.800 ns/op
Iteration   1: 32.839 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.827 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.819 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.885 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.831 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  32.840 ±(99.9%) 0.100 ns/op [Average]
  (min, avg, max) = (32.819, 32.840, 32.885), stdev = 0.026
  CI (99.9%): [32.740, 32.940] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.200.200)

# Run progress: 57.95% complete, ETA 00:29:42
# Fork: 1 of 1
# Warmup Iteration   1: 25.959 ns/op
# Warmup Iteration   2: 20.265 ns/op
# Warmup Iteration   3: 19.134 ns/op
# Warmup Iteration   4: 19.091 ns/op
# Warmup Iteration   5: 19.067 ns/op
Iteration   1: 19.067 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.068 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.053 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.046 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.120 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  19.071 ±(99.9%) 0.112 ns/op [Average]
  (min, avg, max) = (19.046, 19.071, 19.120), stdev = 0.029
  CI (99.9%): [18.959, 19.182] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.99999)

# Run progress: 58.19% complete, ETA 00:29:32
# Fork: 1 of 1
# Warmup Iteration   1: 114.767 ns/op
# Warmup Iteration   2: 83.903 ns/op
# Warmup Iteration   3: 80.591 ns/op
# Warmup Iteration   4: 80.505 ns/op
# Warmup Iteration   5: 80.610 ns/op
Iteration   1: 80.526 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 80.597 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 80.646 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 80.518 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 80.488 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  80.555 ±(99.9%) 0.250 ns/op [Average]
  (min, avg, max) = (80.488, 80.555, 80.646), stdev = 0.065
  CI (99.9%): [80.305, 80.805] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.-200)

# Run progress: 58.44% complete, ETA 00:29:21
# Fork: 1 of 1
# Warmup Iteration   1: 46.320 ns/op
# Warmup Iteration   2: 36.065 ns/op
# Warmup Iteration   3: 34.815 ns/op
# Warmup Iteration   4: 34.792 ns/op
# Warmup Iteration   5: 34.874 ns/op
Iteration   1: 34.870 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 35.075 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 34.813 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 34.835 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 34.832 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  34.885 ±(99.9%) 0.417 ns/op [Average]
  (min, avg, max) = (34.813, 34.885, 35.075), stdev = 0.108
  CI (99.9%): [34.468, 35.302] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 1.0.0)

# Run progress: 58.68% complete, ETA 00:29:11
# Fork: 1 of 1
# Warmup Iteration   1: 60.140 ns/op
# Warmup Iteration   2: 49.954 ns/op
# Warmup Iteration   3: 47.747 ns/op
# Warmup Iteration   4: 47.751 ns/op
# Warmup Iteration   5: 48.807 ns/op
Iteration   1: 47.682 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 47.639 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 47.631 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 47.756 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 47.664 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  47.674 ±(99.9%) 0.192 ns/op [Average]
  (min, avg, max) = (47.631, 47.674, 47.756), stdev = 0.050
  CI (99.9%): [47.483, 47.866] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.200)

# Run progress: 58.92% complete, ETA 00:29:00
# Fork: 1 of 1
# Warmup Iteration   1: 95.594 ns/op
# Warmup Iteration   2: 77.070 ns/op
# Warmup Iteration   3: 74.724 ns/op
# Warmup Iteration   4: 74.814 ns/op
# Warmup Iteration   5: 74.739 ns/op
Iteration   1: 74.803 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 74.652 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 74.911 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 74.576 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 74.602 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  74.709 ±(99.9%) 0.551 ns/op [Average]
  (min, avg, max) = (74.576, 74.709, 74.911), stdev = 0.143
  CI (99.9%): [74.158, 75.260] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 59.17% complete, ETA 00:28:50
# Fork: 1 of 1
# Warmup Iteration   1: 121.196 ns/op
# Warmup Iteration   2: 87.230 ns/op
# Warmup Iteration   3: 85.655 ns/op
# Warmup Iteration   4: 85.494 ns/op
# Warmup Iteration   5: 85.469 ns/op
Iteration   1: 85.526 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 85.446 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 85.432 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 85.479 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 87.577 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  85.892 ±(99.9%) 3.629 ns/op [Average]
  (min, avg, max) = (85.432, 85.892, 87.577), stdev = 0.942
  CI (99.9%): [82.263, 89.521] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 59.41% complete, ETA 00:28:40
# Fork: 1 of 1
# Warmup Iteration   1: 122.785 ns/op
# Warmup Iteration   2: 99.280 ns/op
# Warmup Iteration   3: 97.403 ns/op
# Warmup Iteration   4: 97.215 ns/op
# Warmup Iteration   5: 97.259 ns/op
Iteration   1: 97.269 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 97.202 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 97.274 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 97.181 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 97.150 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  97.215 ±(99.9%) 0.211 ns/op [Average]
  (min, avg, max) = (97.150, 97.215, 97.274), stdev = 0.055
  CI (99.9%): [97.004, 97.426] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = )

# Run progress: 59.66% complete, ETA 00:28:29
# Fork: 1 of 1
# Warmup Iteration   1: 6.945 ns/op
# Warmup Iteration   2: 6.352 ns/op
# Warmup Iteration   3: 5.326 ns/op
# Warmup Iteration   4: 5.328 ns/op
# Warmup Iteration   5: 5.333 ns/op
Iteration   1: 5.337 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.329 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.325 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.329 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.323 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  5.329 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (5.323, 5.329, 5.337), stdev = 0.006
  CI (99.9%): [5.307, 5.350] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200)

# Run progress: 59.90% complete, ETA 00:28:19
# Fork: 1 of 1
# Warmup Iteration   1: 13.983 ns/op
# Warmup Iteration   2: 12.339 ns/op
# Warmup Iteration   3: 11.864 ns/op
# Warmup Iteration   4: 11.839 ns/op
# Warmup Iteration   5: 11.854 ns/op
Iteration   1: 11.888 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.861 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.853 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.482 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.847 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  11.986 ±(99.9%) 1.069 ns/op [Average]
  (min, avg, max) = (11.847, 11.986, 12.482), stdev = 0.278
  CI (99.9%): [10.918, 13.055] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.)

# Run progress: 60.15% complete, ETA 00:28:09
# Fork: 1 of 1
# Warmup Iteration   1: 35.898 ns/op
# Warmup Iteration   2: 31.394 ns/op
# Warmup Iteration   3: 31.326 ns/op
# Warmup Iteration   4: 30.341 ns/op
# Warmup Iteration   5: 30.410 ns/op
Iteration   1: 30.397 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 30.300 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 30.351 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 30.347 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 30.354 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  30.350 ±(99.9%) 0.133 ns/op [Average]
  (min, avg, max) = (30.300, 30.350, 30.397), stdev = 0.035
  CI (99.9%): [30.217, 30.483] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200)

# Run progress: 60.39% complete, ETA 00:27:58
# Fork: 1 of 1
# Warmup Iteration   1: 41.445 ns/op
# Warmup Iteration   2: 36.004 ns/op
# Warmup Iteration   3: 41.314 ns/op
# Warmup Iteration   4: 41.304 ns/op
# Warmup Iteration   5: 41.292 ns/op
Iteration   1: 41.308 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 41.282 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 41.303 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 41.314 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 41.299 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  41.301 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (41.282, 41.301, 41.314), stdev = 0.012
  CI (99.9%): [41.255, 41.348] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.)

# Run progress: 60.64% complete, ETA 00:27:48
# Fork: 1 of 1
# Warmup Iteration   1: 67.457 ns/op
# Warmup Iteration   2: 51.871 ns/op
# Warmup Iteration   3: 49.724 ns/op
# Warmup Iteration   4: 49.727 ns/op
# Warmup Iteration   5: 49.794 ns/op
Iteration   1: 49.747 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 49.709 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 50.701 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 49.648 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 49.786 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  49.918 ±(99.9%) 1.697 ns/op [Average]
  (min, avg, max) = (49.648, 49.918, 50.701), stdev = 0.441
  CI (99.9%): [48.222, 51.615] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = a.200.200)

# Run progress: 60.88% complete, ETA 00:27:37
# Fork: 1 of 1
# Warmup Iteration   1: 8.141 ns/op
# Warmup Iteration   2: 6.222 ns/op
# Warmup Iteration   3: 5.743 ns/op
# Warmup Iteration   4: 5.747 ns/op
# Warmup Iteration   5: 5.752 ns/op
Iteration   1: 5.752 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.752 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.747 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.744 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.747 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  5.748 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (5.744, 5.748, 5.752), stdev = 0.004
  CI (99.9%): [5.734, 5.762] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.a.200)

# Run progress: 61.12% complete, ETA 00:27:27
# Fork: 1 of 1
# Warmup Iteration   1: 37.274 ns/op
# Warmup Iteration   2: 32.076 ns/op
# Warmup Iteration   3: 31.463 ns/op
# Warmup Iteration   4: 31.467 ns/op
# Warmup Iteration   5: 31.489 ns/op
Iteration   1: 31.428 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.488 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.507 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31.483 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.520 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  31.485 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (31.428, 31.485, 31.520), stdev = 0.035
  CI (99.9%): [31.350, 31.621] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.a)

# Run progress: 61.37% complete, ETA 00:27:17
# Fork: 1 of 1
# Warmup Iteration   1: 78.785 ns/op
# Warmup Iteration   2: 61.775 ns/op
# Warmup Iteration   3: 59.812 ns/op
# Warmup Iteration   4: 59.864 ns/op
# Warmup Iteration   5: 59.939 ns/op
Iteration   1: 59.865 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 59.854 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 59.842 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 59.835 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 59.884 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  59.856 ±(99.9%) 0.075 ns/op [Average]
  (min, avg, max) = (59.835, 59.856, 59.884), stdev = 0.019
  CI (99.9%): [59.781, 59.931] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.200.200)

# Run progress: 61.61% complete, ETA 00:27:06
# Fork: 1 of 1
# Warmup Iteration   1: 82.103 ns/op
# Warmup Iteration   2: 63.097 ns/op
# Warmup Iteration   3: 60.753 ns/op
# Warmup Iteration   4: 60.056 ns/op
# Warmup Iteration   5: 60.301 ns/op
Iteration   1: 61.102 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 61.262 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 61.352 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 60.483 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 60.304 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  60.900 ±(99.9%) 1.832 ns/op [Average]
  (min, avg, max) = (60.304, 60.900, 61.352), stdev = 0.476
  CI (99.9%): [59.068, 62.733] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.99999)

# Run progress: 61.86% complete, ETA 00:26:56
# Fork: 1 of 1
# Warmup Iteration   1: 117.600 ns/op
# Warmup Iteration   2: 88.546 ns/op
# Warmup Iteration   3: 85.475 ns/op
# Warmup Iteration   4: 85.445 ns/op
# Warmup Iteration   5: 85.528 ns/op
Iteration   1: 85.869 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 85.504 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 85.563 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 85.515 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 85.595 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  85.609 ±(99.9%) 0.576 ns/op [Average]
  (min, avg, max) = (85.504, 85.609, 85.869), stdev = 0.150
  CI (99.9%): [85.033, 86.185] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.-200)

# Run progress: 62.10% complete, ETA 00:26:46
# Fork: 1 of 1
# Warmup Iteration   1: 81.353 ns/op
# Warmup Iteration   2: 69.554 ns/op
# Warmup Iteration   3: 67.440 ns/op
# Warmup Iteration   4: 67.414 ns/op
# Warmup Iteration   5: 67.413 ns/op
Iteration   1: 68.871 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 67.406 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 67.361 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 67.395 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 67.392 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  67.685 ±(99.9%) 2.554 ns/op [Average]
  (min, avg, max) = (67.361, 67.685, 68.871), stdev = 0.663
  CI (99.9%): [65.131, 70.239] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 1.0.0)

# Run progress: 62.35% complete, ETA 00:26:35
# Fork: 1 of 1
# Warmup Iteration   1: 50.370 ns/op
# Warmup Iteration   2: 44.097 ns/op
# Warmup Iteration   3: 42.185 ns/op
# Warmup Iteration   4: 42.020 ns/op
# Warmup Iteration   5: 42.181 ns/op
Iteration   1: 42.206 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 42.139 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 42.146 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 44.070 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 42.056 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  42.524 ±(99.9%) 3.336 ns/op [Average]
  (min, avg, max) = (42.056, 42.524, 44.070), stdev = 0.866
  CI (99.9%): [39.187, 45.860] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.200)

# Run progress: 62.59% complete, ETA 00:26:25
# Fork: 1 of 1
# Warmup Iteration   1: 97.437 ns/op
# Warmup Iteration   2: 78.967 ns/op
# Warmup Iteration   3: 76.350 ns/op
# Warmup Iteration   4: 76.355 ns/op
# Warmup Iteration   5: 76.424 ns/op
Iteration   1: 76.384 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76.359 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76.392 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76.478 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76.530 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  76.429 ±(99.9%) 0.278 ns/op [Average]
  (min, avg, max) = (76.359, 76.429, 76.530), stdev = 0.072
  CI (99.9%): [76.150, 76.707] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 62.84% complete, ETA 00:26:14
# Fork: 1 of 1
# Warmup Iteration   1: 124.774 ns/op
# Warmup Iteration   2: 93.033 ns/op
# Warmup Iteration   3: 93.280 ns/op
# Warmup Iteration   4: 90.110 ns/op
# Warmup Iteration   5: 90.125 ns/op
Iteration   1: 90.095 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 90.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 90.075 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 91.674 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 90.083 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  90.400 ±(99.9%) 2.743 ns/op [Average]
  (min, avg, max) = (90.071, 90.400, 91.674), stdev = 0.712
  CI (99.9%): [87.656, 93.143] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 63.08% complete, ETA 00:26:04
# Fork: 1 of 1
# Warmup Iteration   1: 146.322 ns/op
# Warmup Iteration   2: 105.513 ns/op
# Warmup Iteration   3: 102.251 ns/op
# Warmup Iteration   4: 102.196 ns/op
# Warmup Iteration   5: 102.177 ns/op
Iteration   1: 102.163 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 102.134 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 102.132 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 102.137 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 102.417 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  102.196 ±(99.9%) 0.477 ns/op [Average]
  (min, avg, max) = (102.132, 102.196, 102.417), stdev = 0.124
  CI (99.9%): [101.720, 102.673] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = )

# Run progress: 63.33% complete, ETA 00:25:54
# Fork: 1 of 1
# Warmup Iteration   1: 7.649 ns/op
# Warmup Iteration   2: 6.340 ns/op
# Warmup Iteration   3: 5.324 ns/op
# Warmup Iteration   4: 5.340 ns/op
# Warmup Iteration   5: 5.336 ns/op
Iteration   1: 5.327 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.330 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.330 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.327 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.326 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  5.328 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (5.326, 5.328, 5.330), stdev = 0.002
  CI (99.9%): [5.321, 5.335] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200)

# Run progress: 63.57% complete, ETA 00:25:43
# Fork: 1 of 1
# Warmup Iteration   1: 13.901 ns/op
# Warmup Iteration   2: 12.300 ns/op
# Warmup Iteration   3: 11.851 ns/op
# Warmup Iteration   4: 12.177 ns/op
# Warmup Iteration   5: 11.882 ns/op
Iteration   1: 11.881 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.906 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.900 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.870 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.914 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  11.894 ±(99.9%) 0.070 ns/op [Average]
  (min, avg, max) = (11.870, 11.894, 11.914), stdev = 0.018
  CI (99.9%): [11.824, 11.964] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.)

# Run progress: 63.81% complete, ETA 00:25:33
# Fork: 1 of 1
# Warmup Iteration   1: 32.536 ns/op
# Warmup Iteration   2: 26.823 ns/op
# Warmup Iteration   3: 26.650 ns/op
# Warmup Iteration   4: 26.663 ns/op
# Warmup Iteration   5: 26.642 ns/op
Iteration   1: 26.710 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.660 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.673 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.641 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.645 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  26.666 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (26.641, 26.666, 26.710), stdev = 0.028
  CI (99.9%): [26.559, 26.773] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200)

# Run progress: 64.06% complete, ETA 00:25:23
# Fork: 1 of 1
# Warmup Iteration   1: 38.742 ns/op
# Warmup Iteration   2: 32.571 ns/op
# Warmup Iteration   3: 32.025 ns/op
# Warmup Iteration   4: 31.974 ns/op
# Warmup Iteration   5: 32.028 ns/op
Iteration   1: 32.022 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.026 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.105 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31.995 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.991 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  32.028 ±(99.9%) 0.177 ns/op [Average]
  (min, avg, max) = (31.991, 32.028, 32.105), stdev = 0.046
  CI (99.9%): [31.851, 32.205] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.)

# Run progress: 64.30% complete, ETA 00:25:12
# Fork: 1 of 1
# Warmup Iteration   1: 64.012 ns/op
# Warmup Iteration   2: 53.534 ns/op
# Warmup Iteration   3: 52.640 ns/op
# Warmup Iteration   4: 52.639 ns/op
# Warmup Iteration   5: 52.688 ns/op
Iteration   1: 52.641 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 53.247 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 52.856 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 52.648 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 52.679 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  52.814 ±(99.9%) 0.992 ns/op [Average]
  (min, avg, max) = (52.641, 52.814, 53.247), stdev = 0.258
  CI (99.9%): [51.822, 53.806] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = a.200.200)

# Run progress: 64.55% complete, ETA 00:25:02
# Fork: 1 of 1
# Warmup Iteration   1: 7.686 ns/op
# Warmup Iteration   2: 6.248 ns/op
# Warmup Iteration   3: 5.754 ns/op
# Warmup Iteration   4: 5.754 ns/op
# Warmup Iteration   5: 5.754 ns/op
Iteration   1: 5.758 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.760 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.760 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.746 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.758 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  5.756 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (5.746, 5.756, 5.760), stdev = 0.006
  CI (99.9%): [5.733, 5.779] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.a.200)

# Run progress: 64.79% complete, ETA 00:24:52
# Fork: 1 of 1
# Warmup Iteration   1: 30.086 ns/op
# Warmup Iteration   2: 26.965 ns/op
# Warmup Iteration   3: 25.462 ns/op
# Warmup Iteration   4: 25.300 ns/op
# Warmup Iteration   5: 25.405 ns/op
Iteration   1: 25.443 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 25.427 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 25.476 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 25.406 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 25.472 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  25.445 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (25.406, 25.445, 25.476), stdev = 0.030
  CI (99.9%): [25.330, 25.560] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.a)

# Run progress: 65.04% complete, ETA 00:24:41
# Fork: 1 of 1
# Warmup Iteration   1: 72.935 ns/op
# Warmup Iteration   2: 56.459 ns/op
# Warmup Iteration   3: 54.830 ns/op
# Warmup Iteration   4: 54.841 ns/op
# Warmup Iteration   5: 54.884 ns/op
Iteration   1: 54.857 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 54.783 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 54.795 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 54.845 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 54.900 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  54.836 ±(99.9%) 0.184 ns/op [Average]
  (min, avg, max) = (54.783, 54.836, 54.900), stdev = 0.048
  CI (99.9%): [54.652, 55.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.200.200)

# Run progress: 65.28% complete, ETA 00:24:31
# Fork: 1 of 1
# Warmup Iteration   1: 88.072 ns/op
# Warmup Iteration   2: 66.936 ns/op
# Warmup Iteration   3: 66.633 ns/op
# Warmup Iteration   4: 66.610 ns/op
# Warmup Iteration   5: 68.306 ns/op
Iteration   1: 73.977 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 73.667 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 66.764 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 66.760 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 66.809 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  69.595 ±(99.9%) 14.863 ns/op [Average]
  (min, avg, max) = (66.760, 69.595, 73.977), stdev = 3.860
  CI (99.9%): [54.732, 84.458] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.99999)

# Run progress: 65.53% complete, ETA 00:24:20
# Fork: 1 of 1
# Warmup Iteration   1: 100.436 ns/op
# Warmup Iteration   2: 79.754 ns/op
# Warmup Iteration   3: 79.033 ns/op
# Warmup Iteration   4: 79.104 ns/op
# Warmup Iteration   5: 79.145 ns/op
Iteration   1: 79.101 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 79.100 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 78.975 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 79.051 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 79.054 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  79.056 ±(99.9%) 0.197 ns/op [Average]
  (min, avg, max) = (78.975, 79.056, 79.101), stdev = 0.051
  CI (99.9%): [78.859, 79.254] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.-200)

# Run progress: 65.77% complete, ETA 00:24:10
# Fork: 1 of 1
# Warmup Iteration   1: 72.521 ns/op
# Warmup Iteration   2: 55.160 ns/op
# Warmup Iteration   3: 54.851 ns/op
# Warmup Iteration   4: 54.821 ns/op
# Warmup Iteration   5: 55.769 ns/op
Iteration   1: 54.818 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 54.851 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 54.913 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 54.851 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 54.859 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  54.858 ±(99.9%) 0.131 ns/op [Average]
  (min, avg, max) = (54.818, 54.858, 54.913), stdev = 0.034
  CI (99.9%): [54.727, 54.990] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 1.0.0)

# Run progress: 66.01% complete, ETA 00:24:00
# Fork: 1 of 1
# Warmup Iteration   1: 47.736 ns/op
# Warmup Iteration   2: 40.179 ns/op
# Warmup Iteration   3: 39.372 ns/op
# Warmup Iteration   4: 39.408 ns/op
# Warmup Iteration   5: 39.390 ns/op
Iteration   1: 43.627 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 39.356 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 39.331 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 39.328 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 39.295 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  40.187 ±(99.9%) 7.404 ns/op [Average]
  (min, avg, max) = (39.295, 40.187, 43.627), stdev = 1.923
  CI (99.9%): [32.784, 47.591] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.200)

# Run progress: 66.26% complete, ETA 00:23:49
# Fork: 1 of 1
# Warmup Iteration   1: 97.318 ns/op
# Warmup Iteration   2: 73.223 ns/op
# Warmup Iteration   3: 72.503 ns/op
# Warmup Iteration   4: 72.449 ns/op
# Warmup Iteration   5: 72.495 ns/op
Iteration   1: 72.445 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 73.571 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 72.340 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 74.131 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 74.254 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  73.348 ±(99.9%) 3.505 ns/op [Average]
  (min, avg, max) = (72.340, 73.348, 74.254), stdev = 0.910
  CI (99.9%): [69.843, 76.853] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 66.50% complete, ETA 00:23:39
# Fork: 1 of 1
# Warmup Iteration   1: 113.719 ns/op
# Warmup Iteration   2: 92.589 ns/op
# Warmup Iteration   3: 91.796 ns/op
# Warmup Iteration   4: 91.766 ns/op
# Warmup Iteration   5: 91.794 ns/op
Iteration   1: 91.793 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 91.731 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 91.708 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 91.811 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 91.742 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  91.757 ±(99.9%) 0.167 ns/op [Average]
  (min, avg, max) = (91.708, 91.757, 91.811), stdev = 0.043
  CI (99.9%): [91.590, 91.924] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 66.75% complete, ETA 00:23:29
# Fork: 1 of 1
# Warmup Iteration   1: 139.404 ns/op
# Warmup Iteration   2: 107.399 ns/op
# Warmup Iteration   3: 103.881 ns/op
# Warmup Iteration   4: 103.770 ns/op
# Warmup Iteration   5: 103.788 ns/op
Iteration   1: 103.771 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 103.733 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 103.763 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 103.913 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 103.855 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  103.807 ±(99.9%) 0.288 ns/op [Average]
  (min, avg, max) = (103.733, 103.807, 103.913), stdev = 0.075
  CI (99.9%): [103.519, 104.095] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = )

# Run progress: 66.99% complete, ETA 00:23:18
# Fork: 1 of 1
# Warmup Iteration   1: 7.061 ns/op
# Warmup Iteration   2: 6.309 ns/op
# Warmup Iteration   3: 5.335 ns/op
# Warmup Iteration   4: 5.327 ns/op
# Warmup Iteration   5: 5.327 ns/op
Iteration   1: 5.322 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.325 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.320 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.322 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.323 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  5.322 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (5.320, 5.322, 5.325), stdev = 0.002
  CI (99.9%): [5.315, 5.329] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200)

# Run progress: 67.24% complete, ETA 00:23:08
# Fork: 1 of 1
# Warmup Iteration   1: 15.185 ns/op
# Warmup Iteration   2: 12.357 ns/op
# Warmup Iteration   3: 12.226 ns/op
# Warmup Iteration   4: 11.855 ns/op
# Warmup Iteration   5: 11.821 ns/op
Iteration   1: 11.891 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.864 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.839 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.406 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.828 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  11.966 ±(99.9%) 0.952 ns/op [Average]
  (min, avg, max) = (11.828, 11.966, 12.406), stdev = 0.247
  CI (99.9%): [11.013, 12.918] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.)

# Run progress: 67.48% complete, ETA 00:22:58
# Fork: 1 of 1
# Warmup Iteration   1: 29.653 ns/op
# Warmup Iteration   2: 25.466 ns/op
# Warmup Iteration   3: 25.535 ns/op
# Warmup Iteration   4: 24.748 ns/op
# Warmup Iteration   5: 24.786 ns/op
Iteration   1: 24.715 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 25.012 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 24.955 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 24.856 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 24.909 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  24.889 ±(99.9%) 0.436 ns/op [Average]
  (min, avg, max) = (24.715, 24.889, 25.012), stdev = 0.113
  CI (99.9%): [24.453, 25.325] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200)

# Run progress: 67.73% complete, ETA 00:22:47
# Fork: 1 of 1
# Warmup Iteration   1: 40.004 ns/op
# Warmup Iteration   2: 30.966 ns/op
# Warmup Iteration   3: 29.194 ns/op
# Warmup Iteration   4: 29.104 ns/op
# Warmup Iteration   5: 29.109 ns/op
Iteration   1: 29.133 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.157 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.887 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.157 ns/op
                 ·gc.alloc.rate:      0.022 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.127 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  29.292 ±(99.9%) 1.282 ns/op [Average]
  (min, avg, max) = (29.127, 29.292, 29.887), stdev = 0.333
  CI (99.9%): [28.010, 30.574] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.022), stdev = 0.009
  CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.)

# Run progress: 67.97% complete, ETA 00:22:37
# Fork: 1 of 1
# Warmup Iteration   1: 71.544 ns/op
# Warmup Iteration   2: 54.366 ns/op
# Warmup Iteration   3: 55.535 ns/op
# Warmup Iteration   4: 55.281 ns/op
# Warmup Iteration   5: 55.364 ns/op
Iteration   1: 55.957 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 55.779 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 55.327 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 55.378 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 55.533 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  55.595 ±(99.9%) 1.032 ns/op [Average]
  (min, avg, max) = (55.327, 55.595, 55.957), stdev = 0.268
  CI (99.9%): [54.562, 56.627] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = a.200.200)

# Run progress: 68.22% complete, ETA 00:22:26
# Fork: 1 of 1
# Warmup Iteration   1: 8.253 ns/op
# Warmup Iteration   2: 6.106 ns/op
# Warmup Iteration   3: 5.715 ns/op
# Warmup Iteration   4: 5.717 ns/op
# Warmup Iteration   5: 5.716 ns/op
Iteration   1: 5.724 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.715 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.709 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.718 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.717 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  5.717 ±(99.9%) 0.020 ns/op [Average]
  (min, avg, max) = (5.709, 5.717, 5.724), stdev = 0.005
  CI (99.9%): [5.697, 5.737] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.a.200)

# Run progress: 68.46% complete, ETA 00:22:16
# Fork: 1 of 1
# Warmup Iteration   1: 28.945 ns/op
# Warmup Iteration   2: 26.836 ns/op
# Warmup Iteration   3: 24.414 ns/op
# Warmup Iteration   4: 24.396 ns/op
# Warmup Iteration   5: 24.415 ns/op
Iteration   1: 24.501 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 24.409 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 24.408 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 24.411 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 24.408 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  24.427 ±(99.9%) 0.158 ns/op [Average]
  (min, avg, max) = (24.408, 24.427, 24.501), stdev = 0.041
  CI (99.9%): [24.269, 24.585] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.a)

# Run progress: 68.70% complete, ETA 00:22:06
# Fork: 1 of 1
# Warmup Iteration   1: 69.952 ns/op
# Warmup Iteration   2: 52.271 ns/op
# Warmup Iteration   3: 52.428 ns/op
# Warmup Iteration   4: 52.380 ns/op
# Warmup Iteration   5: 52.350 ns/op
Iteration   1: 52.478 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 52.337 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 52.344 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 52.311 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 52.313 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  52.357 ±(99.9%) 0.267 ns/op [Average]
  (min, avg, max) = (52.311, 52.357, 52.478), stdev = 0.069
  CI (99.9%): [52.089, 52.624] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.200.200)

# Run progress: 68.95% complete, ETA 00:21:55
# Fork: 1 of 1
# Warmup Iteration   1: 74.983 ns/op
# Warmup Iteration   2: 59.133 ns/op
# Warmup Iteration   3: 57.080 ns/op
# Warmup Iteration   4: 56.977 ns/op
# Warmup Iteration   5: 57.143 ns/op
Iteration   1: 60.427 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 57.308 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 57.225 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 57.294 ns/op
                 ·gc.alloc.rate:      0.022 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 59.606 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  58.372 ±(99.9%) 5.889 ns/op [Average]
  (min, avg, max) = (57.225, 58.372, 60.427), stdev = 1.529
  CI (99.9%): [52.483, 64.261] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.022), stdev = 0.009
  CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.99999)

# Run progress: 69.19% complete, ETA 00:21:45
# Fork: 1 of 1
# Warmup Iteration   1: 116.330 ns/op
# Warmup Iteration   2: 89.708 ns/op
# Warmup Iteration   3: 88.384 ns/op
# Warmup Iteration   4: 88.306 ns/op
# Warmup Iteration   5: 88.405 ns/op
Iteration   1: 93.151 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 89.926 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 88.419 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 88.447 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 88.388 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  89.666 ±(99.9%) 7.912 ns/op [Average]
  (min, avg, max) = (88.388, 89.666, 93.151), stdev = 2.055
  CI (99.9%): [81.755, 97.578] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.-200)

# Run progress: 69.44% complete, ETA 00:21:35
# Fork: 1 of 1
# Warmup Iteration   1: 70.694 ns/op
# Warmup Iteration   2: 53.813 ns/op
# Warmup Iteration   3: 53.118 ns/op
# Warmup Iteration   4: 53.119 ns/op
# Warmup Iteration   5: 53.204 ns/op
Iteration   1: 54.589 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 53.151 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 53.114 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 53.092 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 53.174 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  53.424 ±(99.9%) 2.512 ns/op [Average]
  (min, avg, max) = (53.092, 53.424, 54.589), stdev = 0.652
  CI (99.9%): [50.912, 55.936] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 1.0.0)

# Run progress: 69.68% complete, ETA 00:21:24
# Fork: 1 of 1
# Warmup Iteration   1: 54.609 ns/op
# Warmup Iteration   2: 41.274 ns/op
# Warmup Iteration   3: 40.279 ns/op
# Warmup Iteration   4: 40.256 ns/op
# Warmup Iteration   5: 40.998 ns/op
Iteration   1: 40.263 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 40.198 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 40.221 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 40.246 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 40.198 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  40.225 ±(99.9%) 0.112 ns/op [Average]
  (min, avg, max) = (40.198, 40.225, 40.263), stdev = 0.029
  CI (99.9%): [40.113, 40.337] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.200)

# Run progress: 69.93% complete, ETA 00:21:14
# Fork: 1 of 1
# Warmup Iteration   1: 96.889 ns/op
# Warmup Iteration   2: 82.986 ns/op
# Warmup Iteration   3: 77.348 ns/op
# Warmup Iteration   4: 77.418 ns/op
# Warmup Iteration   5: 76.925 ns/op
Iteration   1: 77.271 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 77.163 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 77.663 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 80.010 ns/op
                 ·gc.alloc.rate:      0.022 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 77.784 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  77.978 ±(99.9%) 4.486 ns/op [Average]
  (min, avg, max) = (77.163, 77.978, 80.010), stdev = 1.165
  CI (99.9%): [73.492, 82.464] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.022), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 70.17% complete, ETA 00:21:04
# Fork: 1 of 1
# Warmup Iteration   1: 116.907 ns/op
# Warmup Iteration   2: 96.412 ns/op
# Warmup Iteration   3: 95.729 ns/op
# Warmup Iteration   4: 95.640 ns/op
# Warmup Iteration   5: 95.645 ns/op
Iteration   1: 95.687 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 95.613 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 95.623 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 98.530 ns/op
                 ·gc.alloc.rate:      0.022 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 95.803 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  96.251 ±(99.9%) 4.915 ns/op [Average]
  (min, avg, max) = (95.613, 96.251, 98.530), stdev = 1.276
  CI (99.9%): [91.336, 101.166] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.022), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 70.42% complete, ETA 00:20:53
# Fork: 1 of 1
# Warmup Iteration   1: 159.140 ns/op
# Warmup Iteration   2: 122.690 ns/op
# Warmup Iteration   3: 120.025 ns/op
# Warmup Iteration   4: 119.602 ns/op
# Warmup Iteration   5: 119.618 ns/op
Iteration   1: 119.593 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 119.544 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 119.554 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 119.570 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 119.553 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  119.563 ±(99.9%) 0.075 ns/op [Average]
  (min, avg, max) = (119.544, 119.563, 119.593), stdev = 0.019
  CI (99.9%): [119.488, 119.637] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = )

# Run progress: 70.66% complete, ETA 00:20:43
# Fork: 1 of 1
# Warmup Iteration   1: 7.635 ns/op
# Warmup Iteration   2: 6.688 ns/op
# Warmup Iteration   3: 5.324 ns/op
# Warmup Iteration   4: 5.460 ns/op
# Warmup Iteration   5: 5.326 ns/op
Iteration   1: 5.327 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.327 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.325 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.326 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.323 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  5.326 ±(99.9%) 0.006 ns/op [Average]
  (min, avg, max) = (5.323, 5.326, 5.327), stdev = 0.002
  CI (99.9%): [5.319, 5.332] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200)

# Run progress: 70.90% complete, ETA 00:20:32
# Fork: 1 of 1
# Warmup Iteration   1: 19.214 ns/op
# Warmup Iteration   2: 15.441 ns/op
# Warmup Iteration   3: 16.035 ns/op
# Warmup Iteration   4: 16.045 ns/op
# Warmup Iteration   5: 16.090 ns/op
Iteration   1: 16.057 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.065 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.046 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.071 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.084 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  16.065 ±(99.9%) 0.054 ns/op [Average]
  (min, avg, max) = (16.046, 16.065, 16.084), stdev = 0.014
  CI (99.9%): [16.010, 16.119] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.)

# Run progress: 71.15% complete, ETA 00:20:22
# Fork: 1 of 1
# Warmup Iteration   1: 24.136 ns/op
# Warmup Iteration   2: 19.185 ns/op
# Warmup Iteration   3: 19.613 ns/op
# Warmup Iteration   4: 19.669 ns/op
# Warmup Iteration   5: 19.642 ns/op
Iteration   1: 19.617 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.621 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.645 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.620 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.664 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  19.634 ±(99.9%) 0.078 ns/op [Average]
  (min, avg, max) = (19.617, 19.634, 19.664), stdev = 0.020
  CI (99.9%): [19.556, 19.711] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200)

# Run progress: 71.39% complete, ETA 00:20:12
# Fork: 1 of 1
# Warmup Iteration   1: 39.511 ns/op
# Warmup Iteration   2: 31.777 ns/op
# Warmup Iteration   3: 27.875 ns/op
# Warmup Iteration   4: 27.831 ns/op
# Warmup Iteration   5: 27.799 ns/op
Iteration   1: 27.895 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 28.424 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.893 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.868 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.853 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  27.987 ±(99.9%) 0.945 ns/op [Average]
  (min, avg, max) = (27.853, 27.987, 28.424), stdev = 0.245
  CI (99.9%): [27.041, 28.932] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.)

# Run progress: 71.64% complete, ETA 00:20:01
# Fork: 1 of 1
# Warmup Iteration   1: 38.009 ns/op
# Warmup Iteration   2: 33.130 ns/op
# Warmup Iteration   3: 32.285 ns/op
# Warmup Iteration   4: 32.285 ns/op
# Warmup Iteration   5: 32.292 ns/op
Iteration   1: 32.279 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.301 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.298 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.289 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.273 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  32.288 ±(99.9%) 0.045 ns/op [Average]
  (min, avg, max) = (32.273, 32.288, 32.301), stdev = 0.012
  CI (99.9%): [32.243, 32.333] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = a.200.200)

# Run progress: 71.88% complete, ETA 00:19:51
# Fork: 1 of 1
# Warmup Iteration   1: 7.542 ns/op
# Warmup Iteration   2: 6.180 ns/op
# Warmup Iteration   3: 6.298 ns/op
# Warmup Iteration   4: 5.751 ns/op
# Warmup Iteration   5: 5.752 ns/op
Iteration   1: 5.745 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.748 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.743 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.753 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.745 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  5.747 ±(99.9%) 0.015 ns/op [Average]
  (min, avg, max) = (5.743, 5.747, 5.753), stdev = 0.004
  CI (99.9%): [5.732, 5.761] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.a.200)

# Run progress: 72.13% complete, ETA 00:19:41
# Fork: 1 of 1
# Warmup Iteration   1: 24.739 ns/op
# Warmup Iteration   2: 20.110 ns/op
# Warmup Iteration   3: 21.230 ns/op
# Warmup Iteration   4: 21.187 ns/op
# Warmup Iteration   5: 21.196 ns/op
Iteration   1: 21.208 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.194 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.185 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.199 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.192 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  21.196 ±(99.9%) 0.034 ns/op [Average]
  (min, avg, max) = (21.185, 21.196, 21.208), stdev = 0.009
  CI (99.9%): [21.162, 21.229] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.a)

# Run progress: 72.37% complete, ETA 00:19:30
# Fork: 1 of 1
# Warmup Iteration   1: 46.383 ns/op
# Warmup Iteration   2: 33.244 ns/op
# Warmup Iteration   3: 31.819 ns/op
# Warmup Iteration   4: 31.838 ns/op
# Warmup Iteration   5: 31.831 ns/op
Iteration   1: 31.826 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.754 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.792 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31.790 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.777 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  31.788 ±(99.9%) 0.101 ns/op [Average]
  (min, avg, max) = (31.754, 31.788, 31.826), stdev = 0.026
  CI (99.9%): [31.687, 31.888] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.200.200)

# Run progress: 72.62% complete, ETA 00:19:20
# Fork: 1 of 1
# Warmup Iteration   1: 54.074 ns/op
# Warmup Iteration   2: 43.932 ns/op
# Warmup Iteration   3: 43.264 ns/op
# Warmup Iteration   4: 43.277 ns/op
# Warmup Iteration   5: 43.254 ns/op
Iteration   1: 43.253 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 43.233 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 43.281 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 43.290 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 43.220 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  43.255 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (43.220, 43.255, 43.290), stdev = 0.030
  CI (99.9%): [43.140, 43.370] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.99999)

# Run progress: 72.86% complete, ETA 00:19:09
# Fork: 1 of 1
# Warmup Iteration   1: 52.717 ns/op
# Warmup Iteration   2: 45.816 ns/op
# Warmup Iteration   3: 44.678 ns/op
# Warmup Iteration   4: 44.871 ns/op
# Warmup Iteration   5: 45.527 ns/op
Iteration   1: 44.599 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 44.672 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 44.772 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 44.516 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 44.486 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  44.609 ±(99.9%) 0.449 ns/op [Average]
  (min, avg, max) = (44.486, 44.609, 44.772), stdev = 0.117
  CI (99.9%): [44.160, 45.058] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.-200)

# Run progress: 73.11% complete, ETA 00:18:59
# Fork: 1 of 1
# Warmup Iteration   1: 41.844 ns/op
# Warmup Iteration   2: 33.215 ns/op
# Warmup Iteration   3: 31.763 ns/op
# Warmup Iteration   4: 31.788 ns/op
# Warmup Iteration   5: 31.882 ns/op
Iteration   1: 31.801 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.782 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.810 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.033 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.811 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  32.048 ±(99.9%) 2.122 ns/op [Average]
  (min, avg, max) = (31.782, 32.048, 33.033), stdev = 0.551
  CI (99.9%): [29.926, 34.169] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 1.0.0)

# Run progress: 73.35% complete, ETA 00:18:49
# Fork: 1 of 1
# Warmup Iteration   1: 28.553 ns/op
# Warmup Iteration   2: 24.017 ns/op
# Warmup Iteration   3: 24.178 ns/op
# Warmup Iteration   4: 24.167 ns/op
# Warmup Iteration   5: 24.200 ns/op
Iteration   1: 24.162 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 24.137 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 24.163 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 24.160 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 24.582 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  24.241 ±(99.9%) 0.735 ns/op [Average]
  (min, avg, max) = (24.137, 24.241, 24.582), stdev = 0.191
  CI (99.9%): [23.505, 24.976] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.200)

# Run progress: 73.59% complete, ETA 00:18:38
# Fork: 1 of 1
# Warmup Iteration   1: 57.309 ns/op
# Warmup Iteration   2: 43.389 ns/op
# Warmup Iteration   3: 42.028 ns/op
# Warmup Iteration   4: 41.806 ns/op
# Warmup Iteration   5: 41.746 ns/op
Iteration   1: 41.906 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 41.941 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 41.737 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 41.796 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 41.946 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  41.865 ±(99.9%) 0.361 ns/op [Average]
  (min, avg, max) = (41.737, 41.865, 41.946), stdev = 0.094
  CI (99.9%): [41.504, 42.226] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 73.84% complete, ETA 00:18:28
# Fork: 1 of 1
# Warmup Iteration   1: 64.303 ns/op
# Warmup Iteration   2: 55.831 ns/op
# Warmup Iteration   3: 55.276 ns/op
# Warmup Iteration   4: 55.311 ns/op
# Warmup Iteration   5: 55.337 ns/op
Iteration   1: 58.858 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 55.292 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 55.235 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 55.275 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 55.284 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  55.989 ±(99.9%) 6.176 ns/op [Average]
  (min, avg, max) = (55.235, 55.989, 58.858), stdev = 1.604
  CI (99.9%): [49.813, 62.165] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 74.08% complete, ETA 00:18:18
# Fork: 1 of 1
# Warmup Iteration   1: 72.126 ns/op
# Warmup Iteration   2: 62.727 ns/op
# Warmup Iteration   3: 60.802 ns/op
# Warmup Iteration   4: 60.718 ns/op
# Warmup Iteration   5: 60.685 ns/op
Iteration   1: 60.697 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 60.559 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 60.559 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 60.559 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 60.634 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  60.602 ±(99.9%) 0.240 ns/op [Average]
  (min, avg, max) = (60.559, 60.602, 60.697), stdev = 0.062
  CI (99.9%): [60.362, 60.841] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = )

# Run progress: 74.33% complete, ETA 00:18:07
# Fork: 1 of 1
# Warmup Iteration   1: 7.643 ns/op
# Warmup Iteration   2: 6.181 ns/op
# Warmup Iteration   3: 5.481 ns/op
# Warmup Iteration   4: 5.328 ns/op
# Warmup Iteration   5: 5.338 ns/op
Iteration   1: 5.661 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.329 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.325 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.324 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.328 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  5.393 ±(99.9%) 0.576 ns/op [Average]
  (min, avg, max) = (5.324, 5.393, 5.661), stdev = 0.150
  CI (99.9%): [4.817, 5.969] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200)

# Run progress: 74.57% complete, ETA 00:17:57
# Fork: 1 of 1
# Warmup Iteration   1: 23.561 ns/op
# Warmup Iteration   2: 17.705 ns/op
# Warmup Iteration   3: 22.057 ns/op
# Warmup Iteration   4: 21.329 ns/op
# Warmup Iteration   5: 21.328 ns/op
Iteration   1: 21.363 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.355 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.359 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.321 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.343 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  21.348 ±(99.9%) 0.065 ns/op [Average]
  (min, avg, max) = (21.321, 21.348, 21.363), stdev = 0.017
  CI (99.9%): [21.283, 21.413] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.)

# Run progress: 74.82% complete, ETA 00:17:47
# Fork: 1 of 1
# Warmup Iteration   1: 21.541 ns/op
# Warmup Iteration   2: 16.666 ns/op
# Warmup Iteration   3: 18.772 ns/op
# Warmup Iteration   4: 18.758 ns/op
# Warmup Iteration   5: 18.770 ns/op
Iteration   1: 18.764 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.757 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.059 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.795 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.763 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  18.828 ±(99.9%) 0.501 ns/op [Average]
  (min, avg, max) = (18.757, 18.828, 19.059), stdev = 0.130
  CI (99.9%): [18.327, 19.328] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200)

# Run progress: 75.06% complete, ETA 00:17:36
# Fork: 1 of 1
# Warmup Iteration   1: 52.936 ns/op
# Warmup Iteration   2: 41.192 ns/op
# Warmup Iteration   3: 39.467 ns/op
# Warmup Iteration   4: 39.342 ns/op
# Warmup Iteration   5: 39.303 ns/op
Iteration   1: 39.338 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 39.417 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 39.383 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 39.400 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 39.420 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  39.392 ±(99.9%) 0.128 ns/op [Average]
  (min, avg, max) = (39.338, 39.392, 39.420), stdev = 0.033
  CI (99.9%): [39.263, 39.520] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.)

# Run progress: 75.31% complete, ETA 00:17:26
# Fork: 1 of 1
# Warmup Iteration   1: 43.172 ns/op
# Warmup Iteration   2: 34.227 ns/op
# Warmup Iteration   3: 33.977 ns/op
# Warmup Iteration   4: 33.996 ns/op
# Warmup Iteration   5: 34.019 ns/op
Iteration   1: 33.999 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 33.987 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 34.024 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.961 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 34.053 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  34.005 ±(99.9%) 0.137 ns/op [Average]
  (min, avg, max) = (33.961, 34.005, 34.053), stdev = 0.036
  CI (99.9%): [33.868, 34.142] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = a.200.200)

# Run progress: 75.55% complete, ETA 00:17:16
# Fork: 1 of 1
# Warmup Iteration   1: 8.310 ns/op
# Warmup Iteration   2: 6.731 ns/op
# Warmup Iteration   3: 6.227 ns/op
# Warmup Iteration   4: 6.234 ns/op
# Warmup Iteration   5: 6.228 ns/op
Iteration   1: 6.240 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.239 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.242 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.239 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.240 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  6.240 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (6.239, 6.240, 6.242), stdev = 0.001
  CI (99.9%): [6.236, 6.245] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.a.200)

# Run progress: 75.79% complete, ETA 00:17:05
# Fork: 1 of 1
# Warmup Iteration   1: 29.080 ns/op
# Warmup Iteration   2: 21.915 ns/op
# Warmup Iteration   3: 24.099 ns/op
# Warmup Iteration   4: 24.061 ns/op
# Warmup Iteration   5: 24.120 ns/op
Iteration   1: 24.103 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 24.096 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 24.027 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 24.099 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 24.062 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  24.077 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (24.027, 24.077, 24.103), stdev = 0.033
  CI (99.9%): [23.952, 24.203] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.a)

# Run progress: 76.04% complete, ETA 00:16:55
# Fork: 1 of 1
# Warmup Iteration   1: 52.564 ns/op
# Warmup Iteration   2: 42.704 ns/op
# Warmup Iteration   3: 39.348 ns/op
# Warmup Iteration   4: 39.313 ns/op
# Warmup Iteration   5: 39.411 ns/op
Iteration   1: 39.395 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 39.327 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 39.324 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 42.040 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 39.409 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  39.899 ±(99.9%) 4.611 ns/op [Average]
  (min, avg, max) = (39.324, 39.899, 42.040), stdev = 1.198
  CI (99.9%): [35.288, 44.510] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.200.200)

# Run progress: 76.28% complete, ETA 00:16:44
# Fork: 1 of 1
# Warmup Iteration   1: 77.546 ns/op
# Warmup Iteration   2: 55.642 ns/op
# Warmup Iteration   3: 58.839 ns/op
# Warmup Iteration   4: 58.812 ns/op
# Warmup Iteration   5: 58.816 ns/op
Iteration   1: 59.141 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 58.893 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 58.895 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 58.900 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 58.899 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  58.945 ±(99.9%) 0.420 ns/op [Average]
  (min, avg, max) = (58.893, 58.945, 59.141), stdev = 0.109
  CI (99.9%): [58.525, 59.366] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.99999)

# Run progress: 76.53% complete, ETA 00:16:34
# Fork: 1 of 1
# Warmup Iteration   1: 76.050 ns/op
# Warmup Iteration   2: 60.289 ns/op
# Warmup Iteration   3: 63.780 ns/op
# Warmup Iteration   4: 63.738 ns/op
# Warmup Iteration   5: 63.740 ns/op
Iteration   1: 63.713 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 63.718 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 63.732 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 63.719 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 63.746 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  63.725 ±(99.9%) 0.051 ns/op [Average]
  (min, avg, max) = (63.713, 63.725, 63.746), stdev = 0.013
  CI (99.9%): [63.674, 63.777] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.-200)

# Run progress: 76.77% complete, ETA 00:16:24
# Fork: 1 of 1
# Warmup Iteration   1: 52.838 ns/op
# Warmup Iteration   2: 42.507 ns/op
# Warmup Iteration   3: 39.429 ns/op
# Warmup Iteration   4: 39.418 ns/op
# Warmup Iteration   5: 39.416 ns/op
Iteration   1: 39.376 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 39.477 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 39.396 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 39.357 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 39.351 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  39.391 ±(99.9%) 0.197 ns/op [Average]
  (min, avg, max) = (39.351, 39.391, 39.477), stdev = 0.051
  CI (99.9%): [39.194, 39.588] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 1.0.0)

# Run progress: 77.02% complete, ETA 00:16:13
# Fork: 1 of 1
# Warmup Iteration   1: 43.738 ns/op
# Warmup Iteration   2: 35.026 ns/op
# Warmup Iteration   3: 33.142 ns/op
# Warmup Iteration   4: 33.133 ns/op
# Warmup Iteration   5: 33.140 ns/op
Iteration   1: 33.160 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 33.119 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 33.547 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.142 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 33.135 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  33.221 ±(99.9%) 0.705 ns/op [Average]
  (min, avg, max) = (33.119, 33.221, 33.547), stdev = 0.183
  CI (99.9%): [32.515, 33.926] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.200)

# Run progress: 77.26% complete, ETA 00:16:03
# Fork: 1 of 1
# Warmup Iteration   1: 89.481 ns/op
# Warmup Iteration   2: 64.397 ns/op
# Warmup Iteration   3: 67.746 ns/op
# Warmup Iteration   4: 67.694 ns/op
# Warmup Iteration   5: 67.725 ns/op
Iteration   1: 67.707 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 67.723 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 67.828 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 73.216 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 67.825 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  68.860 ±(99.9%) 9.379 ns/op [Average]
  (min, avg, max) = (67.707, 68.860, 73.216), stdev = 2.436
  CI (99.9%): [59.481, 78.239] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 77.51% complete, ETA 00:15:53
# Fork: 1 of 1
# Warmup Iteration   1: 101.912 ns/op
# Warmup Iteration   2: 75.846 ns/op
# Warmup Iteration   3: 77.840 ns/op
# Warmup Iteration   4: 77.713 ns/op
# Warmup Iteration   5: 77.703 ns/op
Iteration   1: 77.702 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 77.751 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 77.887 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 77.790 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 77.688 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  77.764 ±(99.9%) 0.308 ns/op [Average]
  (min, avg, max) = (77.688, 77.764, 77.887), stdev = 0.080
  CI (99.9%): [77.456, 78.071] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 77.75% complete, ETA 00:15:42
# Fork: 1 of 1
# Warmup Iteration   1: 108.180 ns/op
# Warmup Iteration   2: 82.499 ns/op
# Warmup Iteration   3: 84.030 ns/op
# Warmup Iteration   4: 83.683 ns/op
# Warmup Iteration   5: 83.738 ns/op
Iteration   1: 83.795 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 83.767 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 83.788 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 83.758 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 83.780 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  83.778 ±(99.9%) 0.058 ns/op [Average]
  (min, avg, max) = (83.758, 83.778, 83.795), stdev = 0.015
  CI (99.9%): [83.719, 83.836] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = )

# Run progress: 78.00% complete, ETA 00:15:32
# Fork: 1 of 1
# Warmup Iteration   1: 7.232 ns/op
# Warmup Iteration   2: 6.313 ns/op
# Warmup Iteration   3: 6.506 ns/op
# Warmup Iteration   4: 5.336 ns/op
# Warmup Iteration   5: 5.328 ns/op
Iteration   1: 5.325 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.328 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.332 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.325 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.330 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  5.328 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (5.325, 5.328, 5.332), stdev = 0.003
  CI (99.9%): [5.316, 5.340] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200)

# Run progress: 78.24% complete, ETA 00:15:22
# Fork: 1 of 1
# Warmup Iteration   1: 21.051 ns/op
# Warmup Iteration   2: 17.528 ns/op
# Warmup Iteration   3: 15.641 ns/op
# Warmup Iteration   4: 15.688 ns/op
# Warmup Iteration   5: 15.704 ns/op
Iteration   1: 15.689 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15.640 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.663 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.693 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13.514 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  15.240 ±(99.9%) 3.716 ns/op [Average]
  (min, avg, max) = (13.514, 15.240, 15.693), stdev = 0.965
  CI (99.9%): [11.524, 18.956] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.)

# Run progress: 78.48% complete, ETA 00:15:11
# Fork: 1 of 1
# Warmup Iteration   1: 21.671 ns/op
# Warmup Iteration   2: 19.030 ns/op
# Warmup Iteration   3: 17.175 ns/op
# Warmup Iteration   4: 17.088 ns/op
# Warmup Iteration   5: 17.078 ns/op
Iteration   1: 17.485 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 17.096 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 17.056 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 17.080 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 17.116 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  17.166 ±(99.9%) 0.690 ns/op [Average]
  (min, avg, max) = (17.056, 17.166, 17.485), stdev = 0.179
  CI (99.9%): [16.476, 17.857] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200)

# Run progress: 78.73% complete, ETA 00:15:01
# Fork: 1 of 1
# Warmup Iteration   1: 30.895 ns/op
# Warmup Iteration   2: 29.016 ns/op
# Warmup Iteration   3: 24.036 ns/op
# Warmup Iteration   4: 24.039 ns/op
# Warmup Iteration   5: 24.077 ns/op
Iteration   1: 24.045 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 24.083 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 24.035 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 24.034 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 24.049 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  24.049 ±(99.9%) 0.077 ns/op [Average]
  (min, avg, max) = (24.034, 24.049, 24.083), stdev = 0.020
  CI (99.9%): [23.972, 24.126] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.)

# Run progress: 78.97% complete, ETA 00:14:50
# Fork: 1 of 1
# Warmup Iteration   1: 37.242 ns/op
# Warmup Iteration   2: 31.989 ns/op
# Warmup Iteration   3: 33.017 ns/op
# Warmup Iteration   4: 33.005 ns/op
# Warmup Iteration   5: 33.007 ns/op
Iteration   1: 32.994 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.995 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 33.080 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.022 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.992 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  33.017 ±(99.9%) 0.144 ns/op [Average]
  (min, avg, max) = (32.992, 33.017, 33.080), stdev = 0.037
  CI (99.9%): [32.873, 33.160] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = a.200.200)

# Run progress: 79.22% complete, ETA 00:14:40
# Fork: 1 of 1
# Warmup Iteration   1: 7.316 ns/op
# Warmup Iteration   2: 6.283 ns/op
# Warmup Iteration   3: 5.755 ns/op
# Warmup Iteration   4: 5.751 ns/op
# Warmup Iteration   5: 5.758 ns/op
Iteration   1: 5.770 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.761 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.759 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.758 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.758 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  5.761 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (5.758, 5.761, 5.770), stdev = 0.005
  CI (99.9%): [5.742, 5.780] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.a.200)

# Run progress: 79.46% complete, ETA 00:14:30
# Fork: 1 of 1
# Warmup Iteration   1: 23.178 ns/op
# Warmup Iteration   2: 19.243 ns/op
# Warmup Iteration   3: 16.933 ns/op
# Warmup Iteration   4: 16.926 ns/op
# Warmup Iteration   5: 16.931 ns/op
Iteration   1: 16.903 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.905 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.910 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.913 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.910 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  16.908 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (16.903, 16.908, 16.913), stdev = 0.004
  CI (99.9%): [16.893, 16.924] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.a)

# Run progress: 79.71% complete, ETA 00:14:19
# Fork: 1 of 1
# Warmup Iteration   1: 37.316 ns/op
# Warmup Iteration   2: 32.729 ns/op
# Warmup Iteration   3: 31.414 ns/op
# Warmup Iteration   4: 31.414 ns/op
# Warmup Iteration   5: 31.505 ns/op
Iteration   1: 31.451 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.387 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.384 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31.420 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.408 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  31.410 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (31.384, 31.410, 31.451), stdev = 0.027
  CI (99.9%): [31.305, 31.516] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.200.200)

# Run progress: 79.95% complete, ETA 00:14:09
# Fork: 1 of 1
# Warmup Iteration   1: 45.651 ns/op
# Warmup Iteration   2: 38.610 ns/op
# Warmup Iteration   3: 40.948 ns/op
# Warmup Iteration   4: 40.641 ns/op
# Warmup Iteration   5: 41.198 ns/op
Iteration   1: 40.612 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 40.598 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 40.643 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 40.606 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 40.608 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  40.613 ±(99.9%) 0.066 ns/op [Average]
  (min, avg, max) = (40.598, 40.613, 40.643), stdev = 0.017
  CI (99.9%): [40.547, 40.679] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.99999)

# Run progress: 80.20% complete, ETA 00:13:59
# Fork: 1 of 1
# Warmup Iteration   1: 51.850 ns/op
# Warmup Iteration   2: 41.064 ns/op
# Warmup Iteration   3: 40.959 ns/op
# Warmup Iteration   4: 40.952 ns/op
# Warmup Iteration   5: 41.026 ns/op
Iteration   1: 40.952 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 40.932 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 40.930 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 40.908 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 40.936 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  40.931 ±(99.9%) 0.061 ns/op [Average]
  (min, avg, max) = (40.908, 40.931, 40.952), stdev = 0.016
  CI (99.9%): [40.871, 40.992] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.-200)

# Run progress: 80.44% complete, ETA 00:13:48
# Fork: 1 of 1
# Warmup Iteration   1: 38.834 ns/op
# Warmup Iteration   2: 31.913 ns/op
# Warmup Iteration   3: 30.598 ns/op
# Warmup Iteration   4: 30.609 ns/op
# Warmup Iteration   5: 30.662 ns/op
Iteration   1: 30.612 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 30.637 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 30.742 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 30.705 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.264 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  30.792 ±(99.9%) 1.036 ns/op [Average]
  (min, avg, max) = (30.612, 30.792, 31.264), stdev = 0.269
  CI (99.9%): [29.756, 31.828] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 1.0.0)

# Run progress: 80.68% complete, ETA 00:13:38
# Fork: 1 of 1
# Warmup Iteration   1: 28.105 ns/op
# Warmup Iteration   2: 21.846 ns/op
# Warmup Iteration   3: 21.128 ns/op
# Warmup Iteration   4: 21.167 ns/op
# Warmup Iteration   5: 21.165 ns/op
Iteration   1: 21.143 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.144 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.185 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.098 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.158 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  21.145 ±(99.9%) 0.122 ns/op [Average]
  (min, avg, max) = (21.098, 21.145, 21.185), stdev = 0.032
  CI (99.9%): [21.024, 21.267] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.200)

# Run progress: 80.93% complete, ETA 00:13:28
# Fork: 1 of 1
# Warmup Iteration   1: 44.756 ns/op
# Warmup Iteration   2: 38.969 ns/op
# Warmup Iteration   3: 36.370 ns/op
# Warmup Iteration   4: 36.505 ns/op
# Warmup Iteration   5: 36.465 ns/op
Iteration   1: 36.452 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 36.537 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 36.533 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 36.411 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 36.498 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  36.486 ±(99.9%) 0.208 ns/op [Average]
  (min, avg, max) = (36.411, 36.486, 36.537), stdev = 0.054
  CI (99.9%): [36.278, 36.694] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 81.17% complete, ETA 00:13:17
# Fork: 1 of 1
# Warmup Iteration   1: 60.475 ns/op
# Warmup Iteration   2: 49.113 ns/op
# Warmup Iteration   3: 42.086 ns/op
# Warmup Iteration   4: 42.080 ns/op
# Warmup Iteration   5: 42.105 ns/op
Iteration   1: 42.134 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 42.137 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 42.266 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 42.148 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 42.222 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  42.181 ±(99.9%) 0.229 ns/op [Average]
  (min, avg, max) = (42.134, 42.181, 42.266), stdev = 0.060
  CI (99.9%): [41.952, 42.410] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 81.42% complete, ETA 00:13:07
# Fork: 1 of 1
# Warmup Iteration   1: 65.538 ns/op
# Warmup Iteration   2: 53.414 ns/op
# Warmup Iteration   3: 53.129 ns/op
# Warmup Iteration   4: 52.097 ns/op
# Warmup Iteration   5: 52.222 ns/op
Iteration   1: 52.186 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 52.166 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 52.106 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 53.667 ns/op
                 ·gc.alloc.rate:      0.021 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 52.113 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  52.448 ±(99.9%) 2.629 ns/op [Average]
  (min, avg, max) = (52.106, 52.448, 53.667), stdev = 0.683
  CI (99.9%): [49.819, 55.076] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.005 ±(99.9%) 0.035 MB/sec [Average]
  (min, avg, max) = (0.001, 0.005, 0.021), stdev = 0.009
  CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = )

# Run progress: 81.66% complete, ETA 00:12:56
# Fork: 1 of 1
# Warmup Iteration   1: 130.232 ns/op
# Warmup Iteration   2: 75.841 ns/op
# Warmup Iteration   3: 72.082 ns/op
# Warmup Iteration   4: 72.534 ns/op
# Warmup Iteration   5: 72.695 ns/op
Iteration   1: 72.654 ns/op
                 ·gc.alloc.rate:      3778.819 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            30.000 ms

Iteration   2: 73.051 ns/op
                 ·gc.alloc.rate:      3758.131 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            29.000 ms

Iteration   3: 72.989 ns/op
                 ·gc.alloc.rate:      3761.371 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            33.000 ms

Iteration   4: 73.431 ns/op
                 ·gc.alloc.rate:      3736.494 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            22.000 ms

Iteration   5: 72.360 ns/op
                 ·gc.alloc.rate:      3794.000 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            22.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  72.897 ±(99.9%) 1.569 ns/op [Average]
  (min, avg, max) = (72.360, 72.897, 73.431), stdev = 0.407
  CI (99.9%): [71.328, 74.466] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  3765.763 ±(99.9%) 83.967 MB/sec [Average]
  (min, avg, max) = (3736.494, 3765.763, 3794.000), stdev = 21.806
  CI (99.9%): [3681.796, 3849.730] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  144.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.001, 144.001), stdev = 0.001
  CI (99.9%): [144.000, 144.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  75.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.000, 15.000), stdev = 0.001
  CI (99.9%): [75.000, 75.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  136.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (22.000, 27.200, 33.000), stdev = 4.970
  CI (99.9%): [136.000, 136.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200)

# Run progress: 81.91% complete, ETA 00:12:46
# Fork: 1 of 1
# Warmup Iteration   1: 269.706 ns/op
# Warmup Iteration   2: 150.125 ns/op
# Warmup Iteration   3: 141.286 ns/op
# Warmup Iteration   4: 139.860 ns/op
# Warmup Iteration   5: 141.095 ns/op
Iteration   1: 140.713 ns/op
                 ·gc.alloc.rate:      2926.601 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            23.000 ms

Iteration   2: 141.017 ns/op
                 ·gc.alloc.rate:      2919.644 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            24.000 ms

Iteration   3: 145.121 ns/op
                 ·gc.alloc.rate:      2837.110 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            32.000 ms

Iteration   4: 141.547 ns/op
                 ·gc.alloc.rate:      2907.604 MB/sec
                 ·gc.alloc.rate.norm: 216.002 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            27.000 ms

Iteration   5: 146.598 ns/op
                 ·gc.alloc.rate:      2808.388 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            22.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  142.999 ±(99.9%) 10.317 ns/op [Average]
  (min, avg, max) = (140.713, 142.999, 146.598), stdev = 2.679
  CI (99.9%): [132.682, 153.316] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  2879.869 ±(99.9%) 206.226 MB/sec [Average]
  (min, avg, max) = (2808.388, 2879.869, 2926.601), stdev = 53.556
  CI (99.9%): [2673.644, 3086.095] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.002), stdev = 0.001
  CI (99.9%): [215.998, 216.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  65.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.000, 13.000), stdev = 0.001
  CI (99.9%): [65.000, 65.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  128.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (22.000, 25.600, 32.000), stdev = 4.037
  CI (99.9%): [128.000, 128.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.)

# Run progress: 82.15% complete, ETA 00:12:36
# Fork: 1 of 1
# Warmup Iteration   1: 765.477 ns/op
# Warmup Iteration   2: 202.926 ns/op
# Warmup Iteration   3: 188.023 ns/op
# Warmup Iteration   4: 187.716 ns/op
# Warmup Iteration   5: 187.787 ns/op
Iteration   1: 187.699 ns/op
                 ·gc.alloc.rate:      2193.947 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 188.033 ns/op
                 ·gc.alloc.rate:      2189.722 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 187.934 ns/op
                 ·gc.alloc.rate:      2190.923 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 188.143 ns/op
                 ·gc.alloc.rate:      2187.423 MB/sec
                 ·gc.alloc.rate.norm: 216.002 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 185.725 ns/op
                 ·gc.alloc.rate:      2217.092 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  187.507 ±(99.9%) 3.887 ns/op [Average]
  (min, avg, max) = (185.725, 187.507, 188.143), stdev = 1.009
  CI (99.9%): [183.620, 191.394] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  2195.822 ±(99.9%) 46.674 MB/sec [Average]
  (min, avg, max) = (2187.423, 2195.822, 2217.092), stdev = 12.121
  CI (99.9%): [2149.147, 2242.496] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.002), stdev = 0.001
  CI (99.9%): [215.997, 216.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  66.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.200, 14.000), stdev = 0.447
  CI (99.9%): [66.000, 66.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200)

# Run progress: 82.40% complete, ETA 00:12:25
# Fork: 1 of 1
# Warmup Iteration   1: 993.077 ns/op
# Warmup Iteration   2: 262.710 ns/op
# Warmup Iteration   3: 243.512 ns/op
# Warmup Iteration   4: 238.249 ns/op
# Warmup Iteration   5: 238.191 ns/op
Iteration   1: 238.600 ns/op
                 ·gc.alloc.rate:      1725.827 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 238.338 ns/op
                 ·gc.alloc.rate:      1727.711 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 238.124 ns/op
                 ·gc.alloc.rate:      1729.424 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 238.975 ns/op
                 ·gc.alloc.rate:      1722.418 MB/sec
                 ·gc.alloc.rate.norm: 216.003 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 239.181 ns/op
                 ·gc.alloc.rate:      1721.794 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  238.644 ±(99.9%) 1.682 ns/op [Average]
  (min, avg, max) = (238.124, 238.644, 239.181), stdev = 0.437
  CI (99.9%): [236.961, 240.326] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1725.435 ±(99.9%) 12.713 MB/sec [Average]
  (min, avg, max) = (1721.794, 1725.435, 1729.424), stdev = 3.302
  CI (99.9%): [1712.722, 1738.148] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (216.000, 216.001, 216.003), stdev = 0.001
  CI (99.9%): [215.996, 216.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  52.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
  CI (99.9%): [52.000, 52.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  22.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.)

# Run progress: 82.64% complete, ETA 00:12:15
# Fork: 1 of 1
# Warmup Iteration   1: 1188.960 ns/op
# Warmup Iteration   2: 276.858 ns/op
# Warmup Iteration   3: 268.794 ns/op
# Warmup Iteration   4: 263.109 ns/op
# Warmup Iteration   5: 262.870 ns/op
Iteration   1: 263.072 ns/op
                 ·gc.alloc.rate:      1565.377 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 262.430 ns/op
                 ·gc.alloc.rate:      1569.248 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 262.643 ns/op
                 ·gc.alloc.rate:      1567.997 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 262.425 ns/op
                 ·gc.alloc.rate:      1568.575 MB/sec
                 ·gc.alloc.rate.norm: 216.003 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 271.278 ns/op
                 ·gc.alloc.rate:      1518.107 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  264.369 ±(99.9%) 14.905 ns/op [Average]
  (min, avg, max) = (262.425, 264.369, 271.278), stdev = 3.871
  CI (99.9%): [249.464, 279.275] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1557.861 ±(99.9%) 85.759 MB/sec [Average]
  (min, avg, max) = (1518.107, 1557.861, 1569.248), stdev = 22.271
  CI (99.9%): [1472.101, 1643.620] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (216.000, 216.001, 216.003), stdev = 0.001
  CI (99.9%): [215.996, 216.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  47.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
  CI (99.9%): [47.000, 47.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = a.200.200)

# Run progress: 82.89% complete, ETA 00:12:05
# Fork: 1 of 1
# Warmup Iteration   1: 120.329 ns/op
# Warmup Iteration   2: 73.698 ns/op
# Warmup Iteration   3: 71.049 ns/op
# Warmup Iteration   4: 71.174 ns/op
# Warmup Iteration   5: 71.156 ns/op
Iteration   1: 70.962 ns/op
                 ·gc.alloc.rate:      3868.958 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            24.000 ms

Iteration   2: 71.382 ns/op
                 ·gc.alloc.rate:      3845.775 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            30.000 ms

Iteration   3: 70.730 ns/op
                 ·gc.alloc.rate:      3879.868 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            20.000 ms

Iteration   4: 71.307 ns/op
                 ·gc.alloc.rate:      3849.864 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            28.000 ms

Iteration   5: 71.024 ns/op
                 ·gc.alloc.rate:      3865.287 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            22.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  71.081 ±(99.9%) 1.023 ns/op [Average]
  (min, avg, max) = (70.730, 71.081, 71.382), stdev = 0.266
  CI (99.9%): [70.058, 72.104] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  3861.950 ±(99.9%) 54.081 MB/sec [Average]
  (min, avg, max) = (3845.775, 3861.950, 3879.868), stdev = 14.045
  CI (99.9%): [3807.869, 3916.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.000), stdev = 0.001
  CI (99.9%): [143.999, 144.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  84.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.800, 17.000), stdev = 0.447
  CI (99.9%): [84.000, 84.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  124.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (20.000, 24.800, 30.000), stdev = 4.147
  CI (99.9%): [124.000, 124.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.a.200)

# Run progress: 83.13% complete, ETA 00:11:54
# Fork: 1 of 1
# Warmup Iteration   1: 374.998 ns/op
# Warmup Iteration   2: 200.553 ns/op
# Warmup Iteration   3: 185.891 ns/op
# Warmup Iteration   4: 185.608 ns/op
# Warmup Iteration   5: 185.509 ns/op
Iteration   1: 186.251 ns/op
                 ·gc.alloc.rate:      2210.989 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 185.567 ns/op
                 ·gc.alloc.rate:      2218.755 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 185.434 ns/op
                 ·gc.alloc.rate:      2220.011 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 185.399 ns/op
                 ·gc.alloc.rate:      2221.250 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 185.410 ns/op
                 ·gc.alloc.rate:      2220.927 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  185.612 ±(99.9%) 1.399 ns/op [Average]
  (min, avg, max) = (185.399, 185.612, 186.251), stdev = 0.363
  CI (99.9%): [184.213, 187.011] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  2218.387 ±(99.9%) 16.354 MB/sec [Average]
  (min, avg, max) = (2210.989, 2218.387, 2221.250), stdev = 4.247
  CI (99.9%): [2202.032, 2234.741] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.999, 216.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  60.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 12.000, 12.000), stdev = 0.001
  CI (99.9%): [60.000, 60.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  32.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.a)

# Run progress: 83.37% complete, ETA 00:11:44
# Fork: 1 of 1
# Warmup Iteration   1: 540.845 ns/op
# Warmup Iteration   2: 289.505 ns/op
# Warmup Iteration   3: 268.167 ns/op
# Warmup Iteration   4: 266.661 ns/op
# Warmup Iteration   5: 266.827 ns/op
Iteration   1: 273.682 ns/op
                 ·gc.alloc.rate:      1504.734 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 267.198 ns/op
                 ·gc.alloc.rate:      1541.211 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 267.562 ns/op
                 ·gc.alloc.rate:      1538.953 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 266.916 ns/op
                 ·gc.alloc.rate:      1541.781 MB/sec
                 ·gc.alloc.rate.norm: 216.003 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 266.825 ns/op
                 ·gc.alloc.rate:      1543.526 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  268.436 ±(99.9%) 11.345 ns/op [Average]
  (min, avg, max) = (266.825, 268.436, 273.682), stdev = 2.946
  CI (99.9%): [257.092, 279.781] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1534.041 ±(99.9%) 63.399 MB/sec [Average]
  (min, avg, max) = (1504.734, 1534.041, 1543.526), stdev = 16.464
  CI (99.9%): [1470.642, 1597.440] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (216.000, 216.001, 216.003), stdev = 0.001
  CI (99.9%): [215.996, 216.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  46.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.200.200)

# Run progress: 83.62% complete, ETA 00:11:34
# Fork: 1 of 1
# Warmup Iteration   1: 853.817 ns/op
# Warmup Iteration   2: 339.589 ns/op
# Warmup Iteration   3: 330.520 ns/op
# Warmup Iteration   4: 325.055 ns/op
# Warmup Iteration   5: 324.952 ns/op
Iteration   1: 324.835 ns/op
                 ·gc.alloc.rate:      1267.745 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 324.761 ns/op
                 ·gc.alloc.rate:      1267.853 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 325.307 ns/op
                 ·gc.alloc.rate:      1265.866 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 323.934 ns/op
                 ·gc.alloc.rate:      1270.330 MB/sec
                 ·gc.alloc.rate.norm: 216.004 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 324.060 ns/op
                 ·gc.alloc.rate:      1270.841 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  324.579 ±(99.9%) 2.207 ns/op [Average]
  (min, avg, max) = (323.934, 324.579, 325.307), stdev = 0.573
  CI (99.9%): [322.372, 326.786] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1268.527 ±(99.9%) 7.880 MB/sec [Average]
  (min, avg, max) = (1265.866, 1268.527, 1270.841), stdev = 2.046
  CI (99.9%): [1260.647, 1276.407] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.001 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (216.000, 216.001, 216.004), stdev = 0.002
  CI (99.9%): [215.995, 216.007] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  43.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
  CI (99.9%): [43.000, 43.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.99999)

# Run progress: 83.86% complete, ETA 00:11:23
# Fork: 1 of 1
# Warmup Iteration   1: 2283.559 ns/op
# Warmup Iteration   2: 393.767 ns/op
# Warmup Iteration   3: 378.699 ns/op
# Warmup Iteration   4: 370.276 ns/op
# Warmup Iteration   5: 369.721 ns/op
Iteration   1: 369.647 ns/op
                 ·gc.alloc.rate:      1856.545 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 378.865 ns/op
                 ·gc.alloc.rate:      1811.658 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 370.054 ns/op
                 ·gc.alloc.rate:      1854.422 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 370.189 ns/op
                 ·gc.alloc.rate:      1852.884 MB/sec
                 ·gc.alloc.rate.norm: 360.004 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 369.357 ns/op
                 ·gc.alloc.rate:      1858.072 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  371.622 ±(99.9%) 15.642 ns/op [Average]
  (min, avg, max) = (369.357, 371.622, 378.865), stdev = 4.062
  CI (99.9%): [355.980, 387.264] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1846.716 ±(99.9%) 75.850 MB/sec [Average]
  (min, avg, max) = (1811.658, 1846.716, 1858.072), stdev = 19.698
  CI (99.9%): [1770.866, 1922.566] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.004), stdev = 0.002
  CI (99.9%): [359.994, 360.008] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  52.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
  CI (99.9%): [52.000, 52.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.-200)

# Run progress: 84.11% complete, ETA 00:11:13
# Fork: 1 of 1
# Warmup Iteration   1: 537.026 ns/op
# Warmup Iteration   2: 285.833 ns/op
# Warmup Iteration   3: 267.344 ns/op
# Warmup Iteration   4: 267.263 ns/op
# Warmup Iteration   5: 266.260 ns/op
Iteration   1: 267.240 ns/op
                 ·gc.alloc.rate:      1540.773 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 267.098 ns/op
                 ·gc.alloc.rate:      1541.811 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 272.265 ns/op
                 ·gc.alloc.rate:      1512.572 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 266.199 ns/op
                 ·gc.alloc.rate:      1546.224 MB/sec
                 ·gc.alloc.rate.norm: 216.003 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 268.716 ns/op
                 ·gc.alloc.rate:      1532.520 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  268.303 ±(99.9%) 9.209 ns/op [Average]
  (min, avg, max) = (266.199, 268.303, 272.265), stdev = 2.392
  CI (99.9%): [259.094, 277.512] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1534.780 ±(99.9%) 51.469 MB/sec [Average]
  (min, avg, max) = (1512.572, 1534.780, 1546.224), stdev = 13.366
  CI (99.9%): [1483.311, 1586.249] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (216.000, 216.001, 216.003), stdev = 0.001
  CI (99.9%): [215.996, 216.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  47.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
  CI (99.9%): [47.000, 47.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 1.0.0)

# Run progress: 84.35% complete, ETA 00:11:03
# Fork: 1 of 1
# Warmup Iteration   1: 559.835 ns/op
# Warmup Iteration   2: 288.573 ns/op
# Warmup Iteration   3: 267.455 ns/op
# Warmup Iteration   4: 266.859 ns/op
# Warmup Iteration   5: 266.602 ns/op
Iteration   1: 267.302 ns/op
                 ·gc.alloc.rate:      2567.857 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 267.223 ns/op
                 ·gc.alloc.rate:      2568.326 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 267.001 ns/op
                 ·gc.alloc.rate:      2570.812 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 267.459 ns/op
                 ·gc.alloc.rate:      2564.948 MB/sec
                 ·gc.alloc.rate.norm: 360.003 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 275.471 ns/op
                 ·gc.alloc.rate:      2491.803 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  268.891 ±(99.9%) 14.178 ns/op [Average]
  (min, avg, max) = (267.001, 268.891, 275.471), stdev = 3.682
  CI (99.9%): [254.713, 283.070] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  2552.749 ±(99.9%) 131.436 MB/sec [Average]
  (min, avg, max) = (2491.803, 2552.749, 2570.812), stdev = 34.133
  CI (99.9%): [2421.314, 2684.185] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.003), stdev = 0.001
  CI (99.9%): [359.996, 360.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  67.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.400, 14.000), stdev = 0.548
  CI (99.9%): [67.000, 67.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  31.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.200)

# Run progress: 84.60% complete, ETA 00:10:52
# Fork: 1 of 1
# Warmup Iteration   1: 4114.769 ns/op
# Warmup Iteration   2: 448.357 ns/op
# Warmup Iteration   3: 376.511 ns/op
# Warmup Iteration   4: 360.047 ns/op
# Warmup Iteration   5: 361.138 ns/op
Iteration   1: 359.855 ns/op
                 ·gc.alloc.rate:      1907.532 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 360.501 ns/op
                 ·gc.alloc.rate:      1903.988 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 360.806 ns/op
                 ·gc.alloc.rate:      1902.477 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 360.687 ns/op
                 ·gc.alloc.rate:      1901.768 MB/sec
                 ·gc.alloc.rate.norm: 360.004 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 360.686 ns/op
                 ·gc.alloc.rate:      1902.989 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  360.507 ±(99.9%) 1.465 ns/op [Average]
  (min, avg, max) = (359.855, 360.507, 360.806), stdev = 0.381
  CI (99.9%): [359.042, 361.972] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1903.751 ±(99.9%) 8.714 MB/sec [Average]
  (min, avg, max) = (1901.768, 1903.751, 1907.532), stdev = 2.263
  CI (99.9%): [1895.036, 1912.465] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.004), stdev = 0.002
  CI (99.9%): [359.994, 360.008] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  54.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.800, 11.000), stdev = 0.447
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  24.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 84.84% complete, ETA 00:10:42
# Fork: 1 of 1
# Warmup Iteration   1: 2762.319 ns/op
# Warmup Iteration   2: 436.381 ns/op
# Warmup Iteration   3: 457.167 ns/op
# Warmup Iteration   4: 410.559 ns/op
# Warmup Iteration   5: 409.656 ns/op
Iteration   1: 410.812 ns/op
                 ·gc.alloc.rate:      1670.842 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 409.696 ns/op
                 ·gc.alloc.rate:      1675.275 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 410.199 ns/op
                 ·gc.alloc.rate:      1672.917 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 410.060 ns/op
                 ·gc.alloc.rate:      1672.970 MB/sec
                 ·gc.alloc.rate.norm: 360.005 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 410.314 ns/op
                 ·gc.alloc.rate:      1672.690 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  410.216 ±(99.9%) 1.565 ns/op [Average]
  (min, avg, max) = (409.696, 410.216, 410.812), stdev = 0.406
  CI (99.9%): [408.651, 411.781] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1672.939 ±(99.9%) 6.063 MB/sec [Average]
  (min, avg, max) = (1670.842, 1672.939, 1675.275), stdev = 1.575
  CI (99.9%): [1666.875, 1679.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.005), stdev = 0.002
  CI (99.9%): [359.994, 360.009] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  51.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
  CI (99.9%): [51.000, 51.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 85.09% complete, ETA 00:10:31
# Fork: 1 of 1
# Warmup Iteration   1: 4769.696 ns/op
# Warmup Iteration   2: 455.428 ns/op
# Warmup Iteration   3: 441.089 ns/op
# Warmup Iteration   4: 428.605 ns/op
# Warmup Iteration   5: 429.421 ns/op
Iteration   1: 428.730 ns/op
                 ·gc.alloc.rate:      1600.967 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 428.834 ns/op
                 ·gc.alloc.rate:      1600.310 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 428.429 ns/op
                 ·gc.alloc.rate:      1602.104 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 428.549 ns/op
                 ·gc.alloc.rate:      1601.075 MB/sec
                 ·gc.alloc.rate.norm: 360.005 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 427.831 ns/op
                 ·gc.alloc.rate:      1604.285 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  428.475 ±(99.9%) 1.512 ns/op [Average]
  (min, avg, max) = (427.831, 428.475, 428.834), stdev = 0.393
  CI (99.9%): [426.963, 429.986] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1601.748 ±(99.9%) 5.994 MB/sec [Average]
  (min, avg, max) = (1600.310, 1601.748, 1604.285), stdev = 1.557
  CI (99.9%): [1595.754, 1607.742] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.005), stdev = 0.002
  CI (99.9%): [359.993, 360.009] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  48.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
  CI (99.9%): [48.000, 48.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  22.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = )

# Run progress: 85.33% complete, ETA 00:10:21
# Fork: 1 of 1
# Warmup Iteration   1: 3516.599 ns/op
# Warmup Iteration   2: 2328.594 ns/op
# Warmup Iteration   3: 2232.268 ns/op
# Warmup Iteration   4: 2206.436 ns/op
# Warmup Iteration   5: 2192.113 ns/op
Iteration   1: 2191.126 ns/op
                 ·gc.alloc.rate:      744.840 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2193.794 ns/op
                 ·gc.alloc.rate:      743.808 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2190.104 ns/op
                 ·gc.alloc.rate:      745.036 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2194.413 ns/op
                 ·gc.alloc.rate:      743.203 MB/sec
                 ·gc.alloc.rate.norm: 856.025 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2085.259 ns/op
                 ·gc.alloc.rate:      782.665 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2170.939 ±(99.9%) 184.563 ns/op [Average]
  (min, avg, max) = (2085.259, 2170.939, 2194.413), stdev = 47.930
  CI (99.9%): [1986.376, 2355.502] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  751.911 ±(99.9%) 66.265 MB/sec [Average]
  (min, avg, max) = (743.203, 751.911, 782.665), stdev = 17.209
  CI (99.9%): [685.646, 818.176] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  856.006 ±(99.9%) 0.040 B/op [Average]
  (min, avg, max) = (856.001, 856.006, 856.025), stdev = 0.010
  CI (99.9%): [855.965, 856.046] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  26.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
  CI (99.9%): [26.000, 26.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200)

# Run progress: 85.57% complete, ETA 00:10:11
# Fork: 1 of 1
# Warmup Iteration   1: 2770.721 ns/op
# Warmup Iteration   2: 1897.865 ns/op
# Warmup Iteration   3: 1756.950 ns/op
# Warmup Iteration   4: 1724.774 ns/op
# Warmup Iteration   5: 1725.645 ns/op
Iteration   1: 1746.685 ns/op
                 ·gc.alloc.rate:      890.703 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1740.205 ns/op
                 ·gc.alloc.rate:      893.884 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1721.570 ns/op
                 ·gc.alloc.rate:      903.618 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 1722.594 ns/op
                 ·gc.alloc.rate:      902.535 MB/sec
                 ·gc.alloc.rate.norm: 816.019 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 1625.650 ns/op
                 ·gc.alloc.rate:      956.914 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  1711.341 ±(99.9%) 189.197 ns/op [Average]
  (min, avg, max) = (1625.650, 1711.341, 1746.685), stdev = 49.134
  CI (99.9%): [1522.144, 1900.538] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  909.531 ±(99.9%) 104.189 MB/sec [Average]
  (min, avg, max) = (890.703, 909.531, 956.914), stdev = 27.058
  CI (99.9%): [805.342, 1013.720] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  816.005 ±(99.9%) 0.032 B/op [Average]
  (min, avg, max) = (816.001, 816.005, 816.019), stdev = 0.008
  CI (99.9%): [815.973, 816.036] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.)

# Run progress: 85.82% complete, ETA 00:10:00
# Fork: 1 of 1
# Warmup Iteration   1: 3646.717 ns/op
# Warmup Iteration   2: 2286.163 ns/op
# Warmup Iteration   3: 2013.119 ns/op
# Warmup Iteration   4: 1966.377 ns/op
# Warmup Iteration   5: 1965.058 ns/op
Iteration   1: 1966.357 ns/op
                 ·gc.alloc.rate:      985.030 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1964.772 ns/op
                 ·gc.alloc.rate:      985.867 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1963.089 ns/op
                 ·gc.alloc.rate:      986.664 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 1962.430 ns/op
                 ·gc.alloc.rate:      986.563 MB/sec
                 ·gc.alloc.rate.norm: 1016.022 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 1855.847 ns/op
                 ·gc.alloc.rate:      1043.822 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  1942.499 ±(99.9%) 186.618 ns/op [Average]
  (min, avg, max) = (1855.847, 1942.499, 1966.357), stdev = 48.464
  CI (99.9%): [1755.881, 2129.117] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  997.589 ±(99.9%) 99.551 MB/sec [Average]
  (min, avg, max) = (985.030, 997.589, 1043.822), stdev = 25.853
  CI (99.9%): [898.038, 1097.140] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1016.005 ±(99.9%) 0.036 B/op [Average]
  (min, avg, max) = (1016.001, 1016.005, 1016.022), stdev = 0.009
  CI (99.9%): [1015.969, 1016.041] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200)

# Run progress: 86.06% complete, ETA 00:09:50
# Fork: 1 of 1
# Warmup Iteration   1: 3705.387 ns/op
# Warmup Iteration   2: 2151.300 ns/op
# Warmup Iteration   3: 2065.468 ns/op
# Warmup Iteration   4: 2022.785 ns/op
# Warmup Iteration   5: 2015.250 ns/op
Iteration   1: 2014.540 ns/op
                 ·gc.alloc.rate:      984.364 MB/sec
                 ·gc.alloc.rate.norm: 1040.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2018.124 ns/op
                 ·gc.alloc.rate:      982.427 MB/sec
                 ·gc.alloc.rate.norm: 1040.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2024.856 ns/op
                 ·gc.alloc.rate:      979.172 MB/sec
                 ·gc.alloc.rate.norm: 1040.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2020.596 ns/op
                 ·gc.alloc.rate:      980.912 MB/sec
                 ·gc.alloc.rate.norm: 1040.023 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1902.932 ns/op
                 ·gc.alloc.rate:      1041.985 MB/sec
                 ·gc.alloc.rate.norm: 1040.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  1996.209 ±(99.9%) 201.307 ns/op [Average]
  (min, avg, max) = (1902.932, 1996.209, 2024.856), stdev = 52.279
  CI (99.9%): [1794.902, 2197.517] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  993.772 ±(99.9%) 104.044 MB/sec [Average]
  (min, avg, max) = (979.172, 993.772, 1041.985), stdev = 27.020
  CI (99.9%): [889.728, 1097.816] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1040.005 ±(99.9%) 0.037 B/op [Average]
  (min, avg, max) = (1040.001, 1040.005, 1040.023), stdev = 0.010
  CI (99.9%): [1039.968, 1040.043] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.)

# Run progress: 86.31% complete, ETA 00:09:40
# Fork: 1 of 1
# Warmup Iteration   1: 3971.413 ns/op
# Warmup Iteration   2: 2165.488 ns/op
# Warmup Iteration   3: 2084.286 ns/op
# Warmup Iteration   4: 2044.285 ns/op
# Warmup Iteration   5: 2045.378 ns/op
Iteration   1: 2045.614 ns/op
                 ·gc.alloc.rate:      1006.499 MB/sec
                 ·gc.alloc.rate.norm: 1080.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2040.250 ns/op
                 ·gc.alloc.rate:      1009.162 MB/sec
                 ·gc.alloc.rate.norm: 1080.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2041.057 ns/op
                 ·gc.alloc.rate:      1008.780 MB/sec
                 ·gc.alloc.rate.norm: 1080.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2044.572 ns/op
                 ·gc.alloc.rate:      1006.705 MB/sec
                 ·gc.alloc.rate.norm: 1080.022 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1914.786 ns/op
                 ·gc.alloc.rate:      1075.454 MB/sec
                 ·gc.alloc.rate.norm: 1080.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2017.256 ±(99.9%) 220.746 ns/op [Average]
  (min, avg, max) = (1914.786, 2017.256, 2045.614), stdev = 57.327
  CI (99.9%): [1796.510, 2238.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  1021.320 ±(99.9%) 116.617 MB/sec [Average]
  (min, avg, max) = (1006.499, 1021.320, 1075.454), stdev = 30.285
  CI (99.9%): [904.703, 1137.937] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1080.005 ±(99.9%) 0.036 B/op [Average]
  (min, avg, max) = (1080.001, 1080.005, 1080.022), stdev = 0.009
  CI (99.9%): [1079.969, 1080.041] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = a.200.200)

# Run progress: 86.55% complete, ETA 00:09:29
# Fork: 1 of 1
# Warmup Iteration   1: 4559.392 ns/op
# Warmup Iteration   2: 2847.327 ns/op
# Warmup Iteration   3: 2739.025 ns/op
# Warmup Iteration   4: 2707.526 ns/op
# Warmup Iteration   5: 2682.680 ns/op
Iteration   1: 2680.677 ns/op
                 ·gc.alloc.rate:      802.154 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2677.216 ns/op
                 ·gc.alloc.rate:      803.165 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2680.411 ns/op
                 ·gc.alloc.rate:      802.288 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2677.738 ns/op
                 ·gc.alloc.rate:      802.830 MB/sec
                 ·gc.alloc.rate.norm: 1128.029 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2571.141 ns/op
                 ·gc.alloc.rate:      836.400 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2657.436 ±(99.9%) 185.854 ns/op [Average]
  (min, avg, max) = (2571.141, 2657.436, 2680.677), stdev = 48.266
  CI (99.9%): [2471.583, 2843.290] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  809.367 ±(99.9%) 58.210 MB/sec [Average]
  (min, avg, max) = (802.154, 809.367, 836.400), stdev = 15.117
  CI (99.9%): [751.158, 867.577] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1128.007 ±(99.9%) 0.049 B/op [Average]
  (min, avg, max) = (1128.001, 1128.007, 1128.029), stdev = 0.013
  CI (99.9%): [1127.958, 1128.055] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.a.200)

# Run progress: 86.80% complete, ETA 00:09:19
# Fork: 1 of 1
# Warmup Iteration   1: 4779.624 ns/op
# Warmup Iteration   2: 2923.659 ns/op
# Warmup Iteration   3: 2771.915 ns/op
# Warmup Iteration   4: 2740.353 ns/op
# Warmup Iteration   5: 2712.017 ns/op
Iteration   1: 2717.074 ns/op
                 ·gc.alloc.rate:      813.959 MB/sec
                 ·gc.alloc.rate.norm: 1160.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2714.022 ns/op
                 ·gc.alloc.rate:      814.854 MB/sec
                 ·gc.alloc.rate.norm: 1160.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2714.701 ns/op
                 ·gc.alloc.rate:      814.548 MB/sec
                 ·gc.alloc.rate.norm: 1160.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2719.942 ns/op
                 ·gc.alloc.rate:      812.903 MB/sec
                 ·gc.alloc.rate.norm: 1160.030 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2581.488 ns/op
                 ·gc.alloc.rate:      856.662 MB/sec
                 ·gc.alloc.rate.norm: 1160.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2689.445 ±(99.9%) 232.559 ns/op [Average]
  (min, avg, max) = (2581.488, 2689.445, 2719.942), stdev = 60.395
  CI (99.9%): [2456.887, 2922.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  822.585 ±(99.9%) 73.409 MB/sec [Average]
  (min, avg, max) = (812.903, 822.585, 856.662), stdev = 19.064
  CI (99.9%): [749.176, 895.994] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1160.007 ±(99.9%) 0.049 B/op [Average]
  (min, avg, max) = (1160.001, 1160.007, 1160.030), stdev = 0.013
  CI (99.9%): [1159.958, 1160.057] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.a)

# Run progress: 87.04% complete, ETA 00:09:09
# Fork: 1 of 1
# Warmup Iteration   1: 4292.373 ns/op
# Warmup Iteration   2: 2957.662 ns/op
# Warmup Iteration   3: 2811.034 ns/op
# Warmup Iteration   4: 2855.758 ns/op
# Warmup Iteration   5: 2767.991 ns/op
Iteration   1: 2746.762 ns/op
                 ·gc.alloc.rate:      799.636 MB/sec
                 ·gc.alloc.rate.norm: 1152.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2751.731 ns/op
                 ·gc.alloc.rate:      798.092 MB/sec
                 ·gc.alloc.rate.norm: 1152.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2745.700 ns/op
                 ·gc.alloc.rate:      799.788 MB/sec
                 ·gc.alloc.rate.norm: 1152.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2746.236 ns/op
                 ·gc.alloc.rate:      799.445 MB/sec
                 ·gc.alloc.rate.norm: 1152.031 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2600.310 ns/op
                 ·gc.alloc.rate:      844.712 MB/sec
                 ·gc.alloc.rate.norm: 1152.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2718.148 ±(99.9%) 253.824 ns/op [Average]
  (min, avg, max) = (2600.310, 2718.148, 2751.731), stdev = 65.917
  CI (99.9%): [2464.324, 2971.972] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  808.335 ±(99.9%) 78.349 MB/sec [Average]
  (min, avg, max) = (798.092, 808.335, 844.712), stdev = 20.347
  CI (99.9%): [729.986, 886.684] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1152.007 ±(99.9%) 0.051 B/op [Average]
  (min, avg, max) = (1152.001, 1152.007, 1152.031), stdev = 0.013
  CI (99.9%): [1151.956, 1152.058] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  11.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
  CI (99.9%): [11.000, 11.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.200.200)

# Run progress: 87.29% complete, ETA 00:08:58
# Fork: 1 of 1
# Warmup Iteration   1: 3699.472 ns/op
# Warmup Iteration   2: 2287.816 ns/op
# Warmup Iteration   3: 2200.941 ns/op
# Warmup Iteration   4: 2148.381 ns/op
# Warmup Iteration   5: 2150.119 ns/op
Iteration   1: 2146.857 ns/op
                 ·gc.alloc.rate:      1051.356 MB/sec
                 ·gc.alloc.rate.norm: 1184.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2146.176 ns/op
                 ·gc.alloc.rate:      1051.641 MB/sec
                 ·gc.alloc.rate.norm: 1184.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2146.484 ns/op
                 ·gc.alloc.rate:      1051.627 MB/sec
                 ·gc.alloc.rate.norm: 1184.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2147.406 ns/op
                 ·gc.alloc.rate:      1050.875 MB/sec
                 ·gc.alloc.rate.norm: 1184.024 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 2030.599 ns/op
                 ·gc.alloc.rate:      1111.791 MB/sec
                 ·gc.alloc.rate.norm: 1184.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2123.504 ±(99.9%) 199.995 ns/op [Average]
  (min, avg, max) = (2030.599, 2123.504, 2147.406), stdev = 51.938
  CI (99.9%): [1923.510, 2323.499] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  1063.458 ±(99.9%) 104.048 MB/sec [Average]
  (min, avg, max) = (1050.875, 1063.458, 1111.791), stdev = 27.021
  CI (99.9%): [959.410, 1167.506] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1184.005 ±(99.9%) 0.040 B/op [Average]
  (min, avg, max) = (1184.000, 1184.005, 1184.024), stdev = 0.010
  CI (99.9%): [1183.966, 1184.045] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  36.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.99999)

# Run progress: 87.53% complete, ETA 00:08:48
# Fork: 1 of 1
# Warmup Iteration   1: 4965.729 ns/op
# Warmup Iteration   2: 2267.798 ns/op
# Warmup Iteration   3: 2165.957 ns/op
# Warmup Iteration   4: 2121.619 ns/op
# Warmup Iteration   5: 2122.307 ns/op
Iteration   1: 2121.322 ns/op
                 ·gc.alloc.rate:      1107.254 MB/sec
                 ·gc.alloc.rate.norm: 1232.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2121.248 ns/op
                 ·gc.alloc.rate:      1107.342 MB/sec
                 ·gc.alloc.rate.norm: 1232.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2123.367 ns/op
                 ·gc.alloc.rate:      1106.107 MB/sec
                 ·gc.alloc.rate.norm: 1232.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 2124.938 ns/op
                 ·gc.alloc.rate:      1104.714 MB/sec
                 ·gc.alloc.rate.norm: 1232.024 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2114.496 ns/op
                 ·gc.alloc.rate:      1110.951 MB/sec
                 ·gc.alloc.rate.norm: 1232.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2121.074 ±(99.9%) 15.349 ns/op [Average]
  (min, avg, max) = (2114.496, 2121.074, 2124.938), stdev = 3.986
  CI (99.9%): [2105.725, 2136.423] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  1107.274 ±(99.9%) 8.914 MB/sec [Average]
  (min, avg, max) = (1104.714, 1107.274, 1110.951), stdev = 2.315
  CI (99.9%): [1098.359, 1116.188] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1232.006 ±(99.9%) 0.039 B/op [Average]
  (min, avg, max) = (1232.001, 1232.006, 1232.024), stdev = 0.010
  CI (99.9%): [1231.966, 1232.045] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  38.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
  CI (99.9%): [38.000, 38.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.-200)

# Run progress: 87.78% complete, ETA 00:08:37
# Fork: 1 of 1
# Warmup Iteration   1: 4618.018 ns/op
# Warmup Iteration   2: 2258.530 ns/op
# Warmup Iteration   3: 2150.141 ns/op
# Warmup Iteration   4: 2103.365 ns/op
# Warmup Iteration   5: 2104.765 ns/op
Iteration   1: 2101.210 ns/op
                 ·gc.alloc.rate:      1139.693 MB/sec
                 ·gc.alloc.rate.norm: 1256.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2100.228 ns/op
                 ·gc.alloc.rate:      1139.990 MB/sec
                 ·gc.alloc.rate.norm: 1256.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2105.099 ns/op
                 ·gc.alloc.rate:      1137.339 MB/sec
                 ·gc.alloc.rate.norm: 1256.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 2095.186 ns/op
                 ·gc.alloc.rate:      1142.124 MB/sec
                 ·gc.alloc.rate.norm: 1256.023 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 2001.874 ns/op
                 ·gc.alloc.rate:      1196.110 MB/sec
                 ·gc.alloc.rate.norm: 1256.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2080.719 ±(99.9%) 170.266 ns/op [Average]
  (min, avg, max) = (2001.874, 2080.719, 2105.099), stdev = 44.218
  CI (99.9%): [1910.453, 2250.985] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  1151.051 ±(99.9%) 97.212 MB/sec [Average]
  (min, avg, max) = (1137.339, 1151.051, 1196.110), stdev = 25.246
  CI (99.9%): [1053.839, 1248.264] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1256.006 ±(99.9%) 0.039 B/op [Average]
  (min, avg, max) = (1256.001, 1256.006, 1256.023), stdev = 0.010
  CI (99.9%): [1255.967, 1256.044] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  39.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
  CI (99.9%): [39.000, 39.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 1.0.0)

# Run progress: 88.02% complete, ETA 00:08:27
# Fork: 1 of 1
# Warmup Iteration   1: 549.034 ns/op
# Warmup Iteration   2: 261.433 ns/op
# Warmup Iteration   3: 236.418 ns/op
# Warmup Iteration   4: 236.865 ns/op
# Warmup Iteration   5: 237.218 ns/op
Iteration   1: 237.234 ns/op
                 ·gc.alloc.rate:      2636.179 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms

Iteration   2: 237.069 ns/op
                 ·gc.alloc.rate:      2637.825 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 237.028 ns/op
                 ·gc.alloc.rate:      2638.332 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 237.121 ns/op
                 ·gc.alloc.rate:      2635.645 MB/sec
                 ·gc.alloc.rate.norm: 328.003 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 236.964 ns/op
                 ·gc.alloc.rate:      2639.357 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  237.083 ±(99.9%) 0.393 ns/op [Average]
  (min, avg, max) = (236.964, 237.083, 237.234), stdev = 0.102
  CI (99.9%): [236.690, 237.477] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  2637.468 ±(99.9%) 5.912 MB/sec [Average]
  (min, avg, max) = (2635.645, 2637.468, 2639.357), stdev = 1.535
  CI (99.9%): [2631.556, 2643.380] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  328.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (328.000, 328.001, 328.003), stdev = 0.001
  CI (99.9%): [327.996, 328.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  77.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.400, 16.000), stdev = 0.548
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  35.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.200)

# Run progress: 88.26% complete, ETA 00:08:17
# Fork: 1 of 1
# Warmup Iteration   1: 491.506 ns/op
# Warmup Iteration   2: 282.583 ns/op
# Warmup Iteration   3: 262.999 ns/op
# Warmup Iteration   4: 262.820 ns/op
# Warmup Iteration   5: 263.611 ns/op
Iteration   1: 262.395 ns/op
                 ·gc.alloc.rate:      3777.979 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            30.000 ms

Iteration   2: 261.379 ns/op
                 ·gc.alloc.rate:      3792.241 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            28.000 ms

Iteration   3: 271.059 ns/op
                 ·gc.alloc.rate:      3657.233 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            25.000 ms

Iteration   4: 269.711 ns/op
                 ·gc.alloc.rate:      3672.498 MB/sec
                 ·gc.alloc.rate.norm: 520.003 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            46.000 ms

Iteration   5: 262.490 ns/op
                 ·gc.alloc.rate:      3777.184 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            28.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  265.407 ±(99.9%) 17.674 ns/op [Average]
  (min, avg, max) = (261.379, 265.407, 271.059), stdev = 4.590
  CI (99.9%): [247.733, 283.081] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  3735.427 ±(99.9%) 249.969 MB/sec [Average]
  (min, avg, max) = (3657.233, 3735.427, 3792.241), stdev = 64.916
  CI (99.9%): [3485.458, 3985.396] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  520.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (520.000, 520.001, 520.003), stdev = 0.001
  CI (99.9%): [519.996, 520.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  84.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.800, 18.000), stdev = 0.837
  CI (99.9%): [84.000, 84.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  157.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (25.000, 31.400, 46.000), stdev = 8.355
  CI (99.9%): [157.000, 157.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 88.51% complete, ETA 00:08:06
# Fork: 1 of 1
# Warmup Iteration   1: 545.209 ns/op
# Warmup Iteration   2: 318.189 ns/op
# Warmup Iteration   3: 290.080 ns/op
# Warmup Iteration   4: 273.491 ns/op
# Warmup Iteration   5: 273.663 ns/op
Iteration   1: 274.128 ns/op
                 ·gc.alloc.rate:      3727.995 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   2: 274.420 ns/op
                 ·gc.alloc.rate:      3723.851 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            10.000 ms

Iteration   3: 273.786 ns/op
                 ·gc.alloc.rate:      3732.559 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            8.000 ms

Iteration   4: 273.818 ns/op
                 ·gc.alloc.rate:      3730.894 MB/sec
                 ·gc.alloc.rate.norm: 536.003 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            10.000 ms

Iteration   5: 287.594 ns/op
                 ·gc.alloc.rate:      3553.398 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  276.749 ±(99.9%) 23.366 ns/op [Average]
  (min, avg, max) = (273.786, 276.749, 287.594), stdev = 6.068
  CI (99.9%): [253.384, 300.115] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  3693.740 ±(99.9%) 302.363 MB/sec [Average]
  (min, avg, max) = (3553.398, 3693.740, 3732.559), stdev = 78.523
  CI (99.9%): [3391.377, 3996.102] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  536.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (536.000, 536.001, 536.003), stdev = 0.001
  CI (99.9%): [535.996, 536.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  99.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (19.000, 19.800, 20.000), stdev = 0.447
  CI (99.9%): [99.000, 99.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  44.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (7.000, 8.800, 10.000), stdev = 1.304
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 88.75% complete, ETA 00:07:56
# Fork: 1 of 1
# Warmup Iteration   1: 672.154 ns/op
# Warmup Iteration   2: 323.530 ns/op
# Warmup Iteration   3: 293.895 ns/op
# Warmup Iteration   4: 293.331 ns/op
# Warmup Iteration   5: 296.304 ns/op
Iteration   1: 296.093 ns/op
                 ·gc.alloc.rate:      3348.221 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            31.000 ms

Iteration   2: 292.866 ns/op
                 ·gc.alloc.rate:      3384.916 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            18.000 ms

Iteration   3: 293.941 ns/op
                 ·gc.alloc.rate:      3372.509 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            23.000 ms

Iteration   4: 292.515 ns/op
                 ·gc.alloc.rate:      3387.930 MB/sec
                 ·gc.alloc.rate.norm: 520.003 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            18.000 ms

Iteration   5: 294.420 ns/op
                 ·gc.alloc.rate:      3367.417 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            27.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  293.967 ±(99.9%) 5.462 ns/op [Average]
  (min, avg, max) = (292.515, 293.967, 296.093), stdev = 1.418
  CI (99.9%): [288.505, 299.429] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  3372.199 ±(99.9%) 61.099 MB/sec [Average]
  (min, avg, max) = (3348.221, 3372.199, 3387.930), stdev = 15.867
  CI (99.9%): [3311.100, 3433.298] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  520.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (520.000, 520.001, 520.003), stdev = 0.001
  CI (99.9%): [519.996, 520.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  76.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.200, 16.000), stdev = 0.447
  CI (99.9%): [76.000, 76.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  117.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 23.400, 31.000), stdev = 5.683
  CI (99.9%): [117.000, 117.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = )

# Run progress: 89.00% complete, ETA 00:07:46
# Fork: 1 of 1
# Warmup Iteration   1: 3045.517 ns/op
# Warmup Iteration   2: 2314.791 ns/op
# Warmup Iteration   3: 2219.045 ns/op
# Warmup Iteration   4: 2194.246 ns/op
# Warmup Iteration   5: 2174.535 ns/op
Iteration   1: 2171.684 ns/op
                 ·gc.alloc.rate:      751.542 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2250.832 ns/op
                 ·gc.alloc.rate:      725.108 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2171.515 ns/op
                 ·gc.alloc.rate:      751.539 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2174.356 ns/op
                 ·gc.alloc.rate:      750.326 MB/sec
                 ·gc.alloc.rate.norm: 856.024 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2080.052 ns/op
                 ·gc.alloc.rate:      784.621 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2169.688 ±(99.9%) 233.020 ns/op [Average]
  (min, avg, max) = (2080.052, 2169.688, 2250.832), stdev = 60.515
  CI (99.9%): [1936.667, 2402.708] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  752.627 ±(99.9%) 81.425 MB/sec [Average]
  (min, avg, max) = (725.108, 752.627, 784.621), stdev = 21.146
  CI (99.9%): [671.202, 834.052] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  856.006 ±(99.9%) 0.040 B/op [Average]
  (min, avg, max) = (856.001, 856.006, 856.024), stdev = 0.010
  CI (99.9%): [855.966, 856.045] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  26.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
  CI (99.9%): [26.000, 26.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  11.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
  CI (99.9%): [11.000, 11.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200)

# Run progress: 89.24% complete, ETA 00:07:35
# Fork: 1 of 1
# Warmup Iteration   1: 2745.462 ns/op
# Warmup Iteration   2: 1899.405 ns/op
# Warmup Iteration   3: 1764.986 ns/op
# Warmup Iteration   4: 1721.535 ns/op
# Warmup Iteration   5: 1728.476 ns/op
Iteration   1: 1786.943 ns/op
                 ·gc.alloc.rate:      870.585 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1724.812 ns/op
                 ·gc.alloc.rate:      901.910 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1724.814 ns/op
                 ·gc.alloc.rate:      901.884 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1725.787 ns/op
                 ·gc.alloc.rate:      900.753 MB/sec
                 ·gc.alloc.rate.norm: 816.019 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 1615.013 ns/op
                 ·gc.alloc.rate:      963.269 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  1715.474 ±(99.9%) 239.554 ns/op [Average]
  (min, avg, max) = (1615.013, 1715.474, 1786.943), stdev = 62.212
  CI (99.9%): [1475.919, 1955.028] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  907.680 ±(99.9%) 130.312 MB/sec [Average]
  (min, avg, max) = (870.585, 907.680, 963.269), stdev = 33.841
  CI (99.9%): [777.369, 1037.992] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  816.005 ±(99.9%) 0.032 B/op [Average]
  (min, avg, max) = (816.001, 816.005, 816.019), stdev = 0.008
  CI (99.9%): [815.973, 816.036] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.)

# Run progress: 89.49% complete, ETA 00:07:25
# Fork: 1 of 1
# Warmup Iteration   1: 3432.036 ns/op
# Warmup Iteration   2: 2295.855 ns/op
# Warmup Iteration   3: 2433.372 ns/op
# Warmup Iteration   4: 2366.731 ns/op
# Warmup Iteration   5: 2372.332 ns/op
Iteration   1: 2369.688 ns/op
                 ·gc.alloc.rate:      830.301 MB/sec
                 ·gc.alloc.rate.norm: 1032.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2369.846 ns/op
                 ·gc.alloc.rate:      830.172 MB/sec
                 ·gc.alloc.rate.norm: 1032.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2373.565 ns/op
                 ·gc.alloc.rate:      828.787 MB/sec
                 ·gc.alloc.rate.norm: 1031.999 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2479.393 ns/op
                 ·gc.alloc.rate:      793.095 MB/sec
                 ·gc.alloc.rate.norm: 1032.028 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2276.536 ns/op
                 ·gc.alloc.rate:      864.205 MB/sec
                 ·gc.alloc.rate.norm: 1031.999 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2373.805 ±(99.9%) 276.623 ns/op [Average]
  (min, avg, max) = (2276.536, 2373.805, 2479.393), stdev = 71.838
  CI (99.9%): [2097.183, 2650.428] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  829.312 ±(99.9%) 96.865 MB/sec [Average]
  (min, avg, max) = (793.095, 829.312, 864.205), stdev = 25.156
  CI (99.9%): [732.447, 926.177] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1032.006 ±(99.9%) 0.047 B/op [Average]
  (min, avg, max) = (1031.999, 1032.006, 1032.028), stdev = 0.012
  CI (99.9%): [1031.958, 1032.053] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200)

# Run progress: 89.73% complete, ETA 00:07:15
# Fork: 1 of 1
# Warmup Iteration   1: 3443.597 ns/op
# Warmup Iteration   2: 2108.487 ns/op
# Warmup Iteration   3: 2080.412 ns/op
# Warmup Iteration   4: 1987.955 ns/op
# Warmup Iteration   5: 1986.530 ns/op
Iteration   1: 1988.938 ns/op
                 ·gc.alloc.rate:      973.904 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1987.555 ns/op
                 ·gc.alloc.rate:      974.483 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1989.835 ns/op
                 ·gc.alloc.rate:      973.449 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 1988.912 ns/op
                 ·gc.alloc.rate:      973.653 MB/sec
                 ·gc.alloc.rate.norm: 1016.022 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1880.440 ns/op
                 ·gc.alloc.rate:      1030.240 MB/sec
                 ·gc.alloc.rate.norm: 1016.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  1967.136 ±(99.9%) 186.646 ns/op [Average]
  (min, avg, max) = (1880.440, 1967.136, 1989.835), stdev = 48.471
  CI (99.9%): [1780.490, 2153.782] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  985.146 ±(99.9%) 97.080 MB/sec [Average]
  (min, avg, max) = (973.449, 985.146, 1030.240), stdev = 25.211
  CI (99.9%): [888.066, 1082.226] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1016.005 ±(99.9%) 0.036 B/op [Average]
  (min, avg, max) = (1016.001, 1016.005, 1016.022), stdev = 0.009
  CI (99.9%): [1015.969, 1016.041] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.140
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.)

# Run progress: 89.98% complete, ETA 00:07:04
# Fork: 1 of 1
# Warmup Iteration   1: 3746.263 ns/op
# Warmup Iteration   2: 2338.919 ns/op
# Warmup Iteration   3: 2264.582 ns/op
# Warmup Iteration   4: 2208.377 ns/op
# Warmup Iteration   5: 2219.739 ns/op
Iteration   1: 2205.726 ns/op
                 ·gc.alloc.rate:      947.300 MB/sec
                 ·gc.alloc.rate.norm: 1096.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2211.340 ns/op
                 ·gc.alloc.rate:      944.907 MB/sec
                 ·gc.alloc.rate.norm: 1096.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2206.603 ns/op
                 ·gc.alloc.rate:      946.798 MB/sec
                 ·gc.alloc.rate.norm: 1096.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2215.254 ns/op
                 ·gc.alloc.rate:      942.991 MB/sec
                 ·gc.alloc.rate.norm: 1096.025 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2108.797 ns/op
                 ·gc.alloc.rate:      990.897 MB/sec
                 ·gc.alloc.rate.norm: 1096.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2189.544 ±(99.9%) 174.442 ns/op [Average]
  (min, avg, max) = (2108.797, 2189.544, 2215.254), stdev = 45.302
  CI (99.9%): [2015.102, 2363.986] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  954.578 ±(99.9%) 78.452 MB/sec [Average]
  (min, avg, max) = (942.991, 954.578, 990.897), stdev = 20.374
  CI (99.9%): [876.127, 1033.030] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1096.006 ±(99.9%) 0.040 B/op [Average]
  (min, avg, max) = (1096.001, 1096.006, 1096.025), stdev = 0.010
  CI (99.9%): [1095.965, 1096.046] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = a.200.200)

# Run progress: 90.22% complete, ETA 00:06:54
# Fork: 1 of 1
# Warmup Iteration   1: 4467.169 ns/op
# Warmup Iteration   2: 2657.019 ns/op
# Warmup Iteration   3: 2534.311 ns/op
# Warmup Iteration   4: 2504.810 ns/op
# Warmup Iteration   5: 2475.025 ns/op
Iteration   1: 2469.831 ns/op
                 ·gc.alloc.rate:      852.271 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2472.338 ns/op
                 ·gc.alloc.rate:      851.362 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2468.927 ns/op
                 ·gc.alloc.rate:      852.554 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2472.110 ns/op
                 ·gc.alloc.rate:      850.475 MB/sec
                 ·gc.alloc.rate.norm: 1104.028 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2371.861 ns/op
                 ·gc.alloc.rate:      887.478 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2451.013 ±(99.9%) 170.475 ns/op [Average]
  (min, avg, max) = (2371.861, 2451.013, 2472.338), stdev = 44.272
  CI (99.9%): [2280.538, 2621.489] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  858.828 ±(99.9%) 61.752 MB/sec [Average]
  (min, avg, max) = (850.475, 858.828, 887.478), stdev = 16.037
  CI (99.9%): [797.076, 920.580] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1104.006 ±(99.9%) 0.046 B/op [Average]
  (min, avg, max) = (1104.001, 1104.006, 1104.028), stdev = 0.012
  CI (99.9%): [1103.961, 1104.052] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.a.200)

# Run progress: 90.46% complete, ETA 00:06:44
# Fork: 1 of 1
# Warmup Iteration   1: 4376.256 ns/op
# Warmup Iteration   2: 2729.033 ns/op
# Warmup Iteration   3: 2604.323 ns/op
# Warmup Iteration   4: 2552.271 ns/op
# Warmup Iteration   5: 2624.878 ns/op
Iteration   1: 2533.242 ns/op
                 ·gc.alloc.rate:      861.030 MB/sec
                 ·gc.alloc.rate.norm: 1144.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2531.068 ns/op
                 ·gc.alloc.rate:      861.685 MB/sec
                 ·gc.alloc.rate.norm: 1144.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2534.718 ns/op
                 ·gc.alloc.rate:      860.485 MB/sec
                 ·gc.alloc.rate.norm: 1144.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2530.233 ns/op
                 ·gc.alloc.rate:      861.576 MB/sec
                 ·gc.alloc.rate.norm: 1144.028 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2409.096 ns/op
                 ·gc.alloc.rate:      905.443 MB/sec
                 ·gc.alloc.rate.norm: 1144.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2507.672 ±(99.9%) 212.300 ns/op [Average]
  (min, avg, max) = (2409.096, 2507.672, 2534.718), stdev = 55.134
  CI (99.9%): [2295.372, 2719.972] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  870.044 ±(99.9%) 76.221 MB/sec [Average]
  (min, avg, max) = (860.485, 870.044, 905.443), stdev = 19.794
  CI (99.9%): [793.822, 946.265] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1144.006 ±(99.9%) 0.047 B/op [Average]
  (min, avg, max) = (1144.001, 1144.006, 1144.028), stdev = 0.012
  CI (99.9%): [1143.959, 1144.054] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.a)

# Run progress: 90.71% complete, ETA 00:06:33
# Fork: 1 of 1
# Warmup Iteration   1: 4300.748 ns/op
# Warmup Iteration   2: 2902.337 ns/op
# Warmup Iteration   3: 2792.754 ns/op
# Warmup Iteration   4: 2725.722 ns/op
# Warmup Iteration   5: 2717.690 ns/op
Iteration   1: 2713.952 ns/op
                 ·gc.alloc.rate:      826.229 MB/sec
                 ·gc.alloc.rate.norm: 1176.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2710.648 ns/op
                 ·gc.alloc.rate:      827.117 MB/sec
                 ·gc.alloc.rate.norm: 1176.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2711.888 ns/op
                 ·gc.alloc.rate:      826.810 MB/sec
                 ·gc.alloc.rate.norm: 1176.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2723.244 ns/op
                 ·gc.alloc.rate:      823.097 MB/sec
                 ·gc.alloc.rate.norm: 1176.029 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 2596.325 ns/op
                 ·gc.alloc.rate:      863.658 MB/sec
                 ·gc.alloc.rate.norm: 1176.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2691.211 ±(99.9%) 205.135 ns/op [Average]
  (min, avg, max) = (2596.325, 2691.211, 2723.244), stdev = 53.273
  CI (99.9%): [2486.076, 2896.346] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  833.382 ±(99.9%) 65.461 MB/sec [Average]
  (min, avg, max) = (823.097, 833.382, 863.658), stdev = 17.000
  CI (99.9%): [767.921, 898.843] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1176.006 ±(99.9%) 0.048 B/op [Average]
  (min, avg, max) = (1176.000, 1176.006, 1176.029), stdev = 0.012
  CI (99.9%): [1175.959, 1176.054] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 5.000), stdev = 1.304
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.200.200)

# Run progress: 90.95% complete, ETA 00:06:23
# Fork: 1 of 1
# Warmup Iteration   1: 3800.490 ns/op
# Warmup Iteration   2: 2516.713 ns/op
# Warmup Iteration   3: 2368.006 ns/op
# Warmup Iteration   4: 2329.450 ns/op
# Warmup Iteration   5: 2335.573 ns/op
Iteration   1: 2330.593 ns/op
                 ·gc.alloc.rate:      981.640 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2327.314 ns/op
                 ·gc.alloc.rate:      982.888 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 2326.029 ns/op
                 ·gc.alloc.rate:      983.287 MB/sec
                 ·gc.alloc.rate.norm: 1200.014 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2208.489 ns/op
                 ·gc.alloc.rate:      1035.975 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2223.957 ns/op
                 ·gc.alloc.rate:      1028.979 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2283.276 ±(99.9%) 236.727 ns/op [Average]
  (min, avg, max) = (2208.489, 2283.276, 2330.593), stdev = 61.477
  CI (99.9%): [2046.549, 2520.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  1002.554 ±(99.9%) 105.641 MB/sec [Average]
  (min, avg, max) = (981.640, 1002.554, 1035.975), stdev = 27.435
  CI (99.9%): [896.913, 1108.194] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1200.004 ±(99.9%) 0.022 B/op [Average]
  (min, avg, max) = (1200.001, 1200.004, 1200.014), stdev = 0.006
  CI (99.9%): [1199.982, 1200.025] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.99999)

# Run progress: 91.20% complete, ETA 00:06:12
# Fork: 1 of 1
# Warmup Iteration   1: 613.145 ns/op
# Warmup Iteration   2: 305.201 ns/op
# Warmup Iteration   3: 279.256 ns/op
# Warmup Iteration   4: 279.935 ns/op
# Warmup Iteration   5: 283.190 ns/op
Iteration   1: 279.622 ns/op
                 ·gc.alloc.rate:      3654.154 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            29.000 ms

Iteration   2: 283.689 ns/op
                 ·gc.alloc.rate:      3602.062 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            45.000 ms

Iteration   3: 288.975 ns/op
                 ·gc.alloc.rate:      3536.014 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            39.000 ms

Iteration   4: 280.000 ns/op
                 ·gc.alloc.rate:      3648.257 MB/sec
                 ·gc.alloc.rate.norm: 536.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            31.000 ms

Iteration   5: 278.723 ns/op
                 ·gc.alloc.rate:      3666.553 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            28.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  282.202 ±(99.9%) 16.302 ns/op [Average]
  (min, avg, max) = (278.723, 282.202, 288.975), stdev = 4.233
  CI (99.9%): [265.900, 298.503] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  3621.408 ±(99.9%) 206.447 MB/sec [Average]
  (min, avg, max) = (3536.014, 3621.408, 3666.553), stdev = 53.614
  CI (99.9%): [3414.961, 3827.855] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  536.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (536.000, 536.001, 536.003), stdev = 0.001
  CI (99.9%): [535.995, 536.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  79.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.800, 16.000), stdev = 0.447
  CI (99.9%): [79.000, 79.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  172.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (28.000, 34.400, 45.000), stdev = 7.335
  CI (99.9%): [172.000, 172.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.-200)

# Run progress: 91.44% complete, ETA 00:06:02
# Fork: 1 of 1
# Warmup Iteration   1: 567.937 ns/op
# Warmup Iteration   2: 317.897 ns/op
# Warmup Iteration   3: 300.869 ns/op
# Warmup Iteration   4: 289.714 ns/op
# Warmup Iteration   5: 293.118 ns/op
Iteration   1: 309.999 ns/op
                 ·gc.alloc.rate:      3296.255 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            32.000 ms

Iteration   2: 292.661 ns/op
                 ·gc.alloc.rate:      3491.607 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            28.000 ms

Iteration   3: 292.921 ns/op
                 ·gc.alloc.rate:      3488.019 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            28.000 ms

Iteration   4: 291.766 ns/op
                 ·gc.alloc.rate:      3499.443 MB/sec
                 ·gc.alloc.rate.norm: 536.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            26.000 ms

Iteration   5: 290.122 ns/op
                 ·gc.alloc.rate:      3522.292 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            21.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  295.494 ±(99.9%) 31.507 ns/op [Average]
  (min, avg, max) = (290.122, 295.494, 309.999), stdev = 8.182
  CI (99.9%): [263.987, 327.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  3459.523 ±(99.9%) 355.176 MB/sec [Average]
  (min, avg, max) = (3296.255, 3459.523, 3522.292), stdev = 92.238
  CI (99.9%): [3104.347, 3814.699] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  536.001 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (536.000, 536.001, 536.003), stdev = 0.001
  CI (99.9%): [535.995, 536.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  79.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.800, 16.000), stdev = 0.447
  CI (99.9%): [79.000, 79.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  135.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (21.000, 27.000, 32.000), stdev = 4.000
  CI (99.9%): [135.000, 135.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 1.0.0)

# Run progress: 91.69% complete, ETA 00:05:52
# Fork: 1 of 1
# Warmup Iteration   1: 499.454 ns/op
# Warmup Iteration   2: 252.082 ns/op
# Warmup Iteration   3: 229.153 ns/op
# Warmup Iteration   4: 229.255 ns/op
# Warmup Iteration   5: 228.915 ns/op
Iteration   1: 229.069 ns/op
                 ·gc.alloc.rate:      2729.728 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 228.865 ns/op
                 ·gc.alloc.rate:      2732.351 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 228.765 ns/op
                 ·gc.alloc.rate:      2733.683 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 229.147 ns/op
                 ·gc.alloc.rate:      2727.099 MB/sec
                 ·gc.alloc.rate.norm: 328.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 229.217 ns/op
                 ·gc.alloc.rate:      2728.200 MB/sec
                 ·gc.alloc.rate.norm: 328.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  229.013 ±(99.9%) 0.736 ns/op [Average]
  (min, avg, max) = (228.765, 229.013, 229.217), stdev = 0.191
  CI (99.9%): [228.277, 229.748] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  2730.212 ±(99.9%) 10.650 MB/sec [Average]
  (min, avg, max) = (2727.099, 2730.212, 2733.683), stdev = 2.766
  CI (99.9%): [2719.563, 2740.862] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  328.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (328.000, 328.001, 328.003), stdev = 0.001
  CI (99.9%): [327.996, 328.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  82.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.400, 17.000), stdev = 0.548
  CI (99.9%): [82.000, 82.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  28.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.200)

# Run progress: 91.93% complete, ETA 00:05:41
# Fork: 1 of 1
# Warmup Iteration   1: 597.866 ns/op
# Warmup Iteration   2: 292.729 ns/op
# Warmup Iteration   3: 273.836 ns/op
# Warmup Iteration   4: 267.134 ns/op
# Warmup Iteration   5: 267.508 ns/op
Iteration   1: 268.079 ns/op
                 ·gc.alloc.rate:      3811.975 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 268.191 ns/op
                 ·gc.alloc.rate:      3809.920 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            9.000 ms

Iteration   3: 267.765 ns/op
                 ·gc.alloc.rate:      3816.190 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            8.000 ms

Iteration   4: 267.849 ns/op
                 ·gc.alloc.rate:      3813.787 MB/sec
                 ·gc.alloc.rate.norm: 536.003 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            10.000 ms

Iteration   5: 268.173 ns/op
                 ·gc.alloc.rate:      3810.715 MB/sec
                 ·gc.alloc.rate.norm: 536.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  268.011 ±(99.9%) 0.745 ns/op [Average]
  (min, avg, max) = (267.765, 268.011, 268.191), stdev = 0.194
  CI (99.9%): [267.266, 268.757] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  3812.517 ±(99.9%) 9.701 MB/sec [Average]
  (min, avg, max) = (3809.920, 3812.517, 3816.190), stdev = 2.519
  CI (99.9%): [3802.816, 3822.218] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  536.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (536.000, 536.001, 536.003), stdev = 0.001
  CI (99.9%): [535.996, 536.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  103.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (20.000, 20.600, 21.000), stdev = 0.548
  CI (99.9%): [103.000, 103.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  45.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (7.000, 9.000, 11.000), stdev = 1.581
  CI (99.9%): [45.000, 45.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 92.18% complete, ETA 00:05:31
# Fork: 1 of 1
# Warmup Iteration   1: 589.322 ns/op
# Warmup Iteration   2: 313.625 ns/op
# Warmup Iteration   3: 268.391 ns/op
# Warmup Iteration   4: 268.532 ns/op
# Warmup Iteration   5: 268.540 ns/op
Iteration   1: 268.246 ns/op
                 ·gc.alloc.rate:      3695.740 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            24.000 ms

Iteration   2: 266.915 ns/op
                 ·gc.alloc.rate:      3714.281 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            21.000 ms

Iteration   3: 269.237 ns/op
                 ·gc.alloc.rate:      3682.347 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            28.000 ms

Iteration   4: 267.062 ns/op
                 ·gc.alloc.rate:      3710.538 MB/sec
                 ·gc.alloc.rate.norm: 520.003 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            18.000 ms

Iteration   5: 266.565 ns/op
                 ·gc.alloc.rate:      3719.037 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            18.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  267.605 ±(99.9%) 4.274 ns/op [Average]
  (min, avg, max) = (266.565, 267.605, 269.237), stdev = 1.110
  CI (99.9%): [263.331, 271.879] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  3704.388 ±(99.9%) 58.108 MB/sec [Average]
  (min, avg, max) = (3682.347, 3704.388, 3719.037), stdev = 15.091
  CI (99.9%): [3646.280, 3762.497] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  520.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (520.000, 520.001, 520.003), stdev = 0.001
  CI (99.9%): [519.996, 520.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  74.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 14.800, 15.000), stdev = 0.447
  CI (99.9%): [74.000, 74.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  109.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 21.800, 28.000), stdev = 4.266
  CI (99.9%): [109.000, 109.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 92.42% complete, ETA 00:05:21
# Fork: 1 of 1
# Warmup Iteration   1: 605.097 ns/op
# Warmup Iteration   2: 320.592 ns/op
# Warmup Iteration   3: 287.971 ns/op
# Warmup Iteration   4: 291.627 ns/op
# Warmup Iteration   5: 288.061 ns/op
Iteration   1: 290.425 ns/op
                 ·gc.alloc.rate:      3413.673 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            29.000 ms

Iteration   2: 290.459 ns/op
                 ·gc.alloc.rate:      3413.185 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            27.000 ms

Iteration   3: 289.504 ns/op
                 ·gc.alloc.rate:      3424.429 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            25.000 ms

Iteration   4: 287.654 ns/op
                 ·gc.alloc.rate:      3444.578 MB/sec
                 ·gc.alloc.rate.norm: 520.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            18.000 ms

Iteration   5: 285.969 ns/op
                 ·gc.alloc.rate:      3467.039 MB/sec
                 ·gc.alloc.rate.norm: 520.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            16.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  288.802 ±(99.9%) 7.510 ns/op [Average]
  (min, avg, max) = (285.969, 288.802, 290.459), stdev = 1.950
  CI (99.9%): [281.292, 296.313] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  3432.581 ±(99.9%) 88.887 MB/sec [Average]
  (min, avg, max) = (3413.185, 3432.581, 3467.039), stdev = 23.084
  CI (99.9%): [3343.693, 3521.468] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  520.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (520.000, 520.001, 520.003), stdev = 0.001
  CI (99.9%): [519.995, 520.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  77.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.400, 16.000), stdev = 0.548
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  115.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (16.000, 23.000, 29.000), stdev = 5.701
  CI (99.9%): [115.000, 115.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = )

# Run progress: 92.67% complete, ETA 00:05:10
# Fork: 1 of 1
# Warmup Iteration   1: 3096.276 ns/op
# Warmup Iteration   2: 2173.305 ns/op
# Warmup Iteration   3: 2127.250 ns/op
# Warmup Iteration   4: 2091.234 ns/op
# Warmup Iteration   5: 2083.013 ns/op
Iteration   1: 2139.807 ns/op
                 ·gc.alloc.rate:      762.684 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2082.846 ns/op
                 ·gc.alloc.rate:      783.423 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2082.366 ns/op
                 ·gc.alloc.rate:      783.732 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2085.423 ns/op
                 ·gc.alloc.rate:      782.006 MB/sec
                 ·gc.alloc.rate.norm: 856.023 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1975.775 ns/op
                 ·gc.alloc.rate:      825.981 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  2073.244 ±(99.9%) 229.869 ns/op [Average]
  (min, avg, max) = (1975.775, 2073.244, 2139.807), stdev = 59.696
  CI (99.9%): [1843.374, 2303.113] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  787.565 ±(99.9%) 89.431 MB/sec [Average]
  (min, avg, max) = (762.684, 787.565, 825.981), stdev = 23.225
  CI (99.9%): [698.134, 876.997] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  856.005 ±(99.9%) 0.038 B/op [Average]
  (min, avg, max) = (856.001, 856.005, 856.023), stdev = 0.010
  CI (99.9%): [855.967, 856.044] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200)

# Run progress: 92.91% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 2182.981 ns/op
# Warmup Iteration   2: 1705.752 ns/op
# Warmup Iteration   3: 1660.880 ns/op
# Warmup Iteration   4: 1621.595 ns/op
# Warmup Iteration   5: 1627.494 ns/op
Iteration   1: 1619.865 ns/op
                 ·gc.alloc.rate:      960.404 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1625.987 ns/op
                 ·gc.alloc.rate:      956.660 MB/sec
                 ·gc.alloc.rate.norm: 816.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 1618.345 ns/op
                 ·gc.alloc.rate:      961.355 MB/sec
                 ·gc.alloc.rate.norm: 816.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1614.917 ns/op
                 ·gc.alloc.rate:      962.768 MB/sec
                 ·gc.alloc.rate.norm: 816.018 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1509.082 ns/op
                 ·gc.alloc.rate:      1030.992 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  1597.639 ±(99.9%) 191.250 ns/op [Average]
  (min, avg, max) = (1509.082, 1597.639, 1625.987), stdev = 49.667
  CI (99.9%): [1406.390, 1788.889] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  974.436 ±(99.9%) 122.052 MB/sec [Average]
  (min, avg, max) = (956.660, 974.436, 1030.992), stdev = 31.696
  CI (99.9%): [852.384, 1096.488] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  816.004 ±(99.9%) 0.031 B/op [Average]
  (min, avg, max) = (816.000, 816.004, 816.018), stdev = 0.008
  CI (99.9%): [815.973, 816.034] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.)

# Run progress: 93.15% complete, ETA 00:04:50
# Fork: 1 of 1
# Warmup Iteration   1: 2995.976 ns/op
# Warmup Iteration   2: 1900.844 ns/op
# Warmup Iteration   3: 1894.295 ns/op
# Warmup Iteration   4: 1849.112 ns/op
# Warmup Iteration   5: 1849.924 ns/op
Iteration   1: 1842.287 ns/op
                 ·gc.alloc.rate:      993.462 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1846.469 ns/op
                 ·gc.alloc.rate:      991.250 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1845.629 ns/op
                 ·gc.alloc.rate:      991.635 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1843.840 ns/op
                 ·gc.alloc.rate:      992.053 MB/sec
                 ·gc.alloc.rate.norm: 960.021 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1722.118 ns/op
                 ·gc.alloc.rate:      1062.833 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  1820.069 ±(99.9%) 210.939 ns/op [Average]
  (min, avg, max) = (1722.118, 1820.069, 1846.469), stdev = 54.780
  CI (99.9%): [1609.130, 2031.007] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1006.247 ±(99.9%) 121.850 MB/sec [Average]
  (min, avg, max) = (991.250, 1006.247, 1062.833), stdev = 31.644
  CI (99.9%): [884.397, 1128.097] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  960.005 ±(99.9%) 0.034 B/op [Average]
  (min, avg, max) = (960.001, 960.005, 960.021), stdev = 0.009
  CI (99.9%): [959.971, 960.039] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200)

# Run progress: 93.40% complete, ETA 00:04:39
# Fork: 1 of 1
# Warmup Iteration   1: 2951.200 ns/op
# Warmup Iteration   2: 1943.608 ns/op
# Warmup Iteration   3: 1906.943 ns/op
# Warmup Iteration   4: 1867.116 ns/op
# Warmup Iteration   5: 1870.318 ns/op
Iteration   1: 1919.693 ns/op
                 ·gc.alloc.rate:      977.257 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1871.305 ns/op
                 ·gc.alloc.rate:      1002.590 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1871.243 ns/op
                 ·gc.alloc.rate:      1002.532 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1871.555 ns/op
                 ·gc.alloc.rate:      1002.138 MB/sec
                 ·gc.alloc.rate.norm: 984.021 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1771.515 ns/op
                 ·gc.alloc.rate:      1059.126 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  1861.062 ±(99.9%) 208.922 ns/op [Average]
  (min, avg, max) = (1771.515, 1861.062, 1919.693), stdev = 54.256
  CI (99.9%): [1652.140, 2069.984] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1008.728 ±(99.9%) 116.317 MB/sec [Average]
  (min, avg, max) = (977.257, 1008.728, 1059.126), stdev = 30.207
  CI (99.9%): [892.411, 1125.046] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  984.005 ±(99.9%) 0.034 B/op [Average]
  (min, avg, max) = (984.001, 984.005, 984.021), stdev = 0.009
  CI (99.9%): [983.971, 984.039] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.)

# Run progress: 93.64% complete, ETA 00:04:29
# Fork: 1 of 1
# Warmup Iteration   1: 3387.566 ns/op
# Warmup Iteration   2: 1988.282 ns/op
# Warmup Iteration   3: 1956.931 ns/op
# Warmup Iteration   4: 1923.804 ns/op
# Warmup Iteration   5: 1926.500 ns/op
Iteration   1: 1924.859 ns/op
                 ·gc.alloc.rate:      1014.300 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1926.143 ns/op
                 ·gc.alloc.rate:      1013.626 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1925.079 ns/op
                 ·gc.alloc.rate:      1014.149 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1925.172 ns/op
                 ·gc.alloc.rate:      1013.826 MB/sec
                 ·gc.alloc.rate.norm: 1024.021 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1798.138 ns/op
                 ·gc.alloc.rate:      1085.859 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  1899.878 ±(99.9%) 219.012 ns/op [Average]
  (min, avg, max) = (1798.138, 1899.878, 1926.143), stdev = 56.877
  CI (99.9%): [1680.866, 2118.891] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1028.352 ±(99.9%) 123.792 MB/sec [Average]
  (min, avg, max) = (1013.626, 1028.352, 1085.859), stdev = 32.148
  CI (99.9%): [904.560, 1152.144] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1024.005 ±(99.9%) 0.035 B/op [Average]
  (min, avg, max) = (1024.001, 1024.005, 1024.021), stdev = 0.009
  CI (99.9%): [1023.970, 1024.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = a.200.200)

# Run progress: 93.89% complete, ETA 00:04:18
# Fork: 1 of 1
# Warmup Iteration   1: 3899.724 ns/op
# Warmup Iteration   2: 2431.678 ns/op
# Warmup Iteration   3: 2400.264 ns/op
# Warmup Iteration   4: 2340.556 ns/op
# Warmup Iteration   5: 2331.664 ns/op
Iteration   1: 2335.670 ns/op
                 ·gc.alloc.rate:      874.993 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2334.579 ns/op
                 ·gc.alloc.rate:      875.337 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2329.097 ns/op
                 ·gc.alloc.rate:      877.411 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2334.609 ns/op
                 ·gc.alloc.rate:      875.016 MB/sec
                 ·gc.alloc.rate.norm: 1072.026 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 2227.268 ns/op
                 ·gc.alloc.rate:      917.625 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  2312.244 ±(99.9%) 183.187 ns/op [Average]
  (min, avg, max) = (2227.268, 2312.244, 2335.670), stdev = 47.573
  CI (99.9%): [2129.057, 2495.432] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  884.076 ±(99.9%) 72.320 MB/sec [Average]
  (min, avg, max) = (874.993, 884.076, 917.625), stdev = 18.781
  CI (99.9%): [811.756, 956.396] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1072.006 ±(99.9%) 0.043 B/op [Average]
  (min, avg, max) = (1072.001, 1072.006, 1072.026), stdev = 0.011
  CI (99.9%): [1071.963, 1072.049] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.a.200)

# Run progress: 94.13% complete, ETA 00:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 3979.794 ns/op
# Warmup Iteration   2: 2472.856 ns/op
# Warmup Iteration   3: 2444.648 ns/op
# Warmup Iteration   4: 2408.932 ns/op
# Warmup Iteration   5: 2368.496 ns/op
Iteration   1: 2365.036 ns/op
                 ·gc.alloc.rate:      877.005 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2364.694 ns/op
                 ·gc.alloc.rate:      877.149 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2362.541 ns/op
                 ·gc.alloc.rate:      878.064 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2365.082 ns/op
                 ·gc.alloc.rate:      876.737 MB/sec
                 ·gc.alloc.rate.norm: 1088.026 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2259.794 ns/op
                 ·gc.alloc.rate:      918.003 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  2343.429 ±(99.9%) 180.077 ns/op [Average]
  (min, avg, max) = (2259.794, 2343.429, 2365.082), stdev = 46.765
  CI (99.9%): [2163.353, 2523.506] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  885.392 ±(99.9%) 70.225 MB/sec [Average]
  (min, avg, max) = (876.737, 885.392, 918.003), stdev = 18.237
  CI (99.9%): [815.167, 955.617] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1088.006 ±(99.9%) 0.043 B/op [Average]
  (min, avg, max) = (1088.001, 1088.006, 1088.026), stdev = 0.011
  CI (99.9%): [1087.963, 1088.049] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.a)

# Run progress: 94.38% complete, ETA 00:03:58
# Fork: 1 of 1
# Warmup Iteration   1: 4135.863 ns/op
# Warmup Iteration   2: 2521.168 ns/op
# Warmup Iteration   3: 2467.879 ns/op
# Warmup Iteration   4: 2411.362 ns/op
# Warmup Iteration   5: 2410.666 ns/op
Iteration   1: 2403.459 ns/op
                 ·gc.alloc.rate:      875.639 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2401.903 ns/op
                 ·gc.alloc.rate:      876.116 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2408.910 ns/op
                 ·gc.alloc.rate:      873.697 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2631.656 ns/op
                 ·gc.alloc.rate:      799.245 MB/sec
                 ·gc.alloc.rate.norm: 1104.030 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2318.553 ns/op
                 ·gc.alloc.rate:      907.732 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  2432.896 ±(99.9%) 451.455 ns/op [Average]
  (min, avg, max) = (2318.553, 2432.896, 2631.656), stdev = 117.241
  CI (99.9%): [1981.441, 2884.351] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  866.486 ±(99.9%) 154.640 MB/sec [Average]
  (min, avg, max) = (799.245, 866.486, 907.732), stdev = 40.160
  CI (99.9%): [711.846, 1021.126] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1104.007 ±(99.9%) 0.049 B/op [Average]
  (min, avg, max) = (1104.001, 1104.007, 1104.030), stdev = 0.013
  CI (99.9%): [1103.958, 1104.056] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.200.200)

# Run progress: 94.62% complete, ETA 00:03:47
# Fork: 1 of 1
# Warmup Iteration   1: 3289.668 ns/op
# Warmup Iteration   2: 2066.493 ns/op
# Warmup Iteration   3: 2033.886 ns/op
# Warmup Iteration   4: 1998.341 ns/op
# Warmup Iteration   5: 2000.117 ns/op
Iteration   1: 1998.694 ns/op
                 ·gc.alloc.rate:      1075.865 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2001.397 ns/op
                 ·gc.alloc.rate:      1074.387 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2002.709 ns/op
                 ·gc.alloc.rate:      1073.724 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2052.385 ns/op
                 ·gc.alloc.rate:      1047.396 MB/sec
                 ·gc.alloc.rate.norm: 1128.023 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1877.522 ns/op
                 ·gc.alloc.rate:      1145.528 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  1986.541 ±(99.9%) 249.924 ns/op [Average]
  (min, avg, max) = (1877.522, 1986.541, 2052.385), stdev = 64.904
  CI (99.9%): [1736.618, 2236.465] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1083.380 ±(99.9%) 141.321 MB/sec [Average]
  (min, avg, max) = (1047.396, 1083.380, 1145.528), stdev = 36.701
  CI (99.9%): [942.059, 1224.701] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1128.005 ±(99.9%) 0.038 B/op [Average]
  (min, avg, max) = (1128.001, 1128.005, 1128.023), stdev = 0.010
  CI (99.9%): [1127.968, 1128.043] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  37.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
  CI (99.9%): [37.000, 37.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.99999)

# Run progress: 94.87% complete, ETA 00:03:37
# Fork: 1 of 1
# Warmup Iteration   1: 485.854 ns/op
# Warmup Iteration   2: 271.995 ns/op
# Warmup Iteration   3: 251.668 ns/op
# Warmup Iteration   4: 253.045 ns/op
# Warmup Iteration   5: 255.489 ns/op
Iteration   1: 253.359 ns/op
                 ·gc.alloc.rate:      3612.387 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            22.000 ms

Iteration   2: 253.229 ns/op
                 ·gc.alloc.rate:      3613.978 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            22.000 ms

Iteration   3: 253.492 ns/op
                 ·gc.alloc.rate:      3609.820 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            24.000 ms

Iteration   4: 253.854 ns/op
                 ·gc.alloc.rate:      3603.190 MB/sec
                 ·gc.alloc.rate.norm: 480.003 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            23.000 ms

Iteration   5: 253.887 ns/op
                 ·gc.alloc.rate:      3604.766 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            25.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  253.564 ±(99.9%) 1.136 ns/op [Average]
  (min, avg, max) = (253.229, 253.564, 253.887), stdev = 0.295
  CI (99.9%): [252.428, 254.701] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3608.828 ±(99.9%) 18.108 MB/sec [Average]
  (min, avg, max) = (3603.190, 3608.828, 3613.978), stdev = 4.703
  CI (99.9%): [3590.720, 3626.936] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  480.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (480.000, 480.001, 480.003), stdev = 0.001
  CI (99.9%): [479.996, 480.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  77.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.400, 16.000), stdev = 0.548
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  116.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (22.000, 23.200, 25.000), stdev = 1.304
  CI (99.9%): [116.000, 116.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.-200)

# Run progress: 95.11% complete, ETA 00:03:27
# Fork: 1 of 1
# Warmup Iteration   1: 618.607 ns/op
# Warmup Iteration   2: 281.157 ns/op
# Warmup Iteration   3: 276.334 ns/op
# Warmup Iteration   4: 264.593 ns/op
# Warmup Iteration   5: 266.267 ns/op
Iteration   1: 264.337 ns/op
                 ·gc.alloc.rate:      3462.003 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            24.000 ms

Iteration   2: 263.684 ns/op
                 ·gc.alloc.rate:      3469.980 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            18.000 ms

Iteration   3: 266.231 ns/op
                 ·gc.alloc.rate:      3437.426 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            26.000 ms

Iteration   4: 267.085 ns/op
                 ·gc.alloc.rate:      3423.590 MB/sec
                 ·gc.alloc.rate.norm: 480.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            28.000 ms

Iteration   5: 264.764 ns/op
                 ·gc.alloc.rate:      3456.586 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            20.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  265.220 ±(99.9%) 5.393 ns/op [Average]
  (min, avg, max) = (263.684, 265.220, 267.085), stdev = 1.401
  CI (99.9%): [259.827, 270.613] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3449.917 ±(99.9%) 73.117 MB/sec [Average]
  (min, avg, max) = (3423.590, 3449.917, 3469.980), stdev = 18.988
  CI (99.9%): [3376.800, 3523.034] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  480.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (480.000, 480.001, 480.003), stdev = 0.001
  CI (99.9%): [479.996, 480.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  77.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.400, 16.000), stdev = 0.548
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  116.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 23.200, 28.000), stdev = 4.147
  CI (99.9%): [116.000, 116.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 1.0.0)

# Run progress: 95.35% complete, ETA 00:03:16
# Fork: 1 of 1
# Warmup Iteration   1: 340.721 ns/op
# Warmup Iteration   2: 211.538 ns/op
# Warmup Iteration   3: 196.137 ns/op
# Warmup Iteration   4: 196.069 ns/op
# Warmup Iteration   5: 196.001 ns/op
Iteration   1: 195.804 ns/op
                 ·gc.alloc.rate:      2804.329 MB/sec
                 ·gc.alloc.rate.norm: 288.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 195.764 ns/op
                 ·gc.alloc.rate:      2804.242 MB/sec
                 ·gc.alloc.rate.norm: 288.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 196.386 ns/op
                 ·gc.alloc.rate:      2795.884 MB/sec
                 ·gc.alloc.rate.norm: 288.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 196.223 ns/op
                 ·gc.alloc.rate:      2796.581 MB/sec
                 ·gc.alloc.rate.norm: 288.002 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 196.223 ns/op
                 ·gc.alloc.rate:      2798.475 MB/sec
                 ·gc.alloc.rate.norm: 288.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  196.080 ±(99.9%) 1.073 ns/op [Average]
  (min, avg, max) = (195.764, 196.080, 196.386), stdev = 0.279
  CI (99.9%): [195.007, 197.153] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  2799.902 ±(99.9%) 15.835 MB/sec [Average]
  (min, avg, max) = (2795.884, 2799.902, 2804.329), stdev = 4.112
  CI (99.9%): [2784.067, 2815.737] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  288.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (288.000, 288.001, 288.002), stdev = 0.001
  CI (99.9%): [287.997, 288.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  72.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 14.400, 15.000), stdev = 0.548
  CI (99.9%): [72.000, 72.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  28.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.200)

# Run progress: 95.60% complete, ETA 00:03:06
# Fork: 1 of 1
# Warmup Iteration   1: 510.275 ns/op
# Warmup Iteration   2: 269.274 ns/op
# Warmup Iteration   3: 252.541 ns/op
# Warmup Iteration   4: 253.174 ns/op
# Warmup Iteration   5: 254.093 ns/op
Iteration   1: 252.322 ns/op
                 ·gc.alloc.rate:      3626.641 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            26.000 ms

Iteration   2: 256.025 ns/op
                 ·gc.alloc.rate:      3574.345 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            41.000 ms

Iteration   3: 252.236 ns/op
                 ·gc.alloc.rate:      3628.076 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            26.000 ms

Iteration   4: 256.619 ns/op
                 ·gc.alloc.rate:      3564.757 MB/sec
                 ·gc.alloc.rate.norm: 480.003 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            33.000 ms

Iteration   5: 250.324 ns/op
                 ·gc.alloc.rate:      3656.104 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            20.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  253.505 ±(99.9%) 10.400 ns/op [Average]
  (min, avg, max) = (250.324, 253.505, 256.619), stdev = 2.701
  CI (99.9%): [243.106, 263.905] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3609.985 ±(99.9%) 149.723 MB/sec [Average]
  (min, avg, max) = (3564.757, 3609.985, 3656.104), stdev = 38.883
  CI (99.9%): [3460.262, 3759.708] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  480.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (480.000, 480.001, 480.003), stdev = 0.001
  CI (99.9%): [479.996, 480.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  79.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.800, 16.000), stdev = 0.447
  CI (99.9%): [79.000, 79.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  146.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (20.000, 29.200, 41.000), stdev = 8.044
  CI (99.9%): [146.000, 146.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 95.84% complete, ETA 00:02:56
# Fork: 1 of 1
# Warmup Iteration   1: 501.733 ns/op
# Warmup Iteration   2: 268.617 ns/op
# Warmup Iteration   3: 253.083 ns/op
# Warmup Iteration   4: 253.184 ns/op
# Warmup Iteration   5: 252.906 ns/op
Iteration   1: 253.741 ns/op
                 ·gc.alloc.rate:      3606.427 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            8.000 ms

Iteration   2: 253.202 ns/op
                 ·gc.alloc.rate:      3614.274 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 252.318 ns/op
                 ·gc.alloc.rate:      3626.467 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            8.000 ms

Iteration   4: 252.828 ns/op
                 ·gc.alloc.rate:      3617.894 MB/sec
                 ·gc.alloc.rate.norm: 480.003 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 253.882 ns/op
                 ·gc.alloc.rate:      3605.019 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  253.194 ±(99.9%) 2.491 ns/op [Average]
  (min, avg, max) = (252.318, 253.194, 253.882), stdev = 0.647
  CI (99.9%): [250.704, 255.685] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3614.016 ±(99.9%) 33.826 MB/sec [Average]
  (min, avg, max) = (3605.019, 3614.016, 3626.467), stdev = 8.784
  CI (99.9%): [3580.191, 3647.842] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  480.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (480.000, 480.001, 480.003), stdev = 0.001
  CI (99.9%): [479.996, 480.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  97.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (19.000, 19.400, 20.000), stdev = 0.548
  CI (99.9%): [97.000, 97.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  41.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (7.000, 8.200, 10.000), stdev = 1.095
  CI (99.9%): [41.000, 41.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 96.09% complete, ETA 00:02:45
# Fork: 1 of 1
# Warmup Iteration   1: 480.445 ns/op
# Warmup Iteration   2: 290.091 ns/op
# Warmup Iteration   3: 274.452 ns/op
# Warmup Iteration   4: 270.700 ns/op
# Warmup Iteration   5: 274.009 ns/op
Iteration   1: 273.250 ns/op
                 ·gc.alloc.rate:      3348.360 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            23.000 ms

Iteration   2: 288.481 ns/op
                 ·gc.alloc.rate:      3172.019 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            38.000 ms

Iteration   3: 274.722 ns/op
                 ·gc.alloc.rate:      3331.012 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            31.000 ms

Iteration   4: 284.479 ns/op
                 ·gc.alloc.rate:      3214.186 MB/sec
                 ·gc.alloc.rate.norm: 480.003 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            24.000 ms

Iteration   5: 273.369 ns/op
                 ·gc.alloc.rate:      3347.128 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            27.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  278.860 ±(99.9%) 27.424 ns/op [Average]
  (min, avg, max) = (273.250, 278.860, 288.481), stdev = 7.122
  CI (99.9%): [251.437, 306.284] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3282.541 ±(99.9%) 320.673 MB/sec [Average]
  (min, avg, max) = (3172.019, 3282.541, 3348.360), stdev = 83.278
  CI (99.9%): [2961.868, 3603.214] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  480.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (480.000, 480.001, 480.003), stdev = 0.001
  CI (99.9%): [479.995, 480.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  73.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 14.600, 16.000), stdev = 1.140
  CI (99.9%): [73.000, 73.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  143.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (23.000, 28.600, 38.000), stdev = 6.107
  CI (99.9%): [143.000, 143.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = )

# Run progress: 96.33% complete, ETA 00:02:35
# Fork: 1 of 1
# Warmup Iteration   1: 2765.574 ns/op
# Warmup Iteration   2: 2138.521 ns/op
# Warmup Iteration   3: 2118.167 ns/op
# Warmup Iteration   4: 2081.546 ns/op
# Warmup Iteration   5: 2074.182 ns/op
Iteration   1: 2070.683 ns/op
                 ·gc.alloc.rate:      788.053 MB/sec
                 ·gc.alloc.rate.norm: 856.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2075.304 ns/op
                 ·gc.alloc.rate:      786.311 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2075.345 ns/op
                 ·gc.alloc.rate:      786.413 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2073.065 ns/op
                 ·gc.alloc.rate:      786.867 MB/sec
                 ·gc.alloc.rate.norm: 856.023 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 1972.379 ns/op
                 ·gc.alloc.rate:      827.553 MB/sec
                 ·gc.alloc.rate.norm: 856.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2053.355 ±(99.9%) 174.465 ns/op [Average]
  (min, avg, max) = (1972.379, 2053.355, 2075.345), stdev = 45.308
  CI (99.9%): [1878.890, 2227.821] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  795.040 ±(99.9%) 70.039 MB/sec [Average]
  (min, avg, max) = (786.311, 795.040, 827.553), stdev = 18.189
  CI (99.9%): [725.000, 865.079] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  856.005 ±(99.9%) 0.039 B/op [Average]
  (min, avg, max) = (856.000, 856.005, 856.023), stdev = 0.010
  CI (99.9%): [855.967, 856.044] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  11.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
  CI (99.9%): [11.000, 11.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200)

# Run progress: 96.58% complete, ETA 00:02:25
# Fork: 1 of 1
# Warmup Iteration   1: 2178.280 ns/op
# Warmup Iteration   2: 1683.767 ns/op
# Warmup Iteration   3: 1651.992 ns/op
# Warmup Iteration   4: 1614.524 ns/op
# Warmup Iteration   5: 1612.656 ns/op
Iteration   1: 1612.883 ns/op
                 ·gc.alloc.rate:      964.511 MB/sec
                 ·gc.alloc.rate.norm: 816.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1613.432 ns/op
                 ·gc.alloc.rate:      964.261 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1617.927 ns/op
                 ·gc.alloc.rate:      961.405 MB/sec
                 ·gc.alloc.rate.norm: 816.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 1691.918 ns/op
                 ·gc.alloc.rate:      918.962 MB/sec
                 ·gc.alloc.rate.norm: 816.019 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1505.449 ns/op
                 ·gc.alloc.rate:      1033.375 MB/sec
                 ·gc.alloc.rate.norm: 816.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1608.322 ±(99.9%) 256.222 ns/op [Average]
  (min, avg, max) = (1505.449, 1608.322, 1691.918), stdev = 66.540
  CI (99.9%): [1352.100, 1864.544] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  968.503 ±(99.9%) 158.146 MB/sec [Average]
  (min, avg, max) = (918.962, 968.503, 1033.375), stdev = 41.070
  CI (99.9%): [810.356, 1126.649] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  816.004 ±(99.9%) 0.032 B/op [Average]
  (min, avg, max) = (816.000, 816.004, 816.019), stdev = 0.008
  CI (99.9%): [815.973, 816.036] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.)

# Run progress: 96.82% complete, ETA 00:02:14
# Fork: 1 of 1
# Warmup Iteration   1: 3269.068 ns/op
# Warmup Iteration   2: 1893.636 ns/op
# Warmup Iteration   3: 1867.563 ns/op
# Warmup Iteration   4: 1826.009 ns/op
# Warmup Iteration   5: 1827.030 ns/op
Iteration   1: 1825.657 ns/op
                 ·gc.alloc.rate:      1002.531 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1827.732 ns/op
                 ·gc.alloc.rate:      1001.392 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1827.450 ns/op
                 ·gc.alloc.rate:      1001.544 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1825.184 ns/op
                 ·gc.alloc.rate:      1002.115 MB/sec
                 ·gc.alloc.rate.norm: 960.020 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1752.957 ns/op
                 ·gc.alloc.rate:      1044.168 MB/sec
                 ·gc.alloc.rate.norm: 960.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1811.796 ±(99.9%) 126.727 ns/op [Average]
  (min, avg, max) = (1752.957, 1811.796, 1827.732), stdev = 32.910
  CI (99.9%): [1685.069, 1938.523] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  1010.350 ±(99.9%) 72.816 MB/sec [Average]
  (min, avg, max) = (1001.392, 1010.350, 1044.168), stdev = 18.910
  CI (99.9%): [937.533, 1083.166] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  960.005 ±(99.9%) 0.034 B/op [Average]
  (min, avg, max) = (960.001, 960.005, 960.020), stdev = 0.009
  CI (99.9%): [959.971, 960.038] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200)

# Run progress: 97.07% complete, ETA 00:02:04
# Fork: 1 of 1
# Warmup Iteration   1: 2960.606 ns/op
# Warmup Iteration   2: 1941.849 ns/op
# Warmup Iteration   3: 1921.606 ns/op
# Warmup Iteration   4: 1882.690 ns/op
# Warmup Iteration   5: 1881.787 ns/op
Iteration   1: 1882.971 ns/op
                 ·gc.alloc.rate:      996.358 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1883.500 ns/op
                 ·gc.alloc.rate:      996.068 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1882.921 ns/op
                 ·gc.alloc.rate:      996.398 MB/sec
                 ·gc.alloc.rate.norm: 984.002 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 1882.600 ns/op
                 ·gc.alloc.rate:      996.124 MB/sec
                 ·gc.alloc.rate.norm: 984.021 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1744.780 ns/op
                 ·gc.alloc.rate:      1075.343 MB/sec
                 ·gc.alloc.rate.norm: 984.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1855.354 ±(99.9%) 238.022 ns/op [Average]
  (min, avg, max) = (1744.780, 1855.354, 1883.500), stdev = 61.814
  CI (99.9%): [1617.332, 2093.377] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  1012.058 ±(99.9%) 136.226 MB/sec [Average]
  (min, avg, max) = (996.068, 1012.058, 1075.343), stdev = 35.378
  CI (99.9%): [875.832, 1148.285] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  984.005 ±(99.9%) 0.034 B/op [Average]
  (min, avg, max) = (984.001, 984.005, 984.021), stdev = 0.009
  CI (99.9%): [983.971, 984.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.)

# Run progress: 97.31% complete, ETA 00:01:53
# Fork: 1 of 1
# Warmup Iteration   1: 3047.648 ns/op
# Warmup Iteration   2: 1948.018 ns/op
# Warmup Iteration   3: 1930.705 ns/op
# Warmup Iteration   4: 1894.059 ns/op
# Warmup Iteration   5: 1892.491 ns/op
Iteration   1: 1887.276 ns/op
                 ·gc.alloc.rate:      1034.473 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1884.829 ns/op
                 ·gc.alloc.rate:      1035.811 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 1884.563 ns/op
                 ·gc.alloc.rate:      1036.046 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1884.681 ns/op
                 ·gc.alloc.rate:      1035.430 MB/sec
                 ·gc.alloc.rate.norm: 1024.021 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 1774.892 ns/op
                 ·gc.alloc.rate:      1100.088 MB/sec
                 ·gc.alloc.rate.norm: 1024.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1863.248 ±(99.9%) 190.242 ns/op [Average]
  (min, avg, max) = (1774.892, 1863.248, 1887.276), stdev = 49.405
  CI (99.9%): [1673.006, 2053.490] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  1048.369 ±(99.9%) 111.352 MB/sec [Average]
  (min, avg, max) = (1034.473, 1048.369, 1100.088), stdev = 28.918
  CI (99.9%): [937.017, 1159.722] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1024.005 ±(99.9%) 0.035 B/op [Average]
  (min, avg, max) = (1024.001, 1024.005, 1024.021), stdev = 0.009
  CI (99.9%): [1023.970, 1024.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  36.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = a.200.200)

# Run progress: 97.56% complete, ETA 00:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 3913.222 ns/op
# Warmup Iteration   2: 2680.720 ns/op
# Warmup Iteration   3: 2423.019 ns/op
# Warmup Iteration   4: 2459.102 ns/op
# Warmup Iteration   5: 2359.541 ns/op
Iteration   1: 2360.389 ns/op
                 ·gc.alloc.rate:      865.819 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2360.486 ns/op
                 ·gc.alloc.rate:      865.716 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2360.122 ns/op
                 ·gc.alloc.rate:      865.725 MB/sec
                 ·gc.alloc.rate.norm: 1072.014 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2358.779 ns/op
                 ·gc.alloc.rate:      866.489 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2261.255 ns/op
                 ·gc.alloc.rate:      903.903 MB/sec
                 ·gc.alloc.rate.norm: 1072.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2340.206 ±(99.9%) 169.969 ns/op [Average]
  (min, avg, max) = (2261.255, 2340.206, 2360.486), stdev = 44.140
  CI (99.9%): [2170.237, 2510.175] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  873.530 ±(99.9%) 65.390 MB/sec [Average]
  (min, avg, max) = (865.716, 873.530, 903.903), stdev = 16.982
  CI (99.9%): [808.140, 938.921] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1072.004 ±(99.9%) 0.022 B/op [Average]
  (min, avg, max) = (1072.001, 1072.004, 1072.014), stdev = 0.006
  CI (99.9%): [1071.982, 1072.026] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.a.200)

# Run progress: 97.80% complete, ETA 00:01:33
# Fork: 1 of 1
# Warmup Iteration   1: 3871.962 ns/op
# Warmup Iteration   2: 2517.731 ns/op
# Warmup Iteration   3: 2458.070 ns/op
# Warmup Iteration   4: 2393.340 ns/op
# Warmup Iteration   5: 2389.702 ns/op
Iteration   1: 2389.871 ns/op
                 ·gc.alloc.rate:      867.929 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2389.528 ns/op
                 ·gc.alloc.rate:      868.011 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2389.033 ns/op
                 ·gc.alloc.rate:      868.278 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2393.542 ns/op
                 ·gc.alloc.rate:      866.234 MB/sec
                 ·gc.alloc.rate.norm: 1088.027 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2295.566 ns/op
                 ·gc.alloc.rate:      903.542 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2371.508 ±(99.9%) 163.616 ns/op [Average]
  (min, avg, max) = (2295.566, 2371.508, 2393.542), stdev = 42.491
  CI (99.9%): [2207.892, 2535.124] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  874.799 ±(99.9%) 61.950 MB/sec [Average]
  (min, avg, max) = (866.234, 874.799, 903.542), stdev = 16.088
  CI (99.9%): [812.849, 936.749] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1088.006 ±(99.9%) 0.044 B/op [Average]
  (min, avg, max) = (1088.001, 1088.006, 1088.027), stdev = 0.011
  CI (99.9%): [1087.962, 1088.050] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.a)

# Run progress: 98.04% complete, ETA 00:01:22
# Fork: 1 of 1
# Warmup Iteration   1: 4067.733 ns/op
# Warmup Iteration   2: 2488.493 ns/op
# Warmup Iteration   3: 2449.383 ns/op
# Warmup Iteration   4: 2396.535 ns/op
# Warmup Iteration   5: 2400.423 ns/op
Iteration   1: 2395.048 ns/op
                 ·gc.alloc.rate:      898.088 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2397.731 ns/op
                 ·gc.alloc.rate:      896.992 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2402.791 ns/op
                 ·gc.alloc.rate:      895.214 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2397.496 ns/op
                 ·gc.alloc.rate:      896.679 MB/sec
                 ·gc.alloc.rate.norm: 1128.027 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2301.742 ns/op
                 ·gc.alloc.rate:      934.520 MB/sec
                 ·gc.alloc.rate.norm: 1128.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2378.962 ±(99.9%) 166.574 ns/op [Average]
  (min, avg, max) = (2301.742, 2378.962, 2402.791), stdev = 43.259
  CI (99.9%): [2212.387, 2545.536] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  904.298 ±(99.9%) 65.174 MB/sec [Average]
  (min, avg, max) = (895.214, 904.298, 934.520), stdev = 16.925
  CI (99.9%): [839.125, 969.472] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1128.006 ±(99.9%) 0.044 B/op [Average]
  (min, avg, max) = (1128.001, 1128.006, 1128.027), stdev = 0.012
  CI (99.9%): [1127.962, 1128.051] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.200.200)

# Run progress: 98.29% complete, ETA 00:01:12
# Fork: 1 of 1
# Warmup Iteration   1: 3447.697 ns/op
# Warmup Iteration   2: 2041.930 ns/op
# Warmup Iteration   3: 2021.340 ns/op
# Warmup Iteration   4: 1958.794 ns/op
# Warmup Iteration   5: 1959.578 ns/op
Iteration   1: 1965.569 ns/op
                 ·gc.alloc.rate:      1117.514 MB/sec
                 ·gc.alloc.rate.norm: 1152.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1961.629 ns/op
                 ·gc.alloc.rate:      1119.581 MB/sec
                 ·gc.alloc.rate.norm: 1152.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2027.099 ns/op
                 ·gc.alloc.rate:      1083.465 MB/sec
                 ·gc.alloc.rate.norm: 1152.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1961.805 ns/op
                 ·gc.alloc.rate:      1119.067 MB/sec
                 ·gc.alloc.rate.norm: 1152.021 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1862.561 ns/op
                 ·gc.alloc.rate:      1179.191 MB/sec
                 ·gc.alloc.rate.norm: 1152.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1955.732 ±(99.9%) 227.339 ns/op [Average]
  (min, avg, max) = (1862.561, 1955.732, 2027.099), stdev = 59.039
  CI (99.9%): [1728.394, 2183.071] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  1123.764 ±(99.9%) 133.038 MB/sec [Average]
  (min, avg, max) = (1083.465, 1123.764, 1179.191), stdev = 34.550
  CI (99.9%): [990.726, 1256.802] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1152.005 ±(99.9%) 0.035 B/op [Average]
  (min, avg, max) = (1152.001, 1152.005, 1152.021), stdev = 0.009
  CI (99.9%): [1151.970, 1152.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.99999)

# Run progress: 98.53% complete, ETA 00:01:02
# Fork: 1 of 1
# Warmup Iteration   1: 3562.507 ns/op
# Warmup Iteration   2: 2086.898 ns/op
# Warmup Iteration   3: 2027.617 ns/op
# Warmup Iteration   4: 2004.475 ns/op
# Warmup Iteration   5: 2006.894 ns/op
Iteration   1: 2003.455 ns/op
                 ·gc.alloc.rate:      1141.995 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 1999.501 ns/op
                 ·gc.alloc.rate:      1144.312 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2000.696 ns/op
                 ·gc.alloc.rate:      1143.612 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 1997.201 ns/op
                 ·gc.alloc.rate:      1144.531 MB/sec
                 ·gc.alloc.rate.norm: 1200.022 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1888.366 ns/op
                 ·gc.alloc.rate:      1211.612 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1977.844 ±(99.9%) 192.802 ns/op [Average]
  (min, avg, max) = (1888.366, 1977.844, 2003.455), stdev = 50.070
  CI (99.9%): [1785.041, 2170.646] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  1157.212 ±(99.9%) 117.161 MB/sec [Average]
  (min, avg, max) = (1141.995, 1157.212, 1211.612), stdev = 30.426
  CI (99.9%): [1040.052, 1274.373] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1200.005 ±(99.9%) 0.037 B/op [Average]
  (min, avg, max) = (1200.001, 1200.005, 1200.022), stdev = 0.010
  CI (99.9%): [1199.968, 1200.042] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  40.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.-200)

# Run progress: 98.78% complete, ETA 00:00:51
# Fork: 1 of 1
# Warmup Iteration   1: 3064.958 ns/op
# Warmup Iteration   2: 2099.329 ns/op
# Warmup Iteration   3: 2029.246 ns/op
# Warmup Iteration   4: 2001.262 ns/op
# Warmup Iteration   5: 2012.053 ns/op
Iteration   1: 2004.501 ns/op
                 ·gc.alloc.rate:      1141.298 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2005.983 ns/op
                 ·gc.alloc.rate:      1140.434 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2004.920 ns/op
                 ·gc.alloc.rate:      1141.148 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2002.733 ns/op
                 ·gc.alloc.rate:      1141.927 MB/sec
                 ·gc.alloc.rate.norm: 1200.022 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1895.287 ns/op
                 ·gc.alloc.rate:      1207.181 MB/sec
                 ·gc.alloc.rate.norm: 1200.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1982.685 ±(99.9%) 188.185 ns/op [Average]
  (min, avg, max) = (1895.287, 1982.685, 2005.983), stdev = 48.871
  CI (99.9%): [1794.500, 2170.869] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  1154.398 ±(99.9%) 113.638 MB/sec [Average]
  (min, avg, max) = (1140.434, 1154.398, 1207.181), stdev = 29.511
  CI (99.9%): [1040.759, 1268.036] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1200.005 ±(99.9%) 0.036 B/op [Average]
  (min, avg, max) = (1200.001, 1200.005, 1200.022), stdev = 0.009
  CI (99.9%): [1199.969, 1200.042] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  40.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 1.0.0)

# Run progress: 99.02% complete, ETA 00:00:41
# Fork: 1 of 1
# Warmup Iteration   1: 357.173 ns/op
# Warmup Iteration   2: 221.190 ns/op
# Warmup Iteration   3: 202.005 ns/op
# Warmup Iteration   4: 201.836 ns/op
# Warmup Iteration   5: 202.556 ns/op
Iteration   1: 202.010 ns/op
                 ·gc.alloc.rate:      2717.840 MB/sec
                 ·gc.alloc.rate.norm: 288.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 202.626 ns/op
                 ·gc.alloc.rate:      2710.108 MB/sec
                 ·gc.alloc.rate.norm: 288.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            10.000 ms

Iteration   3: 202.088 ns/op
                 ·gc.alloc.rate:      2716.096 MB/sec
                 ·gc.alloc.rate.norm: 288.001 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 202.041 ns/op
                 ·gc.alloc.rate:      2717.950 MB/sec
                 ·gc.alloc.rate.norm: 288.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 201.855 ns/op
                 ·gc.alloc.rate:      2720.350 MB/sec
                 ·gc.alloc.rate.norm: 288.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  202.124 ±(99.9%) 1.132 ns/op [Average]
  (min, avg, max) = (201.855, 202.124, 202.626), stdev = 0.294
  CI (99.9%): [200.992, 203.256] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  2716.469 ±(99.9%) 14.881 MB/sec [Average]
  (min, avg, max) = (2710.108, 2716.469, 2720.350), stdev = 3.864
  CI (99.9%): [2701.588, 2731.349] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  288.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (288.000, 288.000, 288.001), stdev = 0.001
  CI (99.9%): [287.998, 288.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  72.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 14.400, 15.000), stdev = 0.548
  CI (99.9%): [72.000, 72.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  35.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.000, 10.000), stdev = 1.732
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.200)

# Run progress: 99.27% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 479.438 ns/op
# Warmup Iteration   2: 243.514 ns/op
# Warmup Iteration   3: 229.494 ns/op
# Warmup Iteration   4: 228.237 ns/op
# Warmup Iteration   5: 229.050 ns/op
Iteration   1: 228.649 ns/op
                 ·gc.alloc.rate:      4002.127 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            31.000 ms

Iteration   2: 228.578 ns/op
                 ·gc.alloc.rate:      4003.133 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            29.000 ms

Iteration   3: 230.353 ns/op
                 ·gc.alloc.rate:      3972.465 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            28.000 ms

Iteration   4: 239.463 ns/op
                 ·gc.alloc.rate:      3819.018 MB/sec
                 ·gc.alloc.rate.norm: 480.003 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            19.000 ms

Iteration   5: 234.972 ns/op
                 ·gc.alloc.rate:      3894.542 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            27.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  232.403 ±(99.9%) 18.201 ns/op [Average]
  (min, avg, max) = (228.578, 232.403, 239.463), stdev = 4.727
  CI (99.9%): [214.202, 250.604] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  3938.257 ±(99.9%) 307.975 MB/sec [Average]
  (min, avg, max) = (3819.018, 3938.257, 4003.133), stdev = 79.980
  CI (99.9%): [3630.281, 4246.232] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  480.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (480.000, 480.001, 480.003), stdev = 0.001
  CI (99.9%): [479.996, 480.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  77.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 15.400, 16.000), stdev = 0.894
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  134.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 26.800, 31.000), stdev = 4.604
  CI (99.9%): [134.000, 134.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 99.51% complete, ETA 00:00:20
# Fork: 1 of 1
# Warmup Iteration   1: 523.180 ns/op
# Warmup Iteration   2: 281.550 ns/op
# Warmup Iteration   3: 266.225 ns/op
# Warmup Iteration   4: 268.329 ns/op
# Warmup Iteration   5: 268.015 ns/op
Iteration   1: 268.309 ns/op
                 ·gc.alloc.rate:      3410.410 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            28.000 ms

Iteration   2: 268.722 ns/op
                 ·gc.alloc.rate:      3405.512 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            33.000 ms

Iteration   3: 267.261 ns/op
                 ·gc.alloc.rate:      3423.628 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            28.000 ms

Iteration   4: 266.848 ns/op
                 ·gc.alloc.rate:      3427.922 MB/sec
                 ·gc.alloc.rate.norm: 480.003 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            26.000 ms

Iteration   5: 265.681 ns/op
                 ·gc.alloc.rate:      3444.507 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            21.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  267.364 ±(99.9%) 4.655 ns/op [Average]
  (min, avg, max) = (265.681, 267.364, 268.722), stdev = 1.209
  CI (99.9%): [262.709, 272.019] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  3422.396 ±(99.9%) 59.333 MB/sec [Average]
  (min, avg, max) = (3405.512, 3422.396, 3444.507), stdev = 15.409
  CI (99.9%): [3363.062, 3481.729] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  480.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (480.000, 480.001, 480.003), stdev = 0.001
  CI (99.9%): [479.996, 480.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  84.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.800, 17.000), stdev = 0.447
  CI (99.9%): [84.000, 84.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  136.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (21.000, 27.200, 33.000), stdev = 4.324
  CI (99.9%): [136.000, 136.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 11.0.20.1, OpenJDK 64-Bit Server VM, 11.0.20.1+1-post-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 99.76% complete, ETA 00:00:10
# Fork: 1 of 1
# Warmup Iteration   1: 485.172 ns/op
# Warmup Iteration   2: 273.560 ns/op
# Warmup Iteration   3: 266.537 ns/op
# Warmup Iteration   4: 268.177 ns/op
# Warmup Iteration   5: 268.369 ns/op
Iteration   1: 271.094 ns/op
                 ·gc.alloc.rate:      3375.732 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            22.000 ms

Iteration   2: 307.083 ns/op
                 ·gc.alloc.rate:      2980.037 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            27.000 ms

Iteration   3: 266.814 ns/op
                 ·gc.alloc.rate:      3430.180 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            28.000 ms

Iteration   4: 268.314 ns/op
                 ·gc.alloc.rate:      3408.621 MB/sec
                 ·gc.alloc.rate.norm: 480.003 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            33.000 ms

Iteration   5: 267.373 ns/op
                 ·gc.alloc.rate:      3423.116 MB/sec
                 ·gc.alloc.rate.norm: 480.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            30.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  276.136 ±(99.9%) 66.917 ns/op [Average]
  (min, avg, max) = (266.814, 276.136, 307.083), stdev = 17.378
  CI (99.9%): [209.219, 343.052] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  3323.537 ±(99.9%) 743.794 MB/sec [Average]
  (min, avg, max) = (2980.037, 3323.537, 3430.180), stdev = 193.161
  CI (99.9%): [2579.743, 4067.331] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  480.001 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (480.000, 480.001, 480.003), stdev = 0.001
  CI (99.9%): [479.996, 480.006] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  78.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 15.600, 16.000), stdev = 0.894
  CI (99.9%): [78.000, 78.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  140.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (22.000, 28.000, 33.000), stdev = 4.062
  CI (99.9%): [140.000, 140.000] (assumes normal distribution)


# Run complete. Total time: 01:10:37

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        (encoded)  Mode  Cnt     Score     Error   Units
IsNumberBenchmark.isNumber                                                           1.0.0  avgt    5    15.551 ±   0.913   ns/op
IsNumberBenchmark.isNumber:·gc.alloc.rate                                            1.0.0  avgt    5     0.005 ±   0.035  MB/sec
IsNumberBenchmark.isNumber:·gc.alloc.rate.norm                                       1.0.0  avgt    5    ≈ 10⁻⁴              B/op
IsNumberBenchmark.isNumber:·gc.count                                                 1.0.0  avgt    5       ≈ 0            counts
IsNumberBenchmark.isNumber                                                     200.200.200  avgt    5    25.768 ±   0.262   ns/op
IsNumberBenchmark.isNumber:·gc.alloc.rate                                      200.200.200  avgt    5     0.005 ±   0.035  MB/sec
IsNumberBenchmark.isNumber:·gc.alloc.rate.norm                                 200.200.200  avgt    5    ≈ 10⁻⁴              B/op
IsNumberBenchmark.isNumber:·gc.count                                           200.200.200  avgt    5       ≈ 0            counts
IsNumberBenchmark.isNumber                                               10000.10000.10000  avgt    5    32.154 ±   0.080   ns/op
IsNumberBenchmark.isNumber:·gc.alloc.rate                                10000.10000.10000  avgt    5     0.005 ±   0.035  MB/sec
IsNumberBenchmark.isNumber:·gc.alloc.rate.norm                           10000.10000.10000  avgt    5    ≈ 10⁻⁴              B/op
IsNumberBenchmark.isNumber:·gc.count                                     10000.10000.10000  avgt    5       ≈ 0            counts
IsNumberBenchmark.isNumber2                                                          1.0.0  avgt    5    15.705 ±   1.305   ns/op
IsNumberBenchmark.isNumber2:·gc.alloc.rate                                           1.0.0  avgt    5     0.005 ±   0.035  MB/sec
IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm                                      1.0.0  avgt    5    ≈ 10⁻⁴              B/op
IsNumberBenchmark.isNumber2:·gc.count                                                1.0.0  avgt    5       ≈ 0            counts
IsNumberBenchmark.isNumber2                                                    200.200.200  avgt    5    24.430 ±   1.221   ns/op
IsNumberBenchmark.isNumber2:·gc.alloc.rate                                     200.200.200  avgt    5     0.005 ±   0.035  MB/sec
IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm                                200.200.200  avgt    5    ≈ 10⁻⁴              B/op
IsNumberBenchmark.isNumber2:·gc.count                                          200.200.200  avgt    5       ≈ 0            counts
IsNumberBenchmark.isNumber2                                              10000.10000.10000  avgt    5    32.241 ±   0.808   ns/op
IsNumberBenchmark.isNumber2:·gc.alloc.rate                               10000.10000.10000  avgt    5     0.005 ±   0.035  MB/sec
IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm                          10000.10000.10000  avgt    5    ≈ 10⁻⁴              B/op
IsNumberBenchmark.isNumber2:·gc.count                                    10000.10000.10000  avgt    5       ≈ 0            counts
IsNumberBenchmark.isNumber3                                                          1.0.0  avgt    5    14.812 ±   2.606   ns/op
IsNumberBenchmark.isNumber3:·gc.alloc.rate                                           1.0.0  avgt    5     0.005 ±   0.035  MB/sec
IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm                                      1.0.0  avgt    5    ≈ 10⁻⁴              B/op
IsNumberBenchmark.isNumber3:·gc.count                                                1.0.0  avgt    5       ≈ 0            counts
IsNumberBenchmark.isNumber3                                                    200.200.200  avgt    5    22.751 ±   0.453   ns/op
IsNumberBenchmark.isNumber3:·gc.alloc.rate                                     200.200.200  avgt    5     0.005 ±   0.035  MB/sec
IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm                                200.200.200  avgt    5    ≈ 10⁻⁴              B/op
IsNumberBenchmark.isNumber3:·gc.count                                          200.200.200  avgt    5       ≈ 0            counts
IsNumberBenchmark.isNumber3                                              10000.10000.10000  avgt    5    28.279 ±   1.033   ns/op
IsNumberBenchmark.isNumber3:·gc.alloc.rate                               10000.10000.10000  avgt    5     0.005 ±   0.035  MB/sec
IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm                          10000.10000.10000  avgt    5    ≈ 10⁻⁴              B/op
IsNumberBenchmark.isNumber3:·gc.count                                    10000.10000.10000  avgt    5       ≈ 0            counts
VersionNoAllocConvertBenchmark.generic                                                      avgt    5     5.306 ±   0.018   ns/op
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate                                       avgt    5     0.005 ±   0.035  MB/sec
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm                                  avgt    5    ≈ 10⁻⁵              B/op
VersionNoAllocConvertBenchmark.generic:·gc.count                                            avgt    5       ≈ 0            counts
VersionNoAllocConvertBenchmark.generic                                               0.0.0  avgt    5    15.181 ±   0.423   ns/op
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate                                0.0.0  avgt    5  5022.055 ± 132.009  MB/sec
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm                           0.0.0  avgt    5    40.000 ±   0.001    B/op
VersionNoAllocConvertBenchmark.generic:·gc.count                                     0.0.0  avgt    5    86.000            counts
VersionNoAllocConvertBenchmark.generic:·gc.time                                      0.0.0  avgt    5   161.000                ms
VersionNoAllocConvertBenchmark.generic                                               1.0.0  avgt    5    16.207 ±   0.973   ns/op
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate                                1.0.0  avgt    5  7529.161 ± 451.202  MB/sec
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm                           1.0.0  avgt    5    64.000 ±   0.001    B/op
VersionNoAllocConvertBenchmark.generic:·gc.count                                     1.0.0  avgt    5   107.000            counts
VersionNoAllocConvertBenchmark.generic:·gc.time                                      1.0.0  avgt    5   202.000                ms
VersionNoAllocConvertBenchmark.generic                                         200.200.200  avgt    5    16.269 ±   0.833   ns/op
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate                          200.200.200  avgt    5  7498.198 ± 397.658  MB/sec
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm                     200.200.200  avgt    5    64.000 ±   0.001    B/op
VersionNoAllocConvertBenchmark.generic:·gc.count                               200.200.200  avgt    5   114.000            counts
VersionNoAllocConvertBenchmark.generic:·gc.time                                200.200.200  avgt    5   197.000                ms
VersionNoAllocConvertBenchmark.generic                                   10000.10000.10000  avgt    5    16.180 ±   1.092   ns/op
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate                    10000.10000.10000  avgt    5  7541.711 ± 505.203  MB/sec
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm               10000.10000.10000  avgt    5    64.000 ±   0.001    B/op
VersionNoAllocConvertBenchmark.generic:·gc.count                         10000.10000.10000  avgt    5   122.000            counts
VersionNoAllocConvertBenchmark.generic:·gc.time                          10000.10000.10000  avgt    5   200.000                ms
VersionNoAllocConvertBenchmark.inlined                                                      avgt    5     5.374 ±   0.237   ns/op
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate                                       avgt    5     0.005 ±   0.035  MB/sec
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm                                  avgt    5    ≈ 10⁻⁵              B/op
VersionNoAllocConvertBenchmark.inlined:·gc.count                                            avgt    5       ≈ 0            counts
VersionNoAllocConvertBenchmark.inlined                                               0.0.0  avgt    5    16.478 ±   2.090   ns/op
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate                                0.0.0  avgt    5  4631.568 ± 585.316  MB/sec
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm                           0.0.0  avgt    5    40.000 ±   0.001    B/op
VersionNoAllocConvertBenchmark.inlined:·gc.count                                     0.0.0  avgt    5    96.000            counts
VersionNoAllocConvertBenchmark.inlined:·gc.time                                      0.0.0  avgt    5   156.000                ms
VersionNoAllocConvertBenchmark.inlined                                               1.0.0  avgt    5    16.223 ±   2.035   ns/op
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate                                1.0.0  avgt    5  7524.385 ± 908.176  MB/sec
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm                           1.0.0  avgt    5    64.000 ±   0.001    B/op
VersionNoAllocConvertBenchmark.inlined:·gc.count                                     1.0.0  avgt    5   107.000            counts
VersionNoAllocConvertBenchmark.inlined:·gc.time                                      1.0.0  avgt    5   184.000                ms
VersionNoAllocConvertBenchmark.inlined                                         200.200.200  avgt    5    16.021 ±   0.455   ns/op
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate                          200.200.200  avgt    5  7613.136 ± 203.442  MB/sec
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm                     200.200.200  avgt    5    64.000 ±   0.001    B/op
VersionNoAllocConvertBenchmark.inlined:·gc.count                               200.200.200  avgt    5   107.000            counts
VersionNoAllocConvertBenchmark.inlined:·gc.time                                200.200.200  avgt    5   183.000                ms
VersionNoAllocConvertBenchmark.inlined                                   10000.10000.10000  avgt    5    16.080 ±   0.482   ns/op
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate                    10000.10000.10000  avgt    5  7587.535 ± 226.022  MB/sec
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm               10000.10000.10000  avgt    5    64.000 ±   0.001    B/op
VersionNoAllocConvertBenchmark.inlined:·gc.count                         10000.10000.10000  avgt    5   129.000            counts
VersionNoAllocConvertBenchmark.inlined:·gc.time                          10000.10000.10000  avgt    5   206.000                ms
VersionParseBenchmark.optimized1                                                            avgt    5     6.236 ±   0.291   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                             avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized1:·gc.count                                                  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized1                                                       200  avgt    5     8.736 ±   0.322   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                        200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized1:·gc.count                                             200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized1                                                      200.  avgt    5     9.532 ±   0.076   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                       200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized1:·gc.count                                            200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized1                                                   200.200  avgt    5    13.124 ±   0.497   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                    200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized1:·gc.count                                         200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized1                                                  200.200.  avgt    5    29.575 ±   0.113   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                   200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized1:·gc.count                                        200.200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized1                                                 a.200.200  avgt    5    19.048 ±   0.449   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                  a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized1:·gc.count                                       a.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized1                                                 200.a.200  avgt    5    26.069 ±   1.805   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                  200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized1:·gc.count                                       200.a.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized1                                                 200.200.a  avgt    5    34.618 ±   4.276   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                  200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized1:·gc.count                                       200.200.a  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized1                                           200.200.200.200  avgt    5    19.803 ±   0.942   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                            200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized1:·gc.count                                 200.200.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized1                                             200.200.99999  avgt    5   135.136 ±   0.608   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                              200.200.99999  avgt    5  1692.825 ±   7.759  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                         200.200.99999  avgt    5   120.000 ±   0.002    B/op
VersionParseBenchmark.optimized1:·gc.count                                   200.200.99999  avgt    5    51.000            counts
VersionParseBenchmark.optimized1:·gc.time                                    200.200.99999  avgt    5    22.000                ms
VersionParseBenchmark.optimized1                                              200.200.-200  avgt    5    35.430 ±   0.102   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                               200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized1:·gc.count                                    200.200.-200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized1                                                     1.0.0  avgt    5   104.877 ±  16.004   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                      1.0.0  avgt    5  2912.523 ± 415.521  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                                 1.0.0  avgt    5   160.000 ±   0.002    B/op
VersionParseBenchmark.optimized1:·gc.count                                           1.0.0  avgt    5    65.000            counts
VersionParseBenchmark.optimized1:·gc.time                                            1.0.0  avgt    5   136.000                ms
VersionParseBenchmark.optimized1                                               200.200.200  avgt    5   133.432 ±   6.769   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                200.200.200  avgt    5  2286.279 ± 115.168  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                           200.200.200  avgt    5   160.000 ±   0.002    B/op
VersionParseBenchmark.optimized1:·gc.count                                     200.200.200  avgt    5    61.000            counts
VersionParseBenchmark.optimized1:·gc.time                                      200.200.200  avgt    5    27.000                ms
VersionParseBenchmark.optimized1                                           10000.9876.5432  avgt    5   144.009 ±  28.709   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                            10000.9876.5432  avgt    5  2122.197 ± 397.902  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5   160.000 ±   0.003    B/op
VersionParseBenchmark.optimized1:·gc.count                                 10000.9876.5432  avgt    5    54.000            counts
VersionParseBenchmark.optimized1:·gc.time                                  10000.9876.5432  avgt    5    24.000                ms
VersionParseBenchmark.optimized1                                         10000.10000.10000  avgt    5   152.229 ±   0.680   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                          10000.10000.10000  avgt    5  2003.664 ±   9.098  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5   160.000 ±   0.003    B/op
VersionParseBenchmark.optimized1:·gc.count                               10000.10000.10000  avgt    5    54.000            counts
VersionParseBenchmark.optimized1:·gc.time                                10000.10000.10000  avgt    5    25.000                ms
VersionParseBenchmark.optimized2                                                            avgt    5     6.253 ±   0.254   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                             avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized2:·gc.count                                                  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                                       200  avgt    5     8.872 ±   0.400   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                        200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized2:·gc.count                                             200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                                      200.  avgt    5     9.533 ±   0.427   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                       200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized2:·gc.count                                            200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                                   200.200  avgt    5    13.140 ±   0.570   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                    200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized2:·gc.count                                         200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                                  200.200.  avgt    5    29.497 ±   2.796   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                   200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized2:·gc.count                                        200.200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                                 a.200.200  avgt    5    19.942 ±   0.217   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                  a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized2:·gc.count                                       a.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                                 200.a.200  avgt    5    27.269 ±   0.123   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                  200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized2:·gc.count                                       200.a.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                                 200.200.a  avgt    5    33.124 ±   0.404   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                  200.200.a  avgt    5     0.003 ±   0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized2:·gc.count                                       200.200.a  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                           200.200.200.200  avgt    5    20.198 ±   1.553   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                            200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized2:·gc.count                                 200.200.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                             200.200.99999  avgt    5    80.987 ±   0.195   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                              200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                         200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized2:·gc.count                                   200.200.99999  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                              200.200.-200  avgt    5    35.146 ±   0.204   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                               200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized2:·gc.count                                    200.200.-200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized2                                                     1.0.0  avgt    5    53.552 ±   5.480   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                      1.0.0  avgt    5  1424.740 ± 140.273  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                                 1.0.0  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized2:·gc.count                                           1.0.0  avgt    5    43.000            counts
VersionParseBenchmark.optimized2:·gc.time                                            1.0.0  avgt    5    18.000                ms
VersionParseBenchmark.optimized2                                               200.200.200  avgt    5    78.979 ±   2.170   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                200.200.200  avgt    5   965.500 ±  25.943  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                           200.200.200  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized2:·gc.count                                     200.200.200  avgt    5    33.000            counts
VersionParseBenchmark.optimized2:·gc.time                                      200.200.200  avgt    5    18.000                ms
VersionParseBenchmark.optimized2                                           10000.9876.5432  avgt    5    89.801 ±   0.226   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                            10000.9876.5432  avgt    5   849.163 ±   2.068  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized2:·gc.count                                 10000.9876.5432  avgt    5    29.000            counts
VersionParseBenchmark.optimized2:·gc.time                                  10000.9876.5432  avgt    5    13.000                ms
VersionParseBenchmark.optimized2                                         10000.10000.10000  avgt    5   101.237 ±   0.211   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                          10000.10000.10000  avgt    5   753.272 ±   1.891  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized2:·gc.count                               10000.10000.10000  avgt    5    26.000            counts
VersionParseBenchmark.optimized2:·gc.time                                10000.10000.10000  avgt    5    12.000                ms
VersionParseBenchmark.optimized3                                                            avgt    5     6.020 ±   1.630   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                             avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized3:·gc.count                                                  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                                       200  avgt    5    12.055 ±   0.137   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                        200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3:·gc.count                                             200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                                      200.  avgt    5    31.611 ±   1.201   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                       200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3:·gc.count                                            200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                                   200.200  avgt    5    41.511 ±   0.193   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                    200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3:·gc.count                                         200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                                  200.200.  avgt    5    50.298 ±   0.222   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                   200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3:·gc.count                                        200.200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                                 a.200.200  avgt    5     6.111 ±   0.017   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                  a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized3:·gc.count                                       a.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                                 200.a.200  avgt    5    31.957 ±   1.492   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                  200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3:·gc.count                                       200.a.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                                 200.200.a  avgt    5    62.576 ±   2.112   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                  200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3:·gc.count                                       200.200.a  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                           200.200.200.200  avgt    5    59.844 ±   5.953   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                            200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3:·gc.count                                 200.200.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                             200.200.99999  avgt    5    86.003 ±   0.184   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                              200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                         200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3:·gc.count                                   200.200.99999  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                              200.200.-200  avgt    5    67.005 ±   0.110   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                               200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3:·gc.count                                    200.200.-200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3                                                     1.0.0  avgt    5    49.337 ±   5.913   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                      1.0.0  avgt    5  1546.728 ± 179.319  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                                 1.0.0  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized3:·gc.count                                           1.0.0  avgt    5    47.000            counts
VersionParseBenchmark.optimized3:·gc.time                                            1.0.0  avgt    5    17.000                ms
VersionParseBenchmark.optimized3                                               200.200.200  avgt    5    85.998 ±   0.370   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                200.200.200  avgt    5   886.697 ±   3.841  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                           200.200.200  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized3:·gc.count                                     200.200.200  avgt    5    31.000            counts
VersionParseBenchmark.optimized3:·gc.time                                      200.200.200  avgt    5    17.000                ms
VersionParseBenchmark.optimized3                                           10000.9876.5432  avgt    5   107.507 ±   0.149   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                            10000.9876.5432  avgt    5   709.247 ±   0.740  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized3:·gc.count                                 10000.9876.5432  avgt    5    25.000            counts
VersionParseBenchmark.optimized3:·gc.time                                  10000.9876.5432  avgt    5    10.000                ms
VersionParseBenchmark.optimized3                                         10000.10000.10000  avgt    5   121.918 ±   1.189   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                          10000.10000.10000  avgt    5   625.466 ±   5.886  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized3:·gc.count                               10000.10000.10000  avgt    5    21.000            counts
VersionParseBenchmark.optimized3:·gc.time                                10000.10000.10000  avgt    5     8.000                ms
VersionParseBenchmark.optimized3Java                                                        avgt    5     5.818 ±   0.049   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                                         avgt    5     0.003 ±   0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                                    avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized3Java:·gc.count                                              avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                                   200  avgt    5    12.118 ±   0.046   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                                    200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                               200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3Java:·gc.count                                         200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                                  200.  avgt    5    27.028 ±   0.114   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                                   200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                              200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3Java:·gc.count                                        200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                               200.200  avgt    5    32.338 ±   0.230   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                                200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                           200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3Java:·gc.count                                     200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                              200.200.  avgt    5    51.929 ±   1.670   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                               200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                          200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3Java:·gc.count                                    200.200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                             a.200.200  avgt    5     6.120 ±   0.028   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                              a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                         a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized3Java:·gc.count                                   a.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                             200.a.200  avgt    5    26.536 ±   0.051   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                              200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                         200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3Java:·gc.count                                   200.a.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                             200.200.a  avgt    5    56.111 ±   0.137   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                              200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                         200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3Java:·gc.count                                   200.200.a  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                       200.200.200.200  avgt    5    65.346 ±   1.200   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                        200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                   200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3Java:·gc.count                             200.200.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                         200.200.99999  avgt    5    79.505 ±   0.077   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                          200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                     200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3Java:·gc.count                               200.200.99999  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                          200.200.-200  avgt    5    55.954 ±   4.551   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                           200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                      200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3Java:·gc.count                                200.200.-200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3Java                                                 1.0.0  avgt    5    47.356 ±   0.411   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                                  1.0.0  avgt    5  1610.194 ±  12.950  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                             1.0.0  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized3Java:·gc.count                                       1.0.0  avgt    5    44.000            counts
VersionParseBenchmark.optimized3Java:·gc.time                                        1.0.0  avgt    5    24.000                ms
VersionParseBenchmark.optimized3Java                                           200.200.200  avgt    5    86.826 ±   5.662   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                            200.200.200  avgt    5   878.308 ±  57.605  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                       200.200.200  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized3Java:·gc.count                                 200.200.200  avgt    5    31.000            counts
VersionParseBenchmark.optimized3Java:·gc.time                                  200.200.200  avgt    5    16.000                ms
VersionParseBenchmark.optimized3Java                                       10000.9876.5432  avgt    5   107.208 ±   0.184   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                        10000.9876.5432  avgt    5   711.270 ±   1.163  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                   10000.9876.5432  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized3Java:·gc.count                             10000.9876.5432  avgt    5    25.000            counts
VersionParseBenchmark.optimized3Java:·gc.time                              10000.9876.5432  avgt    5    11.000                ms
VersionParseBenchmark.optimized3Java                                     10000.10000.10000  avgt    5   109.096 ±   0.712   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                      10000.10000.10000  avgt    5   698.957 ±   4.580  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                 10000.10000.10000  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized3Java:·gc.count                           10000.10000.10000  avgt    5    24.000            counts
VersionParseBenchmark.optimized3Java:·gc.time                            10000.10000.10000  avgt    5    10.000                ms
VersionParseBenchmark.optimized3JavaNoSwitch                                                avgt    5     5.834 ±   0.061   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                                 avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                            avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                                      avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                                           200  avgt    5    12.249 ±   0.536   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                            200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                       200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                                 200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                                          200.  avgt    5    25.591 ±   0.531   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                           200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                      200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                                200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                                       200.200  avgt    5    29.766 ±   0.155   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                        200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                   200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                             200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                                      200.200.  avgt    5    53.740 ±   3.450   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                       200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                  200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                            200.200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                                     a.200.200  avgt    5     6.062 ±   0.046   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                      a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                 a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                           a.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                                     200.a.200  avgt    5    24.478 ±   1.516   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                      200.a.200  avgt    5     0.003 ±   0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                 200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                           200.a.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                                     200.200.a  avgt    5    53.555 ±   1.541   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                      200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                 200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                           200.200.a  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                               200.200.200.200  avgt    5    62.408 ±   6.248   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm           200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                     200.200.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                                 200.200.99999  avgt    5    86.671 ±   0.439   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                  200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm             200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                       200.200.99999  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                                  200.200.-200  avgt    5    55.800 ±   1.499   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                   200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm              200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                        200.200.-200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized3JavaNoSwitch                                         1.0.0  avgt    5    45.255 ±   3.489   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                          1.0.0  avgt    5  1685.580 ± 126.081  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                     1.0.0  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                               1.0.0  avgt    5    50.000            counts
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time                                1.0.0  avgt    5    22.000                ms
VersionParseBenchmark.optimized3JavaNoSwitch                                   200.200.200  avgt    5    72.840 ±   3.434   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                    200.200.200  avgt    5  1046.919 ±  51.021  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm               200.200.200  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                         200.200.200  avgt    5    36.000            counts
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time                          200.200.200  avgt    5    14.000                ms
VersionParseBenchmark.optimized3JavaNoSwitch                               10000.9876.5432  avgt    5    92.891 ±   0.330   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                10000.9876.5432  avgt    5   820.831 ±   2.779  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm           10000.9876.5432  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                     10000.9876.5432  avgt    5    28.000            counts
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time                      10000.9876.5432  avgt    5    12.000                ms
VersionParseBenchmark.optimized3JavaNoSwitch                             10000.10000.10000  avgt    5   103.190 ±   0.434   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate              10000.10000.10000  avgt    5   738.928 ±   3.627  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm         10000.10000.10000  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                   10000.10000.10000  avgt    5    25.000            counts
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time                    10000.10000.10000  avgt    5    16.000                ms
VersionParseBenchmark.optimized4                                                            avgt    5     5.833 ±   0.258   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                             avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized4:·gc.count                                                  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                                       200  avgt    5    16.238 ±   0.760   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                        200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized4:·gc.count                                             200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                                      200.  avgt    5    19.763 ±   0.053   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                       200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized4:·gc.count                                            200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                                   200.200  avgt    5    28.010 ±   0.120   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                    200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized4:·gc.count                                         200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                                  200.200.  avgt    5    32.672 ±   0.134   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                   200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized4:·gc.count                                        200.200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                                 a.200.200  avgt    5     6.105 ±   0.026   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                  a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized4:·gc.count                                       a.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                                 200.a.200  avgt    5    21.496 ±   0.104   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                  200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized4:·gc.count                                       200.a.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                                 200.200.a  avgt    5    32.159 ±   2.509   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                  200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized4:·gc.count                                       200.200.a  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                           200.200.200.200  avgt    5    40.947 ±   0.438   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                            200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized4:·gc.count                                 200.200.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                             200.200.99999  avgt    5    44.606 ±   1.276   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                              200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                         200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized4:·gc.count                                   200.200.99999  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                              200.200.-200  avgt    5    32.327 ±   0.140   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                               200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized4:·gc.count                                    200.200.-200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized4                                                     1.0.0  avgt    5    26.261 ±   1.775   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                      1.0.0  avgt    5  2904.372 ± 191.013  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                                 1.0.0  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized4:·gc.count                                           1.0.0  avgt    5    79.000            counts
VersionParseBenchmark.optimized4:·gc.time                                            1.0.0  avgt    5    28.000                ms
VersionParseBenchmark.optimized4                                               200.200.200  avgt    5    45.031 ±   0.110   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                200.200.200  avgt    5  1693.463 ±   5.128  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                           200.200.200  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized4:·gc.count                                     200.200.200  avgt    5    51.000            counts
VersionParseBenchmark.optimized4:·gc.time                                      200.200.200  avgt    5    21.000                ms
VersionParseBenchmark.optimized4                                           10000.9876.5432  avgt    5    57.005 ±   0.915   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                            10000.9876.5432  avgt    5  1337.683 ±  21.109  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized4:·gc.count                                 10000.9876.5432  avgt    5    40.000            counts
VersionParseBenchmark.optimized4:·gc.time                                  10000.9876.5432  avgt    5    16.000                ms
VersionParseBenchmark.optimized4                                         10000.10000.10000  avgt    5    63.538 ±   2.720   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                          10000.10000.10000  avgt    5  1200.135 ±  52.325  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized4:·gc.count                               10000.10000.10000  avgt    5    42.000            counts
VersionParseBenchmark.optimized4:·gc.time                                10000.10000.10000  avgt    5    17.000                ms
VersionParseBenchmark.optimized5                                                            avgt    5     5.768 ±   0.189   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                             avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized5:·gc.count                                                  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                                       200  avgt    5    20.051 ±   0.813   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                        200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized5:·gc.count                                             200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                                      200.  avgt    5    18.815 ±   0.047   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                       200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized5:·gc.count                                            200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                                   200.200  avgt    5    37.401 ±   0.088   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                    200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized5:·gc.count                                         200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                                  200.200.  avgt    5    34.479 ±   0.102   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                   200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized5:·gc.count                                        200.200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                                 a.200.200  avgt    5     6.540 ±   0.146   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                  a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized5:·gc.count                                       a.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                                 200.a.200  avgt    5    24.490 ±   0.387   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                  200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized5:·gc.count                                       200.a.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                                 200.200.a  avgt    5    39.320 ±   0.135   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                  200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized5:·gc.count                                       200.200.a  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                           200.200.200.200  avgt    5    58.868 ±   1.437   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                            200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized5:·gc.count                                 200.200.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                             200.200.99999  avgt    5    63.993 ±   0.999   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                              200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                         200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized5:·gc.count                                   200.200.99999  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                              200.200.-200  avgt    5    39.889 ±   2.207   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                               200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized5:·gc.count                                    200.200.-200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized5                                                     1.0.0  avgt    5    41.117 ±   5.948   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                      1.0.0  avgt    5  1856.652 ± 283.868  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                                 1.0.0  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized5:·gc.count                                           1.0.0  avgt    5    50.000            counts
VersionParseBenchmark.optimized5:·gc.time                                            1.0.0  avgt    5    21.000                ms
VersionParseBenchmark.optimized5                                               200.200.200  avgt    5    69.132 ±   0.235   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                200.200.200  avgt    5  1102.970 ±   4.012  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                           200.200.200  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized5:·gc.count                                     200.200.200  avgt    5    38.000            counts
VersionParseBenchmark.optimized5:·gc.time                                      200.200.200  avgt    5    16.000                ms
VersionParseBenchmark.optimized5                                           10000.9876.5432  avgt    5    80.976 ±   0.337   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                            10000.9876.5432  avgt    5   941.653 ±   3.603  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized5:·gc.count                                 10000.9876.5432  avgt    5    33.000            counts
VersionParseBenchmark.optimized5:·gc.time                                  10000.9876.5432  avgt    5    14.000                ms
VersionParseBenchmark.optimized5                                         10000.10000.10000  avgt    5    88.787 ±   0.259   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                          10000.10000.10000  avgt    5   858.795 ±   2.515  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5    40.000 ±   0.002    B/op
VersionParseBenchmark.optimized5:·gc.count                               10000.10000.10000  avgt    5    29.000            counts
VersionParseBenchmark.optimized5:·gc.time                                10000.10000.10000  avgt    5    12.000                ms
VersionParseBenchmark.optimized6                                                            avgt    5     5.851 ±   0.221   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                             avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized6:·gc.count                                                  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                                       200  avgt    5    14.395 ±   4.526   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                        200  avgt    5     0.003 ±   0.017  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized6:·gc.count                                             200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                                      200.  avgt    5    16.955 ±   0.093   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                       200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized6:·gc.count                                            200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                                   200.200  avgt    5    24.165 ±   0.218   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                    200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized6:·gc.count                                         200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                                  200.200.  avgt    5    32.815 ±   0.481   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                   200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized6:·gc.count                                        200.200.  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                                 a.200.200  avgt    5     6.121 ±   0.101   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                  a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseBenchmark.optimized6:·gc.count                                       a.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                                 200.a.200  avgt    5    17.244 ±   0.222   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                  200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized6:·gc.count                                       200.a.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                                 200.200.a  avgt    5    31.489 ±   0.130   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                  200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized6:·gc.count                                       200.200.a  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                           200.200.200.200  avgt    5    40.624 ±   1.315   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                            200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized6:·gc.count                                 200.200.200.200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                             200.200.99999  avgt    5    41.819 ±   0.154   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                              200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                         200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized6:·gc.count                                   200.200.99999  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                              200.200.-200  avgt    5    30.979 ±   0.058   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                               200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseBenchmark.optimized6:·gc.count                                    200.200.-200  avgt    5       ≈ 0            counts
VersionParseBenchmark.optimized6                                                     1.0.0  avgt    5    25.442 ±   1.829   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                      1.0.0  avgt    5  2997.893 ± 210.238  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                                 1.0.0  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized6:·gc.count                                           1.0.0  avgt    5    63.000            counts
VersionParseBenchmark.optimized6:·gc.time                                            1.0.0  avgt    5   100.000                ms
VersionParseBenchmark.optimized6                                               200.200.200  avgt    5    44.068 ±   0.251   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                200.200.200  avgt    5  1730.348 ±   9.451  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                           200.200.200  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized6:·gc.count                                     200.200.200  avgt    5    52.000            counts
VersionParseBenchmark.optimized6:·gc.time                                      200.200.200  avgt    5    23.000                ms
VersionParseBenchmark.optimized6                                           10000.9876.5432  avgt    5    57.658 ±   0.160   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                            10000.9876.5432  avgt    5  1322.385 ±   4.430  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized6:·gc.count                                 10000.9876.5432  avgt    5    46.000            counts
VersionParseBenchmark.optimized6:·gc.time                                  10000.9876.5432  avgt    5    20.000                ms
VersionParseBenchmark.optimized6                                         10000.10000.10000  avgt    5    64.592 ±   6.711   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                          10000.10000.10000  avgt    5  1181.193 ± 120.204  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5    40.000 ±   0.001    B/op
VersionParseBenchmark.optimized6:·gc.count                               10000.10000.10000  avgt    5    40.000            counts
VersionParseBenchmark.optimized6:·gc.time                                10000.10000.10000  avgt    5    18.000                ms
VersionParseBenchmark.regex                                                                 avgt    5    70.837 ±   1.737   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                                  avgt    5  3875.274 ±  95.274  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                             avgt    5   144.000 ±   0.001    B/op
VersionParseBenchmark.regex:·gc.count                                                       avgt    5    84.000            counts
VersionParseBenchmark.regex:·gc.time                                                        avgt    5   155.000                ms
VersionParseBenchmark.regex                                                            200  avgt    5   145.368 ±  13.863   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                             200  avgt    5  2833.708 ± 269.072  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                        200  avgt    5   216.000 ±   0.003    B/op
VersionParseBenchmark.regex:·gc.count                                                  200  avgt    5    65.000            counts
VersionParseBenchmark.regex:·gc.time                                                   200  avgt    5   118.000                ms
VersionParseBenchmark.regex                                                           200.  avgt    5   186.429 ±   1.808   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                            200.  avgt    5  2208.744 ±  20.506  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                       200.  avgt    5   216.000 ±   0.003    B/op
VersionParseBenchmark.regex:·gc.count                                                 200.  avgt    5    66.000            counts
VersionParseBenchmark.regex:·gc.time                                                  200.  avgt    5    27.000                ms
VersionParseBenchmark.regex                                                        200.200  avgt    5   240.744 ±   0.703   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                         200.200  avgt    5  1710.454 ±   4.321  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                    200.200  avgt    5   216.001 ±   0.004    B/op
VersionParseBenchmark.regex:·gc.count                                              200.200  avgt    5    51.000            counts
VersionParseBenchmark.regex:·gc.time                                               200.200  avgt    5    19.000                ms
VersionParseBenchmark.regex                                                       200.200.  avgt    5   261.960 ±   1.151   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                        200.200.  avgt    5  1571.868 ±   6.827  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                   200.200.  avgt    5   216.001 ±   0.005    B/op
VersionParseBenchmark.regex:·gc.count                                             200.200.  avgt    5    48.000            counts
VersionParseBenchmark.regex:·gc.time                                              200.200.  avgt    5    21.000                ms
VersionParseBenchmark.regex                                                      a.200.200  avgt    5    72.050 ±   1.934   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                       a.200.200  avgt    5  3810.381 ± 101.082  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                  a.200.200  avgt    5   144.000 ±   0.001    B/op
VersionParseBenchmark.regex:·gc.count                                            a.200.200  avgt    5    83.000            counts
VersionParseBenchmark.regex:·gc.time                                             a.200.200  avgt    5   122.000                ms
VersionParseBenchmark.regex                                                      200.a.200  avgt    5   183.651 ±   1.181   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                       200.a.200  avgt    5  2242.086 ±  13.187  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                  200.a.200  avgt    5   216.000 ±   0.003    B/op
VersionParseBenchmark.regex:·gc.count                                            200.a.200  avgt    5    67.000            counts
VersionParseBenchmark.regex:·gc.time                                             200.a.200  avgt    5    27.000                ms
VersionParseBenchmark.regex                                                      200.200.a  avgt    5   260.281 ±   1.013   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                       200.200.a  avgt    5  1582.119 ±   6.757  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                  200.200.a  avgt    5   216.001 ±   0.005    B/op
VersionParseBenchmark.regex:·gc.count                                            200.200.a  avgt    5    47.000            counts
VersionParseBenchmark.regex:·gc.time                                             200.200.a  avgt    5    24.000                ms
VersionParseBenchmark.regex                                                200.200.200.200  avgt    5   333.227 ±  18.124   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                 200.200.200.200  avgt    5  1235.796 ±  67.268  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                            200.200.200.200  avgt    5   216.001 ±   0.006    B/op
VersionParseBenchmark.regex:·gc.count                                      200.200.200.200  avgt    5    43.000            counts
VersionParseBenchmark.regex:·gc.time                                       200.200.200.200  avgt    5    17.000                ms
VersionParseBenchmark.regex                                                  200.200.99999  avgt    5   375.813 ±   1.261   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                   200.200.99999  avgt    5  1826.078 ±   6.253  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                              200.200.99999  avgt    5   360.001 ±   0.007    B/op
VersionParseBenchmark.regex:·gc.count                                        200.200.99999  avgt    5    54.000            counts
VersionParseBenchmark.regex:·gc.time                                         200.200.99999  avgt    5    23.000                ms
VersionParseBenchmark.regex                                                   200.200.-200  avgt    5   276.173 ±   3.460   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                    200.200.-200  avgt    5  1491.017 ±  18.725  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                               200.200.-200  avgt    5   216.001 ±   0.005    B/op
VersionParseBenchmark.regex:·gc.count                                         200.200.-200  avgt    5    45.000            counts
VersionParseBenchmark.regex:·gc.time                                          200.200.-200  avgt    5    18.000                ms
VersionParseBenchmark.regex                                                          1.0.0  avgt    5   271.522 ±   3.053   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                           1.0.0  avgt    5  2808.401 ±  31.491  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                      1.0.0  avgt    5   400.001 ±   0.005    B/op
VersionParseBenchmark.regex:·gc.count                                                1.0.0  avgt    5    66.000            counts
VersionParseBenchmark.regex:·gc.time                                                 1.0.0  avgt    5    97.000                ms
VersionParseBenchmark.regex                                                    200.200.200  avgt    5   373.599 ±   1.949   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                     200.200.200  avgt    5  2040.915 ±  11.653  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                200.200.200  avgt    5   400.001 ±   0.007    B/op
VersionParseBenchmark.regex:·gc.count                                          200.200.200  avgt    5    61.000            counts
VersionParseBenchmark.regex:·gc.time                                           200.200.200  avgt    5    23.000                ms
VersionParseBenchmark.regex                                                10000.9876.5432  avgt    5   424.390 ±  21.642   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                 10000.9876.5432  avgt    5  1796.877 ±  91.641  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                            10000.9876.5432  avgt    5   400.001 ±   0.008    B/op
VersionParseBenchmark.regex:·gc.count                                      10000.9876.5432  avgt    5    54.000            counts
VersionParseBenchmark.regex:·gc.time                                       10000.9876.5432  avgt    5    23.000                ms
VersionParseBenchmark.regex                                              10000.10000.10000  avgt    5   438.732 ±  11.384   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                               10000.10000.10000  avgt    5  1738.214 ±  44.554  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                          10000.10000.10000  avgt    5   400.001 ±   0.008    B/op
VersionParseBenchmark.regex:·gc.count                                    10000.10000.10000  avgt    5    52.000            counts
VersionParseBenchmark.regex:·gc.time                                     10000.10000.10000  avgt    5    23.000                ms
VersionParseBenchmark.yolo                                                                  avgt    5  2141.310 ± 196.422   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                                   avgt    5   762.395 ±  72.633  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                              avgt    5   856.006 ±   0.040    B/op
VersionParseBenchmark.yolo:·gc.count                                                        avgt    5    27.000            counts
VersionParseBenchmark.yolo:·gc.time                                                         avgt    5    12.000                ms
VersionParseBenchmark.yolo                                                             200  avgt    5  1702.628 ± 288.824   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                              200  avgt    5   915.029 ± 158.089  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                         200  avgt    5   816.005 ±   0.031    B/op
VersionParseBenchmark.yolo:·gc.count                                                   200  avgt    5    32.000            counts
VersionParseBenchmark.yolo:·gc.time                                                    200  avgt    5    15.000                ms
VersionParseBenchmark.yolo                                                            200.  avgt    5  1911.492 ± 199.427   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                             200.  avgt    5   989.867 ± 107.607  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                        200.  avgt    5   992.005 ±   0.036    B/op
VersionParseBenchmark.yolo:·gc.count                                                  200.  avgt    5    34.000            counts
VersionParseBenchmark.yolo:·gc.time                                                   200.  avgt    5    14.000                ms
VersionParseBenchmark.yolo                                                         200.200  avgt    5  1950.382 ± 202.396   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                          200.200  avgt    5   993.677 ± 107.253  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                     200.200  avgt    5  1016.005 ±   0.036    B/op
VersionParseBenchmark.yolo:·gc.count                                               200.200  avgt    5    34.000            counts
VersionParseBenchmark.yolo:·gc.time                                                200.200  avgt    5    14.000                ms
VersionParseBenchmark.yolo                                                        200.200.  avgt    5  1982.085 ± 212.330   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                         200.200.  avgt    5  1016.252 ± 113.399  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                    200.200.  avgt    5  1056.005 ±   0.037    B/op
VersionParseBenchmark.yolo:·gc.count                                              200.200.  avgt    5    35.000            counts
VersionParseBenchmark.yolo:·gc.time                                               200.200.  avgt    5    18.000                ms
VersionParseBenchmark.yolo                                                       a.200.200  avgt    5  2544.132 ± 156.207   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                        a.200.200  avgt    5   839.329 ±  53.062  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                   a.200.200  avgt    5  1120.007 ±   0.048    B/op
VersionParseBenchmark.yolo:·gc.count                                             a.200.200  avgt    5    29.000            counts
VersionParseBenchmark.yolo:·gc.time                                              a.200.200  avgt    5    12.000                ms
VersionParseBenchmark.yolo                                                       200.a.200  avgt    5  2650.042 ± 169.167   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                        200.a.200  avgt    5   805.900 ±  52.759  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                   200.a.200  avgt    5  1120.007 ±   0.049    B/op
VersionParseBenchmark.yolo:·gc.count                                             200.a.200  avgt    5    27.000            counts
VersionParseBenchmark.yolo:·gc.time                                              200.a.200  avgt    5    12.000                ms
VersionParseBenchmark.yolo                                                       200.200.a  avgt    5  2653.506 ± 296.965   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                        200.200.a  avgt    5   816.703 ±  93.393  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                   200.200.a  avgt    5  1136.007 ±   0.050    B/op
VersionParseBenchmark.yolo:·gc.count                                             200.200.a  avgt    5    28.000            counts
VersionParseBenchmark.yolo:·gc.time                                              200.200.a  avgt    5    16.000                ms
VersionParseBenchmark.yolo                                                 200.200.200.200  avgt    5  2082.645 ± 224.888   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                  200.200.200.200  avgt    5  1062.590 ± 119.548  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                             200.200.200.200  avgt    5  1160.006 ±   0.038    B/op
VersionParseBenchmark.yolo:·gc.count                                       200.200.200.200  avgt    5    36.000            counts
VersionParseBenchmark.yolo:·gc.time                                        200.200.200.200  avgt    5    17.000                ms
VersionParseBenchmark.yolo                                                   200.200.99999  avgt    5  2072.081 ± 184.616   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                    200.200.99999  avgt    5  1133.925 ± 104.795  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                               200.200.99999  avgt    5  1232.006 ±   0.038    B/op
VersionParseBenchmark.yolo:·gc.count                                         200.200.99999  avgt    5    39.000            counts
VersionParseBenchmark.yolo:·gc.time                                          200.200.99999  avgt    5    14.000                ms
VersionParseBenchmark.yolo                                                    200.200.-200  avgt    5  2083.599 ± 267.047   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                     200.200.-200  avgt    5  1128.263 ± 147.116  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                200.200.-200  avgt    5  1232.006 ±   0.038    B/op
VersionParseBenchmark.yolo:·gc.count                                          200.200.-200  avgt    5    38.000            counts
VersionParseBenchmark.yolo:·gc.time                                           200.200.-200  avgt    5    23.000                ms
VersionParseBenchmark.yolo                                                           1.0.0  avgt    5   230.549 ±  17.724   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                            1.0.0  avgt    5  2977.424 ± 222.174  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                       1.0.0  avgt    5   360.001 ±   0.004    B/op
VersionParseBenchmark.yolo:·gc.count                                                 1.0.0  avgt    5    69.000            counts
VersionParseBenchmark.yolo:·gc.time                                                  1.0.0  avgt    5   113.000                ms
VersionParseBenchmark.yolo                                                     200.200.200  avgt    5   276.938 ±   5.567   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                      200.200.200  avgt    5  3689.663 ±  72.321  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                 200.200.200  avgt    5   536.001 ±   0.005    B/op
VersionParseBenchmark.yolo:·gc.count                                           200.200.200  avgt    5    78.000            counts
VersionParseBenchmark.yolo:·gc.time                                            200.200.200  avgt    5   115.000                ms
VersionParseBenchmark.yolo                                                 10000.9876.5432  avgt    5   296.776 ±  11.884   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                  10000.9876.5432  avgt    5  3546.060 ± 140.538  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                             10000.9876.5432  avgt    5   552.001 ±   0.005    B/op
VersionParseBenchmark.yolo:·gc.count                                       10000.9876.5432  avgt    5    78.000            counts
VersionParseBenchmark.yolo:·gc.time                                        10000.9876.5432  avgt    5   123.000                ms
VersionParseBenchmark.yolo                                               10000.10000.10000  avgt    5   272.758 ±   1.251   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                10000.10000.10000  avgt    5  3913.841 ±  16.719  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                           10000.10000.10000  avgt    5   560.001 ±   0.005    B/op
VersionParseBenchmark.yolo:·gc.count                                     10000.10000.10000  avgt    5   101.000            counts
VersionParseBenchmark.yolo:·gc.time                                      10000.10000.10000  avgt    5    40.000                ms
VersionParseBenchmark.yoloNoThrow                                                           avgt    5  2118.371 ± 172.835   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                            avgt    5   770.613 ±  64.992  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                                       avgt    5   856.006 ±   0.039    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                                 avgt    5    27.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                                  avgt    5    12.000                ms
VersionParseBenchmark.yoloNoThrow                                                      200  avgt    5  1698.239 ± 139.738   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                       200  avgt    5   916.217 ±  77.952  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                                  200  avgt    5   816.005 ±   0.032    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                            200  avgt    5    32.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                             200  avgt    5    14.000                ms
VersionParseBenchmark.yoloNoThrow                                                     200.  avgt    5  1923.823 ± 201.124   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                      200.  avgt    5   983.591 ± 107.241  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                                 200.  avgt    5   992.005 ±   0.035    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                           200.  avgt    5    34.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                            200.  avgt    5    15.000                ms
VersionParseBenchmark.yoloNoThrow                                                  200.200  avgt    5  1945.908 ± 205.111   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                   200.200  avgt    5   995.887 ± 109.368  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                              200.200  avgt    5  1016.005 ±   0.036    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                        200.200  avgt    5    34.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                         200.200  avgt    5    16.000                ms
VersionParseBenchmark.yoloNoThrow                                                 200.200.  avgt    5  1968.988 ± 217.807   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                  200.200.  avgt    5  1023.058 ± 118.180  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                             200.200.  avgt    5  1056.005 ±   0.037    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                       200.200.  avgt    5    36.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                        200.200.  avgt    5    15.000                ms
VersionParseBenchmark.yoloNoThrow                                                a.200.200  avgt    5  2408.230 ± 170.842   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                 a.200.200  avgt    5   874.153 ±  63.997  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                            a.200.200  avgt    5  1104.006 ±   0.045    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                      a.200.200  avgt    5    30.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                       a.200.200  avgt    5    14.000                ms
VersionParseBenchmark.yoloNoThrow                                                200.a.200  avgt    5  2605.447 ± 206.831   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                 200.a.200  avgt    5   831.388 ±  68.059  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                            200.a.200  avgt    5  1136.007 ±   0.048    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                      200.a.200  avgt    5    28.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                       200.a.200  avgt    5    17.000                ms
VersionParseBenchmark.yoloNoThrow                                                200.200.a  avgt    5  2427.216 ± 276.818   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                 200.200.a  avgt    5   886.515 ± 102.669  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                            200.200.a  avgt    5  1128.006 ±   0.045    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                      200.200.a  avgt    5    30.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                       200.200.a  avgt    5    13.000                ms
VersionParseBenchmark.yoloNoThrow                                          200.200.200.200  avgt    5  2242.720 ± 192.880   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                           200.200.200.200  avgt    5  1000.032 ±  88.986  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                      200.200.200.200  avgt    5  1176.006 ±   0.041    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                200.200.200.200  avgt    5    34.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                 200.200.200.200  avgt    5    15.000                ms
VersionParseBenchmark.yoloNoThrow                                            200.200.99999  avgt    5   278.595 ±   4.408   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                             200.200.99999  avgt    5  3503.488 ±  53.972  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                        200.200.99999  avgt    5   512.001 ±   0.005    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                  200.200.99999  avgt    5    77.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                   200.200.99999  avgt    5   117.000                ms
VersionParseBenchmark.yoloNoThrow                                             200.200.-200  avgt    5   269.627 ±  13.917   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                              200.200.-200  avgt    5  3620.313 ± 186.986  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                         200.200.-200  avgt    5   512.001 ±   0.005    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                   200.200.-200  avgt    5    77.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                    200.200.-200  avgt    5   126.000                ms
VersionParseBenchmark.yoloNoThrow                                                    1.0.0  avgt    5   239.759 ±  14.915   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                     1.0.0  avgt    5  2862.597 ± 173.886  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                                1.0.0  avgt    5   360.001 ±   0.004    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                          1.0.0  avgt    5    78.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                           1.0.0  avgt    5    33.000                ms
VersionParseBenchmark.yoloNoThrow                                              200.200.200  avgt    5   259.847 ±   6.543   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                               200.200.200  avgt    5  4050.065 ± 103.276  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                          200.200.200  avgt    5   552.000 ±   0.005    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                    200.200.200  avgt    5    89.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                     200.200.200  avgt    5   120.000                ms
VersionParseBenchmark.yoloNoThrow                                          10000.9876.5432  avgt    5   277.659 ±  16.924   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                           10000.9876.5432  avgt    5  3790.577 ± 228.446  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                      10000.9876.5432  avgt    5   552.000 ±   0.005    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                10000.9876.5432  avgt    5    77.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                 10000.9876.5432  avgt    5   115.000                ms
VersionParseBenchmark.yoloNoThrow                                        10000.10000.10000  avgt    5   292.553 ±   6.300   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                         10000.10000.10000  avgt    5  3597.029 ±  79.655  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                    10000.10000.10000  avgt    5   552.001 ±   0.006    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                              10000.10000.10000  avgt    5    78.000            counts
VersionParseBenchmark.yoloNoThrow:·gc.time                               10000.10000.10000  avgt    5   124.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                                      avgt    5  2058.734 ± 194.037   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                                       avgt    5   793.019 ±  77.225  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                                  avgt    5   856.005 ±   0.038    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                            avgt    5    28.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                             avgt    5    14.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                                 200  avgt    5  1613.990 ± 190.329   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                                  200  avgt    5   964.522 ± 119.011  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                             200  avgt    5   816.004 ±   0.031    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                       200  avgt    5    33.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                        200  avgt    5    13.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                                200.  avgt    5  1791.475 ± 176.846   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                                 200.  avgt    5  1022.148 ± 104.873  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                            200.  avgt    5   960.005 ±   0.033    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                      200.  avgt    5    35.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                       200.  avgt    5    14.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                             200.200  avgt    5  1834.367 ± 189.059   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                              200.200  avgt    5  1023.157 ± 109.723  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                         200.200  avgt    5   984.005 ±   0.034    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                   200.200  avgt    5    35.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                    200.200  avgt    5    17.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                            200.200.  avgt    5  1851.744 ± 175.241   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                             200.200.  avgt    5  1054.756 ± 103.401  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                        200.200.  avgt    5  1024.005 ±   0.034    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                  200.200.  avgt    5    36.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                   200.200.  avgt    5    15.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                           a.200.200  avgt    5  2326.867 ± 186.495   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                            a.200.200  avgt    5   878.552 ±  72.892  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                       a.200.200  avgt    5  1072.006 ±   0.043    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                 a.200.200  avgt    5    30.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                  a.200.200  avgt    5    12.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                           200.a.200  avgt    5  2383.230 ± 243.612   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                            200.a.200  avgt    5   870.719 ±  91.292  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                       200.a.200  avgt    5  1088.007 ±   0.045    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                 200.a.200  avgt    5    30.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                  200.a.200  avgt    5    13.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                           200.200.a  avgt    5  2393.418 ± 173.328   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                            200.200.a  avgt    5   879.493 ±  65.603  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                       200.200.a  avgt    5  1104.006 ±   0.045    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                 200.200.a  avgt    5    30.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                  200.200.a  avgt    5    14.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                     200.200.200.200  avgt    5  2010.266 ± 267.229   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                      200.200.200.200  avgt    5  1070.619 ± 145.574  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                 200.200.200.200  avgt    5  1128.005 ±   0.038    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                           200.200.200.200  avgt    5    37.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                            200.200.200.200  avgt    5    20.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                       200.200.99999  avgt    5   252.298 ±   9.121   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                        200.200.99999  avgt    5  3627.211 ± 132.654  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                   200.200.99999  avgt    5   480.001 ±   0.005    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                             200.200.99999  avgt    5    81.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                              200.200.99999  avgt    5   151.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                        200.200.-200  avgt    5   258.787 ±   1.075   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                         200.200.-200  avgt    5  3712.774 ±  15.573  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                    200.200.-200  avgt    5   504.001 ±   0.005    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                              200.200.-200  avgt    5    96.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                               200.200.-200  avgt    5    46.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                               1.0.0  avgt    5   204.793 ±  18.248   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                                1.0.0  avgt    5  3054.331 ± 266.915  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                           1.0.0  avgt    5   328.001 ±   0.004    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                     1.0.0  avgt    5    81.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                      1.0.0  avgt    5    37.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                         200.200.200  avgt    5   257.612 ±  14.637   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                          200.200.200  avgt    5  4026.441 ± 227.568  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                     200.200.200  avgt    5   544.001 ±   0.005    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                               200.200.200  avgt    5    83.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                200.200.200  avgt    5   134.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                     10000.9876.5432  avgt    5   263.176 ±   0.820   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                      10000.9876.5432  avgt    5  3766.495 ±  10.325  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                 10000.9876.5432  avgt    5   520.001 ±   0.005    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                           10000.9876.5432  avgt    5   101.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                            10000.9876.5432  avgt    5    45.000                ms
VersionParseBenchmark.yoloNoThrowNoTry                                   10000.10000.10000  avgt    5   291.590 ±  16.001   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                    10000.10000.10000  avgt    5  3400.034 ± 182.294  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm               10000.10000.10000  avgt    5   520.001 ±   0.005    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                         10000.10000.10000  avgt    5    76.000            counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                          10000.10000.10000  avgt    5   136.000                ms
VersionParseBenchmark.yoloNoTry                                                             avgt    5  2060.663 ±  93.935   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                              avgt    5   792.002 ±  36.909  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                                         avgt    5   856.005 ±   0.038    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                                   avgt    5    28.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                                    avgt    5    13.000                ms
VersionParseBenchmark.yoloNoTry                                                        200  avgt    5  1617.098 ± 222.246   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                         200  avgt    5   962.924 ± 139.301  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                                    200  avgt    5   816.004 ±   0.031    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                              200  avgt    5    34.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                               200  avgt    5    15.000                ms
VersionParseBenchmark.yoloNoTry                                                       200.  avgt    5  1792.663 ± 172.378   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                        200.  avgt    5  1021.416 ± 102.022  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                                   200.  avgt    5   960.005 ±   0.033    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                             200.  avgt    5    35.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                              200.  avgt    5    13.000                ms
VersionParseBenchmark.yoloNoTry                                                    200.200  avgt    5  1853.957 ± 172.078   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                     200.200  avgt    5  1012.217 ±  97.606  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                                200.200  avgt    5   984.005 ±   0.035    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                          200.200  avgt    5    34.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                           200.200  avgt    5    20.000                ms
VersionParseBenchmark.yoloNoTry                                                   200.200.  avgt    5  1846.563 ± 179.117   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                    200.200.  avgt    5  1082.400 ± 109.124  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                               200.200.  avgt    5  1048.005 ±   0.034    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                         200.200.  avgt    5    37.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                          200.200.  avgt    5    17.000                ms
VersionParseBenchmark.yoloNoTry                                                  a.200.200  avgt    5  2339.075 ± 169.998   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                   a.200.200  avgt    5   873.825 ±  65.435  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                              a.200.200  avgt    5  1072.006 ±   0.043    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                        a.200.200  avgt    5    30.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                         a.200.200  avgt    5    14.000                ms
VersionParseBenchmark.yoloNoTry                                                  200.a.200  avgt    5  2397.761 ± 191.592   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                   200.a.200  avgt    5   865.282 ±  69.931  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                              200.a.200  avgt    5  1088.006 ±   0.044    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                        200.a.200  avgt    5    30.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                         200.a.200  avgt    5    14.000                ms
VersionParseBenchmark.yoloNoTry                                                  200.200.a  avgt    5  2428.992 ± 173.601   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                   200.200.a  avgt    5   866.626 ±  63.949  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                              200.200.a  avgt    5  1104.006 ±   0.045    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                        200.200.a  avgt    5    30.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                         200.200.a  avgt    5    16.000                ms
VersionParseBenchmark.yoloNoTry                                            200.200.200.200  avgt    5  1967.281 ± 178.908   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                             200.200.200.200  avgt    5  1093.513 ± 102.914  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                        200.200.200.200  avgt    5  1128.005 ±   0.037    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                  200.200.200.200  avgt    5    32.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                   200.200.200.200  avgt    5    15.000                ms
VersionParseBenchmark.yoloNoTry                                              200.200.99999  avgt    5  2060.472 ± 155.907   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                               200.200.99999  avgt    5  1132.663 ±  88.402  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                          200.200.99999  avgt    5  1224.006 ±   0.038    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                    200.200.99999  avgt    5    39.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                     200.200.99999  avgt    5    16.000                ms
VersionParseBenchmark.yoloNoTry                                               200.200.-200  avgt    5  1971.078 ± 210.511   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                200.200.-200  avgt    5  1161.395 ± 129.077  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                           200.200.-200  avgt    5  1200.005 ±   0.036    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                     200.200.-200  avgt    5    39.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                      200.200.-200  avgt    5    17.000                ms
VersionParseBenchmark.yoloNoTry                                                      1.0.0  avgt    5   209.545 ±   0.765   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                       1.0.0  avgt    5  2983.999 ±  11.885  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                                  1.0.0  avgt    5   328.001 ±   0.004    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                            1.0.0  avgt    5    79.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                             1.0.0  avgt    5    38.000                ms
VersionParseBenchmark.yoloNoTry                                                200.200.200  avgt    5   244.557 ±   2.378   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                 200.200.200  avgt    5  4053.460 ±  37.333  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                            200.200.200  avgt    5   520.001 ±   0.004    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                      200.200.200  avgt    5   103.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                       200.200.200  avgt    5    44.000                ms
VersionParseBenchmark.yoloNoTry                                            10000.9876.5432  avgt    5   283.004 ±   4.758   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                             10000.9876.5432  avgt    5  3502.683 ±  58.795  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                        10000.9876.5432  avgt    5   520.001 ±   0.005    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                  10000.9876.5432  avgt    5    78.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                   10000.9876.5432  avgt    5   130.000                ms
VersionParseBenchmark.yoloNoTry                                          10000.10000.10000  avgt    5   277.763 ±  15.293   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                           10000.10000.10000  avgt    5  3569.366 ± 191.631  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                      10000.10000.10000  avgt    5   520.001 ±   0.005    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                10000.10000.10000  avgt    5    81.000            counts
VersionParseBenchmark.yoloNoTry:·gc.time                                 10000.10000.10000  avgt    5   117.000                ms
VersionParseNoAllocBenchmark.optimized1                                                     avgt    5     5.329 ±   0.006   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                                      avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                           avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized1                                                200  avgt    5     8.158 ±   0.145   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                                 200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                      200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized1                                               200.  avgt    5     8.984 ±   0.098   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                                200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                     200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized1                                            200.200  avgt    5    12.476 ±   0.068   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                             200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                  200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized1                                           200.200.  avgt    5    29.406 ±   0.213   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                            200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                 200.200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized1                                          a.200.200  avgt    5    18.586 ±   0.661   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                           a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                a.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized1                                          200.a.200  avgt    5    25.294 ±   0.116   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                           200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                200.a.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized1                                          200.200.a  avgt    5    33.137 ±   0.353   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                           200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                200.200.a  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized1                                    200.200.200.200  avgt    5    19.089 ±   0.087   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                     200.200.200.200  avgt    5     0.003 ±   0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                          200.200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized1                                      200.200.99999  avgt    5   135.561 ±   0.791   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                       200.200.99999  avgt    5  1687.463 ±   9.516  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                  200.200.99999  avgt    5   120.000 ±   0.003    B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                            200.200.99999  avgt    5    51.000            counts
VersionParseNoAllocBenchmark.optimized1:·gc.time                             200.200.99999  avgt    5    23.000                ms
VersionParseNoAllocBenchmark.optimized1                                       200.200.-200  avgt    5    35.365 ±   0.456   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                        200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                             200.200.-200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized1                                              1.0.0  avgt    5    96.050 ±   4.393   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                               1.0.0  avgt    5  2381.722 ± 110.768  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                          1.0.0  avgt    5   120.000 ±   0.002    B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                    1.0.0  avgt    5    71.000            counts
VersionParseNoAllocBenchmark.optimized1:·gc.time                                     1.0.0  avgt    5    31.000                ms
VersionParseNoAllocBenchmark.optimized1                                        200.200.200  avgt    5   129.387 ±   0.747   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                         200.200.200  avgt    5  1768.098 ±  10.546  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                    200.200.200  avgt    5   120.000 ±   0.002    B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                              200.200.200  avgt    5    53.000            counts
VersionParseNoAllocBenchmark.optimized1:·gc.time                               200.200.200  avgt    5    23.000                ms
VersionParseNoAllocBenchmark.optimized1                                    10000.9876.5432  avgt    5   137.729 ±   7.108   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                     10000.9876.5432  avgt    5  1661.180 ±  86.219  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                10000.9876.5432  avgt    5   120.000 ±   0.003    B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                          10000.9876.5432  avgt    5    50.000            counts
VersionParseNoAllocBenchmark.optimized1:·gc.time                           10000.9876.5432  avgt    5    20.000                ms
VersionParseNoAllocBenchmark.optimized1                                  10000.10000.10000  avgt    5   147.770 ±   6.433   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                   10000.10000.10000  avgt    5  1548.178 ±  68.183  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm              10000.10000.10000  avgt    5   120.000 ±   0.003    B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                        10000.10000.10000  avgt    5    42.000            counts
VersionParseNoAllocBenchmark.optimized1:·gc.time                         10000.10000.10000  avgt    5    19.000                ms
VersionParseNoAllocBenchmark.optimized2                                                     avgt    5     5.326 ±   0.010   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                                      avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                           avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                                200  avgt    5     8.404 ±   0.115   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                                 200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                      200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                               200.  avgt    5     8.979 ±   0.055   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                                200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                     200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                            200.200  avgt    5    12.490 ±   0.200   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                             200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                  200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                           200.200.  avgt    5    28.951 ±   0.079   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                            200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                 200.200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                          a.200.200  avgt    5    19.900 ±   0.526   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                           a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                a.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                          200.a.200  avgt    5    27.607 ±   2.930   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                           200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                200.a.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                          200.200.a  avgt    5    32.840 ±   0.100   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                           200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                200.200.a  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                    200.200.200.200  avgt    5    19.071 ±   0.112   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                     200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                          200.200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                      200.200.99999  avgt    5    80.555 ±   0.250   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                       200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                  200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                            200.200.99999  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                       200.200.-200  avgt    5    34.885 ±   0.417   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                        200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                             200.200.-200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                              1.0.0  avgt    5    47.674 ±   0.192   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                               1.0.0  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                          1.0.0  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                    1.0.0  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                        200.200.200  avgt    5    74.709 ±   0.551   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                         200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                    200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                              200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                    10000.9876.5432  avgt    5    85.892 ±   3.629   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                     10000.9876.5432  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                10000.9876.5432  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                          10000.9876.5432  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized2                                  10000.10000.10000  avgt    5    97.215 ±   0.211   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                   10000.10000.10000  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm              10000.10000.10000  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                        10000.10000.10000  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                                     avgt    5     5.329 ±   0.022   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                                      avgt    5     0.003 ±   0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                           avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                                200  avgt    5    11.986 ±   1.069   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                                 200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                      200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                               200.  avgt    5    30.350 ±   0.133   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                                200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                     200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                            200.200  avgt    5    41.301 ±   0.047   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                             200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                  200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                           200.200.  avgt    5    49.918 ±   1.697   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                            200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                 200.200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                          a.200.200  avgt    5     5.748 ±   0.014   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                           a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                a.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                          200.a.200  avgt    5    31.485 ±   0.136   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                           200.a.200  avgt    5     0.003 ±   0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                200.a.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                          200.200.a  avgt    5    59.856 ±   0.075   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                           200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                200.200.a  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                    200.200.200.200  avgt    5    60.900 ±   1.832   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                     200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                          200.200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                      200.200.99999  avgt    5    85.609 ±   0.576   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                       200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                  200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                            200.200.99999  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                       200.200.-200  avgt    5    67.685 ±   2.554   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                        200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                             200.200.-200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                              1.0.0  avgt    5    42.524 ±   3.336   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                               1.0.0  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                          1.0.0  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                    1.0.0  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                        200.200.200  avgt    5    76.429 ±   0.278   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                         200.200.200  avgt    5     0.003 ±   0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                    200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                              200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                    10000.9876.5432  avgt    5    90.400 ±   2.743   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                     10000.9876.5432  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                10000.9876.5432  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                          10000.9876.5432  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3                                  10000.10000.10000  avgt    5   102.196 ±   0.477   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                   10000.10000.10000  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm              10000.10000.10000  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                        10000.10000.10000  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                                 avgt    5     5.328 ±   0.007   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                                  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                             avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                                       avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                            200  avgt    5    11.894 ±   0.070   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                             200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                        200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                                  200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                           200.  avgt    5    26.666 ±   0.107   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                            200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                       200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                                 200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                        200.200  avgt    5    32.028 ±   0.177   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                         200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                    200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                              200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                       200.200.  avgt    5    52.814 ±   0.992   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                        200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                   200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                             200.200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                      a.200.200  avgt    5     5.756 ±   0.023   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                       a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                  a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                            a.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                      200.a.200  avgt    5    25.445 ±   0.115   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                       200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                  200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                            200.a.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                      200.200.a  avgt    5    54.836 ±   0.184   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                       200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                  200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                            200.200.a  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                200.200.200.200  avgt    5    69.595 ±  14.863   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                 200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm            200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                      200.200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                  200.200.99999  avgt    5    79.056 ±   0.197   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                   200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm              200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                        200.200.99999  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                   200.200.-200  avgt    5    54.858 ±   0.131   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                    200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm               200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                         200.200.-200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                          1.0.0  avgt    5    40.187 ±   7.404   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                           1.0.0  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                      1.0.0  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                                1.0.0  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                    200.200.200  avgt    5    73.348 ±   3.505   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                     200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                          200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                                10000.9876.5432  avgt    5    91.757 ±   0.167   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                 10000.9876.5432  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm            10000.9876.5432  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                      10000.9876.5432  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3Java                              10000.10000.10000  avgt    5   103.807 ±   0.288   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate               10000.10000.10000  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm          10000.10000.10000  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                    10000.10000.10000  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                                         avgt    5     5.322 ±   0.007   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                          avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                     avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                               avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                                    200  avgt    5    11.966 ±   0.952   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                     200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                          200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                                   200.  avgt    5    24.889 ±   0.436   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                    200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm               200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                         200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                                200.200  avgt    5    29.292 ±   1.282   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                 200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm            200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                      200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                               200.200.  avgt    5    55.595 ±   1.032   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm           200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                     200.200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                              a.200.200  avgt    5     5.717 ±   0.020   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate               a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm          a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                    a.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                              200.a.200  avgt    5    24.427 ±   0.158   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate               200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm          200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                    200.a.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                              200.200.a  avgt    5    52.357 ±   0.267   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate               200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm          200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                    200.200.a  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                        200.200.200.200  avgt    5    58.372 ±   5.889   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate         200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm    200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count              200.200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                          200.200.99999  avgt    5    89.666 ±   7.912   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate           200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm      200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                200.200.99999  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                           200.200.-200  avgt    5    53.424 ±   2.512   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate            200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm       200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                 200.200.-200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                                  1.0.0  avgt    5    40.225 ±   0.112   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                   1.0.0  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm              1.0.0  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                        1.0.0  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                            200.200.200  avgt    5    77.978 ±   4.486   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate             200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm        200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                  200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                        10000.9876.5432  avgt    5    96.251 ±   4.915   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate         10000.9876.5432  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm    10000.9876.5432  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count              10000.9876.5432  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                      10000.10000.10000  avgt    5   119.563 ±   0.075   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate       10000.10000.10000  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm  10000.10000.10000  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count            10000.10000.10000  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                                     avgt    5     5.326 ±   0.006   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                                      avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                           avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                                200  avgt    5    16.065 ±   0.054   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                                 200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                      200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                               200.  avgt    5    19.634 ±   0.078   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                                200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                     200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                            200.200  avgt    5    27.987 ±   0.945   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                             200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                  200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                           200.200.  avgt    5    32.288 ±   0.045   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                            200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                 200.200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                          a.200.200  avgt    5     5.747 ±   0.015   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                           a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                a.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                          200.a.200  avgt    5    21.196 ±   0.034   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                           200.a.200  avgt    5     0.003 ±   0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                200.a.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                          200.200.a  avgt    5    31.788 ±   0.101   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                           200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                200.200.a  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                    200.200.200.200  avgt    5    43.255 ±   0.115   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                     200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                          200.200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                      200.200.99999  avgt    5    44.609 ±   0.449   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                       200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                  200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                            200.200.99999  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                       200.200.-200  avgt    5    32.048 ±   2.122   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                        200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                             200.200.-200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                              1.0.0  avgt    5    24.241 ±   0.735   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                               1.0.0  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                          1.0.0  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                    1.0.0  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                        200.200.200  avgt    5    41.865 ±   0.361   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                         200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                    200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                              200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                    10000.9876.5432  avgt    5    55.989 ±   6.176   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                     10000.9876.5432  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                10000.9876.5432  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                          10000.9876.5432  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized4                                  10000.10000.10000  avgt    5    60.602 ±   0.240   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                   10000.10000.10000  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm              10000.10000.10000  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                        10000.10000.10000  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                                     avgt    5     5.393 ±   0.576   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                                      avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                           avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                                200  avgt    5    21.348 ±   0.065   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                                 200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                      200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                               200.  avgt    5    18.828 ±   0.501   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                                200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                     200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                            200.200  avgt    5    39.392 ±   0.128   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                             200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                  200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                           200.200.  avgt    5    34.005 ±   0.137   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                            200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                 200.200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                          a.200.200  avgt    5     6.240 ±   0.005   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                           a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                a.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                          200.a.200  avgt    5    24.077 ±   0.125   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                           200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                200.a.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                          200.200.a  avgt    5    39.899 ±   4.611   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                           200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                200.200.a  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                    200.200.200.200  avgt    5    58.945 ±   0.420   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                     200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                          200.200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                      200.200.99999  avgt    5    63.725 ±   0.051   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                       200.200.99999  avgt    5     0.003 ±   0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                  200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                            200.200.99999  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                       200.200.-200  avgt    5    39.391 ±   0.197   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                        200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                             200.200.-200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                              1.0.0  avgt    5    33.221 ±   0.705   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                               1.0.0  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                          1.0.0  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                    1.0.0  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                        200.200.200  avgt    5    68.860 ±   9.379   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                         200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                    200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                              200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                    10000.9876.5432  avgt    5    77.764 ±   0.308   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                     10000.9876.5432  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                10000.9876.5432  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                          10000.9876.5432  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized5                                  10000.10000.10000  avgt    5    83.778 ±   0.058   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                   10000.10000.10000  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm              10000.10000.10000  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                        10000.10000.10000  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                                     avgt    5     5.328 ±   0.012   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                                      avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                           avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                                200  avgt    5    15.240 ±   3.716   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                                 200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                      200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                               200.  avgt    5    17.166 ±   0.690   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                                200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                     200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                            200.200  avgt    5    24.049 ±   0.077   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                             200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                  200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                           200.200.  avgt    5    33.017 ±   0.144   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                            200.200.  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                 200.200.  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                          a.200.200  avgt    5     5.761 ±   0.019   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                           a.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁵              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                a.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                          200.a.200  avgt    5    16.908 ±   0.016   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                           200.a.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                200.a.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                          200.200.a  avgt    5    31.410 ±   0.105   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                           200.200.a  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                200.200.a  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                    200.200.200.200  avgt    5    40.613 ±   0.066   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                     200.200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                          200.200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                      200.200.99999  avgt    5    40.931 ±   0.061   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                       200.200.99999  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                  200.200.99999  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                            200.200.99999  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                       200.200.-200  avgt    5    30.792 ±   1.036   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                        200.200.-200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                             200.200.-200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                              1.0.0  avgt    5    21.145 ±   0.122   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                               1.0.0  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                          1.0.0  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                    1.0.0  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                        200.200.200  avgt    5    36.486 ±   0.208   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                         200.200.200  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                    200.200.200  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                              200.200.200  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                    10000.9876.5432  avgt    5    42.181 ±   0.229   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                     10000.9876.5432  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                10000.9876.5432  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                          10000.9876.5432  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.optimized6                                  10000.10000.10000  avgt    5    52.448 ±   2.629   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                   10000.10000.10000  avgt    5     0.005 ±   0.035  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm              10000.10000.10000  avgt    5    ≈ 10⁻⁴              B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                        10000.10000.10000  avgt    5       ≈ 0            counts
VersionParseNoAllocBenchmark.regex                                                          avgt    5    72.897 ±   1.569   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                           avgt    5  3765.763 ±  83.967  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                                      avgt    5   144.001 ±   0.001    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                                avgt    5    75.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                                 avgt    5   136.000                ms
VersionParseNoAllocBenchmark.regex                                                     200  avgt    5   142.999 ±  10.317   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                      200  avgt    5  2879.869 ± 206.226  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                                 200  avgt    5   216.000 ±   0.003    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                           200  avgt    5    65.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                            200  avgt    5   128.000                ms
VersionParseNoAllocBenchmark.regex                                                    200.  avgt    5   187.507 ±   3.887   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                     200.  avgt    5  2195.822 ±  46.674  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                                200.  avgt    5   216.000 ±   0.003    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                          200.  avgt    5    66.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                           200.  avgt    5    27.000                ms
VersionParseNoAllocBenchmark.regex                                                 200.200  avgt    5   238.644 ±   1.682   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                  200.200  avgt    5  1725.435 ±  12.713  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                             200.200  avgt    5   216.001 ±   0.004    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                       200.200  avgt    5    52.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                        200.200  avgt    5    22.000                ms
VersionParseNoAllocBenchmark.regex                                                200.200.  avgt    5   264.369 ±  14.905   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                 200.200.  avgt    5  1557.861 ±  85.759  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                            200.200.  avgt    5   216.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                      200.200.  avgt    5    47.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                       200.200.  avgt    5    19.000                ms
VersionParseNoAllocBenchmark.regex                                               a.200.200  avgt    5    71.081 ±   1.023   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                a.200.200  avgt    5  3861.950 ±  54.081  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                           a.200.200  avgt    5   144.000 ±   0.001    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                     a.200.200  avgt    5    84.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                      a.200.200  avgt    5   124.000                ms
VersionParseNoAllocBenchmark.regex                                               200.a.200  avgt    5   185.612 ±   1.399   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                200.a.200  avgt    5  2218.387 ±  16.354  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                           200.a.200  avgt    5   216.000 ±   0.002    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                     200.a.200  avgt    5    60.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                      200.a.200  avgt    5    32.000                ms
VersionParseNoAllocBenchmark.regex                                               200.200.a  avgt    5   268.436 ±  11.345   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                200.200.a  avgt    5  1534.041 ±  63.399  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                           200.200.a  avgt    5   216.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                     200.200.a  avgt    5    46.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                      200.200.a  avgt    5    18.000                ms
VersionParseNoAllocBenchmark.regex                                         200.200.200.200  avgt    5   324.579 ±   2.207   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                          200.200.200.200  avgt    5  1268.527 ±   7.880  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                     200.200.200.200  avgt    5   216.001 ±   0.006    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                               200.200.200.200  avgt    5    43.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                200.200.200.200  avgt    5    18.000                ms
VersionParseNoAllocBenchmark.regex                                           200.200.99999  avgt    5   371.622 ±  15.642   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                            200.200.99999  avgt    5  1846.716 ±  75.850  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                       200.200.99999  avgt    5   360.001 ±   0.007    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                 200.200.99999  avgt    5    52.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                  200.200.99999  avgt    5    27.000                ms
VersionParseNoAllocBenchmark.regex                                            200.200.-200  avgt    5   268.303 ±   9.209   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                             200.200.-200  avgt    5  1534.780 ±  51.469  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                        200.200.-200  avgt    5   216.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                  200.200.-200  avgt    5    47.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                   200.200.-200  avgt    5    23.000                ms
VersionParseNoAllocBenchmark.regex                                                   1.0.0  avgt    5   268.891 ±  14.178   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                    1.0.0  avgt    5  2552.749 ± 131.436  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                               1.0.0  avgt    5   360.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                         1.0.0  avgt    5    67.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                          1.0.0  avgt    5    31.000                ms
VersionParseNoAllocBenchmark.regex                                             200.200.200  avgt    5   360.507 ±   1.465   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                              200.200.200  avgt    5  1903.751 ±   8.714  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                         200.200.200  avgt    5   360.001 ±   0.007    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                   200.200.200  avgt    5    54.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                    200.200.200  avgt    5    24.000                ms
VersionParseNoAllocBenchmark.regex                                         10000.9876.5432  avgt    5   410.216 ±   1.565   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                          10000.9876.5432  avgt    5  1672.939 ±   6.063  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                     10000.9876.5432  avgt    5   360.001 ±   0.008    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                               10000.9876.5432  avgt    5    51.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                                10000.9876.5432  avgt    5    23.000                ms
VersionParseNoAllocBenchmark.regex                                       10000.10000.10000  avgt    5   428.475 ±   1.512   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                        10000.10000.10000  avgt    5  1601.748 ±   5.994  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                   10000.10000.10000  avgt    5   360.001 ±   0.008    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                             10000.10000.10000  avgt    5    48.000            counts
VersionParseNoAllocBenchmark.regex:·gc.time                              10000.10000.10000  avgt    5    22.000                ms
VersionParseNoAllocBenchmark.yolo                                                           avgt    5  2170.939 ± 184.563   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                            avgt    5   751.911 ±  66.265  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                                       avgt    5   856.006 ±   0.040    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                                 avgt    5    26.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                                  avgt    5    12.000                ms
VersionParseNoAllocBenchmark.yolo                                                      200  avgt    5  1711.341 ± 189.197   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                       200  avgt    5   909.531 ± 104.189  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                                  200  avgt    5   816.005 ±   0.032    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                            200  avgt    5    31.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                             200  avgt    5    13.000                ms
VersionParseNoAllocBenchmark.yolo                                                     200.  avgt    5  1942.499 ± 186.618   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                      200.  avgt    5   997.589 ±  99.551  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                                 200.  avgt    5  1016.005 ±   0.036    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                           200.  avgt    5    35.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                            200.  avgt    5    12.000                ms
VersionParseNoAllocBenchmark.yolo                                                  200.200  avgt    5  1996.209 ± 201.307   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                   200.200  avgt    5   993.772 ± 104.044  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                              200.200  avgt    5  1040.005 ±   0.037    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                        200.200  avgt    5    34.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                         200.200  avgt    5    14.000                ms
VersionParseNoAllocBenchmark.yolo                                                 200.200.  avgt    5  2017.256 ± 220.746   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                  200.200.  avgt    5  1021.320 ± 116.617  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                             200.200.  avgt    5  1080.005 ±   0.036    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                       200.200.  avgt    5    35.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                        200.200.  avgt    5    14.000                ms
VersionParseNoAllocBenchmark.yolo                                                a.200.200  avgt    5  2657.436 ± 185.854   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                 a.200.200  avgt    5   809.367 ±  58.210  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                            a.200.200  avgt    5  1128.007 ±   0.049    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                      a.200.200  avgt    5    28.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                       a.200.200  avgt    5    14.000                ms
VersionParseNoAllocBenchmark.yolo                                                200.a.200  avgt    5  2689.445 ± 232.559   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                 200.a.200  avgt    5   822.585 ±  73.409  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                            200.a.200  avgt    5  1160.007 ±   0.049    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                      200.a.200  avgt    5    28.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                       200.a.200  avgt    5    13.000                ms
VersionParseNoAllocBenchmark.yolo                                                200.200.a  avgt    5  2718.148 ± 253.824   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                 200.200.a  avgt    5   808.335 ±  78.349  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                            200.200.a  avgt    5  1152.007 ±   0.051    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                      200.200.a  avgt    5    28.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                       200.200.a  avgt    5    11.000                ms
VersionParseNoAllocBenchmark.yolo                                          200.200.200.200  avgt    5  2123.504 ± 199.995   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                           200.200.200.200  avgt    5  1063.458 ± 104.048  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                      200.200.200.200  avgt    5  1184.005 ±   0.040    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                200.200.200.200  avgt    5    36.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                 200.200.200.200  avgt    5    18.000                ms
VersionParseNoAllocBenchmark.yolo                                            200.200.99999  avgt    5  2121.074 ±  15.349   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                             200.200.99999  avgt    5  1107.274 ±   8.914  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                        200.200.99999  avgt    5  1232.006 ±   0.039    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                  200.200.99999  avgt    5    38.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                   200.200.99999  avgt    5    21.000                ms
VersionParseNoAllocBenchmark.yolo                                             200.200.-200  avgt    5  2080.719 ± 170.266   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                              200.200.-200  avgt    5  1151.051 ±  97.212  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                         200.200.-200  avgt    5  1256.006 ±   0.039    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                   200.200.-200  avgt    5    39.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                    200.200.-200  avgt    5    21.000                ms
VersionParseNoAllocBenchmark.yolo                                                    1.0.0  avgt    5   237.083 ±   0.393   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                     1.0.0  avgt    5  2637.468 ±   5.912  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                                1.0.0  avgt    5   328.001 ±   0.004    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                          1.0.0  avgt    5    77.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                           1.0.0  avgt    5    35.000                ms
VersionParseNoAllocBenchmark.yolo                                              200.200.200  avgt    5   265.407 ±  17.674   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                               200.200.200  avgt    5  3735.427 ± 249.969  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                          200.200.200  avgt    5   520.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                    200.200.200  avgt    5    84.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                     200.200.200  avgt    5   157.000                ms
VersionParseNoAllocBenchmark.yolo                                          10000.9876.5432  avgt    5   276.749 ±  23.366   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                           10000.9876.5432  avgt    5  3693.740 ± 302.363  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                      10000.9876.5432  avgt    5   536.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                10000.9876.5432  avgt    5    99.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                 10000.9876.5432  avgt    5    44.000                ms
VersionParseNoAllocBenchmark.yolo                                        10000.10000.10000  avgt    5   293.967 ±   5.462   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                         10000.10000.10000  avgt    5  3372.199 ±  61.099  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                    10000.10000.10000  avgt    5   520.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                              10000.10000.10000  avgt    5    76.000            counts
VersionParseNoAllocBenchmark.yolo:·gc.time                               10000.10000.10000  avgt    5   117.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                                    avgt    5  2169.688 ± 233.020   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                                     avgt    5   752.627 ±  81.425  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                                avgt    5   856.006 ±   0.040    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                          avgt    5    26.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                           avgt    5    11.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                               200  avgt    5  1715.474 ± 239.554   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                                200  avgt    5   907.680 ± 130.312  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                           200  avgt    5   816.005 ±   0.032    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                     200  avgt    5    31.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                      200  avgt    5    13.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                              200.  avgt    5  2373.805 ± 276.623   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                               200.  avgt    5   829.312 ±  96.865  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                          200.  avgt    5  1032.006 ±   0.047    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                    200.  avgt    5    28.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                     200.  avgt    5    14.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                           200.200  avgt    5  1967.136 ± 186.646   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                            200.200  avgt    5   985.146 ±  97.080  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                       200.200  avgt    5  1016.005 ±   0.036    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                 200.200  avgt    5    33.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                  200.200  avgt    5    17.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                          200.200.  avgt    5  2189.544 ± 174.442   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                           200.200.  avgt    5   954.578 ±  78.452  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                      200.200.  avgt    5  1096.006 ±   0.040    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                200.200.  avgt    5    32.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                 200.200.  avgt    5    15.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                         a.200.200  avgt    5  2451.013 ± 170.475   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                          a.200.200  avgt    5   858.828 ±  61.752  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                     a.200.200  avgt    5  1104.006 ±   0.046    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                               a.200.200  avgt    5    29.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                a.200.200  avgt    5    15.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                         200.a.200  avgt    5  2507.672 ± 212.300   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                          200.a.200  avgt    5   870.044 ±  76.221  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                     200.a.200  avgt    5  1144.006 ±   0.047    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                               200.a.200  avgt    5    29.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                200.a.200  avgt    5    12.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                         200.200.a  avgt    5  2691.211 ± 205.135   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                          200.200.a  avgt    5   833.382 ±  65.461  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                     200.200.a  avgt    5  1176.006 ±   0.048    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                               200.200.a  avgt    5    29.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                200.200.a  avgt    5    14.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                   200.200.200.200  avgt    5  2283.276 ± 236.727   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                    200.200.200.200  avgt    5  1002.554 ± 105.641  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm               200.200.200.200  avgt    5  1200.004 ±   0.022    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                         200.200.200.200  avgt    5    34.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                          200.200.200.200  avgt    5    18.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                     200.200.99999  avgt    5   282.202 ±  16.302   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                      200.200.99999  avgt    5  3621.408 ± 206.447  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                 200.200.99999  avgt    5   536.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                           200.200.99999  avgt    5    79.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                            200.200.99999  avgt    5   172.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                      200.200.-200  avgt    5   295.494 ±  31.507   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                       200.200.-200  avgt    5  3459.523 ± 355.176  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                  200.200.-200  avgt    5   536.001 ±   0.006    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                            200.200.-200  avgt    5    79.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                             200.200.-200  avgt    5   135.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                             1.0.0  avgt    5   229.013 ±   0.736   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                              1.0.0  avgt    5  2730.212 ±  10.650  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                         1.0.0  avgt    5   328.001 ±   0.004    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                   1.0.0  avgt    5    82.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                    1.0.0  avgt    5    28.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                       200.200.200  avgt    5   268.011 ±   0.745   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                        200.200.200  avgt    5  3812.517 ±   9.701  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                   200.200.200  avgt    5   536.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                             200.200.200  avgt    5   103.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                              200.200.200  avgt    5    45.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                   10000.9876.5432  avgt    5   267.605 ±   4.274   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                    10000.9876.5432  avgt    5  3704.388 ±  58.108  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm               10000.9876.5432  avgt    5   520.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                         10000.9876.5432  avgt    5    74.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                          10000.9876.5432  avgt    5   109.000                ms
VersionParseNoAllocBenchmark.yoloNoThrow                                 10000.10000.10000  avgt    5   288.802 ±   7.510   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                  10000.10000.10000  avgt    5  3432.581 ±  88.887  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm             10000.10000.10000  avgt    5   520.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                       10000.10000.10000  avgt    5    77.000            counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                        10000.10000.10000  avgt    5   115.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                               avgt    5  2073.244 ± 229.869   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                                avgt    5   787.565 ±  89.431  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                           avgt    5   856.005 ±   0.038    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                                     avgt    5    27.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                                      avgt    5    14.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                          200  avgt    5  1597.639 ± 191.250   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                           200  avgt    5   974.436 ± 122.052  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                      200  avgt    5   816.004 ±   0.031    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                                200  avgt    5    33.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                                 200  avgt    5    18.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                         200.  avgt    5  1820.069 ± 210.939   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                          200.  avgt    5  1006.247 ± 121.850  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                     200.  avgt    5   960.005 ±   0.034    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                               200.  avgt    5    34.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                                200.  avgt    5    15.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                      200.200  avgt    5  1861.062 ± 208.922   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                       200.200  avgt    5  1008.728 ± 116.317  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                  200.200  avgt    5   984.005 ±   0.034    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                            200.200  avgt    5    34.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                             200.200  avgt    5    14.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                     200.200.  avgt    5  1899.878 ± 219.012   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                      200.200.  avgt    5  1028.352 ± 123.792  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                 200.200.  avgt    5  1024.005 ±   0.035    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                           200.200.  avgt    5    35.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                            200.200.  avgt    5    15.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                    a.200.200  avgt    5  2312.244 ± 183.187   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                     a.200.200  avgt    5   884.076 ±  72.320  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                a.200.200  avgt    5  1072.006 ±   0.043    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                          a.200.200  avgt    5    30.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                           a.200.200  avgt    5    15.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                    200.a.200  avgt    5  2343.429 ± 180.077   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                     200.a.200  avgt    5   885.392 ±  70.225  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                200.a.200  avgt    5  1088.006 ±   0.043    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                          200.a.200  avgt    5    30.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                           200.a.200  avgt    5    13.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                    200.200.a  avgt    5  2432.896 ± 451.455   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                     200.200.a  avgt    5   866.486 ± 154.640  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                200.200.a  avgt    5  1104.007 ±   0.049    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                          200.200.a  avgt    5    29.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                           200.200.a  avgt    5    12.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                              200.200.200.200  avgt    5  1986.541 ± 249.924   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate               200.200.200.200  avgt    5  1083.380 ± 141.321  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm          200.200.200.200  avgt    5  1128.005 ±   0.038    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                    200.200.200.200  avgt    5    37.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                     200.200.200.200  avgt    5    17.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                200.200.99999  avgt    5   253.564 ±   1.136   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                 200.200.99999  avgt    5  3608.828 ±  18.108  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm            200.200.99999  avgt    5   480.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                      200.200.99999  avgt    5    77.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                       200.200.99999  avgt    5   116.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                 200.200.-200  avgt    5   265.220 ±   5.393   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                  200.200.-200  avgt    5  3449.917 ±  73.117  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm             200.200.-200  avgt    5   480.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                       200.200.-200  avgt    5    77.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                        200.200.-200  avgt    5   116.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                        1.0.0  avgt    5   196.080 ±   1.073   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                         1.0.0  avgt    5  2799.902 ±  15.835  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                    1.0.0  avgt    5   288.001 ±   0.004    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                              1.0.0  avgt    5    72.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                               1.0.0  avgt    5    28.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                  200.200.200  avgt    5   253.505 ±  10.400   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                   200.200.200  avgt    5  3609.985 ± 149.723  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm              200.200.200  avgt    5   480.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                        200.200.200  avgt    5    79.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                         200.200.200  avgt    5   146.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                              10000.9876.5432  avgt    5   253.194 ±   2.491   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate               10000.9876.5432  avgt    5  3614.016 ±  33.826  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm          10000.9876.5432  avgt    5   480.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                    10000.9876.5432  avgt    5    97.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                     10000.9876.5432  avgt    5    41.000                ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                            10000.10000.10000  avgt    5   278.860 ±  27.424   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate             10000.10000.10000  avgt    5  3282.541 ± 320.673  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm        10000.10000.10000  avgt    5   480.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                  10000.10000.10000  avgt    5    73.000            counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                   10000.10000.10000  avgt    5   143.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                                      avgt    5  2053.355 ± 174.465   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                                       avgt    5   795.040 ±  70.039  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                                  avgt    5   856.005 ±   0.039    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                            avgt    5    27.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                             avgt    5    11.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                                 200  avgt    5  1608.322 ± 256.222   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                                  200  avgt    5   968.503 ± 158.146  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                             200  avgt    5   816.004 ±   0.032    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                       200  avgt    5    33.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                        200  avgt    5    19.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                                200.  avgt    5  1811.796 ± 126.727   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                                 200.  avgt    5  1010.350 ±  72.816  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                            200.  avgt    5   960.005 ±   0.034    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                      200.  avgt    5    34.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                       200.  avgt    5    15.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                             200.200  avgt    5  1855.354 ± 238.022   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                              200.200  avgt    5  1012.058 ± 136.226  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                         200.200  avgt    5   984.005 ±   0.034    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                   200.200  avgt    5    34.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                    200.200  avgt    5    12.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                            200.200.  avgt    5  1863.248 ± 190.242   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                             200.200.  avgt    5  1048.369 ± 111.352  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                        200.200.  avgt    5  1024.005 ±   0.035    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                  200.200.  avgt    5    36.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                   200.200.  avgt    5    13.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                           a.200.200  avgt    5  2340.206 ± 169.969   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                            a.200.200  avgt    5   873.530 ±  65.390  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                       a.200.200  avgt    5  1072.004 ±   0.022    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                 a.200.200  avgt    5    30.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                  a.200.200  avgt    5    16.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                           200.a.200  avgt    5  2371.508 ± 163.616   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                            200.a.200  avgt    5   874.799 ±  61.950  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                       200.a.200  avgt    5  1088.006 ±   0.044    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                 200.a.200  avgt    5    30.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                  200.a.200  avgt    5    13.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                           200.200.a  avgt    5  2378.962 ± 166.574   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                            200.200.a  avgt    5   904.298 ±  65.174  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                       200.200.a  avgt    5  1128.006 ±   0.044    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                 200.200.a  avgt    5    31.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                  200.200.a  avgt    5    13.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                     200.200.200.200  avgt    5  1955.732 ± 227.339   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                      200.200.200.200  avgt    5  1123.764 ± 133.038  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                 200.200.200.200  avgt    5  1152.005 ±   0.035    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                           200.200.200.200  avgt    5    34.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                            200.200.200.200  avgt    5    15.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                       200.200.99999  avgt    5  1977.844 ± 192.802   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                        200.200.99999  avgt    5  1157.212 ± 117.161  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                   200.200.99999  avgt    5  1200.005 ±   0.037    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                             200.200.99999  avgt    5    40.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                              200.200.99999  avgt    5    19.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                        200.200.-200  avgt    5  1982.685 ± 188.185   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                         200.200.-200  avgt    5  1154.398 ± 113.638  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                    200.200.-200  avgt    5  1200.005 ±   0.036    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                              200.200.-200  avgt    5    40.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                               200.200.-200  avgt    5    18.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                               1.0.0  avgt    5   202.124 ±   1.132   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                                1.0.0  avgt    5  2716.469 ±  14.881  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                           1.0.0  avgt    5   288.000 ±   0.002    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                     1.0.0  avgt    5    72.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                      1.0.0  avgt    5    35.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                         200.200.200  avgt    5   232.403 ±  18.201   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                          200.200.200  avgt    5  3938.257 ± 307.975  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                     200.200.200  avgt    5   480.001 ±   0.004    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                               200.200.200  avgt    5    77.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                200.200.200  avgt    5   134.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                     10000.9876.5432  avgt    5   267.364 ±   4.655   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                      10000.9876.5432  avgt    5  3422.396 ±  59.333  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                 10000.9876.5432  avgt    5   480.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                           10000.9876.5432  avgt    5    84.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                            10000.9876.5432  avgt    5   136.000                ms
VersionParseNoAllocBenchmark.yoloNoTry                                   10000.10000.10000  avgt    5   276.136 ±  66.917   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                    10000.10000.10000  avgt    5  3323.537 ± 743.794  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm               10000.10000.10000  avgt    5   480.001 ±   0.005    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                         10000.10000.10000  avgt    5    78.000            counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                          10000.10000.10000  avgt    5   140.000                ms

Benchmark result is saved to /static/data/charts/version-parsing/jdk11.json
