# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = fixed, length = 1)

# Run progress: 0.00% complete, ETA 00:32:40
# Fork: 1 of 1
# Warmup Iteration   1: 63.884 ns/op
# Warmup Iteration   2: 63.115 ns/op
# Warmup Iteration   3: 56.228 ns/op
# Warmup Iteration   4: 55.438 ns/op
# Warmup Iteration   5: 55.258 ns/op
Iteration   1: 54.876 ns/op
Iteration   2: 55.763 ns/op
Iteration   3: 55.574 ns/op
Iteration   4: 56.837 ns/op
Iteration   5: 55.759 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  55.762 ±(99.9%) 2.706 ns/op [Average]
  (min, avg, max) = (54.876, 55.762, 56.837), stdev = 0.703
  CI (99.9%): [53.056, 58.468] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = fixed, length = 10)

# Run progress: 0.51% complete, ETA 00:35:02
# Fork: 1 of 1
# Warmup Iteration   1: 95.136 ns/op
# Warmup Iteration   2: 87.064 ns/op
# Warmup Iteration   3: 81.531 ns/op
# Warmup Iteration   4: 79.043 ns/op
# Warmup Iteration   5: 78.711 ns/op
Iteration   1: 79.095 ns/op
Iteration   2: 79.711 ns/op
Iteration   3: 78.924 ns/op
Iteration   4: 78.115 ns/op
Iteration   5: 78.587 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  78.887 ±(99.9%) 2.286 ns/op [Average]
  (min, avg, max) = (78.115, 78.887, 79.711), stdev = 0.594
  CI (99.9%): [76.600, 81.173] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = fixed, length = 50)

# Run progress: 1.02% complete, ETA 00:34:37
# Fork: 1 of 1
# Warmup Iteration   1: 224.139 ns/op
# Warmup Iteration   2: 215.451 ns/op
# Warmup Iteration   3: 220.887 ns/op
# Warmup Iteration   4: 203.926 ns/op
# Warmup Iteration   5: 204.085 ns/op
Iteration   1: 206.034 ns/op
Iteration   2: 204.468 ns/op
Iteration   3: 208.075 ns/op
Iteration   4: 207.247 ns/op
Iteration   5: 206.075 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  206.380 ±(99.9%) 5.271 ns/op [Average]
  (min, avg, max) = (204.468, 206.380, 208.075), stdev = 1.369
  CI (99.9%): [201.109, 211.650] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = fixed, length = 100)

# Run progress: 1.53% complete, ETA 00:34:19
# Fork: 1 of 1
# Warmup Iteration   1: 375.206 ns/op
# Warmup Iteration   2: 382.413 ns/op
# Warmup Iteration   3: 380.392 ns/op
# Warmup Iteration   4: 363.905 ns/op
# Warmup Iteration   5: 366.890 ns/op
Iteration   1: 360.334 ns/op
Iteration   2: 363.561 ns/op
Iteration   3: 362.450 ns/op
Iteration   4: 365.834 ns/op
Iteration   5: 364.420 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  363.320 ±(99.9%) 7.999 ns/op [Average]
  (min, avg, max) = (360.334, 363.320, 365.834), stdev = 2.077
  CI (99.9%): [355.321, 371.319] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = fixed, length = 500)

# Run progress: 2.04% complete, ETA 00:34:05
# Fork: 1 of 1
# Warmup Iteration   1: 1884.059 ns/op
# Warmup Iteration   2: 1809.009 ns/op
# Warmup Iteration   3: 1639.500 ns/op
# Warmup Iteration   4: 1673.742 ns/op
# Warmup Iteration   5: 1711.094 ns/op
Iteration   1: 1648.690 ns/op
Iteration   2: 1633.556 ns/op
Iteration   3: 1624.951 ns/op
Iteration   4: 1637.406 ns/op
Iteration   5: 1676.778 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  1644.276 ±(99.9%) 77.287 ns/op [Average]
  (min, avg, max) = (1624.951, 1644.276, 1676.778), stdev = 20.071
  CI (99.9%): [1566.989, 1721.563] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 2.55% complete, ETA 00:33:52
# Fork: 1 of 1
# Warmup Iteration   1: 3597.600 ns/op
# Warmup Iteration   2: 3482.201 ns/op
# Warmup Iteration   3: 3211.471 ns/op
# Warmup Iteration   4: 3234.653 ns/op
# Warmup Iteration   5: 3189.226 ns/op
Iteration   1: 3254.434 ns/op
Iteration   2: 3204.134 ns/op
Iteration   3: 3208.707 ns/op
Iteration   4: 3220.357 ns/op
Iteration   5: 3206.012 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  3218.729 ±(99.9%) 80.604 ns/op [Average]
  (min, avg, max) = (3204.134, 3218.729, 3254.434), stdev = 20.933
  CI (99.9%): [3138.125, 3299.333] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 3.06% complete, ETA 00:33:39
# Fork: 1 of 1
# Warmup Iteration   1: 33992.465 ns/op
# Warmup Iteration   2: 32026.346 ns/op
# Warmup Iteration   3: 30984.195 ns/op
# Warmup Iteration   4: 31143.006 ns/op
# Warmup Iteration   5: 30475.893 ns/op
Iteration   1: 30953.426 ns/op
Iteration   2: 30707.252 ns/op
Iteration   3: 31654.899 ns/op
Iteration   4: 30553.946 ns/op
Iteration   5: 30732.360 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  30920.377 ±(99.9%) 1673.656 ns/op [Average]
  (min, avg, max) = (30553.946, 30920.377, 31654.899), stdev = 434.643
  CI (99.9%): [29246.721, 32594.033] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = random, length = 1)

# Run progress: 3.57% complete, ETA 00:33:27
# Fork: 1 of 1
# Warmup Iteration   1: 64.101 ns/op
# Warmup Iteration   2: 66.852 ns/op
# Warmup Iteration   3: 56.357 ns/op
# Warmup Iteration   4: 54.780 ns/op
# Warmup Iteration   5: 55.116 ns/op
Iteration   1: 54.431 ns/op
Iteration   2: 54.901 ns/op
Iteration   3: 54.864 ns/op
Iteration   4: 55.487 ns/op
Iteration   5: 55.105 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  54.958 ±(99.9%) 1.480 ns/op [Average]
  (min, avg, max) = (54.431, 54.958, 55.487), stdev = 0.384
  CI (99.9%): [53.477, 56.438] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = random, length = 10)

# Run progress: 4.08% complete, ETA 00:33:14
# Fork: 1 of 1
# Warmup Iteration   1: 89.586 ns/op
# Warmup Iteration   2: 88.140 ns/op
# Warmup Iteration   3: 83.018 ns/op
# Warmup Iteration   4: 80.025 ns/op
# Warmup Iteration   5: 79.315 ns/op
Iteration   1: 79.136 ns/op
Iteration   2: 79.601 ns/op
Iteration   3: 79.075 ns/op
Iteration   4: 81.171 ns/op
Iteration   5: 79.336 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  79.664 ±(99.9%) 3.340 ns/op [Average]
  (min, avg, max) = (79.075, 79.664, 81.171), stdev = 0.868
  CI (99.9%): [76.323, 83.004] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = random, length = 50)

# Run progress: 4.59% complete, ETA 00:33:01
# Fork: 1 of 1
# Warmup Iteration   1: 257.230 ns/op
# Warmup Iteration   2: 217.346 ns/op
# Warmup Iteration   3: 205.371 ns/op
# Warmup Iteration   4: 206.047 ns/op
# Warmup Iteration   5: 211.982 ns/op
Iteration   1: 206.883 ns/op
Iteration   2: 206.911 ns/op
Iteration   3: 206.929 ns/op
Iteration   4: 212.648 ns/op
Iteration   5: 210.518 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  208.778 ±(99.9%) 10.278 ns/op [Average]
  (min, avg, max) = (206.883, 208.778, 212.648), stdev = 2.669
  CI (99.9%): [198.499, 219.056] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = random, length = 100)

# Run progress: 5.10% complete, ETA 00:32:49
# Fork: 1 of 1
# Warmup Iteration   1: 375.890 ns/op
# Warmup Iteration   2: 382.932 ns/op
# Warmup Iteration   3: 371.260 ns/op
# Warmup Iteration   4: 354.416 ns/op
# Warmup Iteration   5: 351.778 ns/op
Iteration   1: 354.143 ns/op
Iteration   2: 355.530 ns/op
Iteration   3: 356.194 ns/op
Iteration   4: 365.882 ns/op
Iteration   5: 357.574 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  357.864 ±(99.9%) 17.902 ns/op [Average]
  (min, avg, max) = (354.143, 357.864, 365.882), stdev = 4.649
  CI (99.9%): [339.963, 375.766] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = random, length = 500)

# Run progress: 5.61% complete, ETA 00:32:36
# Fork: 1 of 1
# Warmup Iteration   1: 1772.380 ns/op
# Warmup Iteration   2: 1716.308 ns/op
# Warmup Iteration   3: 1603.391 ns/op
# Warmup Iteration   4: 1616.608 ns/op
# Warmup Iteration   5: 1625.060 ns/op
Iteration   1: 1634.866 ns/op
Iteration   2: 1640.748 ns/op
Iteration   3: 1631.594 ns/op
Iteration   4: 1643.408 ns/op
Iteration   5: 1658.262 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  1641.776 ±(99.9%) 39.782 ns/op [Average]
  (min, avg, max) = (1631.594, 1641.776, 1658.262), stdev = 10.331
  CI (99.9%): [1601.993, 1681.558] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = random, length = 1000)

# Run progress: 6.12% complete, ETA 00:32:24
# Fork: 1 of 1
# Warmup Iteration   1: 3493.822 ns/op
# Warmup Iteration   2: 3355.444 ns/op
# Warmup Iteration   3: 3395.855 ns/op
# Warmup Iteration   4: 3116.481 ns/op
# Warmup Iteration   5: 3159.117 ns/op
Iteration   1: 3168.318 ns/op
Iteration   2: 3203.386 ns/op
Iteration   3: 3235.446 ns/op
Iteration   4: 3208.204 ns/op
Iteration   5: 3241.699 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  3211.411 ±(99.9%) 112.705 ns/op [Average]
  (min, avg, max) = (3168.318, 3211.411, 3241.699), stdev = 29.269
  CI (99.9%): [3098.706, 3324.116] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode
# Parameters: (dataset = random, length = 10000)

# Run progress: 6.63% complete, ETA 00:32:13
# Fork: 1 of 1
# Warmup Iteration   1: 34242.111 ns/op
# Warmup Iteration   2: 31524.598 ns/op
# Warmup Iteration   3: 33436.291 ns/op
# Warmup Iteration   4: 29821.979 ns/op
# Warmup Iteration   5: 29697.794 ns/op
Iteration   1: 30216.419 ns/op
Iteration   2: 29785.461 ns/op
Iteration   3: 30430.660 ns/op
Iteration   4: 30042.399 ns/op
Iteration   5: 29913.776 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_decode":
  30077.743 ±(99.9%) 976.700 ns/op [Average]
  (min, avg, max) = (29785.461, 30077.743, 30430.660), stdev = 253.646
  CI (99.9%): [29101.043, 31054.443] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = fixed, length = 1)

# Run progress: 7.14% complete, ETA 00:32:02
# Fork: 1 of 1
# Warmup Iteration   1: 60.008 ns/op
# Warmup Iteration   2: 58.971 ns/op
# Warmup Iteration   3: 51.829 ns/op
# Warmup Iteration   4: 51.886 ns/op
# Warmup Iteration   5: 52.076 ns/op
Iteration   1: 51.641 ns/op
Iteration   2: 52.630 ns/op
Iteration   3: 51.906 ns/op
Iteration   4: 52.042 ns/op
Iteration   5: 51.764 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  51.996 ±(99.9%) 1.481 ns/op [Average]
  (min, avg, max) = (51.641, 51.996, 52.630), stdev = 0.385
  CI (99.9%): [50.515, 53.478] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = fixed, length = 10)

# Run progress: 7.65% complete, ETA 00:31:52
# Fork: 1 of 1
# Warmup Iteration   1: 89.639 ns/op
# Warmup Iteration   2: 90.747 ns/op
# Warmup Iteration   3: 84.286 ns/op
# Warmup Iteration   4: 81.473 ns/op
# Warmup Iteration   5: 80.074 ns/op
Iteration   1: 81.357 ns/op
Iteration   2: 79.557 ns/op
Iteration   3: 80.844 ns/op
Iteration   4: 80.649 ns/op
Iteration   5: 80.633 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  80.608 ±(99.9%) 2.528 ns/op [Average]
  (min, avg, max) = (79.557, 80.608, 81.357), stdev = 0.656
  CI (99.9%): [78.080, 83.136] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = fixed, length = 50)

# Run progress: 8.16% complete, ETA 00:31:41
# Fork: 1 of 1
# Warmup Iteration   1: 192.982 ns/op
# Warmup Iteration   2: 178.742 ns/op
# Warmup Iteration   3: 163.050 ns/op
# Warmup Iteration   4: 164.900 ns/op
# Warmup Iteration   5: 163.173 ns/op
Iteration   1: 164.365 ns/op
Iteration   2: 165.074 ns/op
Iteration   3: 172.386 ns/op
Iteration   4: 171.319 ns/op
Iteration   5: 168.262 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  168.281 ±(99.9%) 13.844 ns/op [Average]
  (min, avg, max) = (164.365, 168.281, 172.386), stdev = 3.595
  CI (99.9%): [154.437, 182.125] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = fixed, length = 100)

# Run progress: 8.67% complete, ETA 00:31:31
# Fork: 1 of 1
# Warmup Iteration   1: 268.106 ns/op
# Warmup Iteration   2: 261.357 ns/op
# Warmup Iteration   3: 256.416 ns/op
# Warmup Iteration   4: 235.325 ns/op
# Warmup Iteration   5: 235.167 ns/op
Iteration   1: 234.761 ns/op
Iteration   2: 236.775 ns/op
Iteration   3: 240.390 ns/op
Iteration   4: 259.080 ns/op
Iteration   5: 243.190 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  242.839 ±(99.9%) 37.131 ns/op [Average]
  (min, avg, max) = (234.761, 242.839, 259.080), stdev = 9.643
  CI (99.9%): [205.708, 279.970] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = fixed, length = 500)

# Run progress: 9.18% complete, ETA 00:31:22
# Fork: 1 of 1
# Warmup Iteration   1: 1078.562 ns/op
# Warmup Iteration   2: 1031.510 ns/op
# Warmup Iteration   3: 951.515 ns/op
# Warmup Iteration   4: 903.273 ns/op
# Warmup Iteration   5: 905.867 ns/op
Iteration   1: 993.461 ns/op
Iteration   2: 919.027 ns/op
Iteration   3: 1011.155 ns/op
Iteration   4: 925.385 ns/op
Iteration   5: 933.695 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  956.545 ±(99.9%) 163.888 ns/op [Average]
  (min, avg, max) = (919.027, 956.545, 1011.155), stdev = 42.561
  CI (99.9%): [792.656, 1120.433] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 9.69% complete, ETA 00:31:11
# Fork: 1 of 1
# Warmup Iteration   1: 2077.793 ns/op
# Warmup Iteration   2: 2232.850 ns/op
# Warmup Iteration   3: 1906.957 ns/op
# Warmup Iteration   4: 1854.133 ns/op
# Warmup Iteration   5: 1854.490 ns/op
Iteration   1: 1839.549 ns/op
Iteration   2: 1829.636 ns/op
Iteration   3: 1794.890 ns/op
Iteration   4: 1838.598 ns/op
Iteration   5: 1851.616 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  1830.858 ±(99.9%) 83.068 ns/op [Average]
  (min, avg, max) = (1794.890, 1830.858, 1851.616), stdev = 21.572
  CI (99.9%): [1747.790, 1913.926] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 10.20% complete, ETA 00:31:01
# Fork: 1 of 1
# Warmup Iteration   1: 20754.452 ns/op
# Warmup Iteration   2: 19414.880 ns/op
# Warmup Iteration   3: 18978.243 ns/op
# Warmup Iteration   4: 17560.053 ns/op
# Warmup Iteration   5: 17779.499 ns/op
Iteration   1: 17820.379 ns/op
Iteration   2: 18450.603 ns/op
Iteration   3: 17586.526 ns/op
Iteration   4: 18369.311 ns/op
Iteration   5: 17842.889 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  18013.941 ±(99.9%) 1448.951 ns/op [Average]
  (min, avg, max) = (17586.526, 18013.941, 18450.603), stdev = 376.288
  CI (99.9%): [16564.990, 19462.892] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = random, length = 1)

# Run progress: 10.71% complete, ETA 00:30:51
# Fork: 1 of 1
# Warmup Iteration   1: 60.383 ns/op
# Warmup Iteration   2: 59.597 ns/op
# Warmup Iteration   3: 52.926 ns/op
# Warmup Iteration   4: 51.978 ns/op
# Warmup Iteration   5: 51.578 ns/op
Iteration   1: 51.951 ns/op
Iteration   2: 53.017 ns/op
Iteration   3: 52.598 ns/op
Iteration   4: 52.113 ns/op
Iteration   5: 52.218 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  52.380 ±(99.9%) 1.649 ns/op [Average]
  (min, avg, max) = (51.951, 52.380, 53.017), stdev = 0.428
  CI (99.9%): [50.730, 54.029] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = random, length = 10)

# Run progress: 11.22% complete, ETA 00:30:40
# Fork: 1 of 1
# Warmup Iteration   1: 92.973 ns/op
# Warmup Iteration   2: 93.480 ns/op
# Warmup Iteration   3: 84.100 ns/op
# Warmup Iteration   4: 82.074 ns/op
# Warmup Iteration   5: 80.437 ns/op
Iteration   1: 80.209 ns/op
Iteration   2: 81.416 ns/op
Iteration   3: 83.366 ns/op
Iteration   4: 80.756 ns/op
Iteration   5: 81.609 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  81.471 ±(99.9%) 4.604 ns/op [Average]
  (min, avg, max) = (80.209, 81.471, 83.366), stdev = 1.196
  CI (99.9%): [76.867, 86.075] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = random, length = 50)

# Run progress: 11.73% complete, ETA 00:30:29
# Fork: 1 of 1
# Warmup Iteration   1: 189.777 ns/op
# Warmup Iteration   2: 184.730 ns/op
# Warmup Iteration   3: 172.973 ns/op
# Warmup Iteration   4: 163.305 ns/op
# Warmup Iteration   5: 164.958 ns/op
Iteration   1: 162.503 ns/op
Iteration   2: 167.331 ns/op
Iteration   3: 170.332 ns/op
Iteration   4: 163.870 ns/op
Iteration   5: 164.766 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  165.760 ±(99.9%) 11.954 ns/op [Average]
  (min, avg, max) = (162.503, 165.760, 170.332), stdev = 3.104
  CI (99.9%): [153.807, 177.714] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = random, length = 100)

# Run progress: 12.24% complete, ETA 00:30:18
# Fork: 1 of 1
# Warmup Iteration   1: 268.732 ns/op
# Warmup Iteration   2: 256.018 ns/op
# Warmup Iteration   3: 250.755 ns/op
# Warmup Iteration   4: 235.401 ns/op
# Warmup Iteration   5: 234.975 ns/op
Iteration   1: 237.133 ns/op
Iteration   2: 243.659 ns/op
Iteration   3: 236.916 ns/op
Iteration   4: 235.867 ns/op
Iteration   5: 236.592 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  238.033 ±(99.9%) 12.249 ns/op [Average]
  (min, avg, max) = (235.867, 238.033, 243.659), stdev = 3.181
  CI (99.9%): [225.784, 250.283] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = random, length = 500)

# Run progress: 12.76% complete, ETA 00:30:07
# Fork: 1 of 1
# Warmup Iteration   1: 1051.367 ns/op
# Warmup Iteration   2: 1025.930 ns/op
# Warmup Iteration   3: 947.100 ns/op
# Warmup Iteration   4: 927.187 ns/op
# Warmup Iteration   5: 934.142 ns/op
Iteration   1: 915.622 ns/op
Iteration   2: 930.513 ns/op
Iteration   3: 928.314 ns/op
Iteration   4: 917.032 ns/op
Iteration   5: 952.204 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  928.737 ±(99.9%) 56.561 ns/op [Average]
  (min, avg, max) = (915.622, 928.737, 952.204), stdev = 14.689
  CI (99.9%): [872.176, 985.298] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = random, length = 1000)

# Run progress: 13.27% complete, ETA 00:29:56
# Fork: 1 of 1
# Warmup Iteration   1: 2107.383 ns/op
# Warmup Iteration   2: 1983.864 ns/op
# Warmup Iteration   3: 1902.463 ns/op
# Warmup Iteration   4: 1808.651 ns/op
# Warmup Iteration   5: 1793.657 ns/op
Iteration   1: 1822.166 ns/op
Iteration   2: 1831.535 ns/op
Iteration   3: 1847.606 ns/op
Iteration   4: 1846.944 ns/op
Iteration   5: 1862.775 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  1842.205 ±(99.9%) 60.584 ns/op [Average]
  (min, avg, max) = (1822.166, 1842.205, 1862.775), stdev = 15.734
  CI (99.9%): [1781.621, 1902.790] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode
# Parameters: (dataset = random, length = 10000)

# Run progress: 13.78% complete, ETA 00:29:45
# Fork: 1 of 1
# Warmup Iteration   1: 21419.135 ns/op
# Warmup Iteration   2: 19373.176 ns/op
# Warmup Iteration   3: 17964.280 ns/op
# Warmup Iteration   4: 18269.367 ns/op
# Warmup Iteration   5: 17503.631 ns/op
Iteration   1: 17762.558 ns/op
Iteration   2: 18163.492 ns/op
Iteration   3: 18067.950 ns/op
Iteration   4: 17600.766 ns/op
Iteration   5: 17595.677 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jdk_url_encode":
  17838.089 ±(99.9%) 1017.900 ns/op [Average]
  (min, avg, max) = (17595.677, 17838.089, 18163.492), stdev = 264.345
  CI (99.9%): [16820.189, 18855.988] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = fixed, length = 1)

# Run progress: 14.29% complete, ETA 00:29:34
# Fork: 1 of 1
# Warmup Iteration   1: 1435.008 ns/op
# Warmup Iteration   2: 1434.439 ns/op
# Warmup Iteration   3: 1500.630 ns/op
# Warmup Iteration   4: 1461.675 ns/op
# Warmup Iteration   5: 1492.762 ns/op
Iteration   1: 1379.283 ns/op
Iteration   2: 1363.260 ns/op
Iteration   3: 1355.999 ns/op
Iteration   4: 1357.579 ns/op
Iteration   5: 1343.449 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  1359.914 ±(99.9%) 50.142 ns/op [Average]
  (min, avg, max) = (1343.449, 1359.914, 1379.283), stdev = 13.022
  CI (99.9%): [1309.772, 1410.056] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = fixed, length = 10)

# Run progress: 14.80% complete, ETA 00:29:24
# Fork: 1 of 1
# Warmup Iteration   1: 1426.442 ns/op
# Warmup Iteration   2: 1361.726 ns/op
# Warmup Iteration   3: 1352.545 ns/op
# Warmup Iteration   4: 1350.095 ns/op
# Warmup Iteration   5: 1350.599 ns/op
Iteration   1: 1349.319 ns/op
Iteration   2: 1348.563 ns/op
Iteration   3: 1353.086 ns/op
Iteration   4: 1330.026 ns/op
Iteration   5: 1330.320 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  1342.263 ±(99.9%) 43.007 ns/op [Average]
  (min, avg, max) = (1330.026, 1342.263, 1353.086), stdev = 11.169
  CI (99.9%): [1299.256, 1385.270] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = fixed, length = 50)

# Run progress: 15.31% complete, ETA 00:29:13
# Fork: 1 of 1
# Warmup Iteration   1: 1504.319 ns/op
# Warmup Iteration   2: 1510.146 ns/op
# Warmup Iteration   3: 1437.835 ns/op
# Warmup Iteration   4: 1437.614 ns/op
# Warmup Iteration   5: 1432.826 ns/op
Iteration   1: 1432.136 ns/op
Iteration   2: 1438.202 ns/op
Iteration   3: 1436.217 ns/op
Iteration   4: 1463.608 ns/op
Iteration   5: 1421.821 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  1438.397 ±(99.9%) 59.478 ns/op [Average]
  (min, avg, max) = (1421.821, 1438.397, 1463.608), stdev = 15.446
  CI (99.9%): [1378.918, 1497.875] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = fixed, length = 100)

# Run progress: 15.82% complete, ETA 00:29:02
# Fork: 1 of 1
# Warmup Iteration   1: 1635.970 ns/op
# Warmup Iteration   2: 1598.799 ns/op
# Warmup Iteration   3: 1574.281 ns/op
# Warmup Iteration   4: 1587.349 ns/op
# Warmup Iteration   5: 1572.186 ns/op
Iteration   1: 1578.565 ns/op
Iteration   2: 1572.636 ns/op
Iteration   3: 1572.024 ns/op
Iteration   4: 1565.095 ns/op
Iteration   5: 1562.424 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  1570.149 ±(99.9%) 24.787 ns/op [Average]
  (min, avg, max) = (1562.424, 1570.149, 1578.565), stdev = 6.437
  CI (99.9%): [1545.362, 1594.935] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = fixed, length = 500)

# Run progress: 16.33% complete, ETA 00:28:51
# Fork: 1 of 1
# Warmup Iteration   1: 2326.147 ns/op
# Warmup Iteration   2: 2236.856 ns/op
# Warmup Iteration   3: 2098.219 ns/op
# Warmup Iteration   4: 2094.286 ns/op
# Warmup Iteration   5: 2088.711 ns/op
Iteration   1: 2095.904 ns/op
Iteration   2: 2094.031 ns/op
Iteration   3: 2092.661 ns/op
Iteration   4: 2104.806 ns/op
Iteration   5: 2085.042 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  2094.489 ±(99.9%) 27.314 ns/op [Average]
  (min, avg, max) = (2085.042, 2094.489, 2104.806), stdev = 7.093
  CI (99.9%): [2067.175, 2121.802] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 16.84% complete, ETA 00:28:41
# Fork: 1 of 1
# Warmup Iteration   1: 3056.680 ns/op
# Warmup Iteration   2: 3148.353 ns/op
# Warmup Iteration   3: 3095.050 ns/op
# Warmup Iteration   4: 2808.491 ns/op
# Warmup Iteration   5: 2804.708 ns/op
Iteration   1: 2795.343 ns/op
Iteration   2: 2801.156 ns/op
Iteration   3: 2794.774 ns/op
Iteration   4: 2814.402 ns/op
Iteration   5: 2812.116 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  2803.558 ±(99.9%) 35.566 ns/op [Average]
  (min, avg, max) = (2794.774, 2803.558, 2814.402), stdev = 9.236
  CI (99.9%): [2767.992, 2839.124] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 17.35% complete, ETA 00:28:30
# Fork: 1 of 1
# Warmup Iteration   1: 16341.629 ns/op
# Warmup Iteration   2: 14968.116 ns/op
# Warmup Iteration   3: 14426.429 ns/op
# Warmup Iteration   4: 14788.259 ns/op
# Warmup Iteration   5: 13596.209 ns/op
Iteration   1: 14172.417 ns/op
Iteration   2: 13701.770 ns/op
Iteration   3: 14846.308 ns/op
Iteration   4: 15134.539 ns/op
Iteration   5: 13778.102 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  14326.627 ±(99.9%) 2464.034 ns/op [Average]
  (min, avg, max) = (13701.770, 14326.627, 15134.539), stdev = 639.902
  CI (99.9%): [11862.594, 16790.661] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = random, length = 1)

# Run progress: 17.86% complete, ETA 00:28:20
# Fork: 1 of 1
# Warmup Iteration   1: 1417.887 ns/op
# Warmup Iteration   2: 1396.076 ns/op
# Warmup Iteration   3: 1360.317 ns/op
# Warmup Iteration   4: 1401.400 ns/op
# Warmup Iteration   5: 1377.448 ns/op
Iteration   1: 1368.213 ns/op
Iteration   2: 1361.674 ns/op
Iteration   3: 1358.708 ns/op
Iteration   4: 1339.120 ns/op
Iteration   5: 1341.485 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  1353.840 ±(99.9%) 49.498 ns/op [Average]
  (min, avg, max) = (1339.120, 1353.840, 1368.213), stdev = 12.854
  CI (99.9%): [1304.342, 1403.338] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = random, length = 10)

# Run progress: 18.37% complete, ETA 00:28:09
# Fork: 1 of 1
# Warmup Iteration   1: 1415.894 ns/op
# Warmup Iteration   2: 1380.597 ns/op
# Warmup Iteration   3: 1362.864 ns/op
# Warmup Iteration   4: 1361.987 ns/op
# Warmup Iteration   5: 1354.455 ns/op
Iteration   1: 1357.309 ns/op
Iteration   2: 1353.502 ns/op
Iteration   3: 1508.469 ns/op
Iteration   4: 1351.130 ns/op
Iteration   5: 1360.536 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  1386.189 ±(99.9%) 263.579 ns/op [Average]
  (min, avg, max) = (1351.130, 1386.189, 1508.469), stdev = 68.451
  CI (99.9%): [1122.610, 1649.768] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = random, length = 50)

# Run progress: 18.88% complete, ETA 00:27:58
# Fork: 1 of 1
# Warmup Iteration   1: 1503.323 ns/op
# Warmup Iteration   2: 1454.237 ns/op
# Warmup Iteration   3: 1425.142 ns/op
# Warmup Iteration   4: 1451.994 ns/op
# Warmup Iteration   5: 1456.726 ns/op
Iteration   1: 1424.084 ns/op
Iteration   2: 1432.857 ns/op
Iteration   3: 1425.177 ns/op
Iteration   4: 1437.465 ns/op
Iteration   5: 1541.990 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  1452.315 ±(99.9%) 194.202 ns/op [Average]
  (min, avg, max) = (1424.084, 1452.315, 1541.990), stdev = 50.434
  CI (99.9%): [1258.112, 1646.517] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = random, length = 100)

# Run progress: 19.39% complete, ETA 00:27:47
# Fork: 1 of 1
# Warmup Iteration   1: 1725.232 ns/op
# Warmup Iteration   2: 1709.077 ns/op
# Warmup Iteration   3: 1688.606 ns/op
# Warmup Iteration   4: 1702.112 ns/op
# Warmup Iteration   5: 1617.379 ns/op
Iteration   1: 1619.594 ns/op
Iteration   2: 1643.374 ns/op
Iteration   3: 1662.216 ns/op
Iteration   4: 1661.316 ns/op
Iteration   5: 1639.777 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  1645.256 ±(99.9%) 67.734 ns/op [Average]
  (min, avg, max) = (1619.594, 1645.256, 1662.216), stdev = 17.590
  CI (99.9%): [1577.522, 1712.989] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = random, length = 500)

# Run progress: 19.90% complete, ETA 00:27:36
# Fork: 1 of 1
# Warmup Iteration   1: 2365.682 ns/op
# Warmup Iteration   2: 2329.782 ns/op
# Warmup Iteration   3: 2183.378 ns/op
# Warmup Iteration   4: 2224.395 ns/op
# Warmup Iteration   5: 2210.253 ns/op
Iteration   1: 2189.909 ns/op
Iteration   2: 2203.992 ns/op
Iteration   3: 2227.237 ns/op
Iteration   4: 2217.475 ns/op
Iteration   5: 2177.983 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  2203.319 ±(99.9%) 76.885 ns/op [Average]
  (min, avg, max) = (2177.983, 2203.319, 2227.237), stdev = 19.967
  CI (99.9%): [2126.435, 2280.204] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = random, length = 1000)

# Run progress: 20.41% complete, ETA 00:27:25
# Fork: 1 of 1
# Warmup Iteration   1: 3190.315 ns/op
# Warmup Iteration   2: 3146.044 ns/op
# Warmup Iteration   3: 3207.957 ns/op
# Warmup Iteration   4: 3052.485 ns/op
# Warmup Iteration   5: 3068.700 ns/op
Iteration   1: 3039.840 ns/op
Iteration   2: 3063.892 ns/op
Iteration   3: 2974.527 ns/op
Iteration   4: 3072.152 ns/op
Iteration   5: 3016.378 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  3033.358 ±(99.9%) 151.950 ns/op [Average]
  (min, avg, max) = (2974.527, 3033.358, 3072.152), stdev = 39.461
  CI (99.9%): [2881.408, 3185.308] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode
# Parameters: (dataset = random, length = 10000)

# Run progress: 20.92% complete, ETA 00:27:14
# Fork: 1 of 1
# Warmup Iteration   1: 17022.579 ns/op
# Warmup Iteration   2: 15450.108 ns/op
# Warmup Iteration   3: 14710.717 ns/op
# Warmup Iteration   4: 13974.377 ns/op
# Warmup Iteration   5: 14465.789 ns/op
Iteration   1: 13973.099 ns/op
Iteration   2: 14107.004 ns/op
Iteration   3: 14166.439 ns/op
Iteration   4: 14054.633 ns/op
Iteration   5: 14244.513 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode":
  14109.137 ±(99.9%) 399.669 ns/op [Average]
  (min, avg, max) = (13973.099, 14109.137, 14244.513), stdev = 103.793
  CI (99.9%): [13709.468, 14508.807] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = fixed, length = 1)

# Run progress: 21.43% complete, ETA 00:27:04
# Fork: 1 of 1
# Warmup Iteration   1: 1286.224 ns/op
# Warmup Iteration   2: 1287.729 ns/op
# Warmup Iteration   3: 1264.267 ns/op
# Warmup Iteration   4: 1246.000 ns/op
# Warmup Iteration   5: 1235.430 ns/op
Iteration   1: 1248.743 ns/op
Iteration   2: 1235.183 ns/op
Iteration   3: 1233.903 ns/op
Iteration   4: 1224.794 ns/op
Iteration   5: 1254.415 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  1239.408 ±(99.9%) 46.130 ns/op [Average]
  (min, avg, max) = (1224.794, 1239.408, 1254.415), stdev = 11.980
  CI (99.9%): [1193.278, 1285.537] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = fixed, length = 10)

# Run progress: 21.94% complete, ETA 00:26:53
# Fork: 1 of 1
# Warmup Iteration   1: 1261.155 ns/op
# Warmup Iteration   2: 1250.483 ns/op
# Warmup Iteration   3: 1203.089 ns/op
# Warmup Iteration   4: 1231.518 ns/op
# Warmup Iteration   5: 1232.367 ns/op
Iteration   1: 1229.804 ns/op
Iteration   2: 1266.571 ns/op
Iteration   3: 1259.795 ns/op
Iteration   4: 1272.200 ns/op
Iteration   5: 1250.447 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  1255.764 ±(99.9%) 64.012 ns/op [Average]
  (min, avg, max) = (1229.804, 1255.764, 1272.200), stdev = 16.624
  CI (99.9%): [1191.752, 1319.775] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = fixed, length = 50)

# Run progress: 22.45% complete, ETA 00:26:43
# Fork: 1 of 1
# Warmup Iteration   1: 1335.052 ns/op
# Warmup Iteration   2: 1284.470 ns/op
# Warmup Iteration   3: 1349.269 ns/op
# Warmup Iteration   4: 1297.065 ns/op
# Warmup Iteration   5: 1313.318 ns/op
Iteration   1: 1353.327 ns/op
Iteration   2: 1301.190 ns/op
Iteration   3: 1317.679 ns/op
Iteration   4: 1302.312 ns/op
Iteration   5: 1300.055 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  1314.913 ±(99.9%) 87.197 ns/op [Average]
  (min, avg, max) = (1300.055, 1314.913, 1353.327), stdev = 22.645
  CI (99.9%): [1227.716, 1402.110] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = fixed, length = 100)

# Run progress: 22.96% complete, ETA 00:26:32
# Fork: 1 of 1
# Warmup Iteration   1: 1472.067 ns/op
# Warmup Iteration   2: 1406.743 ns/op
# Warmup Iteration   3: 1413.105 ns/op
# Warmup Iteration   4: 1359.350 ns/op
# Warmup Iteration   5: 1375.256 ns/op
Iteration   1: 1381.415 ns/op
Iteration   2: 1385.365 ns/op
Iteration   3: 1405.451 ns/op
Iteration   4: 1387.772 ns/op
Iteration   5: 1385.529 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  1389.107 ±(99.9%) 36.270 ns/op [Average]
  (min, avg, max) = (1381.415, 1389.107, 1405.451), stdev = 9.419
  CI (99.9%): [1352.836, 1425.377] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = fixed, length = 500)

# Run progress: 23.47% complete, ETA 00:26:22
# Fork: 1 of 1
# Warmup Iteration   1: 2016.932 ns/op
# Warmup Iteration   2: 2064.796 ns/op
# Warmup Iteration   3: 1853.247 ns/op
# Warmup Iteration   4: 1865.157 ns/op
# Warmup Iteration   5: 1900.418 ns/op
Iteration   1: 1899.280 ns/op
Iteration   2: 1915.060 ns/op
Iteration   3: 1911.704 ns/op
Iteration   4: 1910.270 ns/op
Iteration   5: 2004.900 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  1928.243 ±(99.9%) 166.578 ns/op [Average]
  (min, avg, max) = (1899.280, 1928.243, 2004.900), stdev = 43.260
  CI (99.9%): [1761.665, 2094.820] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 23.98% complete, ETA 00:26:11
# Fork: 1 of 1
# Warmup Iteration   1: 2998.746 ns/op
# Warmup Iteration   2: 2939.369 ns/op
# Warmup Iteration   3: 2906.569 ns/op
# Warmup Iteration   4: 2757.210 ns/op
# Warmup Iteration   5: 2860.897 ns/op
Iteration   1: 2900.990 ns/op
Iteration   2: 2824.137 ns/op
Iteration   3: 2824.319 ns/op
Iteration   4: 2793.048 ns/op
Iteration   5: 2969.783 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  2862.455 ±(99.9%) 277.302 ns/op [Average]
  (min, avg, max) = (2793.048, 2862.455, 2969.783), stdev = 72.015
  CI (99.9%): [2585.153, 3139.758] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 24.49% complete, ETA 00:26:01
# Fork: 1 of 1
# Warmup Iteration   1: 19017.630 ns/op
# Warmup Iteration   2: 16377.791 ns/op
# Warmup Iteration   3: 15832.856 ns/op
# Warmup Iteration   4: 14806.970 ns/op
# Warmup Iteration   5: 14403.946 ns/op
Iteration   1: 13923.388 ns/op
Iteration   2: 14075.821 ns/op
Iteration   3: 13961.018 ns/op
Iteration   4: 13906.177 ns/op
Iteration   5: 13752.023 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  13923.686 ±(99.9%) 448.701 ns/op [Average]
  (min, avg, max) = (13752.023, 13923.686, 14075.821), stdev = 116.526
  CI (99.9%): [13474.985, 14372.386] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = random, length = 1)

# Run progress: 25.00% complete, ETA 00:25:51
# Fork: 1 of 1
# Warmup Iteration   1: 1260.456 ns/op
# Warmup Iteration   2: 1254.599 ns/op
# Warmup Iteration   3: 1227.445 ns/op
# Warmup Iteration   4: 1252.627 ns/op
# Warmup Iteration   5: 1252.475 ns/op
Iteration   1: 1229.157 ns/op
Iteration   2: 1249.041 ns/op
Iteration   3: 1245.408 ns/op
Iteration   4: 1251.124 ns/op
Iteration   5: 1231.978 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  1241.341 ±(99.9%) 38.874 ns/op [Average]
  (min, avg, max) = (1229.157, 1241.341, 1251.124), stdev = 10.095
  CI (99.9%): [1202.468, 1280.215] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = random, length = 10)

# Run progress: 25.51% complete, ETA 00:25:40
# Fork: 1 of 1
# Warmup Iteration   1: 1293.916 ns/op
# Warmup Iteration   2: 1309.470 ns/op
# Warmup Iteration   3: 1281.138 ns/op
# Warmup Iteration   4: 1237.562 ns/op
# Warmup Iteration   5: 1259.799 ns/op
Iteration   1: 1265.137 ns/op
Iteration   2: 1218.952 ns/op
Iteration   3: 1249.947 ns/op
Iteration   4: 1259.932 ns/op
Iteration   5: 1233.265 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  1245.447 ±(99.9%) 73.772 ns/op [Average]
  (min, avg, max) = (1218.952, 1245.447, 1265.137), stdev = 19.158
  CI (99.9%): [1171.674, 1319.219] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = random, length = 50)

# Run progress: 26.02% complete, ETA 00:25:29
# Fork: 1 of 1
# Warmup Iteration   1: 1370.838 ns/op
# Warmup Iteration   2: 1360.730 ns/op
# Warmup Iteration   3: 1313.419 ns/op
# Warmup Iteration   4: 1316.248 ns/op
# Warmup Iteration   5: 1316.442 ns/op
Iteration   1: 1338.379 ns/op
Iteration   2: 1302.471 ns/op
Iteration   3: 1434.100 ns/op
Iteration   4: 1349.403 ns/op
Iteration   5: 1363.100 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  1357.490 ±(99.9%) 186.252 ns/op [Average]
  (min, avg, max) = (1302.471, 1357.490, 1434.100), stdev = 48.369
  CI (99.9%): [1171.238, 1543.742] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = random, length = 100)

# Run progress: 26.53% complete, ETA 00:25:18
# Fork: 1 of 1
# Warmup Iteration   1: 1440.646 ns/op
# Warmup Iteration   2: 1464.483 ns/op
# Warmup Iteration   3: 1449.569 ns/op
# Warmup Iteration   4: 1457.954 ns/op
# Warmup Iteration   5: 1426.399 ns/op
Iteration   1: 1382.840 ns/op
Iteration   2: 1356.064 ns/op
Iteration   3: 1379.543 ns/op
Iteration   4: 1373.183 ns/op
Iteration   5: 1374.698 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  1373.266 ±(99.9%) 39.880 ns/op [Average]
  (min, avg, max) = (1356.064, 1373.266, 1382.840), stdev = 10.357
  CI (99.9%): [1333.386, 1413.145] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = random, length = 500)

# Run progress: 27.04% complete, ETA 00:25:07
# Fork: 1 of 1
# Warmup Iteration   1: 2045.242 ns/op
# Warmup Iteration   2: 2027.086 ns/op
# Warmup Iteration   3: 1896.153 ns/op
# Warmup Iteration   4: 1959.974 ns/op
# Warmup Iteration   5: 1924.437 ns/op
Iteration   1: 1917.692 ns/op
Iteration   2: 1919.410 ns/op
Iteration   3: 2021.127 ns/op
Iteration   4: 1931.466 ns/op
Iteration   5: 1927.762 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  1943.492 ±(99.9%) 168.560 ns/op [Average]
  (min, avg, max) = (1917.692, 1943.492, 2021.127), stdev = 43.774
  CI (99.9%): [1774.932, 2112.051] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = random, length = 1000)

# Run progress: 27.55% complete, ETA 00:24:57
# Fork: 1 of 1
# Warmup Iteration   1: 2976.680 ns/op
# Warmup Iteration   2: 2989.092 ns/op
# Warmup Iteration   3: 2933.833 ns/op
# Warmup Iteration   4: 2756.723 ns/op
# Warmup Iteration   5: 2763.825 ns/op
Iteration   1: 2787.040 ns/op
Iteration   2: 2765.771 ns/op
Iteration   3: 2738.807 ns/op
Iteration   4: 2773.189 ns/op
Iteration   5: 2814.470 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  2775.855 ±(99.9%) 107.155 ns/op [Average]
  (min, avg, max) = (2738.807, 2775.855, 2814.470), stdev = 27.828
  CI (99.9%): [2668.700, 2883.010] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1
# Parameters: (dataset = random, length = 10000)

# Run progress: 28.06% complete, ETA 00:24:46
# Fork: 1 of 1
# Warmup Iteration   1: 17413.973 ns/op
# Warmup Iteration   2: 15603.966 ns/op
# Warmup Iteration   3: 15585.028 ns/op
# Warmup Iteration   4: 14024.494 ns/op
# Warmup Iteration   5: 13612.648 ns/op
Iteration   1: 13550.713 ns/op
Iteration   2: 13754.573 ns/op
Iteration   3: 13671.224 ns/op
Iteration   4: 13961.753 ns/op
Iteration   5: 13749.383 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode1":
  13737.529 ±(99.9%) 577.610 ns/op [Average]
  (min, avg, max) = (13550.713, 13737.529, 13961.753), stdev = 150.003
  CI (99.9%): [13159.919, 14315.139] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = fixed, length = 1)

# Run progress: 28.57% complete, ETA 00:24:35
# Fork: 1 of 1
# Warmup Iteration   1: 1147.493 ns/op
# Warmup Iteration   2: 1077.291 ns/op
# Warmup Iteration   3: 1093.547 ns/op
# Warmup Iteration   4: 1072.367 ns/op
# Warmup Iteration   5: 1067.585 ns/op
Iteration   1: 1070.048 ns/op
Iteration   2: 1067.545 ns/op
Iteration   3: 1086.248 ns/op
Iteration   4: 1066.936 ns/op
Iteration   5: 1111.837 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  1080.523 ±(99.9%) 73.971 ns/op [Average]
  (min, avg, max) = (1066.936, 1080.523, 1111.837), stdev = 19.210
  CI (99.9%): [1006.552, 1154.493] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = fixed, length = 10)

# Run progress: 29.08% complete, ETA 00:24:25
# Fork: 1 of 1
# Warmup Iteration   1: 1150.717 ns/op
# Warmup Iteration   2: 1074.461 ns/op
# Warmup Iteration   3: 1093.885 ns/op
# Warmup Iteration   4: 1101.923 ns/op
# Warmup Iteration   5: 1052.693 ns/op
Iteration   1: 1110.365 ns/op
Iteration   2: 1116.942 ns/op
Iteration   3: 1061.313 ns/op
Iteration   4: 1116.184 ns/op
Iteration   5: 1097.996 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  1100.560 ±(99.9%) 89.388 ns/op [Average]
  (min, avg, max) = (1061.313, 1100.560, 1116.942), stdev = 23.214
  CI (99.9%): [1011.172, 1189.948] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = fixed, length = 50)

# Run progress: 29.59% complete, ETA 00:24:14
# Fork: 1 of 1
# Warmup Iteration   1: 1182.803 ns/op
# Warmup Iteration   2: 1191.393 ns/op
# Warmup Iteration   3: 1176.042 ns/op
# Warmup Iteration   4: 1203.545 ns/op
# Warmup Iteration   5: 1195.606 ns/op
Iteration   1: 1174.935 ns/op
Iteration   2: 1161.745 ns/op
Iteration   3: 1155.020 ns/op
Iteration   4: 1164.777 ns/op
Iteration   5: 1146.131 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  1160.522 ±(99.9%) 41.504 ns/op [Average]
  (min, avg, max) = (1146.131, 1160.522, 1174.935), stdev = 10.779
  CI (99.9%): [1119.017, 1202.026] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = fixed, length = 100)

# Run progress: 30.10% complete, ETA 00:24:04
# Fork: 1 of 1
# Warmup Iteration   1: 1315.262 ns/op
# Warmup Iteration   2: 1246.279 ns/op
# Warmup Iteration   3: 1207.462 ns/op
# Warmup Iteration   4: 1215.379 ns/op
# Warmup Iteration   5: 1249.547 ns/op
Iteration   1: 1238.572 ns/op
Iteration   2: 1292.083 ns/op
Iteration   3: 1274.902 ns/op
Iteration   4: 1223.209 ns/op
Iteration   5: 1261.991 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  1258.151 ±(99.9%) 106.347 ns/op [Average]
  (min, avg, max) = (1223.209, 1258.151, 1292.083), stdev = 27.618
  CI (99.9%): [1151.805, 1364.498] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = fixed, length = 500)

# Run progress: 30.61% complete, ETA 00:23:53
# Fork: 1 of 1
# Warmup Iteration   1: 1840.197 ns/op
# Warmup Iteration   2: 1820.590 ns/op
# Warmup Iteration   3: 1747.451 ns/op
# Warmup Iteration   4: 1726.553 ns/op
# Warmup Iteration   5: 1723.679 ns/op
Iteration   1: 1716.018 ns/op
Iteration   2: 1760.496 ns/op
Iteration   3: 1746.487 ns/op
Iteration   4: 1771.750 ns/op
Iteration   5: 2017.794 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  1802.509 ±(99.9%) 470.338 ns/op [Average]
  (min, avg, max) = (1716.018, 1802.509, 2017.794), stdev = 122.145
  CI (99.9%): [1332.171, 2272.847] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 31.12% complete, ETA 00:23:43
# Fork: 1 of 1
# Warmup Iteration   1: 2880.298 ns/op
# Warmup Iteration   2: 2813.960 ns/op
# Warmup Iteration   3: 2697.835 ns/op
# Warmup Iteration   4: 2608.937 ns/op
# Warmup Iteration   5: 2525.441 ns/op
Iteration   1: 2530.340 ns/op
Iteration   2: 2488.528 ns/op
Iteration   3: 2476.612 ns/op
Iteration   4: 2507.150 ns/op
Iteration   5: 2591.633 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  2518.853 ±(99.9%) 175.085 ns/op [Average]
  (min, avg, max) = (2476.612, 2518.853, 2591.633), stdev = 45.469
  CI (99.9%): [2343.767, 2693.938] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 31.63% complete, ETA 00:23:33
# Fork: 1 of 1
# Warmup Iteration   1: 15048.860 ns/op
# Warmup Iteration   2: 14780.509 ns/op
# Warmup Iteration   3: 13375.709 ns/op
# Warmup Iteration   4: 13183.531 ns/op
# Warmup Iteration   5: 13158.168 ns/op
Iteration   1: 13329.793 ns/op
Iteration   2: 13357.882 ns/op
Iteration   3: 13210.451 ns/op
Iteration   4: 13224.467 ns/op
Iteration   5: 13243.711 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  13273.261 ±(99.9%) 255.101 ns/op [Average]
  (min, avg, max) = (13210.451, 13273.261, 13357.882), stdev = 66.249
  CI (99.9%): [13018.160, 13528.362] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = random, length = 1)

# Run progress: 32.14% complete, ETA 00:23:22
# Fork: 1 of 1
# Warmup Iteration   1: 1075.730 ns/op
# Warmup Iteration   2: 1050.790 ns/op
# Warmup Iteration   3: 1033.878 ns/op
# Warmup Iteration   4: 1030.049 ns/op
# Warmup Iteration   5: 1028.181 ns/op
Iteration   1: 1052.914 ns/op
Iteration   2: 1069.079 ns/op
Iteration   3: 1034.715 ns/op
Iteration   4: 1025.952 ns/op
Iteration   5: 1042.588 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  1045.050 ±(99.9%) 64.343 ns/op [Average]
  (min, avg, max) = (1025.952, 1045.050, 1069.079), stdev = 16.710
  CI (99.9%): [980.707, 1109.392] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = random, length = 10)

# Run progress: 32.65% complete, ETA 00:23:11
# Fork: 1 of 1
# Warmup Iteration   1: 1073.440 ns/op
# Warmup Iteration   2: 1038.077 ns/op
# Warmup Iteration   3: 1020.212 ns/op
# Warmup Iteration   4: 1020.209 ns/op
# Warmup Iteration   5: 1055.354 ns/op
Iteration   1: 1018.253 ns/op
Iteration   2: 1022.505 ns/op
Iteration   3: 1022.106 ns/op
Iteration   4: 1029.609 ns/op
Iteration   5: 1026.447 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  1023.784 ±(99.9%) 16.792 ns/op [Average]
  (min, avg, max) = (1018.253, 1023.784, 1029.609), stdev = 4.361
  CI (99.9%): [1006.993, 1040.576] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = random, length = 50)

# Run progress: 33.16% complete, ETA 00:23:01
# Fork: 1 of 1
# Warmup Iteration   1: 1152.863 ns/op
# Warmup Iteration   2: 1118.753 ns/op
# Warmup Iteration   3: 1102.058 ns/op
# Warmup Iteration   4: 1101.843 ns/op
# Warmup Iteration   5: 1098.844 ns/op
Iteration   1: 1098.906 ns/op
Iteration   2: 1131.944 ns/op
Iteration   3: 1094.691 ns/op
Iteration   4: 1199.247 ns/op
Iteration   5: 1101.509 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  1125.260 ±(99.9%) 169.076 ns/op [Average]
  (min, avg, max) = (1094.691, 1125.260, 1199.247), stdev = 43.908
  CI (99.9%): [956.184, 1294.335] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = random, length = 100)

# Run progress: 33.67% complete, ETA 00:22:50
# Fork: 1 of 1
# Warmup Iteration   1: 1254.815 ns/op
# Warmup Iteration   2: 1191.494 ns/op
# Warmup Iteration   3: 1175.178 ns/op
# Warmup Iteration   4: 1180.756 ns/op
# Warmup Iteration   5: 1174.427 ns/op
Iteration   1: 1182.432 ns/op
Iteration   2: 1181.358 ns/op
Iteration   3: 1178.847 ns/op
Iteration   4: 1181.286 ns/op
Iteration   5: 1184.855 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  1181.755 ±(99.9%) 8.370 ns/op [Average]
  (min, avg, max) = (1178.847, 1181.755, 1184.855), stdev = 2.174
  CI (99.9%): [1173.385, 1190.126] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = random, length = 500)

# Run progress: 34.18% complete, ETA 00:22:39
# Fork: 1 of 1
# Warmup Iteration   1: 1900.125 ns/op
# Warmup Iteration   2: 1778.250 ns/op
# Warmup Iteration   3: 1687.965 ns/op
# Warmup Iteration   4: 1661.833 ns/op
# Warmup Iteration   5: 1743.612 ns/op
Iteration   1: 1675.607 ns/op
Iteration   2: 1676.442 ns/op
Iteration   3: 1674.762 ns/op
Iteration   4: 1676.155 ns/op
Iteration   5: 1689.899 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  1678.573 ±(99.9%) 24.504 ns/op [Average]
  (min, avg, max) = (1674.762, 1678.573, 1689.899), stdev = 6.364
  CI (99.9%): [1654.068, 1703.077] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = random, length = 1000)

# Run progress: 34.69% complete, ETA 00:22:28
# Fork: 1 of 1
# Warmup Iteration   1: 2725.978 ns/op
# Warmup Iteration   2: 2695.229 ns/op
# Warmup Iteration   3: 2476.197 ns/op
# Warmup Iteration   4: 2445.963 ns/op
# Warmup Iteration   5: 2452.606 ns/op
Iteration   1: 2459.199 ns/op
Iteration   2: 2458.526 ns/op
Iteration   3: 2533.969 ns/op
Iteration   4: 2509.598 ns/op
Iteration   5: 2490.489 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  2490.356 ±(99.9%) 125.607 ns/op [Average]
  (min, avg, max) = (2458.526, 2490.356, 2533.969), stdev = 32.620
  CI (99.9%): [2364.749, 2615.964] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2
# Parameters: (dataset = random, length = 10000)

# Run progress: 35.20% complete, ETA 00:22:18
# Fork: 1 of 1
# Warmup Iteration   1: 15992.191 ns/op
# Warmup Iteration   2: 14936.347 ns/op
# Warmup Iteration   3: 13506.557 ns/op
# Warmup Iteration   4: 13333.185 ns/op
# Warmup Iteration   5: 13334.614 ns/op
Iteration   1: 13779.264 ns/op
Iteration   2: 13383.427 ns/op
Iteration   3: 14190.048 ns/op
Iteration   4: 13497.385 ns/op
Iteration   5: 13483.103 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode2":
  13666.645 ±(99.9%) 1261.318 ns/op [Average]
  (min, avg, max) = (13383.427, 13666.645, 14190.048), stdev = 327.560
  CI (99.9%): [12405.328, 14927.963] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = fixed, length = 1)

# Run progress: 35.71% complete, ETA 00:22:07
# Fork: 1 of 1
# Warmup Iteration   1: 1022.271 ns/op
# Warmup Iteration   2: 1001.218 ns/op
# Warmup Iteration   3: 976.122 ns/op
# Warmup Iteration   4: 975.904 ns/op
# Warmup Iteration   5: 975.705 ns/op
Iteration   1: 974.103 ns/op
Iteration   2: 975.419 ns/op
Iteration   3: 974.354 ns/op
Iteration   4: 973.570 ns/op
Iteration   5: 976.155 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  974.720 ±(99.9%) 4.033 ns/op [Average]
  (min, avg, max) = (973.570, 974.720, 976.155), stdev = 1.047
  CI (99.9%): [970.688, 978.753] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = fixed, length = 10)

# Run progress: 36.22% complete, ETA 00:21:57
# Fork: 1 of 1
# Warmup Iteration   1: 1011.336 ns/op
# Warmup Iteration   2: 1007.609 ns/op
# Warmup Iteration   3: 962.352 ns/op
# Warmup Iteration   4: 967.975 ns/op
# Warmup Iteration   5: 965.723 ns/op
Iteration   1: 964.610 ns/op
Iteration   2: 966.128 ns/op
Iteration   3: 1042.516 ns/op
Iteration   4: 963.827 ns/op
Iteration   5: 973.960 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  982.208 ±(99.9%) 130.741 ns/op [Average]
  (min, avg, max) = (963.827, 982.208, 1042.516), stdev = 33.953
  CI (99.9%): [851.467, 1112.950] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = fixed, length = 50)

# Run progress: 36.73% complete, ETA 00:21:46
# Fork: 1 of 1
# Warmup Iteration   1: 1122.734 ns/op
# Warmup Iteration   2: 1073.450 ns/op
# Warmup Iteration   3: 1074.799 ns/op
# Warmup Iteration   4: 1079.717 ns/op
# Warmup Iteration   5: 1077.903 ns/op
Iteration   1: 1086.541 ns/op
Iteration   2: 1138.165 ns/op
Iteration   3: 1192.767 ns/op
Iteration   4: 1148.980 ns/op
Iteration   5: 1122.269 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  1137.744 ±(99.9%) 149.323 ns/op [Average]
  (min, avg, max) = (1086.541, 1137.744, 1192.767), stdev = 38.779
  CI (99.9%): [988.421, 1287.068] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = fixed, length = 100)

# Run progress: 37.24% complete, ETA 00:21:36
# Fork: 1 of 1
# Warmup Iteration   1: 1229.731 ns/op
# Warmup Iteration   2: 1197.332 ns/op
# Warmup Iteration   3: 1139.756 ns/op
# Warmup Iteration   4: 1124.381 ns/op
# Warmup Iteration   5: 1128.405 ns/op
Iteration   1: 1126.433 ns/op
Iteration   2: 1126.086 ns/op
Iteration   3: 1121.273 ns/op
Iteration   4: 1126.019 ns/op
Iteration   5: 1162.631 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  1132.488 ±(99.9%) 65.401 ns/op [Average]
  (min, avg, max) = (1121.273, 1132.488, 1162.631), stdev = 16.984
  CI (99.9%): [1067.088, 1197.889] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = fixed, length = 500)

# Run progress: 37.76% complete, ETA 00:21:25
# Fork: 1 of 1
# Warmup Iteration   1: 1758.055 ns/op
# Warmup Iteration   2: 1719.035 ns/op
# Warmup Iteration   3: 1615.113 ns/op
# Warmup Iteration   4: 1614.426 ns/op
# Warmup Iteration   5: 1619.675 ns/op
Iteration   1: 1616.558 ns/op
Iteration   2: 1615.883 ns/op
Iteration   3: 1619.419 ns/op
Iteration   4: 2019.887 ns/op
Iteration   5: 1658.131 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  1705.976 ±(99.9%) 679.160 ns/op [Average]
  (min, avg, max) = (1615.883, 1705.976, 2019.887), stdev = 176.376
  CI (99.9%): [1026.816, 2385.136] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 38.27% complete, ETA 00:21:15
# Fork: 1 of 1
# Warmup Iteration   1: 2931.082 ns/op
# Warmup Iteration   2: 2687.591 ns/op
# Warmup Iteration   3: 2495.762 ns/op
# Warmup Iteration   4: 2334.074 ns/op
# Warmup Iteration   5: 2308.109 ns/op
Iteration   1: 2315.352 ns/op
Iteration   2: 2315.325 ns/op
Iteration   3: 2327.660 ns/op
Iteration   4: 2383.397 ns/op
Iteration   5: 2328.540 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  2334.055 ±(99.9%) 109.024 ns/op [Average]
  (min, avg, max) = (2315.325, 2334.055, 2383.397), stdev = 28.313
  CI (99.9%): [2225.030, 2443.079] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 38.78% complete, ETA 00:21:04
# Fork: 1 of 1
# Warmup Iteration   1: 14643.420 ns/op
# Warmup Iteration   2: 14553.084 ns/op
# Warmup Iteration   3: 12595.171 ns/op
# Warmup Iteration   4: 12574.478 ns/op
# Warmup Iteration   5: 12590.376 ns/op
Iteration   1: 13601.170 ns/op
Iteration   2: 13087.446 ns/op
Iteration   3: 12614.689 ns/op
Iteration   4: 12656.449 ns/op
Iteration   5: 12707.206 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  12933.392 ±(99.9%) 1609.792 ns/op [Average]
  (min, avg, max) = (12614.689, 12933.392, 13601.170), stdev = 418.058
  CI (99.9%): [11323.600, 14543.184] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = random, length = 1)

# Run progress: 39.29% complete, ETA 00:20:54
# Fork: 1 of 1
# Warmup Iteration   1: 1023.189 ns/op
# Warmup Iteration   2: 987.194 ns/op
# Warmup Iteration   3: 1023.498 ns/op
# Warmup Iteration   4: 1008.307 ns/op
# Warmup Iteration   5: 1035.476 ns/op
Iteration   1: 1026.062 ns/op
Iteration   2: 1028.124 ns/op
Iteration   3: 1022.828 ns/op
Iteration   4: 1048.446 ns/op
Iteration   5: 1015.844 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  1028.261 ±(99.9%) 47.003 ns/op [Average]
  (min, avg, max) = (1015.844, 1028.261, 1048.446), stdev = 12.207
  CI (99.9%): [981.258, 1075.264] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = random, length = 10)

# Run progress: 39.80% complete, ETA 00:20:43
# Fork: 1 of 1
# Warmup Iteration   1: 1074.654 ns/op
# Warmup Iteration   2: 1022.957 ns/op
# Warmup Iteration   3: 996.546 ns/op
# Warmup Iteration   4: 1047.760 ns/op
# Warmup Iteration   5: 1027.326 ns/op
Iteration   1: 1017.897 ns/op
Iteration   2: 1004.978 ns/op
Iteration   3: 1011.233 ns/op
Iteration   4: 1040.326 ns/op
Iteration   5: 1009.110 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  1016.709 ±(99.9%) 53.928 ns/op [Average]
  (min, avg, max) = (1004.978, 1016.709, 1040.326), stdev = 14.005
  CI (99.9%): [962.781, 1070.636] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = random, length = 50)

# Run progress: 40.31% complete, ETA 00:20:32
# Fork: 1 of 1
# Warmup Iteration   1: 1139.200 ns/op
# Warmup Iteration   2: 1105.513 ns/op
# Warmup Iteration   3: 1108.612 ns/op
# Warmup Iteration   4: 1090.582 ns/op
# Warmup Iteration   5: 1082.869 ns/op
Iteration   1: 1091.002 ns/op
Iteration   2: 1095.538 ns/op
Iteration   3: 1099.212 ns/op
Iteration   4: 1088.419 ns/op
Iteration   5: 1112.834 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  1097.401 ±(99.9%) 36.862 ns/op [Average]
  (min, avg, max) = (1088.419, 1097.401, 1112.834), stdev = 9.573
  CI (99.9%): [1060.539, 1134.263] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = random, length = 100)

# Run progress: 40.82% complete, ETA 00:20:22
# Fork: 1 of 1
# Warmup Iteration   1: 1213.436 ns/op
# Warmup Iteration   2: 1184.129 ns/op
# Warmup Iteration   3: 1158.517 ns/op
# Warmup Iteration   4: 1158.246 ns/op
# Warmup Iteration   5: 1209.643 ns/op
Iteration   1: 1184.701 ns/op
Iteration   2: 1181.389 ns/op
Iteration   3: 1195.921 ns/op
Iteration   4: 1180.488 ns/op
Iteration   5: 1191.978 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  1186.895 ±(99.9%) 26.080 ns/op [Average]
  (min, avg, max) = (1180.488, 1186.895, 1195.921), stdev = 6.773
  CI (99.9%): [1160.816, 1212.975] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = random, length = 500)

# Run progress: 41.33% complete, ETA 00:20:11
# Fork: 1 of 1
# Warmup Iteration   1: 1792.099 ns/op
# Warmup Iteration   2: 1905.922 ns/op
# Warmup Iteration   3: 1721.562 ns/op
# Warmup Iteration   4: 1725.825 ns/op
# Warmup Iteration   5: 1713.010 ns/op
Iteration   1: 1722.052 ns/op
Iteration   2: 1810.373 ns/op
Iteration   3: 1727.023 ns/op
Iteration   4: 1752.382 ns/op
Iteration   5: 1720.630 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  1746.492 ±(99.9%) 146.131 ns/op [Average]
  (min, avg, max) = (1720.630, 1746.492, 1810.373), stdev = 37.950
  CI (99.9%): [1600.361, 1892.623] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = random, length = 1000)

# Run progress: 41.84% complete, ETA 00:20:00
# Fork: 1 of 1
# Warmup Iteration   1: 2747.279 ns/op
# Warmup Iteration   2: 2661.926 ns/op
# Warmup Iteration   3: 2456.769 ns/op
# Warmup Iteration   4: 2462.917 ns/op
# Warmup Iteration   5: 2621.180 ns/op
Iteration   1: 2395.370 ns/op
Iteration   2: 2408.235 ns/op
Iteration   3: 2429.241 ns/op
Iteration   4: 2450.151 ns/op
Iteration   5: 2413.019 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  2419.203 ±(99.9%) 81.345 ns/op [Average]
  (min, avg, max) = (2395.370, 2419.203, 2450.151), stdev = 21.125
  CI (99.9%): [2337.858, 2500.548] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3
# Parameters: (dataset = random, length = 10000)

# Run progress: 42.35% complete, ETA 00:19:50
# Fork: 1 of 1
# Warmup Iteration   1: 16172.443 ns/op
# Warmup Iteration   2: 14926.781 ns/op
# Warmup Iteration   3: 13384.580 ns/op
# Warmup Iteration   4: 13329.696 ns/op
# Warmup Iteration   5: 13228.813 ns/op
Iteration   1: 13252.572 ns/op
Iteration   2: 13039.206 ns/op
Iteration   3: 13207.559 ns/op
Iteration   4: 13745.679 ns/op
Iteration   5: 13264.176 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode3":
  13301.838 ±(99.9%) 1016.425 ns/op [Average]
  (min, avg, max) = (13039.206, 13301.838, 13745.679), stdev = 263.962
  CI (99.9%): [12285.413, 14318.263] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = fixed, length = 1)

# Run progress: 42.86% complete, ETA 00:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 1054.384 ns/op
# Warmup Iteration   2: 1066.204 ns/op
# Warmup Iteration   3: 1046.335 ns/op
# Warmup Iteration   4: 1002.668 ns/op
# Warmup Iteration   5: 1038.197 ns/op
Iteration   1: 1023.259 ns/op
Iteration   2: 1014.738 ns/op
Iteration   3: 1065.003 ns/op
Iteration   4: 1039.036 ns/op
Iteration   5: 1055.903 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  1039.588 ±(99.9%) 81.606 ns/op [Average]
  (min, avg, max) = (1014.738, 1039.588, 1065.003), stdev = 21.193
  CI (99.9%): [957.982, 1121.194] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = fixed, length = 10)

# Run progress: 43.37% complete, ETA 00:19:29
# Fork: 1 of 1
# Warmup Iteration   1: 1204.562 ns/op
# Warmup Iteration   2: 1094.405 ns/op
# Warmup Iteration   3: 1066.163 ns/op
# Warmup Iteration   4: 1088.704 ns/op
# Warmup Iteration   5: 1088.841 ns/op
Iteration   1: 1062.659 ns/op
Iteration   2: 1149.459 ns/op
Iteration   3: 1085.698 ns/op
Iteration   4: 1067.220 ns/op
Iteration   5: 1152.709 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  1103.549 ±(99.9%) 170.419 ns/op [Average]
  (min, avg, max) = (1062.659, 1103.549, 1152.709), stdev = 44.257
  CI (99.9%): [933.130, 1273.968] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = fixed, length = 50)

# Run progress: 43.88% complete, ETA 00:19:18
# Fork: 1 of 1
# Warmup Iteration   1: 1232.178 ns/op
# Warmup Iteration   2: 1137.660 ns/op
# Warmup Iteration   3: 1132.365 ns/op
# Warmup Iteration   4: 1174.077 ns/op
# Warmup Iteration   5: 1138.881 ns/op
Iteration   1: 1146.031 ns/op
Iteration   2: 1137.186 ns/op
Iteration   3: 1164.918 ns/op
Iteration   4: 1186.241 ns/op
Iteration   5: 1216.121 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  1170.099 ±(99.9%) 122.798 ns/op [Average]
  (min, avg, max) = (1137.186, 1170.099, 1216.121), stdev = 31.890
  CI (99.9%): [1047.301, 1292.898] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = fixed, length = 100)

# Run progress: 44.39% complete, ETA 00:19:08
# Fork: 1 of 1
# Warmup Iteration   1: 1315.846 ns/op
# Warmup Iteration   2: 1257.159 ns/op
# Warmup Iteration   3: 1236.780 ns/op
# Warmup Iteration   4: 1230.847 ns/op
# Warmup Iteration   5: 1273.477 ns/op
Iteration   1: 1292.525 ns/op
Iteration   2: 1238.794 ns/op
Iteration   3: 1261.231 ns/op
Iteration   4: 1233.578 ns/op
Iteration   5: 1250.721 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  1255.370 ±(99.9%) 90.020 ns/op [Average]
  (min, avg, max) = (1233.578, 1255.370, 1292.525), stdev = 23.378
  CI (99.9%): [1165.350, 1345.390] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = fixed, length = 500)

# Run progress: 44.90% complete, ETA 00:18:57
# Fork: 1 of 1
# Warmup Iteration   1: 1825.811 ns/op
# Warmup Iteration   2: 1834.446 ns/op
# Warmup Iteration   3: 1815.041 ns/op
# Warmup Iteration   4: 1718.212 ns/op
# Warmup Iteration   5: 1786.582 ns/op
Iteration   1: 1763.184 ns/op
Iteration   2: 1726.566 ns/op
Iteration   3: 1807.099 ns/op
Iteration   4: 1759.893 ns/op
Iteration   5: 1746.991 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  1760.747 ±(99.9%) 114.111 ns/op [Average]
  (min, avg, max) = (1726.566, 1760.747, 1807.099), stdev = 29.634
  CI (99.9%): [1646.636, 1874.858] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 45.41% complete, ETA 00:18:47
# Fork: 1 of 1
# Warmup Iteration   1: 2704.935 ns/op
# Warmup Iteration   2: 2691.732 ns/op
# Warmup Iteration   3: 2461.507 ns/op
# Warmup Iteration   4: 2405.987 ns/op
# Warmup Iteration   5: 2445.608 ns/op
Iteration   1: 2431.730 ns/op
Iteration   2: 2420.614 ns/op
Iteration   3: 2421.767 ns/op
Iteration   4: 2447.368 ns/op
Iteration   5: 2472.592 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  2438.814 ±(99.9%) 83.616 ns/op [Average]
  (min, avg, max) = (2420.614, 2438.814, 2472.592), stdev = 21.715
  CI (99.9%): [2355.198, 2522.431] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 45.92% complete, ETA 00:18:36
# Fork: 1 of 1
# Warmup Iteration   1: 15637.664 ns/op
# Warmup Iteration   2: 15001.638 ns/op
# Warmup Iteration   3: 14183.159 ns/op
# Warmup Iteration   4: 13735.031 ns/op
# Warmup Iteration   5: 13797.801 ns/op
Iteration   1: 14142.744 ns/op
Iteration   2: 13702.112 ns/op
Iteration   3: 14026.139 ns/op
Iteration   4: 13728.888 ns/op
Iteration   5: 14005.889 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  13921.154 ±(99.9%) 751.245 ns/op [Average]
  (min, avg, max) = (13702.112, 13921.154, 14142.744), stdev = 195.096
  CI (99.9%): [13169.909, 14672.400] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = random, length = 1)

# Run progress: 46.43% complete, ETA 00:18:26
# Fork: 1 of 1
# Warmup Iteration   1: 1053.611 ns/op
# Warmup Iteration   2: 1040.894 ns/op
# Warmup Iteration   3: 1025.717 ns/op
# Warmup Iteration   4: 1015.387 ns/op
# Warmup Iteration   5: 1057.157 ns/op
Iteration   1: 1031.111 ns/op
Iteration   2: 1026.659 ns/op
Iteration   3: 1012.600 ns/op
Iteration   4: 1021.573 ns/op
Iteration   5: 1054.482 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  1029.285 ±(99.9%) 60.364 ns/op [Average]
  (min, avg, max) = (1012.600, 1029.285, 1054.482), stdev = 15.676
  CI (99.9%): [968.922, 1089.649] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = random, length = 10)

# Run progress: 46.94% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 1192.544 ns/op
# Warmup Iteration   2: 1077.679 ns/op
# Warmup Iteration   3: 1094.526 ns/op
# Warmup Iteration   4: 1107.179 ns/op
# Warmup Iteration   5: 1117.043 ns/op
Iteration   1: 1056.100 ns/op
Iteration   2: 1043.031 ns/op
Iteration   3: 1055.260 ns/op
Iteration   4: 1070.064 ns/op
Iteration   5: 1072.142 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  1059.320 ±(99.9%) 46.049 ns/op [Average]
  (min, avg, max) = (1043.031, 1059.320, 1072.142), stdev = 11.959
  CI (99.9%): [1013.271, 1105.368] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = random, length = 50)

# Run progress: 47.45% complete, ETA 00:18:05
# Fork: 1 of 1
# Warmup Iteration   1: 1264.467 ns/op
# Warmup Iteration   2: 1184.247 ns/op
# Warmup Iteration   3: 1150.466 ns/op
# Warmup Iteration   4: 1193.158 ns/op
# Warmup Iteration   5: 1194.648 ns/op
Iteration   1: 1247.833 ns/op
Iteration   2: 1168.112 ns/op
Iteration   3: 1201.770 ns/op
Iteration   4: 1162.711 ns/op
Iteration   5: 1192.065 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  1194.498 ±(99.9%) 130.724 ns/op [Average]
  (min, avg, max) = (1162.711, 1194.498, 1247.833), stdev = 33.949
  CI (99.9%): [1063.774, 1325.222] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = random, length = 100)

# Run progress: 47.96% complete, ETA 00:17:54
# Fork: 1 of 1
# Warmup Iteration   1: 1293.615 ns/op
# Warmup Iteration   2: 1236.071 ns/op
# Warmup Iteration   3: 1204.615 ns/op
# Warmup Iteration   4: 1199.919 ns/op
# Warmup Iteration   5: 1201.572 ns/op
Iteration   1: 1227.938 ns/op
Iteration   2: 1225.355 ns/op
Iteration   3: 1244.614 ns/op
Iteration   4: 1235.847 ns/op
Iteration   5: 1232.333 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  1233.217 ±(99.9%) 29.024 ns/op [Average]
  (min, avg, max) = (1225.355, 1233.217, 1244.614), stdev = 7.538
  CI (99.9%): [1204.193, 1262.242] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = random, length = 500)

# Run progress: 48.47% complete, ETA 00:17:43
# Fork: 1 of 1
# Warmup Iteration   1: 1887.209 ns/op
# Warmup Iteration   2: 1899.941 ns/op
# Warmup Iteration   3: 1772.679 ns/op
# Warmup Iteration   4: 1804.464 ns/op
# Warmup Iteration   5: 1883.808 ns/op
Iteration   1: 1754.459 ns/op
Iteration   2: 1746.664 ns/op
Iteration   3: 1758.347 ns/op
Iteration   4: 1770.329 ns/op
Iteration   5: 1762.163 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  1758.393 ±(99.9%) 33.885 ns/op [Average]
  (min, avg, max) = (1746.664, 1758.393, 1770.329), stdev = 8.800
  CI (99.9%): [1724.508, 1792.277] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = random, length = 1000)

# Run progress: 48.98% complete, ETA 00:17:33
# Fork: 1 of 1
# Warmup Iteration   1: 2735.302 ns/op
# Warmup Iteration   2: 2753.398 ns/op
# Warmup Iteration   3: 2546.739 ns/op
# Warmup Iteration   4: 2466.051 ns/op
# Warmup Iteration   5: 2420.908 ns/op
Iteration   1: 2527.036 ns/op
Iteration   2: 2752.116 ns/op
Iteration   3: 2583.326 ns/op
Iteration   4: 2473.650 ns/op
Iteration   5: 2511.687 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  2569.563 ±(99.9%) 421.255 ns/op [Average]
  (min, avg, max) = (2473.650, 2569.563, 2752.116), stdev = 109.399
  CI (99.9%): [2148.308, 2990.818] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4
# Parameters: (dataset = random, length = 10000)

# Run progress: 49.49% complete, ETA 00:17:22
# Fork: 1 of 1
# Warmup Iteration   1: 15828.304 ns/op
# Warmup Iteration   2: 15328.803 ns/op
# Warmup Iteration   3: 14766.934 ns/op
# Warmup Iteration   4: 13860.864 ns/op
# Warmup Iteration   5: 14452.530 ns/op
Iteration   1: 16091.784 ns/op
Iteration   2: 13928.194 ns/op
Iteration   3: 14164.138 ns/op
Iteration   4: 14185.040 ns/op
Iteration   5: 14456.609 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decode4":
  14565.153 ±(99.9%) 3364.303 ns/op [Average]
  (min, avg, max) = (13928.194, 14565.153, 16091.784), stdev = 873.699
  CI (99.9%): [11200.850, 17929.456] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = fixed, length = 1)

# Run progress: 50.00% complete, ETA 00:17:12
# Fork: 1 of 1
# Warmup Iteration   1: 600.356 ns/op
# Warmup Iteration   2: 577.599 ns/op
# Warmup Iteration   3: 577.530 ns/op
# Warmup Iteration   4: 557.976 ns/op
# Warmup Iteration   5: 574.398 ns/op
Iteration   1: 576.094 ns/op
Iteration   2: 587.981 ns/op
Iteration   3: 602.766 ns/op
Iteration   4: 565.156 ns/op
Iteration   5: 571.058 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  580.611 ±(99.9%) 57.620 ns/op [Average]
  (min, avg, max) = (565.156, 580.611, 602.766), stdev = 14.964
  CI (99.9%): [522.991, 638.231] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = fixed, length = 10)

# Run progress: 50.51% complete, ETA 00:17:01
# Fork: 1 of 1
# Warmup Iteration   1: 637.086 ns/op
# Warmup Iteration   2: 613.982 ns/op
# Warmup Iteration   3: 614.041 ns/op
# Warmup Iteration   4: 607.495 ns/op
# Warmup Iteration   5: 611.483 ns/op
Iteration   1: 615.920 ns/op
Iteration   2: 611.758 ns/op
Iteration   3: 593.431 ns/op
Iteration   4: 604.805 ns/op
Iteration   5: 620.226 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  609.228 ±(99.9%) 40.443 ns/op [Average]
  (min, avg, max) = (593.431, 609.228, 620.226), stdev = 10.503
  CI (99.9%): [568.785, 649.671] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = fixed, length = 50)

# Run progress: 51.02% complete, ETA 00:16:51
# Fork: 1 of 1
# Warmup Iteration   1: 794.196 ns/op
# Warmup Iteration   2: 693.211 ns/op
# Warmup Iteration   3: 689.100 ns/op
# Warmup Iteration   4: 678.284 ns/op
# Warmup Iteration   5: 670.359 ns/op
Iteration   1: 668.786 ns/op
Iteration   2: 706.264 ns/op
Iteration   3: 700.217 ns/op
Iteration   4: 698.131 ns/op
Iteration   5: 704.627 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  695.605 ±(99.9%) 59.090 ns/op [Average]
  (min, avg, max) = (668.786, 695.605, 706.264), stdev = 15.345
  CI (99.9%): [636.515, 754.695] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = fixed, length = 100)

# Run progress: 51.53% complete, ETA 00:16:40
# Fork: 1 of 1
# Warmup Iteration   1: 796.112 ns/op
# Warmup Iteration   2: 763.026 ns/op
# Warmup Iteration   3: 750.116 ns/op
# Warmup Iteration   4: 753.863 ns/op
# Warmup Iteration   5: 765.679 ns/op
Iteration   1: 754.443 ns/op
Iteration   2: 759.758 ns/op
Iteration   3: 738.873 ns/op
Iteration   4: 781.223 ns/op
Iteration   5: 753.487 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  757.557 ±(99.9%) 59.039 ns/op [Average]
  (min, avg, max) = (738.873, 757.557, 781.223), stdev = 15.332
  CI (99.9%): [698.518, 816.596] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = fixed, length = 500)

# Run progress: 52.04% complete, ETA 00:16:30
# Fork: 1 of 1
# Warmup Iteration   1: 1451.464 ns/op
# Warmup Iteration   2: 1366.213 ns/op
# Warmup Iteration   3: 1242.997 ns/op
# Warmup Iteration   4: 1220.578 ns/op
# Warmup Iteration   5: 1223.183 ns/op
Iteration   1: 1222.516 ns/op
Iteration   2: 1250.416 ns/op
Iteration   3: 1261.573 ns/op
Iteration   4: 1273.214 ns/op
Iteration   5: 1234.478 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  1248.439 ±(99.9%) 78.375 ns/op [Average]
  (min, avg, max) = (1222.516, 1248.439, 1273.214), stdev = 20.354
  CI (99.9%): [1170.064, 1326.815] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 52.55% complete, ETA 00:16:19
# Fork: 1 of 1
# Warmup Iteration   1: 2268.946 ns/op
# Warmup Iteration   2: 2258.208 ns/op
# Warmup Iteration   3: 2014.834 ns/op
# Warmup Iteration   4: 2034.885 ns/op
# Warmup Iteration   5: 2024.227 ns/op
Iteration   1: 2012.200 ns/op
Iteration   2: 2007.800 ns/op
Iteration   3: 2059.175 ns/op
Iteration   4: 2037.618 ns/op
Iteration   5: 2058.531 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  2035.065 ±(99.9%) 94.414 ns/op [Average]
  (min, avg, max) = (2007.800, 2035.065, 2059.175), stdev = 24.519
  CI (99.9%): [1940.651, 2129.478] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 53.06% complete, ETA 00:16:09
# Fork: 1 of 1
# Warmup Iteration   1: 15511.115 ns/op
# Warmup Iteration   2: 15576.607 ns/op
# Warmup Iteration   3: 13618.683 ns/op
# Warmup Iteration   4: 12871.814 ns/op
# Warmup Iteration   5: 12769.905 ns/op
Iteration   1: 12796.276 ns/op
Iteration   2: 13190.846 ns/op
Iteration   3: 12840.821 ns/op
Iteration   4: 13078.936 ns/op
Iteration   5: 13167.152 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  13014.806 ±(99.9%) 710.906 ns/op [Average]
  (min, avg, max) = (12796.276, 13014.806, 13190.846), stdev = 184.620
  CI (99.9%): [12303.901, 13725.712] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = random, length = 1)

# Run progress: 53.57% complete, ETA 00:15:58
# Fork: 1 of 1
# Warmup Iteration   1: 590.590 ns/op
# Warmup Iteration   2: 578.089 ns/op
# Warmup Iteration   3: 552.624 ns/op
# Warmup Iteration   4: 556.010 ns/op
# Warmup Iteration   5: 552.806 ns/op
Iteration   1: 552.515 ns/op
Iteration   2: 546.227 ns/op
Iteration   3: 552.509 ns/op
Iteration   4: 565.149 ns/op
Iteration   5: 564.849 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  556.250 ±(99.9%) 32.306 ns/op [Average]
  (min, avg, max) = (546.227, 556.250, 565.149), stdev = 8.390
  CI (99.9%): [523.944, 588.556] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = random, length = 10)

# Run progress: 54.08% complete, ETA 00:15:48
# Fork: 1 of 1
# Warmup Iteration   1: 633.477 ns/op
# Warmup Iteration   2: 607.696 ns/op
# Warmup Iteration   3: 607.080 ns/op
# Warmup Iteration   4: 608.642 ns/op
# Warmup Iteration   5: 604.207 ns/op
Iteration   1: 599.391 ns/op
Iteration   2: 596.268 ns/op
Iteration   3: 613.679 ns/op
Iteration   4: 598.762 ns/op
Iteration   5: 607.190 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  603.058 ±(99.9%) 27.760 ns/op [Average]
  (min, avg, max) = (596.268, 603.058, 613.679), stdev = 7.209
  CI (99.9%): [575.298, 630.818] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = random, length = 50)

# Run progress: 54.59% complete, ETA 00:15:37
# Fork: 1 of 1
# Warmup Iteration   1: 712.669 ns/op
# Warmup Iteration   2: 696.288 ns/op
# Warmup Iteration   3: 689.515 ns/op
# Warmup Iteration   4: 688.245 ns/op
# Warmup Iteration   5: 678.485 ns/op
Iteration   1: 673.554 ns/op
Iteration   2: 670.366 ns/op
Iteration   3: 673.374 ns/op
Iteration   4: 674.107 ns/op
Iteration   5: 685.735 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  675.427 ±(99.9%) 22.889 ns/op [Average]
  (min, avg, max) = (670.366, 675.427, 685.735), stdev = 5.944
  CI (99.9%): [652.538, 698.316] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = random, length = 100)

# Run progress: 55.10% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 804.722 ns/op
# Warmup Iteration   2: 757.022 ns/op
# Warmup Iteration   3: 802.266 ns/op
# Warmup Iteration   4: 753.888 ns/op
# Warmup Iteration   5: 744.683 ns/op
Iteration   1: 755.372 ns/op
Iteration   2: 752.825 ns/op
Iteration   3: 743.499 ns/op
Iteration   4: 753.518 ns/op
Iteration   5: 780.089 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  757.061 ±(99.9%) 52.642 ns/op [Average]
  (min, avg, max) = (743.499, 757.061, 780.089), stdev = 13.671
  CI (99.9%): [704.419, 809.702] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = random, length = 500)

# Run progress: 55.61% complete, ETA 00:15:16
# Fork: 1 of 1
# Warmup Iteration   1: 1405.403 ns/op
# Warmup Iteration   2: 1385.251 ns/op
# Warmup Iteration   3: 1230.920 ns/op
# Warmup Iteration   4: 1210.874 ns/op
# Warmup Iteration   5: 1240.876 ns/op
Iteration   1: 1230.780 ns/op
Iteration   2: 1233.791 ns/op
Iteration   3: 1207.230 ns/op
Iteration   4: 1286.381 ns/op
Iteration   5: 1231.971 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  1238.031 ±(99.9%) 112.160 ns/op [Average]
  (min, avg, max) = (1207.230, 1238.031, 1286.381), stdev = 29.128
  CI (99.9%): [1125.871, 1350.191] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = random, length = 1000)

# Run progress: 56.12% complete, ETA 00:15:05
# Fork: 1 of 1
# Warmup Iteration   1: 2198.346 ns/op
# Warmup Iteration   2: 2177.452 ns/op
# Warmup Iteration   3: 1963.610 ns/op
# Warmup Iteration   4: 1987.755 ns/op
# Warmup Iteration   5: 2017.758 ns/op
Iteration   1: 1956.513 ns/op
Iteration   2: 1942.390 ns/op
Iteration   3: 2006.441 ns/op
Iteration   4: 2023.310 ns/op
Iteration   5: 1986.603 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  1983.051 ±(99.9%) 129.701 ns/op [Average]
  (min, avg, max) = (1942.390, 1983.051, 2023.310), stdev = 33.683
  CI (99.9%): [1853.351, 2112.752] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1
# Parameters: (dataset = random, length = 10000)

# Run progress: 56.63% complete, ETA 00:14:55
# Fork: 1 of 1
# Warmup Iteration   1: 15615.365 ns/op
# Warmup Iteration   2: 14699.556 ns/op
# Warmup Iteration   3: 13006.217 ns/op
# Warmup Iteration   4: 12916.459 ns/op
# Warmup Iteration   5: 13157.432 ns/op
Iteration   1: 13245.163 ns/op
Iteration   2: 12925.336 ns/op
Iteration   3: 13143.675 ns/op
Iteration   4: 13095.210 ns/op
Iteration   5: 13287.025 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky1":
  13139.282 ±(99.9%) 547.189 ns/op [Average]
  (min, avg, max) = (12925.336, 13139.282, 13287.025), stdev = 142.103
  CI (99.9%): [12592.092, 13686.471] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = fixed, length = 1)

# Run progress: 57.14% complete, ETA 00:14:44
# Fork: 1 of 1
# Warmup Iteration   1: 515.467 ns/op
# Warmup Iteration   2: 503.695 ns/op
# Warmup Iteration   3: 483.851 ns/op
# Warmup Iteration   4: 479.521 ns/op
# Warmup Iteration   5: 495.889 ns/op
Iteration   1: 478.299 ns/op
Iteration   2: 497.303 ns/op
Iteration   3: 499.389 ns/op
Iteration   4: 504.742 ns/op
Iteration   5: 497.400 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  495.427 ±(99.9%) 38.661 ns/op [Average]
  (min, avg, max) = (478.299, 495.427, 504.742), stdev = 10.040
  CI (99.9%): [456.765, 534.088] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = fixed, length = 10)

# Run progress: 57.65% complete, ETA 00:14:34
# Fork: 1 of 1
# Warmup Iteration   1: 524.797 ns/op
# Warmup Iteration   2: 509.985 ns/op
# Warmup Iteration   3: 497.461 ns/op
# Warmup Iteration   4: 500.753 ns/op
# Warmup Iteration   5: 532.237 ns/op
Iteration   1: 517.403 ns/op
Iteration   2: 529.395 ns/op
Iteration   3: 524.555 ns/op
Iteration   4: 519.195 ns/op
Iteration   5: 507.483 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  519.606 ±(99.9%) 31.771 ns/op [Average]
  (min, avg, max) = (507.483, 519.606, 529.395), stdev = 8.251
  CI (99.9%): [487.835, 551.377] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = fixed, length = 50)

# Run progress: 58.16% complete, ETA 00:14:23
# Fork: 1 of 1
# Warmup Iteration   1: 638.184 ns/op
# Warmup Iteration   2: 616.169 ns/op
# Warmup Iteration   3: 588.848 ns/op
# Warmup Iteration   4: 594.625 ns/op
# Warmup Iteration   5: 601.811 ns/op
Iteration   1: 629.518 ns/op
Iteration   2: 629.152 ns/op
Iteration   3: 604.590 ns/op
Iteration   4: 579.556 ns/op
Iteration   5: 601.256 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  608.814 ±(99.9%) 81.075 ns/op [Average]
  (min, avg, max) = (579.556, 608.814, 629.518), stdev = 21.055
  CI (99.9%): [527.739, 689.890] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = fixed, length = 100)

# Run progress: 58.67% complete, ETA 00:14:13
# Fork: 1 of 1
# Warmup Iteration   1: 673.545 ns/op
# Warmup Iteration   2: 664.078 ns/op
# Warmup Iteration   3: 619.681 ns/op
# Warmup Iteration   4: 641.992 ns/op
# Warmup Iteration   5: 624.868 ns/op
Iteration   1: 637.514 ns/op
Iteration   2: 627.295 ns/op
Iteration   3: 654.551 ns/op
Iteration   4: 638.224 ns/op
Iteration   5: 634.782 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  638.473 ±(99.9%) 38.412 ns/op [Average]
  (min, avg, max) = (627.295, 638.473, 654.551), stdev = 9.975
  CI (99.9%): [600.061, 676.885] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = fixed, length = 500)

# Run progress: 59.18% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 1271.455 ns/op
# Warmup Iteration   2: 1290.951 ns/op
# Warmup Iteration   3: 1123.954 ns/op
# Warmup Iteration   4: 1153.173 ns/op
# Warmup Iteration   5: 1138.219 ns/op
Iteration   1: 1155.873 ns/op
Iteration   2: 1115.644 ns/op
Iteration   3: 1170.278 ns/op
Iteration   4: 1119.646 ns/op
Iteration   5: 1126.838 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  1137.656 ±(99.9%) 92.775 ns/op [Average]
  (min, avg, max) = (1115.644, 1137.656, 1170.278), stdev = 24.093
  CI (99.9%): [1044.881, 1230.430] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 59.69% complete, ETA 00:13:52
# Fork: 1 of 1
# Warmup Iteration   1: 2098.211 ns/op
# Warmup Iteration   2: 2069.514 ns/op
# Warmup Iteration   3: 1818.814 ns/op
# Warmup Iteration   4: 1827.592 ns/op
# Warmup Iteration   5: 1817.896 ns/op
Iteration   1: 1875.221 ns/op
Iteration   2: 1830.465 ns/op
Iteration   3: 1868.488 ns/op
Iteration   4: 1866.697 ns/op
Iteration   5: 1895.869 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  1867.348 ±(99.9%) 91.072 ns/op [Average]
  (min, avg, max) = (1830.465, 1867.348, 1895.869), stdev = 23.651
  CI (99.9%): [1776.276, 1958.420] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 60.20% complete, ETA 00:13:41
# Fork: 1 of 1
# Warmup Iteration   1: 14900.932 ns/op
# Warmup Iteration   2: 14646.280 ns/op
# Warmup Iteration   3: 12731.259 ns/op
# Warmup Iteration   4: 12589.990 ns/op
# Warmup Iteration   5: 12865.635 ns/op
Iteration   1: 13140.232 ns/op
Iteration   2: 12796.411 ns/op
Iteration   3: 12899.390 ns/op
Iteration   4: 12832.666 ns/op
Iteration   5: 13258.455 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  12985.431 ±(99.9%) 782.009 ns/op [Average]
  (min, avg, max) = (12796.411, 12985.431, 13258.455), stdev = 203.085
  CI (99.9%): [12203.422, 13767.440] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = random, length = 1)

# Run progress: 60.71% complete, ETA 00:13:31
# Fork: 1 of 1
# Warmup Iteration   1: 484.850 ns/op
# Warmup Iteration   2: 469.425 ns/op
# Warmup Iteration   3: 463.263 ns/op
# Warmup Iteration   4: 480.022 ns/op
# Warmup Iteration   5: 468.009 ns/op
Iteration   1: 517.110 ns/op
Iteration   2: 462.050 ns/op
Iteration   3: 471.047 ns/op
Iteration   4: 462.225 ns/op
Iteration   5: 472.390 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  476.964 ±(99.9%) 88.382 ns/op [Average]
  (min, avg, max) = (462.050, 476.964, 517.110), stdev = 22.952
  CI (99.9%): [388.582, 565.346] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = random, length = 10)

# Run progress: 61.22% complete, ETA 00:13:20
# Fork: 1 of 1
# Warmup Iteration   1: 531.732 ns/op
# Warmup Iteration   2: 519.807 ns/op
# Warmup Iteration   3: 499.296 ns/op
# Warmup Iteration   4: 514.153 ns/op
# Warmup Iteration   5: 486.576 ns/op
Iteration   1: 495.313 ns/op
Iteration   2: 497.740 ns/op
Iteration   3: 504.979 ns/op
Iteration   4: 501.250 ns/op
Iteration   5: 491.539 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  498.164 ±(99.9%) 20.023 ns/op [Average]
  (min, avg, max) = (491.539, 498.164, 504.979), stdev = 5.200
  CI (99.9%): [478.141, 518.187] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = random, length = 50)

# Run progress: 61.73% complete, ETA 00:13:09
# Fork: 1 of 1
# Warmup Iteration   1: 642.949 ns/op
# Warmup Iteration   2: 593.613 ns/op
# Warmup Iteration   3: 583.078 ns/op
# Warmup Iteration   4: 576.766 ns/op
# Warmup Iteration   5: 573.539 ns/op
Iteration   1: 610.471 ns/op
Iteration   2: 579.168 ns/op
Iteration   3: 568.370 ns/op
Iteration   4: 584.319 ns/op
Iteration   5: 586.411 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  585.748 ±(99.9%) 59.624 ns/op [Average]
  (min, avg, max) = (568.370, 585.748, 610.471), stdev = 15.484
  CI (99.9%): [526.124, 645.372] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = random, length = 100)

# Run progress: 62.24% complete, ETA 00:12:59
# Fork: 1 of 1
# Warmup Iteration   1: 679.227 ns/op
# Warmup Iteration   2: 666.481 ns/op
# Warmup Iteration   3: 668.061 ns/op
# Warmup Iteration   4: 643.158 ns/op
# Warmup Iteration   5: 663.699 ns/op
Iteration   1: 642.142 ns/op
Iteration   2: 627.370 ns/op
Iteration   3: 640.583 ns/op
Iteration   4: 623.595 ns/op
Iteration   5: 634.832 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  633.704 ±(99.9%) 31.171 ns/op [Average]
  (min, avg, max) = (623.595, 633.704, 642.142), stdev = 8.095
  CI (99.9%): [602.534, 664.875] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = random, length = 500)

# Run progress: 62.76% complete, ETA 00:12:48
# Fork: 1 of 1
# Warmup Iteration   1: 1277.332 ns/op
# Warmup Iteration   2: 1257.472 ns/op
# Warmup Iteration   3: 1132.493 ns/op
# Warmup Iteration   4: 1156.838 ns/op
# Warmup Iteration   5: 1129.432 ns/op
Iteration   1: 1114.856 ns/op
Iteration   2: 1129.962 ns/op
Iteration   3: 1137.088 ns/op
Iteration   4: 1123.617 ns/op
Iteration   5: 1139.918 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  1129.088 ±(99.9%) 39.201 ns/op [Average]
  (min, avg, max) = (1114.856, 1129.088, 1139.918), stdev = 10.180
  CI (99.9%): [1089.887, 1168.289] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = random, length = 1000)

# Run progress: 63.27% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 2039.430 ns/op
# Warmup Iteration   2: 1999.215 ns/op
# Warmup Iteration   3: 1830.404 ns/op
# Warmup Iteration   4: 1831.176 ns/op
# Warmup Iteration   5: 1796.254 ns/op
Iteration   1: 1837.214 ns/op
Iteration   2: 1961.768 ns/op
Iteration   3: 1993.490 ns/op
Iteration   4: 1943.800 ns/op
Iteration   5: 1833.754 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  1914.005 ±(99.9%) 284.428 ns/op [Average]
  (min, avg, max) = (1833.754, 1914.005, 1993.490), stdev = 73.865
  CI (99.9%): [1629.578, 2198.433] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2
# Parameters: (dataset = random, length = 10000)

# Run progress: 63.78% complete, ETA 00:12:27
# Fork: 1 of 1
# Warmup Iteration   1: 15834.634 ns/op
# Warmup Iteration   2: 14317.813 ns/op
# Warmup Iteration   3: 12746.202 ns/op
# Warmup Iteration   4: 12713.076 ns/op
# Warmup Iteration   5: 13008.942 ns/op
Iteration   1: 13119.271 ns/op
Iteration   2: 13098.503 ns/op
Iteration   3: 12921.915 ns/op
Iteration   4: 13001.145 ns/op
Iteration   5: 13370.131 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_decodeHacky2":
  13102.193 ±(99.9%) 652.361 ns/op [Average]
  (min, avg, max) = (12921.915, 13102.193, 13370.131), stdev = 169.416
  CI (99.9%): [12449.833, 13754.554] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = fixed, length = 1)

# Run progress: 64.29% complete, ETA 00:12:17
# Fork: 1 of 1
# Warmup Iteration   1: 1433.780 ns/op
# Warmup Iteration   2: 1430.715 ns/op
# Warmup Iteration   3: 1363.221 ns/op
# Warmup Iteration   4: 1384.228 ns/op
# Warmup Iteration   5: 1383.107 ns/op
Iteration   1: 1362.709 ns/op
Iteration   2: 1384.464 ns/op
Iteration   3: 1373.632 ns/op
Iteration   4: 1399.744 ns/op
Iteration   5: 1341.427 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  1372.395 ±(99.9%) 84.976 ns/op [Average]
  (min, avg, max) = (1341.427, 1372.395, 1399.744), stdev = 22.068
  CI (99.9%): [1287.419, 1457.372] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = fixed, length = 10)

# Run progress: 64.80% complete, ETA 00:12:06
# Fork: 1 of 1
# Warmup Iteration   1: 1478.053 ns/op
# Warmup Iteration   2: 1452.157 ns/op
# Warmup Iteration   3: 1426.027 ns/op
# Warmup Iteration   4: 1434.717 ns/op
# Warmup Iteration   5: 1405.614 ns/op
Iteration   1: 1429.970 ns/op
Iteration   2: 1423.044 ns/op
Iteration   3: 1399.300 ns/op
Iteration   4: 1420.715 ns/op
Iteration   5: 1393.108 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  1413.227 ±(99.9%) 61.836 ns/op [Average]
  (min, avg, max) = (1393.108, 1413.227, 1429.970), stdev = 16.059
  CI (99.9%): [1351.391, 1475.063] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = fixed, length = 50)

# Run progress: 65.31% complete, ETA 00:11:56
# Fork: 1 of 1
# Warmup Iteration   1: 1505.428 ns/op
# Warmup Iteration   2: 1476.412 ns/op
# Warmup Iteration   3: 1462.391 ns/op
# Warmup Iteration   4: 1493.848 ns/op
# Warmup Iteration   5: 1455.228 ns/op
Iteration   1: 1481.000 ns/op
Iteration   2: 1455.878 ns/op
Iteration   3: 1442.539 ns/op
Iteration   4: 1453.632 ns/op
Iteration   5: 1439.167 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  1454.443 ±(99.9%) 63.361 ns/op [Average]
  (min, avg, max) = (1439.167, 1454.443, 1481.000), stdev = 16.455
  CI (99.9%): [1391.082, 1517.804] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = fixed, length = 100)

# Run progress: 65.82% complete, ETA 00:11:45
# Fork: 1 of 1
# Warmup Iteration   1: 1682.278 ns/op
# Warmup Iteration   2: 1636.344 ns/op
# Warmup Iteration   3: 1640.067 ns/op
# Warmup Iteration   4: 1645.329 ns/op
# Warmup Iteration   5: 1600.224 ns/op
Iteration   1: 1680.574 ns/op
Iteration   2: 1601.268 ns/op
Iteration   3: 1631.209 ns/op
Iteration   4: 1589.589 ns/op
Iteration   5: 1614.885 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  1623.505 ±(99.9%) 136.622 ns/op [Average]
  (min, avg, max) = (1589.589, 1623.505, 1680.574), stdev = 35.480
  CI (99.9%): [1486.883, 1760.127] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = fixed, length = 500)

# Run progress: 66.33% complete, ETA 00:11:35
# Fork: 1 of 1
# Warmup Iteration   1: 2296.939 ns/op
# Warmup Iteration   2: 2273.712 ns/op
# Warmup Iteration   3: 2157.464 ns/op
# Warmup Iteration   4: 2182.896 ns/op
# Warmup Iteration   5: 2135.227 ns/op
Iteration   1: 2161.234 ns/op
Iteration   2: 2184.939 ns/op
Iteration   3: 2117.743 ns/op
Iteration   4: 2173.039 ns/op
Iteration   5: 2201.257 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  2167.642 ±(99.9%) 121.605 ns/op [Average]
  (min, avg, max) = (2117.743, 2167.642, 2201.257), stdev = 31.580
  CI (99.9%): [2046.038, 2289.247] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 66.84% complete, ETA 00:11:24
# Fork: 1 of 1
# Warmup Iteration   1: 3062.811 ns/op
# Warmup Iteration   2: 3016.466 ns/op
# Warmup Iteration   3: 2768.271 ns/op
# Warmup Iteration   4: 2745.451 ns/op
# Warmup Iteration   5: 2767.318 ns/op
Iteration   1: 2768.827 ns/op
Iteration   2: 2725.132 ns/op
Iteration   3: 2783.210 ns/op
Iteration   4: 2744.053 ns/op
Iteration   5: 2740.797 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  2752.404 ±(99.9%) 89.625 ns/op [Average]
  (min, avg, max) = (2725.132, 2752.404, 2783.210), stdev = 23.275
  CI (99.9%): [2662.779, 2842.028] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 67.35% complete, ETA 00:11:14
# Fork: 1 of 1
# Warmup Iteration   1: 17077.792 ns/op
# Warmup Iteration   2: 14277.562 ns/op
# Warmup Iteration   3: 13896.536 ns/op
# Warmup Iteration   4: 13505.638 ns/op
# Warmup Iteration   5: 13470.646 ns/op
Iteration   1: 13664.683 ns/op
Iteration   2: 13970.784 ns/op
Iteration   3: 14074.168 ns/op
Iteration   4: 13913.882 ns/op
Iteration   5: 13778.075 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  13880.318 ±(99.9%) 620.421 ns/op [Average]
  (min, avg, max) = (13664.683, 13880.318, 14074.168), stdev = 161.121
  CI (99.9%): [13259.897, 14500.740] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = random, length = 1)

# Run progress: 67.86% complete, ETA 00:11:03
# Fork: 1 of 1
# Warmup Iteration   1: 1450.425 ns/op
# Warmup Iteration   2: 1432.436 ns/op
# Warmup Iteration   3: 1392.264 ns/op
# Warmup Iteration   4: 1455.317 ns/op
# Warmup Iteration   5: 1426.270 ns/op
Iteration   1: 1427.479 ns/op
Iteration   2: 1357.428 ns/op
Iteration   3: 1373.411 ns/op
Iteration   4: 1464.584 ns/op
Iteration   5: 1439.292 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  1412.439 ±(99.9%) 174.513 ns/op [Average]
  (min, avg, max) = (1357.428, 1412.439, 1464.584), stdev = 45.320
  CI (99.9%): [1237.926, 1586.952] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = random, length = 10)

# Run progress: 68.37% complete, ETA 00:10:53
# Fork: 1 of 1
# Warmup Iteration   1: 1483.043 ns/op
# Warmup Iteration   2: 1423.601 ns/op
# Warmup Iteration   3: 1405.397 ns/op
# Warmup Iteration   4: 1402.323 ns/op
# Warmup Iteration   5: 1466.762 ns/op
Iteration   1: 1544.982 ns/op
Iteration   2: 1409.847 ns/op
Iteration   3: 1427.422 ns/op
Iteration   4: 1469.996 ns/op
Iteration   5: 1421.972 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  1454.844 ±(99.9%) 212.760 ns/op [Average]
  (min, avg, max) = (1409.847, 1454.844, 1544.982), stdev = 55.253
  CI (99.9%): [1242.083, 1667.604] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = random, length = 50)

# Run progress: 68.88% complete, ETA 00:10:42
# Fork: 1 of 1
# Warmup Iteration   1: 1531.869 ns/op
# Warmup Iteration   2: 1488.794 ns/op
# Warmup Iteration   3: 1479.993 ns/op
# Warmup Iteration   4: 1508.258 ns/op
# Warmup Iteration   5: 1621.785 ns/op
Iteration   1: 1504.001 ns/op
Iteration   2: 1484.514 ns/op
Iteration   3: 1494.047 ns/op
Iteration   4: 1464.848 ns/op
Iteration   5: 1429.560 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  1475.394 ±(99.9%) 113.274 ns/op [Average]
  (min, avg, max) = (1429.560, 1475.394, 1504.001), stdev = 29.417
  CI (99.9%): [1362.120, 1588.668] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = random, length = 100)

# Run progress: 69.39% complete, ETA 00:10:31
# Fork: 1 of 1
# Warmup Iteration   1: 1730.906 ns/op
# Warmup Iteration   2: 1619.037 ns/op
# Warmup Iteration   3: 1605.062 ns/op
# Warmup Iteration   4: 1713.302 ns/op
# Warmup Iteration   5: 1668.613 ns/op
Iteration   1: 1707.020 ns/op
Iteration   2: 1721.919 ns/op
Iteration   3: 1646.720 ns/op
Iteration   4: 1608.742 ns/op
Iteration   5: 1595.557 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  1655.992 ±(99.9%) 218.854 ns/op [Average]
  (min, avg, max) = (1595.557, 1655.992, 1721.919), stdev = 56.836
  CI (99.9%): [1437.138, 1874.845] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = random, length = 500)

# Run progress: 69.90% complete, ETA 00:10:21
# Fork: 1 of 1
# Warmup Iteration   1: 2371.842 ns/op
# Warmup Iteration   2: 2495.703 ns/op
# Warmup Iteration   3: 2248.306 ns/op
# Warmup Iteration   4: 2197.614 ns/op
# Warmup Iteration   5: 2192.440 ns/op
Iteration   1: 2223.690 ns/op
Iteration   2: 2243.040 ns/op
Iteration   3: 2218.702 ns/op
Iteration   4: 2316.137 ns/op
Iteration   5: 2271.013 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  2254.517 ±(99.9%) 154.433 ns/op [Average]
  (min, avg, max) = (2218.702, 2254.517, 2316.137), stdev = 40.106
  CI (99.9%): [2100.084, 2408.949] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = random, length = 1000)

# Run progress: 70.41% complete, ETA 00:10:10
# Fork: 1 of 1
# Warmup Iteration   1: 3192.652 ns/op
# Warmup Iteration   2: 2993.610 ns/op
# Warmup Iteration   3: 2826.408 ns/op
# Warmup Iteration   4: 2893.929 ns/op
# Warmup Iteration   5: 2768.698 ns/op
Iteration   1: 2762.803 ns/op
Iteration   2: 2772.862 ns/op
Iteration   3: 2772.491 ns/op
Iteration   4: 2747.230 ns/op
Iteration   5: 2750.777 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  2761.232 ±(99.9%) 45.961 ns/op [Average]
  (min, avg, max) = (2747.230, 2761.232, 2772.862), stdev = 11.936
  CI (99.9%): [2715.271, 2807.194] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode
# Parameters: (dataset = random, length = 10000)

# Run progress: 70.92% complete, ETA 00:10:00
# Fork: 1 of 1
# Warmup Iteration   1: 17237.545 ns/op
# Warmup Iteration   2: 14620.930 ns/op
# Warmup Iteration   3: 13571.965 ns/op
# Warmup Iteration   4: 13587.552 ns/op
# Warmup Iteration   5: 13816.442 ns/op
Iteration   1: 13633.712 ns/op
Iteration   2: 13565.740 ns/op
Iteration   3: 13588.832 ns/op
Iteration   4: 13909.565 ns/op
Iteration   5: 13701.878 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encode":
  13679.945 ±(99.9%) 533.173 ns/op [Average]
  (min, avg, max) = (13565.740, 13679.945, 13909.565), stdev = 138.463
  CI (99.9%): [13146.772, 14213.119] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = fixed, length = 1)

# Run progress: 71.43% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 557.830 ns/op
# Warmup Iteration   2: 539.143 ns/op
# Warmup Iteration   3: 543.069 ns/op
# Warmup Iteration   4: 534.841 ns/op
# Warmup Iteration   5: 552.866 ns/op
Iteration   1: 544.124 ns/op
Iteration   2: 555.626 ns/op
Iteration   3: 544.768 ns/op
Iteration   4: 551.107 ns/op
Iteration   5: 533.718 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  545.869 ±(99.9%) 31.901 ns/op [Average]
  (min, avg, max) = (533.718, 545.869, 555.626), stdev = 8.285
  CI (99.9%): [513.968, 577.769] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = fixed, length = 10)

# Run progress: 71.94% complete, ETA 00:09:39
# Fork: 1 of 1
# Warmup Iteration   1: 583.402 ns/op
# Warmup Iteration   2: 598.130 ns/op
# Warmup Iteration   3: 555.177 ns/op
# Warmup Iteration   4: 565.239 ns/op
# Warmup Iteration   5: 552.769 ns/op
Iteration   1: 567.520 ns/op
Iteration   2: 563.520 ns/op
Iteration   3: 595.161 ns/op
Iteration   4: 558.236 ns/op
Iteration   5: 553.132 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  567.514 ±(99.9%) 63.074 ns/op [Average]
  (min, avg, max) = (553.132, 567.514, 595.161), stdev = 16.380
  CI (99.9%): [504.439, 630.588] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = fixed, length = 50)

# Run progress: 72.45% complete, ETA 00:09:28
# Fork: 1 of 1
# Warmup Iteration   1: 666.164 ns/op
# Warmup Iteration   2: 648.348 ns/op
# Warmup Iteration   3: 637.229 ns/op
# Warmup Iteration   4: 602.354 ns/op
# Warmup Iteration   5: 636.800 ns/op
Iteration   1: 641.840 ns/op
Iteration   2: 616.428 ns/op
Iteration   3: 627.919 ns/op
Iteration   4: 612.211 ns/op
Iteration   5: 609.686 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  621.617 ±(99.9%) 51.172 ns/op [Average]
  (min, avg, max) = (609.686, 621.617, 641.840), stdev = 13.289
  CI (99.9%): [570.444, 672.789] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = fixed, length = 100)

# Run progress: 72.96% complete, ETA 00:09:18
# Fork: 1 of 1
# Warmup Iteration   1: 747.988 ns/op
# Warmup Iteration   2: 729.100 ns/op
# Warmup Iteration   3: 681.706 ns/op
# Warmup Iteration   4: 674.295 ns/op
# Warmup Iteration   5: 689.616 ns/op
Iteration   1: 691.152 ns/op
Iteration   2: 674.682 ns/op
Iteration   3: 670.438 ns/op
Iteration   4: 791.417 ns/op
Iteration   5: 666.223 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  698.782 ±(99.9%) 202.697 ns/op [Average]
  (min, avg, max) = (666.223, 698.782, 791.417), stdev = 52.640
  CI (99.9%): [496.086, 901.479] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = fixed, length = 500)

# Run progress: 73.47% complete, ETA 00:09:07
# Fork: 1 of 1
# Warmup Iteration   1: 1404.617 ns/op
# Warmup Iteration   2: 1282.899 ns/op
# Warmup Iteration   3: 1165.717 ns/op
# Warmup Iteration   4: 1140.258 ns/op
# Warmup Iteration   5: 1168.387 ns/op
Iteration   1: 1160.606 ns/op
Iteration   2: 1151.878 ns/op
Iteration   3: 1153.774 ns/op
Iteration   4: 1163.552 ns/op
Iteration   5: 1124.167 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  1150.796 ±(99.9%) 60.214 ns/op [Average]
  (min, avg, max) = (1124.167, 1150.796, 1163.552), stdev = 15.637
  CI (99.9%): [1090.582, 1211.009] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 73.98% complete, ETA 00:08:57
# Fork: 1 of 1
# Warmup Iteration   1: 2110.587 ns/op
# Warmup Iteration   2: 2022.323 ns/op
# Warmup Iteration   3: 1889.995 ns/op
# Warmup Iteration   4: 1874.902 ns/op
# Warmup Iteration   5: 1793.311 ns/op
Iteration   1: 1759.024 ns/op
Iteration   2: 1784.123 ns/op
Iteration   3: 1799.031 ns/op
Iteration   4: 1769.432 ns/op
Iteration   5: 1805.581 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  1783.438 ±(99.9%) 75.214 ns/op [Average]
  (min, avg, max) = (1759.024, 1783.438, 1805.581), stdev = 19.533
  CI (99.9%): [1708.224, 1858.652] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 74.49% complete, ETA 00:08:46
# Fork: 1 of 1
# Warmup Iteration   1: 14307.706 ns/op
# Warmup Iteration   2: 12451.679 ns/op
# Warmup Iteration   3: 12295.672 ns/op
# Warmup Iteration   4: 11894.496 ns/op
# Warmup Iteration   5: 12122.033 ns/op
Iteration   1: 12014.680 ns/op
Iteration   2: 11827.206 ns/op
Iteration   3: 12248.373 ns/op
Iteration   4: 11770.399 ns/op
Iteration   5: 12100.833 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  11992.298 ±(99.9%) 756.408 ns/op [Average]
  (min, avg, max) = (11770.399, 11992.298, 12248.373), stdev = 196.437
  CI (99.9%): [11235.890, 12748.707] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = random, length = 1)

# Run progress: 75.00% complete, ETA 00:08:36
# Fork: 1 of 1
# Warmup Iteration   1: 604.637 ns/op
# Warmup Iteration   2: 555.793 ns/op
# Warmup Iteration   3: 545.667 ns/op
# Warmup Iteration   4: 551.945 ns/op
# Warmup Iteration   5: 582.932 ns/op
Iteration   1: 609.826 ns/op
Iteration   2: 578.875 ns/op
Iteration   3: 575.404 ns/op
Iteration   4: 544.482 ns/op
Iteration   5: 549.288 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  571.575 ±(99.9%) 101.181 ns/op [Average]
  (min, avg, max) = (544.482, 571.575, 609.826), stdev = 26.276
  CI (99.9%): [470.394, 672.756] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = random, length = 10)

# Run progress: 75.51% complete, ETA 00:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 586.681 ns/op
# Warmup Iteration   2: 587.709 ns/op
# Warmup Iteration   3: 560.002 ns/op
# Warmup Iteration   4: 555.758 ns/op
# Warmup Iteration   5: 561.023 ns/op
Iteration   1: 573.674 ns/op
Iteration   2: 560.771 ns/op
Iteration   3: 558.508 ns/op
Iteration   4: 555.420 ns/op
Iteration   5: 552.327 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  560.140 ±(99.9%) 31.610 ns/op [Average]
  (min, avg, max) = (552.327, 560.140, 573.674), stdev = 8.209
  CI (99.9%): [528.530, 591.750] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = random, length = 50)

# Run progress: 76.02% complete, ETA 00:08:15
# Fork: 1 of 1
# Warmup Iteration   1: 644.523 ns/op
# Warmup Iteration   2: 620.637 ns/op
# Warmup Iteration   3: 602.952 ns/op
# Warmup Iteration   4: 594.945 ns/op
# Warmup Iteration   5: 620.909 ns/op
Iteration   1: 592.300 ns/op
Iteration   2: 599.196 ns/op
Iteration   3: 606.210 ns/op
Iteration   4: 613.667 ns/op
Iteration   5: 590.940 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  600.463 ±(99.9%) 36.849 ns/op [Average]
  (min, avg, max) = (590.940, 600.463, 613.667), stdev = 9.570
  CI (99.9%): [563.614, 637.312] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = random, length = 100)

# Run progress: 76.53% complete, ETA 00:08:04
# Fork: 1 of 1
# Warmup Iteration   1: 720.015 ns/op
# Warmup Iteration   2: 700.668 ns/op
# Warmup Iteration   3: 671.356 ns/op
# Warmup Iteration   4: 657.660 ns/op
# Warmup Iteration   5: 656.467 ns/op
Iteration   1: 660.438 ns/op
Iteration   2: 653.948 ns/op
Iteration   3: 651.500 ns/op
Iteration   4: 674.254 ns/op
Iteration   5: 676.452 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  663.318 ±(99.9%) 44.234 ns/op [Average]
  (min, avg, max) = (651.500, 663.318, 676.452), stdev = 11.487
  CI (99.9%): [619.084, 707.553] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = random, length = 500)

# Run progress: 77.04% complete, ETA 00:07:53
# Fork: 1 of 1
# Warmup Iteration   1: 1217.407 ns/op
# Warmup Iteration   2: 1228.491 ns/op
# Warmup Iteration   3: 1169.544 ns/op
# Warmup Iteration   4: 1090.651 ns/op
# Warmup Iteration   5: 1084.698 ns/op
Iteration   1: 1159.552 ns/op
Iteration   2: 1095.360 ns/op
Iteration   3: 1109.909 ns/op
Iteration   4: 1116.232 ns/op
Iteration   5: 1109.395 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  1118.089 ±(99.9%) 93.961 ns/op [Average]
  (min, avg, max) = (1095.360, 1118.089, 1159.552), stdev = 24.401
  CI (99.9%): [1024.128, 1212.051] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = random, length = 1000)

# Run progress: 77.55% complete, ETA 00:07:43
# Fork: 1 of 1
# Warmup Iteration   1: 1959.044 ns/op
# Warmup Iteration   2: 1945.551 ns/op
# Warmup Iteration   3: 1710.144 ns/op
# Warmup Iteration   4: 1749.144 ns/op
# Warmup Iteration   5: 1738.836 ns/op
Iteration   1: 1722.625 ns/op
Iteration   2: 1739.633 ns/op
Iteration   3: 1831.269 ns/op
Iteration   4: 1744.814 ns/op
Iteration   5: 1762.822 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  1760.233 ±(99.9%) 162.564 ns/op [Average]
  (min, avg, max) = (1722.625, 1760.233, 1831.269), stdev = 42.217
  CI (99.9%): [1597.668, 1922.797] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1
# Parameters: (dataset = random, length = 10000)

# Run progress: 78.06% complete, ETA 00:07:32
# Fork: 1 of 1
# Warmup Iteration   1: 14488.630 ns/op
# Warmup Iteration   2: 12258.463 ns/op
# Warmup Iteration   3: 11653.080 ns/op
# Warmup Iteration   4: 11546.222 ns/op
# Warmup Iteration   5: 11791.866 ns/op
Iteration   1: 11883.769 ns/op
Iteration   2: 11985.849 ns/op
Iteration   3: 11578.390 ns/op
Iteration   4: 11765.180 ns/op
Iteration   5: 12010.512 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky1":
  11844.740 ±(99.9%) 683.930 ns/op [Average]
  (min, avg, max) = (11578.390, 11844.740, 12010.512), stdev = 177.614
  CI (99.9%): [11160.810, 12528.670] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = fixed, length = 1)

# Run progress: 78.57% complete, ETA 00:07:22
# Fork: 1 of 1
# Warmup Iteration   1: 460.457 ns/op
# Warmup Iteration   2: 437.891 ns/op
# Warmup Iteration   3: 469.085 ns/op
# Warmup Iteration   4: 447.597 ns/op
# Warmup Iteration   5: 437.819 ns/op
Iteration   1: 449.101 ns/op
Iteration   2: 459.789 ns/op
Iteration   3: 459.431 ns/op
Iteration   4: 446.342 ns/op
Iteration   5: 443.672 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  451.667 ±(99.9%) 28.887 ns/op [Average]
  (min, avg, max) = (443.672, 451.667, 459.789), stdev = 7.502
  CI (99.9%): [422.780, 480.554] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = fixed, length = 10)

# Run progress: 79.08% complete, ETA 00:07:11
# Fork: 1 of 1
# Warmup Iteration   1: 482.453 ns/op
# Warmup Iteration   2: 482.141 ns/op
# Warmup Iteration   3: 452.673 ns/op
# Warmup Iteration   4: 458.514 ns/op
# Warmup Iteration   5: 463.852 ns/op
Iteration   1: 452.893 ns/op
Iteration   2: 479.518 ns/op
Iteration   3: 466.854 ns/op
Iteration   4: 467.624 ns/op
Iteration   5: 481.275 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  469.633 ±(99.9%) 44.125 ns/op [Average]
  (min, avg, max) = (452.893, 469.633, 481.275), stdev = 11.459
  CI (99.9%): [425.508, 513.757] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = fixed, length = 50)

# Run progress: 79.59% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 615.624 ns/op
# Warmup Iteration   2: 519.194 ns/op
# Warmup Iteration   3: 505.023 ns/op
# Warmup Iteration   4: 509.365 ns/op
# Warmup Iteration   5: 503.994 ns/op
Iteration   1: 515.314 ns/op
Iteration   2: 521.985 ns/op
Iteration   3: 508.160 ns/op
Iteration   4: 500.385 ns/op
Iteration   5: 538.617 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  516.892 ±(99.9%) 56.104 ns/op [Average]
  (min, avg, max) = (500.385, 516.892, 538.617), stdev = 14.570
  CI (99.9%): [460.788, 572.996] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = fixed, length = 100)

# Run progress: 80.10% complete, ETA 00:06:50
# Fork: 1 of 1
# Warmup Iteration   1: 608.458 ns/op
# Warmup Iteration   2: 595.602 ns/op
# Warmup Iteration   3: 556.421 ns/op
# Warmup Iteration   4: 576.795 ns/op
# Warmup Iteration   5: 559.516 ns/op
Iteration   1: 558.402 ns/op
Iteration   2: 560.173 ns/op
Iteration   3: 582.593 ns/op
Iteration   4: 573.977 ns/op
Iteration   5: 575.902 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  570.209 ±(99.9%) 40.390 ns/op [Average]
  (min, avg, max) = (558.402, 570.209, 582.593), stdev = 10.489
  CI (99.9%): [529.819, 610.600] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = fixed, length = 500)

# Run progress: 80.61% complete, ETA 00:06:40
# Fork: 1 of 1
# Warmup Iteration   1: 1152.507 ns/op
# Warmup Iteration   2: 1084.613 ns/op
# Warmup Iteration   3: 1033.582 ns/op
# Warmup Iteration   4: 965.457 ns/op
# Warmup Iteration   5: 980.811 ns/op
Iteration   1: 1037.686 ns/op
Iteration   2: 961.681 ns/op
Iteration   3: 988.795 ns/op
Iteration   4: 1002.218 ns/op
Iteration   5: 1023.967 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  1002.869 ±(99.9%) 114.751 ns/op [Average]
  (min, avg, max) = (961.681, 1002.869, 1037.686), stdev = 29.800
  CI (99.9%): [888.118, 1117.620] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 81.12% complete, ETA 00:06:29
# Fork: 1 of 1
# Warmup Iteration   1: 1843.335 ns/op
# Warmup Iteration   2: 1683.717 ns/op
# Warmup Iteration   3: 1556.751 ns/op
# Warmup Iteration   4: 1549.392 ns/op
# Warmup Iteration   5: 1556.725 ns/op
Iteration   1: 1583.935 ns/op
Iteration   2: 1573.982 ns/op
Iteration   3: 1567.405 ns/op
Iteration   4: 1594.441 ns/op
Iteration   5: 1618.208 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  1587.594 ±(99.9%) 76.780 ns/op [Average]
  (min, avg, max) = (1567.405, 1587.594, 1618.208), stdev = 19.940
  CI (99.9%): [1510.814, 1664.374] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 81.63% complete, ETA 00:06:19
# Fork: 1 of 1
# Warmup Iteration   1: 13819.218 ns/op
# Warmup Iteration   2: 12024.985 ns/op
# Warmup Iteration   3: 11651.122 ns/op
# Warmup Iteration   4: 11353.421 ns/op
# Warmup Iteration   5: 11604.141 ns/op
Iteration   1: 11623.483 ns/op
Iteration   2: 11442.841 ns/op
Iteration   3: 11322.648 ns/op
Iteration   4: 11514.259 ns/op
Iteration   5: 11238.256 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  11428.297 ±(99.9%) 587.068 ns/op [Average]
  (min, avg, max) = (11238.256, 11428.297, 11623.483), stdev = 152.460
  CI (99.9%): [10841.229, 12015.365] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = random, length = 1)

# Run progress: 82.14% complete, ETA 00:06:08
# Fork: 1 of 1
# Warmup Iteration   1: 474.513 ns/op
# Warmup Iteration   2: 458.192 ns/op
# Warmup Iteration   3: 466.751 ns/op
# Warmup Iteration   4: 444.809 ns/op
# Warmup Iteration   5: 438.144 ns/op
Iteration   1: 444.120 ns/op
Iteration   2: 453.306 ns/op
Iteration   3: 437.267 ns/op
Iteration   4: 437.305 ns/op
Iteration   5: 440.979 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  442.595 ±(99.9%) 25.546 ns/op [Average]
  (min, avg, max) = (437.267, 442.595, 453.306), stdev = 6.634
  CI (99.9%): [417.050, 468.141] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = random, length = 10)

# Run progress: 82.65% complete, ETA 00:05:58
# Fork: 1 of 1
# Warmup Iteration   1: 496.129 ns/op
# Warmup Iteration   2: 473.230 ns/op
# Warmup Iteration   3: 462.927 ns/op
# Warmup Iteration   4: 460.030 ns/op
# Warmup Iteration   5: 453.007 ns/op
Iteration   1: 463.030 ns/op
Iteration   2: 460.237 ns/op
Iteration   3: 462.049 ns/op
Iteration   4: 459.502 ns/op
Iteration   5: 465.812 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  462.126 ±(99.9%) 9.600 ns/op [Average]
  (min, avg, max) = (459.502, 462.126, 465.812), stdev = 2.493
  CI (99.9%): [452.526, 471.726] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = random, length = 50)

# Run progress: 83.16% complete, ETA 00:05:47
# Fork: 1 of 1
# Warmup Iteration   1: 532.607 ns/op
# Warmup Iteration   2: 525.399 ns/op
# Warmup Iteration   3: 530.735 ns/op
# Warmup Iteration   4: 523.433 ns/op
# Warmup Iteration   5: 523.605 ns/op
Iteration   1: 520.303 ns/op
Iteration   2: 530.777 ns/op
Iteration   3: 547.563 ns/op
Iteration   4: 537.992 ns/op
Iteration   5: 541.928 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  535.712 ±(99.9%) 40.664 ns/op [Average]
  (min, avg, max) = (520.303, 535.712, 547.563), stdev = 10.560
  CI (99.9%): [495.048, 576.377] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = random, length = 100)

# Run progress: 83.67% complete, ETA 00:05:37
# Fork: 1 of 1
# Warmup Iteration   1: 691.418 ns/op
# Warmup Iteration   2: 663.635 ns/op
# Warmup Iteration   3: 584.918 ns/op
# Warmup Iteration   4: 578.137 ns/op
# Warmup Iteration   5: 572.028 ns/op
Iteration   1: 571.080 ns/op
Iteration   2: 575.869 ns/op
Iteration   3: 585.127 ns/op
Iteration   4: 580.517 ns/op
Iteration   5: 582.928 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  579.104 ±(99.9%) 21.761 ns/op [Average]
  (min, avg, max) = (571.080, 579.104, 585.127), stdev = 5.651
  CI (99.9%): [557.344, 600.865] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = random, length = 500)

# Run progress: 84.18% complete, ETA 00:05:26
# Fork: 1 of 1
# Warmup Iteration   1: 1171.212 ns/op
# Warmup Iteration   2: 1089.653 ns/op
# Warmup Iteration   3: 1064.670 ns/op
# Warmup Iteration   4: 1027.459 ns/op
# Warmup Iteration   5: 989.651 ns/op
Iteration   1: 992.345 ns/op
Iteration   2: 992.481 ns/op
Iteration   3: 1011.329 ns/op
Iteration   4: 998.635 ns/op
Iteration   5: 1035.000 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  1005.958 ±(99.9%) 69.227 ns/op [Average]
  (min, avg, max) = (992.345, 1005.958, 1035.000), stdev = 17.978
  CI (99.9%): [936.731, 1075.185] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = random, length = 1000)

# Run progress: 84.69% complete, ETA 00:05:15
# Fork: 1 of 1
# Warmup Iteration   1: 1841.331 ns/op
# Warmup Iteration   2: 1728.465 ns/op
# Warmup Iteration   3: 1619.600 ns/op
# Warmup Iteration   4: 1599.822 ns/op
# Warmup Iteration   5: 1583.262 ns/op
Iteration   1: 1541.918 ns/op
Iteration   2: 1595.434 ns/op
Iteration   3: 1559.497 ns/op
Iteration   4: 1566.056 ns/op
Iteration   5: 1596.289 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  1571.839 ±(99.9%) 91.032 ns/op [Average]
  (min, avg, max) = (1541.918, 1571.839, 1596.289), stdev = 23.641
  CI (99.9%): [1480.807, 1662.871] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2
# Parameters: (dataset = random, length = 10000)

# Run progress: 85.20% complete, ETA 00:05:05
# Fork: 1 of 1
# Warmup Iteration   1: 14903.825 ns/op
# Warmup Iteration   2: 12401.049 ns/op
# Warmup Iteration   3: 11297.565 ns/op
# Warmup Iteration   4: 11398.684 ns/op
# Warmup Iteration   5: 11744.992 ns/op
Iteration   1: 11617.699 ns/op
Iteration   2: 11722.085 ns/op
Iteration   3: 11776.167 ns/op
Iteration   4: 12121.988 ns/op
Iteration   5: 11522.504 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky2":
  11752.088 ±(99.9%) 880.348 ns/op [Average]
  (min, avg, max) = (11522.504, 11752.088, 12121.988), stdev = 228.624
  CI (99.9%): [10871.740, 12632.437] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = fixed, length = 1)

# Run progress: 85.71% complete, ETA 00:04:54
# Fork: 1 of 1
# Warmup Iteration   1: 82.437 ns/op
# Warmup Iteration   2: 81.263 ns/op
# Warmup Iteration   3: 73.412 ns/op
# Warmup Iteration   4: 75.029 ns/op
# Warmup Iteration   5: 73.569 ns/op
Iteration   1: 75.222 ns/op
Iteration   2: 74.032 ns/op
Iteration   3: 73.469 ns/op
Iteration   4: 75.350 ns/op
Iteration   5: 74.750 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  74.565 ±(99.9%) 3.085 ns/op [Average]
  (min, avg, max) = (73.469, 74.565, 75.350), stdev = 0.801
  CI (99.9%): [71.480, 77.649] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = fixed, length = 10)

# Run progress: 86.22% complete, ETA 00:04:44
# Fork: 1 of 1
# Warmup Iteration   1: 98.070 ns/op
# Warmup Iteration   2: 95.865 ns/op
# Warmup Iteration   3: 90.602 ns/op
# Warmup Iteration   4: 89.835 ns/op
# Warmup Iteration   5: 89.738 ns/op
Iteration   1: 90.923 ns/op
Iteration   2: 91.284 ns/op
Iteration   3: 90.086 ns/op
Iteration   4: 89.586 ns/op
Iteration   5: 90.298 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  90.435 ±(99.9%) 2.598 ns/op [Average]
  (min, avg, max) = (89.586, 90.435, 91.284), stdev = 0.675
  CI (99.9%): [87.838, 93.033] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = fixed, length = 50)

# Run progress: 86.73% complete, ETA 00:04:33
# Fork: 1 of 1
# Warmup Iteration   1: 145.032 ns/op
# Warmup Iteration   2: 138.292 ns/op
# Warmup Iteration   3: 136.383 ns/op
# Warmup Iteration   4: 125.647 ns/op
# Warmup Iteration   5: 125.087 ns/op
Iteration   1: 124.772 ns/op
Iteration   2: 123.458 ns/op
Iteration   3: 126.383 ns/op
Iteration   4: 124.479 ns/op
Iteration   5: 125.277 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  124.874 ±(99.9%) 4.135 ns/op [Average]
  (min, avg, max) = (123.458, 124.874, 126.383), stdev = 1.074
  CI (99.9%): [120.739, 129.009] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = fixed, length = 100)

# Run progress: 87.24% complete, ETA 00:04:23
# Fork: 1 of 1
# Warmup Iteration   1: 206.871 ns/op
# Warmup Iteration   2: 189.999 ns/op
# Warmup Iteration   3: 172.583 ns/op
# Warmup Iteration   4: 184.348 ns/op
# Warmup Iteration   5: 177.542 ns/op
Iteration   1: 172.394 ns/op
Iteration   2: 177.947 ns/op
Iteration   3: 172.870 ns/op
Iteration   4: 174.108 ns/op
Iteration   5: 173.973 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  174.259 ±(99.9%) 8.418 ns/op [Average]
  (min, avg, max) = (172.394, 174.259, 177.947), stdev = 2.186
  CI (99.9%): [165.841, 182.677] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = fixed, length = 500)

# Run progress: 87.76% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 774.432 ns/op
# Warmup Iteration   2: 631.504 ns/op
# Warmup Iteration   3: 620.023 ns/op
# Warmup Iteration   4: 595.436 ns/op
# Warmup Iteration   5: 601.374 ns/op
Iteration   1: 599.662 ns/op
Iteration   2: 602.915 ns/op
Iteration   3: 600.071 ns/op
Iteration   4: 616.779 ns/op
Iteration   5: 597.117 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  603.309 ±(99.9%) 30.057 ns/op [Average]
  (min, avg, max) = (597.117, 603.309, 616.779), stdev = 7.806
  CI (99.9%): [573.252, 633.366] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 88.27% complete, ETA 00:04:02
# Fork: 1 of 1
# Warmup Iteration   1: 1446.782 ns/op
# Warmup Iteration   2: 1277.990 ns/op
# Warmup Iteration   3: 1190.133 ns/op
# Warmup Iteration   4: 1156.317 ns/op
# Warmup Iteration   5: 1187.278 ns/op
Iteration   1: 1150.200 ns/op
Iteration   2: 1158.858 ns/op
Iteration   3: 1193.352 ns/op
Iteration   4: 1174.570 ns/op
Iteration   5: 1163.048 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  1168.006 ±(99.9%) 64.170 ns/op [Average]
  (min, avg, max) = (1150.200, 1168.006, 1193.352), stdev = 16.665
  CI (99.9%): [1103.836, 1232.175] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 88.78% complete, ETA 00:03:51
# Fork: 1 of 1
# Warmup Iteration   1: 14093.081 ns/op
# Warmup Iteration   2: 11749.499 ns/op
# Warmup Iteration   3: 11010.778 ns/op
# Warmup Iteration   4: 11253.125 ns/op
# Warmup Iteration   5: 10997.782 ns/op
Iteration   1: 11044.093 ns/op
Iteration   2: 10702.348 ns/op
Iteration   3: 10779.073 ns/op
Iteration   4: 10972.372 ns/op
Iteration   5: 10817.267 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  10863.031 ±(99.9%) 543.545 ns/op [Average]
  (min, avg, max) = (10702.348, 10863.031, 11044.093), stdev = 141.157
  CI (99.9%): [10319.485, 11406.576] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = random, length = 1)

# Run progress: 89.29% complete, ETA 00:03:41
# Fork: 1 of 1
# Warmup Iteration   1: 91.436 ns/op
# Warmup Iteration   2: 79.957 ns/op
# Warmup Iteration   3: 77.331 ns/op
# Warmup Iteration   4: 78.305 ns/op
# Warmup Iteration   5: 75.018 ns/op
Iteration   1: 75.109 ns/op
Iteration   2: 74.886 ns/op
Iteration   3: 75.757 ns/op
Iteration   4: 75.423 ns/op
Iteration   5: 76.928 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  75.621 ±(99.9%) 3.086 ns/op [Average]
  (min, avg, max) = (74.886, 75.621, 76.928), stdev = 0.801
  CI (99.9%): [72.534, 78.707] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = random, length = 10)

# Run progress: 89.80% complete, ETA 00:03:30
# Fork: 1 of 1
# Warmup Iteration   1: 100.716 ns/op
# Warmup Iteration   2: 97.722 ns/op
# Warmup Iteration   3: 97.136 ns/op
# Warmup Iteration   4: 88.995 ns/op
# Warmup Iteration   5: 88.096 ns/op
Iteration   1: 89.309 ns/op
Iteration   2: 88.837 ns/op
Iteration   3: 90.015 ns/op
Iteration   4: 88.928 ns/op
Iteration   5: 94.403 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  90.298 ±(99.9%) 9.014 ns/op [Average]
  (min, avg, max) = (88.837, 90.298, 94.403), stdev = 2.341
  CI (99.9%): [81.284, 99.313] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = random, length = 50)

# Run progress: 90.31% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 153.631 ns/op
# Warmup Iteration   2: 140.001 ns/op
# Warmup Iteration   3: 138.015 ns/op
# Warmup Iteration   4: 124.523 ns/op
# Warmup Iteration   5: 123.639 ns/op
Iteration   1: 123.376 ns/op
Iteration   2: 125.745 ns/op
Iteration   3: 125.660 ns/op
Iteration   4: 125.376 ns/op
Iteration   5: 132.381 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  126.508 ±(99.9%) 13.184 ns/op [Average]
  (min, avg, max) = (123.376, 126.508, 132.381), stdev = 3.424
  CI (99.9%): [113.324, 139.691] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = random, length = 100)

# Run progress: 90.82% complete, ETA 00:03:09
# Fork: 1 of 1
# Warmup Iteration   1: 207.127 ns/op
# Warmup Iteration   2: 192.617 ns/op
# Warmup Iteration   3: 171.347 ns/op
# Warmup Iteration   4: 177.611 ns/op
# Warmup Iteration   5: 179.271 ns/op
Iteration   1: 169.878 ns/op
Iteration   2: 172.117 ns/op
Iteration   3: 174.190 ns/op
Iteration   4: 176.165 ns/op
Iteration   5: 185.436 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  175.557 ±(99.9%) 23.097 ns/op [Average]
  (min, avg, max) = (169.878, 175.557, 185.436), stdev = 5.998
  CI (99.9%): [152.460, 198.654] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = random, length = 500)

# Run progress: 91.33% complete, ETA 00:02:59
# Fork: 1 of 1
# Warmup Iteration   1: 727.774 ns/op
# Warmup Iteration   2: 639.023 ns/op
# Warmup Iteration   3: 593.133 ns/op
# Warmup Iteration   4: 615.929 ns/op
# Warmup Iteration   5: 618.714 ns/op
Iteration   1: 589.777 ns/op
Iteration   2: 604.360 ns/op
Iteration   3: 590.212 ns/op
Iteration   4: 602.363 ns/op
Iteration   5: 607.916 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  598.926 ±(99.9%) 32.320 ns/op [Average]
  (min, avg, max) = (589.777, 598.926, 607.916), stdev = 8.393
  CI (99.9%): [566.605, 631.246] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = random, length = 1000)

# Run progress: 91.84% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 1484.582 ns/op
# Warmup Iteration   2: 1229.842 ns/op
# Warmup Iteration   3: 1190.915 ns/op
# Warmup Iteration   4: 1177.315 ns/op
# Warmup Iteration   5: 1143.412 ns/op
Iteration   1: 1158.875 ns/op
Iteration   2: 1171.137 ns/op
Iteration   3: 1167.821 ns/op
Iteration   4: 1169.024 ns/op
Iteration   5: 1177.992 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  1168.970 ±(99.9%) 26.491 ns/op [Average]
  (min, avg, max) = (1158.875, 1168.970, 1177.992), stdev = 6.880
  CI (99.9%): [1142.479, 1195.460] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3
# Parameters: (dataset = random, length = 10000)

# Run progress: 92.35% complete, ETA 00:02:38
# Fork: 1 of 1
# Warmup Iteration   1: 15196.802 ns/op
# Warmup Iteration   2: 11592.335 ns/op
# Warmup Iteration   3: 11074.876 ns/op
# Warmup Iteration   4: 11354.589 ns/op
# Warmup Iteration   5: 11293.233 ns/op
Iteration   1: 11003.136 ns/op
Iteration   2: 11042.668 ns/op
Iteration   3: 10986.378 ns/op
Iteration   4: 11274.669 ns/op
Iteration   5: 11422.473 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniBase64_url_encodeHacky3":
  11145.865 ±(99.9%) 744.578 ns/op [Average]
  (min, avg, max) = (10986.378, 11145.865, 11422.473), stdev = 193.365
  CI (99.9%): [10401.287, 11890.443] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = fixed, length = 1)

# Run progress: 92.86% complete, ETA 00:02:27
# Fork: 1 of 1
# Warmup Iteration   1: 1141.429 ns/op
# Warmup Iteration   2: 1081.531 ns/op
# Warmup Iteration   3: 1101.293 ns/op
# Warmup Iteration   4: 1091.446 ns/op
# Warmup Iteration   5: 1052.250 ns/op
Iteration   1: 1068.923 ns/op
Iteration   2: 1064.232 ns/op
Iteration   3: 1075.225 ns/op
Iteration   4: 1060.155 ns/op
Iteration   5: 1098.208 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  1073.349 ±(99.9%) 57.704 ns/op [Average]
  (min, avg, max) = (1060.155, 1073.349, 1098.208), stdev = 14.986
  CI (99.9%): [1015.644, 1131.053] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = fixed, length = 10)

# Run progress: 93.37% complete, ETA 00:02:16
# Fork: 1 of 1
# Warmup Iteration   1: 1140.655 ns/op
# Warmup Iteration   2: 1118.596 ns/op
# Warmup Iteration   3: 1104.583 ns/op
# Warmup Iteration   4: 1121.652 ns/op
# Warmup Iteration   5: 1125.740 ns/op
Iteration   1: 1097.388 ns/op
Iteration   2: 1101.764 ns/op
Iteration   3: 1105.834 ns/op
Iteration   4: 1103.440 ns/op
Iteration   5: 1118.932 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  1105.472 ±(99.9%) 31.315 ns/op [Average]
  (min, avg, max) = (1097.388, 1105.472, 1118.932), stdev = 8.132
  CI (99.9%): [1074.157, 1136.786] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = fixed, length = 50)

# Run progress: 93.88% complete, ETA 00:02:06
# Fork: 1 of 1
# Warmup Iteration   1: 1294.552 ns/op
# Warmup Iteration   2: 1272.642 ns/op
# Warmup Iteration   3: 1259.251 ns/op
# Warmup Iteration   4: 1292.675 ns/op
# Warmup Iteration   5: 1276.230 ns/op
Iteration   1: 1246.804 ns/op
Iteration   2: 1248.150 ns/op
Iteration   3: 1281.960 ns/op
Iteration   4: 1242.779 ns/op
Iteration   5: 1258.265 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  1255.592 ±(99.9%) 60.860 ns/op [Average]
  (min, avg, max) = (1242.779, 1255.592, 1281.960), stdev = 15.805
  CI (99.9%): [1194.732, 1316.451] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = fixed, length = 100)

# Run progress: 94.39% complete, ETA 00:01:55
# Fork: 1 of 1
# Warmup Iteration   1: 1580.089 ns/op
# Warmup Iteration   2: 1535.374 ns/op
# Warmup Iteration   3: 1536.392 ns/op
# Warmup Iteration   4: 1512.097 ns/op
# Warmup Iteration   5: 1495.201 ns/op
Iteration   1: 1525.710 ns/op
Iteration   2: 1539.151 ns/op
Iteration   3: 1534.365 ns/op
Iteration   4: 1575.726 ns/op
Iteration   5: 1529.865 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  1540.964 ±(99.9%) 77.279 ns/op [Average]
  (min, avg, max) = (1525.710, 1540.964, 1575.726), stdev = 20.069
  CI (99.9%): [1463.684, 1618.243] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = fixed, length = 500)

# Run progress: 94.90% complete, ETA 00:01:45
# Fork: 1 of 1
# Warmup Iteration   1: 3301.557 ns/op
# Warmup Iteration   2: 3330.377 ns/op
# Warmup Iteration   3: 3248.707 ns/op
# Warmup Iteration   4: 3307.300 ns/op
# Warmup Iteration   5: 3247.168 ns/op
Iteration   1: 3211.905 ns/op
Iteration   2: 3276.000 ns/op
Iteration   3: 3422.669 ns/op
Iteration   4: 3234.760 ns/op
Iteration   5: 3183.366 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  3265.740 ±(99.9%) 362.122 ns/op [Average]
  (min, avg, max) = (3183.366, 3265.740, 3422.669), stdev = 94.042
  CI (99.9%): [2903.618, 3627.862] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = fixed, length = 1000)

# Run progress: 95.41% complete, ETA 00:01:34
# Fork: 1 of 1
# Warmup Iteration   1: 5630.511 ns/op
# Warmup Iteration   2: 5681.913 ns/op
# Warmup Iteration   3: 5459.039 ns/op
# Warmup Iteration   4: 5472.089 ns/op
# Warmup Iteration   5: 5505.843 ns/op
Iteration   1: 5522.830 ns/op
Iteration   2: 5560.883 ns/op
Iteration   3: 5510.114 ns/op
Iteration   4: 5518.875 ns/op
Iteration   5: 5483.368 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  5519.214 ±(99.9%) 107.494 ns/op [Average]
  (min, avg, max) = (5483.368, 5519.214, 5560.883), stdev = 27.916
  CI (99.9%): [5411.720, 5626.708] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = fixed, length = 10000)

# Run progress: 95.92% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 47673.802 ns/op
# Warmup Iteration   2: 45553.853 ns/op
# Warmup Iteration   3: 44146.714 ns/op
# Warmup Iteration   4: 44700.300 ns/op
# Warmup Iteration   5: 44331.482 ns/op
Iteration   1: 43570.815 ns/op
Iteration   2: 47236.899 ns/op
Iteration   3: 44054.356 ns/op
Iteration   4: 44014.851 ns/op
Iteration   5: 44973.174 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  44770.019 ±(99.9%) 5661.662 ns/op [Average]
  (min, avg, max) = (43570.815, 44770.019, 47236.899), stdev = 1470.316
  CI (99.9%): [39108.357, 50431.681] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = random, length = 1)

# Run progress: 96.43% complete, ETA 00:01:13
# Fork: 1 of 1
# Warmup Iteration   1: 1079.356 ns/op
# Warmup Iteration   2: 1067.904 ns/op
# Warmup Iteration   3: 1016.352 ns/op
# Warmup Iteration   4: 1056.018 ns/op
# Warmup Iteration   5: 1065.929 ns/op
Iteration   1: 1091.307 ns/op
Iteration   2: 1064.619 ns/op
Iteration   3: 1044.091 ns/op
Iteration   4: 1026.209 ns/op
Iteration   5: 1063.953 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  1058.036 ±(99.9%) 94.179 ns/op [Average]
  (min, avg, max) = (1026.209, 1058.036, 1091.307), stdev = 24.458
  CI (99.9%): [963.857, 1152.215] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = random, length = 10)

# Run progress: 96.94% complete, ETA 00:01:03
# Fork: 1 of 1
# Warmup Iteration   1: 1127.639 ns/op
# Warmup Iteration   2: 1091.402 ns/op
# Warmup Iteration   3: 1099.668 ns/op
# Warmup Iteration   4: 1102.765 ns/op
# Warmup Iteration   5: 1087.568 ns/op
Iteration   1: 1097.004 ns/op
Iteration   2: 1078.370 ns/op
Iteration   3: 1084.699 ns/op
Iteration   4: 1082.691 ns/op
Iteration   5: 1078.886 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  1084.330 ±(99.9%) 29.112 ns/op [Average]
  (min, avg, max) = (1078.370, 1084.330, 1097.004), stdev = 7.560
  CI (99.9%): [1055.218, 1113.442] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = random, length = 50)

# Run progress: 97.45% complete, ETA 00:00:52
# Fork: 1 of 1
# Warmup Iteration   1: 1383.817 ns/op
# Warmup Iteration   2: 1333.962 ns/op
# Warmup Iteration   3: 1302.543 ns/op
# Warmup Iteration   4: 1318.611 ns/op
# Warmup Iteration   5: 1454.807 ns/op
Iteration   1: 1321.055 ns/op
Iteration   2: 1327.716 ns/op
Iteration   3: 1330.392 ns/op
Iteration   4: 1306.059 ns/op
Iteration   5: 1308.592 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  1318.763 ±(99.9%) 42.422 ns/op [Average]
  (min, avg, max) = (1306.059, 1318.763, 1330.392), stdev = 11.017
  CI (99.9%): [1276.341, 1361.185] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = random, length = 100)

# Run progress: 97.96% complete, ETA 00:00:42
# Fork: 1 of 1
# Warmup Iteration   1: 1540.603 ns/op
# Warmup Iteration   2: 1532.355 ns/op
# Warmup Iteration   3: 1488.080 ns/op
# Warmup Iteration   4: 1498.820 ns/op
# Warmup Iteration   5: 1512.257 ns/op
Iteration   1: 1515.238 ns/op
Iteration   2: 1499.636 ns/op
Iteration   3: 1488.798 ns/op
Iteration   4: 1485.967 ns/op
Iteration   5: 1513.712 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  1500.670 ±(99.9%) 52.392 ns/op [Average]
  (min, avg, max) = (1485.967, 1500.670, 1515.238), stdev = 13.606
  CI (99.9%): [1448.278, 1553.062] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = random, length = 500)

# Run progress: 98.47% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 3348.944 ns/op
# Warmup Iteration   2: 3352.132 ns/op
# Warmup Iteration   3: 3299.156 ns/op
# Warmup Iteration   4: 3259.205 ns/op
# Warmup Iteration   5: 3243.406 ns/op
Iteration   1: 3262.072 ns/op
Iteration   2: 3193.672 ns/op
Iteration   3: 3201.929 ns/op
Iteration   4: 3204.590 ns/op
Iteration   5: 3373.850 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  3247.223 ±(99.9%) 291.937 ns/op [Average]
  (min, avg, max) = (3193.672, 3247.223, 3373.850), stdev = 75.815
  CI (99.9%): [2955.285, 3539.160] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = random, length = 1000)

# Run progress: 98.98% complete, ETA 00:00:21
# Fork: 1 of 1
# Warmup Iteration   1: 5643.133 ns/op
# Warmup Iteration   2: 5871.436 ns/op
# Warmup Iteration   3: 5459.449 ns/op
# Warmup Iteration   4: 5365.812 ns/op
# Warmup Iteration   5: 5514.576 ns/op
Iteration   1: 5379.861 ns/op
Iteration   2: 5420.238 ns/op
Iteration   3: 5462.586 ns/op
Iteration   4: 5352.709 ns/op
Iteration   5: 5393.002 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  5401.679 ±(99.9%) 161.124 ns/op [Average]
  (min, avg, max) = (5352.709, 5401.679, 5462.586), stdev = 41.843
  CI (99.9%): [5240.555, 5562.803] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G -Djava.library.path=bazel-bin/rs/base64:rs/base64
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode
# Parameters: (dataset = random, length = 10000)

# Run progress: 99.49% complete, ETA 00:00:10
# Fork: 1 of 1
# Warmup Iteration   1: 50617.650 ns/op
# Warmup Iteration   2: 48251.642 ns/op
# Warmup Iteration   3: 44502.764 ns/op
# Warmup Iteration   4: 43236.944 ns/op
# Warmup Iteration   5: 44910.350 ns/op
Iteration   1: 44078.302 ns/op
Iteration   2: 44382.108 ns/op
Iteration   3: 44059.234 ns/op
Iteration   4: 44014.068 ns/op
Iteration   5: 43966.707 ns/op


Result "com.komanov.jwt.base64.jni.jmh.Base64JniBenchmarks.jniCrypto2_url_decode":
  44100.084 ±(99.9%) 629.404 ns/op [Average]
  (min, avg, max) = (43966.707, 44100.084, 44382.108), stdev = 163.454
  CI (99.9%): [43470.680, 44729.487] (assumes normal distribution)


# Run complete. Total time: 00:34:24

Benchmark                                       (dataset)  (length)  Mode  Cnt      Score      Error  Units
Base64JniBenchmarks.jdk_url_decode                  fixed         1  avgt    5     55.762 ±    2.706  ns/op
Base64JniBenchmarks.jdk_url_decode                  fixed        10  avgt    5     78.887 ±    2.286  ns/op
Base64JniBenchmarks.jdk_url_decode                  fixed        50  avgt    5    206.380 ±    5.271  ns/op
Base64JniBenchmarks.jdk_url_decode                  fixed       100  avgt    5    363.320 ±    7.999  ns/op
Base64JniBenchmarks.jdk_url_decode                  fixed       500  avgt    5   1644.276 ±   77.287  ns/op
Base64JniBenchmarks.jdk_url_decode                  fixed      1000  avgt    5   3218.729 ±   80.604  ns/op
Base64JniBenchmarks.jdk_url_decode                  fixed     10000  avgt    5  30920.377 ± 1673.656  ns/op
Base64JniBenchmarks.jdk_url_decode                 random         1  avgt    5     54.958 ±    1.480  ns/op
Base64JniBenchmarks.jdk_url_decode                 random        10  avgt    5     79.664 ±    3.340  ns/op
Base64JniBenchmarks.jdk_url_decode                 random        50  avgt    5    208.778 ±   10.278  ns/op
Base64JniBenchmarks.jdk_url_decode                 random       100  avgt    5    357.864 ±   17.902  ns/op
Base64JniBenchmarks.jdk_url_decode                 random       500  avgt    5   1641.776 ±   39.782  ns/op
Base64JniBenchmarks.jdk_url_decode                 random      1000  avgt    5   3211.411 ±  112.705  ns/op
Base64JniBenchmarks.jdk_url_decode                 random     10000  avgt    5  30077.743 ±  976.700  ns/op
Base64JniBenchmarks.jdk_url_encode                  fixed         1  avgt    5     51.996 ±    1.481  ns/op
Base64JniBenchmarks.jdk_url_encode                  fixed        10  avgt    5     80.608 ±    2.528  ns/op
Base64JniBenchmarks.jdk_url_encode                  fixed        50  avgt    5    168.281 ±   13.844  ns/op
Base64JniBenchmarks.jdk_url_encode                  fixed       100  avgt    5    242.839 ±   37.131  ns/op
Base64JniBenchmarks.jdk_url_encode                  fixed       500  avgt    5    956.545 ±  163.888  ns/op
Base64JniBenchmarks.jdk_url_encode                  fixed      1000  avgt    5   1830.858 ±   83.068  ns/op
Base64JniBenchmarks.jdk_url_encode                  fixed     10000  avgt    5  18013.941 ± 1448.951  ns/op
Base64JniBenchmarks.jdk_url_encode                 random         1  avgt    5     52.380 ±    1.649  ns/op
Base64JniBenchmarks.jdk_url_encode                 random        10  avgt    5     81.471 ±    4.604  ns/op
Base64JniBenchmarks.jdk_url_encode                 random        50  avgt    5    165.760 ±   11.954  ns/op
Base64JniBenchmarks.jdk_url_encode                 random       100  avgt    5    238.033 ±   12.249  ns/op
Base64JniBenchmarks.jdk_url_encode                 random       500  avgt    5    928.737 ±   56.561  ns/op
Base64JniBenchmarks.jdk_url_encode                 random      1000  avgt    5   1842.205 ±   60.584  ns/op
Base64JniBenchmarks.jdk_url_encode                 random     10000  avgt    5  17838.089 ± 1017.900  ns/op
Base64JniBenchmarks.jniBase64_url_decode            fixed         1  avgt    5   1359.914 ±   50.142  ns/op
Base64JniBenchmarks.jniBase64_url_decode            fixed        10  avgt    5   1342.263 ±   43.007  ns/op
Base64JniBenchmarks.jniBase64_url_decode            fixed        50  avgt    5   1438.397 ±   59.478  ns/op
Base64JniBenchmarks.jniBase64_url_decode            fixed       100  avgt    5   1570.149 ±   24.787  ns/op
Base64JniBenchmarks.jniBase64_url_decode            fixed       500  avgt    5   2094.489 ±   27.314  ns/op
Base64JniBenchmarks.jniBase64_url_decode            fixed      1000  avgt    5   2803.558 ±   35.566  ns/op
Base64JniBenchmarks.jniBase64_url_decode            fixed     10000  avgt    5  14326.627 ± 2464.034  ns/op
Base64JniBenchmarks.jniBase64_url_decode           random         1  avgt    5   1353.840 ±   49.498  ns/op
Base64JniBenchmarks.jniBase64_url_decode           random        10  avgt    5   1386.189 ±  263.579  ns/op
Base64JniBenchmarks.jniBase64_url_decode           random        50  avgt    5   1452.315 ±  194.202  ns/op
Base64JniBenchmarks.jniBase64_url_decode           random       100  avgt    5   1645.256 ±   67.734  ns/op
Base64JniBenchmarks.jniBase64_url_decode           random       500  avgt    5   2203.319 ±   76.885  ns/op
Base64JniBenchmarks.jniBase64_url_decode           random      1000  avgt    5   3033.358 ±  151.950  ns/op
Base64JniBenchmarks.jniBase64_url_decode           random     10000  avgt    5  14109.137 ±  399.669  ns/op
Base64JniBenchmarks.jniBase64_url_decode1           fixed         1  avgt    5   1239.408 ±   46.130  ns/op
Base64JniBenchmarks.jniBase64_url_decode1           fixed        10  avgt    5   1255.764 ±   64.012  ns/op
Base64JniBenchmarks.jniBase64_url_decode1           fixed        50  avgt    5   1314.913 ±   87.197  ns/op
Base64JniBenchmarks.jniBase64_url_decode1           fixed       100  avgt    5   1389.107 ±   36.270  ns/op
Base64JniBenchmarks.jniBase64_url_decode1           fixed       500  avgt    5   1928.243 ±  166.578  ns/op
Base64JniBenchmarks.jniBase64_url_decode1           fixed      1000  avgt    5   2862.455 ±  277.302  ns/op
Base64JniBenchmarks.jniBase64_url_decode1           fixed     10000  avgt    5  13923.686 ±  448.701  ns/op
Base64JniBenchmarks.jniBase64_url_decode1          random         1  avgt    5   1241.341 ±   38.874  ns/op
Base64JniBenchmarks.jniBase64_url_decode1          random        10  avgt    5   1245.447 ±   73.772  ns/op
Base64JniBenchmarks.jniBase64_url_decode1          random        50  avgt    5   1357.490 ±  186.252  ns/op
Base64JniBenchmarks.jniBase64_url_decode1          random       100  avgt    5   1373.266 ±   39.880  ns/op
Base64JniBenchmarks.jniBase64_url_decode1          random       500  avgt    5   1943.492 ±  168.560  ns/op
Base64JniBenchmarks.jniBase64_url_decode1          random      1000  avgt    5   2775.855 ±  107.155  ns/op
Base64JniBenchmarks.jniBase64_url_decode1          random     10000  avgt    5  13737.529 ±  577.610  ns/op
Base64JniBenchmarks.jniBase64_url_decode2           fixed         1  avgt    5   1080.523 ±   73.971  ns/op
Base64JniBenchmarks.jniBase64_url_decode2           fixed        10  avgt    5   1100.560 ±   89.388  ns/op
Base64JniBenchmarks.jniBase64_url_decode2           fixed        50  avgt    5   1160.522 ±   41.504  ns/op
Base64JniBenchmarks.jniBase64_url_decode2           fixed       100  avgt    5   1258.151 ±  106.347  ns/op
Base64JniBenchmarks.jniBase64_url_decode2           fixed       500  avgt    5   1802.509 ±  470.338  ns/op
Base64JniBenchmarks.jniBase64_url_decode2           fixed      1000  avgt    5   2518.853 ±  175.085  ns/op
Base64JniBenchmarks.jniBase64_url_decode2           fixed     10000  avgt    5  13273.261 ±  255.101  ns/op
Base64JniBenchmarks.jniBase64_url_decode2          random         1  avgt    5   1045.050 ±   64.343  ns/op
Base64JniBenchmarks.jniBase64_url_decode2          random        10  avgt    5   1023.784 ±   16.792  ns/op
Base64JniBenchmarks.jniBase64_url_decode2          random        50  avgt    5   1125.260 ±  169.076  ns/op
Base64JniBenchmarks.jniBase64_url_decode2          random       100  avgt    5   1181.755 ±    8.370  ns/op
Base64JniBenchmarks.jniBase64_url_decode2          random       500  avgt    5   1678.573 ±   24.504  ns/op
Base64JniBenchmarks.jniBase64_url_decode2          random      1000  avgt    5   2490.356 ±  125.607  ns/op
Base64JniBenchmarks.jniBase64_url_decode2          random     10000  avgt    5  13666.645 ± 1261.318  ns/op
Base64JniBenchmarks.jniBase64_url_decode3           fixed         1  avgt    5    974.720 ±    4.033  ns/op
Base64JniBenchmarks.jniBase64_url_decode3           fixed        10  avgt    5    982.208 ±  130.741  ns/op
Base64JniBenchmarks.jniBase64_url_decode3           fixed        50  avgt    5   1137.744 ±  149.323  ns/op
Base64JniBenchmarks.jniBase64_url_decode3           fixed       100  avgt    5   1132.488 ±   65.401  ns/op
Base64JniBenchmarks.jniBase64_url_decode3           fixed       500  avgt    5   1705.976 ±  679.160  ns/op
Base64JniBenchmarks.jniBase64_url_decode3           fixed      1000  avgt    5   2334.055 ±  109.024  ns/op
Base64JniBenchmarks.jniBase64_url_decode3           fixed     10000  avgt    5  12933.392 ± 1609.792  ns/op
Base64JniBenchmarks.jniBase64_url_decode3          random         1  avgt    5   1028.261 ±   47.003  ns/op
Base64JniBenchmarks.jniBase64_url_decode3          random        10  avgt    5   1016.709 ±   53.928  ns/op
Base64JniBenchmarks.jniBase64_url_decode3          random        50  avgt    5   1097.401 ±   36.862  ns/op
Base64JniBenchmarks.jniBase64_url_decode3          random       100  avgt    5   1186.895 ±   26.080  ns/op
Base64JniBenchmarks.jniBase64_url_decode3          random       500  avgt    5   1746.492 ±  146.131  ns/op
Base64JniBenchmarks.jniBase64_url_decode3          random      1000  avgt    5   2419.203 ±   81.345  ns/op
Base64JniBenchmarks.jniBase64_url_decode3          random     10000  avgt    5  13301.838 ± 1016.425  ns/op
Base64JniBenchmarks.jniBase64_url_decode4           fixed         1  avgt    5   1039.588 ±   81.606  ns/op
Base64JniBenchmarks.jniBase64_url_decode4           fixed        10  avgt    5   1103.549 ±  170.419  ns/op
Base64JniBenchmarks.jniBase64_url_decode4           fixed        50  avgt    5   1170.099 ±  122.798  ns/op
Base64JniBenchmarks.jniBase64_url_decode4           fixed       100  avgt    5   1255.370 ±   90.020  ns/op
Base64JniBenchmarks.jniBase64_url_decode4           fixed       500  avgt    5   1760.747 ±  114.111  ns/op
Base64JniBenchmarks.jniBase64_url_decode4           fixed      1000  avgt    5   2438.814 ±   83.616  ns/op
Base64JniBenchmarks.jniBase64_url_decode4           fixed     10000  avgt    5  13921.154 ±  751.245  ns/op
Base64JniBenchmarks.jniBase64_url_decode4          random         1  avgt    5   1029.285 ±   60.364  ns/op
Base64JniBenchmarks.jniBase64_url_decode4          random        10  avgt    5   1059.320 ±   46.049  ns/op
Base64JniBenchmarks.jniBase64_url_decode4          random        50  avgt    5   1194.498 ±  130.724  ns/op
Base64JniBenchmarks.jniBase64_url_decode4          random       100  avgt    5   1233.217 ±   29.024  ns/op
Base64JniBenchmarks.jniBase64_url_decode4          random       500  avgt    5   1758.393 ±   33.885  ns/op
Base64JniBenchmarks.jniBase64_url_decode4          random      1000  avgt    5   2569.563 ±  421.255  ns/op
Base64JniBenchmarks.jniBase64_url_decode4          random     10000  avgt    5  14565.153 ± 3364.303  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1      fixed         1  avgt    5    580.611 ±   57.620  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1      fixed        10  avgt    5    609.228 ±   40.443  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1      fixed        50  avgt    5    695.605 ±   59.090  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1      fixed       100  avgt    5    757.557 ±   59.039  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1      fixed       500  avgt    5   1248.439 ±   78.375  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1      fixed      1000  avgt    5   2035.065 ±   94.414  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1      fixed     10000  avgt    5  13014.806 ±  710.906  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1     random         1  avgt    5    556.250 ±   32.306  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1     random        10  avgt    5    603.058 ±   27.760  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1     random        50  avgt    5    675.427 ±   22.889  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1     random       100  avgt    5    757.061 ±   52.642  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1     random       500  avgt    5   1238.031 ±  112.160  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1     random      1000  avgt    5   1983.051 ±  129.701  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky1     random     10000  avgt    5  13139.282 ±  547.189  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2      fixed         1  avgt    5    495.427 ±   38.661  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2      fixed        10  avgt    5    519.606 ±   31.771  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2      fixed        50  avgt    5    608.814 ±   81.075  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2      fixed       100  avgt    5    638.473 ±   38.412  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2      fixed       500  avgt    5   1137.656 ±   92.775  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2      fixed      1000  avgt    5   1867.348 ±   91.072  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2      fixed     10000  avgt    5  12985.431 ±  782.009  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2     random         1  avgt    5    476.964 ±   88.382  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2     random        10  avgt    5    498.164 ±   20.023  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2     random        50  avgt    5    585.748 ±   59.624  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2     random       100  avgt    5    633.704 ±   31.171  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2     random       500  avgt    5   1129.088 ±   39.201  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2     random      1000  avgt    5   1914.005 ±  284.428  ns/op
Base64JniBenchmarks.jniBase64_url_decodeHacky2     random     10000  avgt    5  13102.193 ±  652.361  ns/op
Base64JniBenchmarks.jniBase64_url_encode            fixed         1  avgt    5   1372.395 ±   84.976  ns/op
Base64JniBenchmarks.jniBase64_url_encode            fixed        10  avgt    5   1413.227 ±   61.836  ns/op
Base64JniBenchmarks.jniBase64_url_encode            fixed        50  avgt    5   1454.443 ±   63.361  ns/op
Base64JniBenchmarks.jniBase64_url_encode            fixed       100  avgt    5   1623.505 ±  136.622  ns/op
Base64JniBenchmarks.jniBase64_url_encode            fixed       500  avgt    5   2167.642 ±  121.605  ns/op
Base64JniBenchmarks.jniBase64_url_encode            fixed      1000  avgt    5   2752.404 ±   89.625  ns/op
Base64JniBenchmarks.jniBase64_url_encode            fixed     10000  avgt    5  13880.318 ±  620.421  ns/op
Base64JniBenchmarks.jniBase64_url_encode           random         1  avgt    5   1412.439 ±  174.513  ns/op
Base64JniBenchmarks.jniBase64_url_encode           random        10  avgt    5   1454.844 ±  212.760  ns/op
Base64JniBenchmarks.jniBase64_url_encode           random        50  avgt    5   1475.394 ±  113.274  ns/op
Base64JniBenchmarks.jniBase64_url_encode           random       100  avgt    5   1655.992 ±  218.854  ns/op
Base64JniBenchmarks.jniBase64_url_encode           random       500  avgt    5   2254.517 ±  154.433  ns/op
Base64JniBenchmarks.jniBase64_url_encode           random      1000  avgt    5   2761.232 ±   45.961  ns/op
Base64JniBenchmarks.jniBase64_url_encode           random     10000  avgt    5  13679.945 ±  533.173  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1      fixed         1  avgt    5    545.869 ±   31.901  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1      fixed        10  avgt    5    567.514 ±   63.074  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1      fixed        50  avgt    5    621.617 ±   51.172  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1      fixed       100  avgt    5    698.782 ±  202.697  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1      fixed       500  avgt    5   1150.796 ±   60.214  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1      fixed      1000  avgt    5   1783.438 ±   75.214  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1      fixed     10000  avgt    5  11992.298 ±  756.408  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1     random         1  avgt    5    571.575 ±  101.181  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1     random        10  avgt    5    560.140 ±   31.610  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1     random        50  avgt    5    600.463 ±   36.849  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1     random       100  avgt    5    663.318 ±   44.234  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1     random       500  avgt    5   1118.089 ±   93.961  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1     random      1000  avgt    5   1760.233 ±  162.564  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky1     random     10000  avgt    5  11844.740 ±  683.930  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2      fixed         1  avgt    5    451.667 ±   28.887  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2      fixed        10  avgt    5    469.633 ±   44.125  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2      fixed        50  avgt    5    516.892 ±   56.104  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2      fixed       100  avgt    5    570.209 ±   40.390  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2      fixed       500  avgt    5   1002.869 ±  114.751  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2      fixed      1000  avgt    5   1587.594 ±   76.780  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2      fixed     10000  avgt    5  11428.297 ±  587.068  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2     random         1  avgt    5    442.595 ±   25.546  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2     random        10  avgt    5    462.126 ±    9.600  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2     random        50  avgt    5    535.712 ±   40.664  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2     random       100  avgt    5    579.104 ±   21.761  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2     random       500  avgt    5   1005.958 ±   69.227  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2     random      1000  avgt    5   1571.839 ±   91.032  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky2     random     10000  avgt    5  11752.088 ±  880.348  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3      fixed         1  avgt    5     74.565 ±    3.085  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3      fixed        10  avgt    5     90.435 ±    2.598  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3      fixed        50  avgt    5    124.874 ±    4.135  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3      fixed       100  avgt    5    174.259 ±    8.418  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3      fixed       500  avgt    5    603.309 ±   30.057  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3      fixed      1000  avgt    5   1168.006 ±   64.170  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3      fixed     10000  avgt    5  10863.031 ±  543.545  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3     random         1  avgt    5     75.621 ±    3.086  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3     random        10  avgt    5     90.298 ±    9.014  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3     random        50  avgt    5    126.508 ±   13.184  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3     random       100  avgt    5    175.557 ±   23.097  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3     random       500  avgt    5    598.926 ±   32.320  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3     random      1000  avgt    5   1168.970 ±   26.491  ns/op
Base64JniBenchmarks.jniBase64_url_encodeHacky3     random     10000  avgt    5  11145.865 ±  744.578  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode           fixed         1  avgt    5   1073.349 ±   57.704  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode           fixed        10  avgt    5   1105.472 ±   31.315  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode           fixed        50  avgt    5   1255.592 ±   60.860  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode           fixed       100  avgt    5   1540.964 ±   77.279  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode           fixed       500  avgt    5   3265.740 ±  362.122  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode           fixed      1000  avgt    5   5519.214 ±  107.494  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode           fixed     10000  avgt    5  44770.019 ± 5661.662  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode          random         1  avgt    5   1058.036 ±   94.179  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode          random        10  avgt    5   1084.330 ±   29.112  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode          random        50  avgt    5   1318.763 ±   42.422  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode          random       100  avgt    5   1500.670 ±   52.392  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode          random       500  avgt    5   3247.223 ±  291.937  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode          random      1000  avgt    5   5401.679 ±  161.124  ns/op
Base64JniBenchmarks.jniCrypto2_url_decode          random     10000  avgt    5  44100.084 ±  629.404  ns/op

Benchmark result is saved to /static/data/charts/base64-jni/jdk8.json
