# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber
# Parameters: (encoded = 1.0.0)

# Run progress: 0.00% complete, ETA 01:08:10
# Fork: 1 of 1
# Warmup Iteration   1: 16.634 ns/op
# Warmup Iteration   2: 16.053 ns/op
# Warmup Iteration   3: 17.759 ns/op
# Warmup Iteration   4: 17.742 ns/op
# Warmup Iteration   5: 17.745 ns/op
Iteration   1: 17.749 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 17.742 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.206 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 17.731 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 17.736 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber":
  17.833 ±(99.9%) 0.804 ns/op [Average]
  (min, avg, max) = (17.731, 17.833, 18.206), stdev = 0.209
  CI (99.9%): [17.029, 18.637] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber
# Parameters: (encoded = 200.200.200)

# Run progress: 0.24% complete, ETA 01:11:49
# Fork: 1 of 1
# Warmup Iteration   1: 26.420 ns/op
# Warmup Iteration   2: 25.127 ns/op
# Warmup Iteration   3: 26.490 ns/op
# Warmup Iteration   4: 26.132 ns/op
# Warmup Iteration   5: 26.147 ns/op
Iteration   1: 26.152 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.147 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.164 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.420 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.145 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber":
  26.206 ±(99.9%) 0.463 ns/op [Average]
  (min, avg, max) = (26.145, 26.206, 26.420), stdev = 0.120
  CI (99.9%): [25.743, 26.669] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 0.49% complete, ETA 01:11:25
# Fork: 1 of 1
# Warmup Iteration   1: 36.834 ns/op
# Warmup Iteration   2: 31.925 ns/op
# Warmup Iteration   3: 29.701 ns/op
# Warmup Iteration   4: 29.701 ns/op
# Warmup Iteration   5: 29.700 ns/op
Iteration   1: 29.729 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.691 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.709 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.728 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.726 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber":
  29.716 ±(99.9%) 0.062 ns/op [Average]
  (min, avg, max) = (29.691, 29.716, 29.729), stdev = 0.016
  CI (99.9%): [29.654, 29.779] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber2
# Parameters: (encoded = 1.0.0)

# Run progress: 0.73% complete, ETA 01:11:07
# Fork: 1 of 1
# Warmup Iteration   1: 16.672 ns/op
# Warmup Iteration   2: 16.018 ns/op
# Warmup Iteration   3: 17.754 ns/op
# Warmup Iteration   4: 17.758 ns/op
# Warmup Iteration   5: 17.757 ns/op
Iteration   1: 17.766 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 17.774 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.049 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.358 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 17.761 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2":
  17.942 ±(99.9%) 1.011 ns/op [Average]
  (min, avg, max) = (17.761, 17.942, 18.358), stdev = 0.263
  CI (99.9%): [16.930, 18.953] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber2
# Parameters: (encoded = 200.200.200)

# Run progress: 0.98% complete, ETA 01:10:52
# Fork: 1 of 1
# Warmup Iteration   1: 26.265 ns/op
# Warmup Iteration   2: 25.202 ns/op
# Warmup Iteration   3: 26.142 ns/op
# Warmup Iteration   4: 26.164 ns/op
# Warmup Iteration   5: 26.168 ns/op
Iteration   1: 26.141 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.184 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.156 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.140 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.143 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2":
  26.153 ±(99.9%) 0.071 ns/op [Average]
  (min, avg, max) = (26.140, 26.153, 26.184), stdev = 0.019
  CI (99.9%): [26.082, 26.224] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber2
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 1.22% complete, ETA 01:10:42
# Fork: 1 of 1
# Warmup Iteration   1: 33.812 ns/op
# Warmup Iteration   2: 31.847 ns/op
# Warmup Iteration   3: 29.829 ns/op
# Warmup Iteration   4: 29.832 ns/op
# Warmup Iteration   5: 29.845 ns/op
Iteration   1: 29.817 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.836 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.871 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.960 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.846 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2":
  29.866 ±(99.9%) 0.216 ns/op [Average]
  (min, avg, max) = (29.817, 29.866, 29.960), stdev = 0.056
  CI (99.9%): [29.650, 30.082] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber3
# Parameters: (encoded = 1.0.0)

# Run progress: 1.47% complete, ETA 01:10:31
# Fork: 1 of 1
# Warmup Iteration   1: 15.993 ns/op
# Warmup Iteration   2: 15.684 ns/op
# Warmup Iteration   3: 16.681 ns/op
# Warmup Iteration   4: 16.683 ns/op
# Warmup Iteration   5: 16.721 ns/op
Iteration   1: 16.732 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.695 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.691 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.905 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.680 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3":
  16.741 ±(99.9%) 0.362 ns/op [Average]
  (min, avg, max) = (16.680, 16.741, 16.905), stdev = 0.094
  CI (99.9%): [16.379, 17.102] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber3
# Parameters: (encoded = 200.200.200)

# Run progress: 1.71% complete, ETA 01:10:19
# Fork: 1 of 1
# Warmup Iteration   1: 24.205 ns/op
# Warmup Iteration   2: 23.484 ns/op
# Warmup Iteration   3: 24.095 ns/op
# Warmup Iteration   4: 24.087 ns/op
# Warmup Iteration   5: 24.090 ns/op
Iteration   1: 24.596 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 24.087 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 24.112 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 24.028 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 24.090 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3":
  24.182 ±(99.9%) 0.898 ns/op [Average]
  (min, avg, max) = (24.028, 24.182, 24.596), stdev = 0.233
  CI (99.9%): [23.284, 25.080] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.IsNumberBenchmark.isNumber3
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 1.96% complete, ETA 01:10:06
# Fork: 1 of 1
# Warmup Iteration   1: 27.006 ns/op
# Warmup Iteration   2: 26.416 ns/op
# Warmup Iteration   3: 27.338 ns/op
# Warmup Iteration   4: 27.380 ns/op
# Warmup Iteration   5: 27.339 ns/op
Iteration   1: 27.357 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 28.616 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.385 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.395 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.363 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3":
  27.623 ±(99.9%) 2.138 ns/op [Average]
  (min, avg, max) = (27.357, 27.623, 28.616), stdev = 0.555
  CI (99.9%): [25.485, 29.761] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.IsNumberBenchmark.isNumber3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic
# Parameters: (encoded = )

# Run progress: 2.20% complete, ETA 01:09:55
# Fork: 1 of 1
# Warmup Iteration   1: 1.323 ns/op
# Warmup Iteration   2: 1.249 ns/op
# Warmup Iteration   3: 1.183 ns/op
# Warmup Iteration   4: 1.281 ns/op
# Warmup Iteration   5: 1.184 ns/op
Iteration   1: 1.186 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.189 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.185 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.183 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.182 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic":
  1.185 ±(99.9%) 0.011 ns/op [Average]
  (min, avg, max) = (1.182, 1.185, 1.189), stdev = 0.003
  CI (99.9%): [1.174, 1.196] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic
# Parameters: (encoded = 0.0.0)

# Run progress: 2.44% complete, ETA 01:09:39
# Fork: 1 of 1
# Warmup Iteration   1: 14.717 ns/op
# Warmup Iteration   2: 12.078 ns/op
# Warmup Iteration   3: 9.360 ns/op
# Warmup Iteration   4: 9.367 ns/op
# Warmup Iteration   5: 9.350 ns/op
Iteration   1: 9.335 ns/op
                 ·gc.alloc.rate:      8169.701 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           38.000 counts
                 ·gc.time:            21.000 ms

Iteration   2: 9.337 ns/op
                 ·gc.alloc.rate:      8167.302 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           38.000 counts
                 ·gc.time:            20.000 ms

Iteration   3: 10.194 ns/op
                 ·gc.alloc.rate:      7481.926 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           35.000 counts
                 ·gc.time:            21.000 ms

Iteration   4: 10.034 ns/op
                 ·gc.alloc.rate:      7598.729 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           35.000 counts
                 ·gc.time:            20.000 ms

Iteration   5: 9.500 ns/op
                 ·gc.alloc.rate:      8027.005 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           38.000 counts
                 ·gc.time:            21.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic":
  9.680 ±(99.9%) 1.561 ns/op [Average]
  (min, avg, max) = (9.335, 9.680, 10.194), stdev = 0.405
  CI (99.9%): [8.119, 11.241] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate":
  7888.932 ±(99.9%) 1255.535 MB/sec [Average]
  (min, avg, max) = (7481.926, 7888.932, 8169.701), stdev = 326.059
  CI (99.9%): [6633.397, 9144.468] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.count":
  184.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (35.000, 36.800, 38.000), stdev = 1.643
  CI (99.9%): [184.000, 184.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.time":
  103.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (20.000, 20.600, 21.000), stdev = 0.548
  CI (99.9%): [103.000, 103.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic
# Parameters: (encoded = 1.0.0)

# Run progress: 2.69% complete, ETA 01:09:25
# Fork: 1 of 1
# Warmup Iteration   1: 14.489 ns/op
# Warmup Iteration   2: 13.180 ns/op
# Warmup Iteration   3: 10.411 ns/op
# Warmup Iteration   4: 9.816 ns/op
# Warmup Iteration   5: 9.350 ns/op
Iteration   1: 9.368 ns/op
                 ·gc.alloc.rate:      8141.213 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           38.000 counts
                 ·gc.time:            21.000 ms

Iteration   2: 9.371 ns/op
                 ·gc.alloc.rate:      8138.763 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           38.000 counts
                 ·gc.time:            20.000 ms

Iteration   3: 9.694 ns/op
                 ·gc.alloc.rate:      7867.348 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           36.000 counts
                 ·gc.time:            18.000 ms

Iteration   4: 9.717 ns/op
                 ·gc.alloc.rate:      7845.483 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            20.000 ms

Iteration   5: 9.618 ns/op
                 ·gc.alloc.rate:      7928.959 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            19.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic":
  9.553 ±(99.9%) 0.663 ns/op [Average]
  (min, avg, max) = (9.368, 9.553, 9.717), stdev = 0.172
  CI (99.9%): [8.891, 10.216] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate":
  7984.353 ±(99.9%) 559.639 MB/sec [Average]
  (min, avg, max) = (7845.483, 7984.353, 8141.213), stdev = 145.337
  CI (99.9%): [7424.714, 8543.993] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.count":
  186.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (36.000, 37.200, 38.000), stdev = 0.837
  CI (99.9%): [186.000, 186.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.time":
  98.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 19.600, 21.000), stdev = 1.140
  CI (99.9%): [98.000, 98.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic
# Parameters: (encoded = 200.200.200)

# Run progress: 2.93% complete, ETA 01:09:12
# Fork: 1 of 1
# Warmup Iteration   1: 14.012 ns/op
# Warmup Iteration   2: 12.529 ns/op
# Warmup Iteration   3: 9.300 ns/op
# Warmup Iteration   4: 9.292 ns/op
# Warmup Iteration   5: 10.159 ns/op
Iteration   1: 9.280 ns/op
                 ·gc.alloc.rate:      8218.793 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           36.000 counts
                 ·gc.time:            21.000 ms

Iteration   2: 10.191 ns/op
                 ·gc.alloc.rate:      7539.324 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           34.000 counts
                 ·gc.time:            21.000 ms

Iteration   3: 9.496 ns/op
                 ·gc.alloc.rate:      8032.728 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           35.000 counts
                 ·gc.time:            19.000 ms

Iteration   4: 9.317 ns/op
                 ·gc.alloc.rate:      8181.762 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           36.000 counts
                 ·gc.time:            19.000 ms

Iteration   5: 9.308 ns/op
                 ·gc.alloc.rate:      8192.908 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           36.000 counts
                 ·gc.time:            21.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic":
  9.518 ±(99.9%) 1.484 ns/op [Average]
  (min, avg, max) = (9.280, 9.518, 10.191), stdev = 0.385
  CI (99.9%): [8.034, 11.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate":
  8033.103 ±(99.9%) 1099.181 MB/sec [Average]
  (min, avg, max) = (7539.324, 8033.103, 8218.793), stdev = 285.454
  CI (99.9%): [6933.922, 9132.284] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.count":
  177.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (34.000, 35.400, 36.000), stdev = 0.894
  CI (99.9%): [177.000, 177.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.time":
  101.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 20.200, 21.000), stdev = 1.095
  CI (99.9%): [101.000, 101.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 3.18% complete, ETA 01:08:59
# Fork: 1 of 1
# Warmup Iteration   1: 14.459 ns/op
# Warmup Iteration   2: 11.717 ns/op
# Warmup Iteration   3: 9.546 ns/op
# Warmup Iteration   4: 9.349 ns/op
# Warmup Iteration   5: 9.362 ns/op
Iteration   1: 9.329 ns/op
                 ·gc.alloc.rate:      8175.492 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           38.000 counts
                 ·gc.time:            21.000 ms

Iteration   2: 9.310 ns/op
                 ·gc.alloc.rate:      8191.780 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            19.000 ms

Iteration   3: 9.350 ns/op
                 ·gc.alloc.rate:      8157.360 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           38.000 counts
                 ·gc.time:            21.000 ms

Iteration   4: 9.324 ns/op
                 ·gc.alloc.rate:      8177.016 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            21.000 ms

Iteration   5: 10.010 ns/op
                 ·gc.alloc.rate:      7611.199 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           35.000 counts
                 ·gc.time:            20.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic":
  9.464 ±(99.9%) 1.175 ns/op [Average]
  (min, avg, max) = (9.310, 9.464, 10.010), stdev = 0.305
  CI (99.9%): [8.290, 10.639] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate":
  8062.569 ±(99.9%) 972.745 MB/sec [Average]
  (min, avg, max) = (7611.199, 8062.569, 8191.780), stdev = 252.619
  CI (99.9%): [7089.824, 9035.315] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.count":
  185.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (35.000, 37.000, 38.000), stdev = 1.225
  CI (99.9%): [185.000, 185.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.generic:·gc.time":
  102.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 20.400, 21.000), stdev = 0.894
  CI (99.9%): [102.000, 102.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined
# Parameters: (encoded = )

# Run progress: 3.42% complete, ETA 01:08:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.310 ns/op
# Warmup Iteration   2: 1.235 ns/op
# Warmup Iteration   3: 1.182 ns/op
# Warmup Iteration   4: 1.183 ns/op
# Warmup Iteration   5: 1.182 ns/op
Iteration   1: 1.184 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.183 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.183 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.185 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.187 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined":
  1.184 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (1.183, 1.184, 1.187), stdev = 0.002
  CI (99.9%): [1.178, 1.191] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined
# Parameters: (encoded = 0.0.0)

# Run progress: 3.67% complete, ETA 01:08:34
# Fork: 1 of 1
# Warmup Iteration   1: 14.752 ns/op
# Warmup Iteration   2: 11.944 ns/op
# Warmup Iteration   3: 10.254 ns/op
# Warmup Iteration   4: 9.329 ns/op
# Warmup Iteration   5: 9.402 ns/op
Iteration   1: 9.333 ns/op
                 ·gc.alloc.rate:      8172.625 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           39.000 counts
                 ·gc.time:            22.000 ms

Iteration   2: 9.322 ns/op
                 ·gc.alloc.rate:      8181.570 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           38.000 counts
                 ·gc.time:            19.000 ms

Iteration   3: 9.281 ns/op
                 ·gc.alloc.rate:      8217.092 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           39.000 counts
                 ·gc.time:            20.000 ms

Iteration   4: 9.843 ns/op
                 ·gc.alloc.rate:      7744.528 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            20.000 ms

Iteration   5: 9.334 ns/op
                 ·gc.alloc.rate:      8170.560 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           38.000 counts
                 ·gc.time:            21.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined":
  9.422 ±(99.9%) 0.908 ns/op [Average]
  (min, avg, max) = (9.281, 9.422, 9.843), stdev = 0.236
  CI (99.9%): [8.514, 10.331] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate":
  8097.275 ±(99.9%) 762.730 MB/sec [Average]
  (min, avg, max) = (7744.528, 8097.275, 8217.092), stdev = 198.079
  CI (99.9%): [7334.545, 8860.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.count":
  191.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (37.000, 38.200, 39.000), stdev = 0.837
  CI (99.9%): [191.000, 191.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.time":
  102.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 20.400, 22.000), stdev = 1.140
  CI (99.9%): [102.000, 102.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined
# Parameters: (encoded = 1.0.0)

# Run progress: 3.91% complete, ETA 01:08:23
# Fork: 1 of 1
# Warmup Iteration   1: 13.897 ns/op
# Warmup Iteration   2: 11.720 ns/op
# Warmup Iteration   3: 9.333 ns/op
# Warmup Iteration   4: 9.317 ns/op
# Warmup Iteration   5: 9.312 ns/op
Iteration   1: 9.405 ns/op
                 ·gc.alloc.rate:      8109.531 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           36.000 counts
                 ·gc.time:            19.000 ms

Iteration   2: 9.489 ns/op
                 ·gc.alloc.rate:      8037.333 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           36.000 counts
                 ·gc.time:            21.000 ms

Iteration   3: 9.313 ns/op
                 ·gc.alloc.rate:      8189.335 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            21.000 ms

Iteration   4: 9.675 ns/op
                 ·gc.alloc.rate:      7879.823 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           35.000 counts
                 ·gc.time:            20.000 ms

Iteration   5: 9.443 ns/op
                 ·gc.alloc.rate:      8067.277 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            21.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined":
  9.465 ±(99.9%) 0.516 ns/op [Average]
  (min, avg, max) = (9.313, 9.465, 9.675), stdev = 0.134
  CI (99.9%): [8.949, 9.981] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate":
  8056.660 ±(99.9%) 439.698 MB/sec [Average]
  (min, avg, max) = (7879.823, 8056.660, 8189.335), stdev = 114.188
  CI (99.9%): [7616.962, 8496.357] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.count":
  181.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (35.000, 36.200, 37.000), stdev = 0.837
  CI (99.9%): [181.000, 181.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.time":
  102.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 20.400, 21.000), stdev = 0.894
  CI (99.9%): [102.000, 102.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined
# Parameters: (encoded = 200.200.200)

# Run progress: 4.16% complete, ETA 01:08:11
# Fork: 1 of 1
# Warmup Iteration   1: 13.901 ns/op
# Warmup Iteration   2: 11.903 ns/op
# Warmup Iteration   3: 9.356 ns/op
# Warmup Iteration   4: 9.369 ns/op
# Warmup Iteration   5: 9.381 ns/op
Iteration   1: 9.986 ns/op
                 ·gc.alloc.rate:      7637.117 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           34.000 counts
                 ·gc.time:            19.000 ms

Iteration   2: 9.363 ns/op
                 ·gc.alloc.rate:      8144.826 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           36.000 counts
                 ·gc.time:            21.000 ms

Iteration   3: 9.361 ns/op
                 ·gc.alloc.rate:      8147.636 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            19.000 ms

Iteration   4: 9.339 ns/op
                 ·gc.alloc.rate:      8163.497 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           36.000 counts
                 ·gc.time:            19.000 ms

Iteration   5: 9.340 ns/op
                 ·gc.alloc.rate:      8166.012 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            20.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined":
  9.478 ±(99.9%) 1.095 ns/op [Average]
  (min, avg, max) = (9.339, 9.478, 9.986), stdev = 0.284
  CI (99.9%): [8.383, 10.573] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate":
  8051.818 ±(99.9%) 893.401 MB/sec [Average]
  (min, avg, max) = (7637.117, 8051.818, 8166.012), stdev = 232.014
  CI (99.9%): [7158.416, 8945.219] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.count":
  180.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (34.000, 36.000, 37.000), stdev = 1.225
  CI (99.9%): [180.000, 180.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.time":
  98.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 19.600, 21.000), stdev = 0.894
  CI (99.9%): [98.000, 98.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 4.40% complete, ETA 01:08:00
# Fork: 1 of 1
# Warmup Iteration   1: 14.394 ns/op
# Warmup Iteration   2: 11.653 ns/op
# Warmup Iteration   3: 9.310 ns/op
# Warmup Iteration   4: 9.313 ns/op
# Warmup Iteration   5: 9.323 ns/op
Iteration   1: 9.594 ns/op
                 ·gc.alloc.rate:      7949.998 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           36.000 counts
                 ·gc.time:            19.000 ms

Iteration   2: 9.336 ns/op
                 ·gc.alloc.rate:      8169.849 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            20.000 ms

Iteration   3: 10.623 ns/op
                 ·gc.alloc.rate:      7179.479 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           32.000 counts
                 ·gc.time:            18.000 ms

Iteration   4: 9.306 ns/op
                 ·gc.alloc.rate:      8192.136 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            20.000 ms

Iteration   5: 9.325 ns/op
                 ·gc.alloc.rate:      8178.996 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           37.000 counts
                 ·gc.time:            19.000 ms



Result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined":
  9.637 ±(99.9%) 2.172 ns/op [Average]
  (min, avg, max) = (9.306, 9.637, 10.623), stdev = 0.564
  CI (99.9%): [7.465, 11.808] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate":
  7934.092 ±(99.9%) 1669.421 MB/sec [Average]
  (min, avg, max) = (7179.479, 7934.092, 8192.136), stdev = 433.543
  CI (99.9%): [6264.671, 9603.513] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.count":
  179.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (32.000, 35.800, 37.000), stdev = 2.168
  CI (99.9%): [179.000, 179.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionNoAllocConvertBenchmark.inlined:·gc.time":
  96.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 19.200, 20.000), stdev = 0.837
  CI (99.9%): [96.000, 96.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = )

# Run progress: 4.65% complete, ETA 01:07:48
# Fork: 1 of 1
# Warmup Iteration   1: 2.200 ns/op
# Warmup Iteration   2: 2.547 ns/op
# Warmup Iteration   3: 2.069 ns/op
# Warmup Iteration   4: 2.071 ns/op
# Warmup Iteration   5: 2.069 ns/op
Iteration   1: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.076 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.069 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  2.071 ±(99.9%) 0.010 ns/op [Average]
  (min, avg, max) = (2.069, 2.071, 2.076), stdev = 0.003
  CI (99.9%): [2.061, 2.081] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200)

# Run progress: 4.89% complete, ETA 01:07:36
# Fork: 1 of 1
# Warmup Iteration   1: 5.703 ns/op
# Warmup Iteration   2: 5.060 ns/op
# Warmup Iteration   3: 5.514 ns/op
# Warmup Iteration   4: 5.395 ns/op
# Warmup Iteration   5: 5.436 ns/op
Iteration   1: 5.499 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.461 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.524 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.446 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.445 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  5.475 ±(99.9%) 0.136 ns/op [Average]
  (min, avg, max) = (5.445, 5.475, 5.524), stdev = 0.035
  CI (99.9%): [5.339, 5.611] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.)

# Run progress: 5.13% complete, ETA 01:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 6.894 ns/op
# Warmup Iteration   2: 7.330 ns/op
# Warmup Iteration   3: 6.425 ns/op
# Warmup Iteration   4: 6.911 ns/op
# Warmup Iteration   5: 6.471 ns/op
Iteration   1: 6.489 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.451 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.449 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.467 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.468 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  6.465 ±(99.9%) 0.061 ns/op [Average]
  (min, avg, max) = (6.449, 6.465, 6.489), stdev = 0.016
  CI (99.9%): [6.403, 6.526] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200)

# Run progress: 5.38% complete, ETA 01:07:11
# Fork: 1 of 1
# Warmup Iteration   1: 15.666 ns/op
# Warmup Iteration   2: 14.047 ns/op
# Warmup Iteration   3: 13.400 ns/op
# Warmup Iteration   4: 13.384 ns/op
# Warmup Iteration   5: 13.646 ns/op
Iteration   1: 13.385 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13.416 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13.305 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13.383 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13.352 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  13.368 ±(99.9%) 0.161 ns/op [Average]
  (min, avg, max) = (13.305, 13.368, 13.416), stdev = 0.042
  CI (99.9%): [13.207, 13.529] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.)

# Run progress: 5.62% complete, ETA 01:06:59
# Fork: 1 of 1
# Warmup Iteration   1: 37.508 ns/op
# Warmup Iteration   2: 34.772 ns/op
# Warmup Iteration   3: 26.852 ns/op
# Warmup Iteration   4: 26.881 ns/op
# Warmup Iteration   5: 26.863 ns/op
Iteration   1: 26.868 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.871 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.255 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.902 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.928 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  26.965 ±(99.9%) 0.632 ns/op [Average]
  (min, avg, max) = (26.868, 26.965, 27.255), stdev = 0.164
  CI (99.9%): [26.333, 27.597] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = a.200.200)

# Run progress: 5.87% complete, ETA 01:06:48
# Fork: 1 of 1
# Warmup Iteration   1: 22.241 ns/op
# Warmup Iteration   2: 20.541 ns/op
# Warmup Iteration   3: 20.489 ns/op
# Warmup Iteration   4: 20.471 ns/op
# Warmup Iteration   5: 20.494 ns/op
Iteration   1: 20.511 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 20.483 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 20.501 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 20.538 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.239 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  20.654 ±(99.9%) 1.261 ns/op [Average]
  (min, avg, max) = (20.483, 20.654, 21.239), stdev = 0.327
  CI (99.9%): [19.394, 21.915] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.a.200)

# Run progress: 6.11% complete, ETA 01:06:36
# Fork: 1 of 1
# Warmup Iteration   1: 34.480 ns/op
# Warmup Iteration   2: 34.420 ns/op
# Warmup Iteration   3: 32.178 ns/op
# Warmup Iteration   4: 32.109 ns/op
# Warmup Iteration   5: 32.137 ns/op
Iteration   1: 32.176 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.023 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.077 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.161 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.085 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  32.104 ±(99.9%) 0.245 ns/op [Average]
  (min, avg, max) = (32.023, 32.104, 32.176), stdev = 0.064
  CI (99.9%): [31.859, 32.349] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.a)

# Run progress: 6.36% complete, ETA 01:06:24
# Fork: 1 of 1
# Warmup Iteration   1: 41.033 ns/op
# Warmup Iteration   2: 38.118 ns/op
# Warmup Iteration   3: 34.605 ns/op
# Warmup Iteration   4: 34.640 ns/op
# Warmup Iteration   5: 34.567 ns/op
Iteration   1: 34.614 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 34.647 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 34.573 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 34.617 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 34.646 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  34.619 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (34.573, 34.619, 34.647), stdev = 0.030
  CI (99.9%): [34.504, 34.735] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.200.200)

# Run progress: 6.60% complete, ETA 01:06:13
# Fork: 1 of 1
# Warmup Iteration   1: 23.210 ns/op
# Warmup Iteration   2: 20.805 ns/op
# Warmup Iteration   3: 21.277 ns/op
# Warmup Iteration   4: 21.247 ns/op
# Warmup Iteration   5: 21.250 ns/op
Iteration   1: 21.189 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.243 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.220 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 22.445 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.690 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  21.557 ±(99.9%) 2.067 ns/op [Average]
  (min, avg, max) = (21.189, 21.557, 22.445), stdev = 0.537
  CI (99.9%): [19.491, 23.624] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.99999)

# Run progress: 6.85% complete, ETA 01:06:02
# Fork: 1 of 1
# Warmup Iteration   1: 166.093 ns/op
# Warmup Iteration   2: 129.239 ns/op
# Warmup Iteration   3: 128.740 ns/op
# Warmup Iteration   4: 125.130 ns/op
# Warmup Iteration   5: 129.460 ns/op
Iteration   1: 131.536 ns/op
                 ·gc.alloc.rate:      2086.927 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 125.212 ns/op
                 ·gc.alloc.rate:      2192.564 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 124.911 ns/op
                 ·gc.alloc.rate:      2198.114 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 124.827 ns/op
                 ·gc.alloc.rate:      2198.863 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 124.939 ns/op
                 ·gc.alloc.rate:      2197.687 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  126.285 ±(99.9%) 11.317 ns/op [Average]
  (min, avg, max) = (124.827, 126.285, 131.536), stdev = 2.939
  CI (99.9%): [114.968, 137.602] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  2174.831 ±(99.9%) 189.462 MB/sec [Average]
  (min, avg, max) = (2086.927, 2174.831, 2198.863), stdev = 49.203
  CI (99.9%): [1985.369, 2364.293] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.001), stdev = 0.001
  CI (99.9%): [143.999, 144.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  74.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 14.800, 15.000), stdev = 0.447
  CI (99.9%): [74.000, 74.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.time":
  33.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.-200)

# Run progress: 7.09% complete, ETA 01:05:51
# Fork: 1 of 1
# Warmup Iteration   1: 43.753 ns/op
# Warmup Iteration   2: 41.716 ns/op
# Warmup Iteration   3: 38.888 ns/op
# Warmup Iteration   4: 38.839 ns/op
# Warmup Iteration   5: 38.788 ns/op
Iteration   1: 38.689 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 38.967 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 38.742 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 38.716 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 38.746 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  38.772 ±(99.9%) 0.429 ns/op [Average]
  (min, avg, max) = (38.689, 38.772, 38.967), stdev = 0.112
  CI (99.9%): [38.342, 39.201] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 1.0.0)

# Run progress: 7.33% complete, ETA 01:05:39
# Fork: 1 of 1
# Warmup Iteration   1: 123.017 ns/op
# Warmup Iteration   2: 99.147 ns/op
# Warmup Iteration   3: 99.821 ns/op
# Warmup Iteration   4: 99.951 ns/op
# Warmup Iteration   5: 104.984 ns/op
Iteration   1: 99.635 ns/op
                 ·gc.alloc.rate:      3521.062 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 102.758 ns/op
                 ·gc.alloc.rate:      3413.493 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 100.449 ns/op
                 ·gc.alloc.rate:      3492.749 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            16.000 ms

Iteration   4: 99.804 ns/op
                 ·gc.alloc.rate:      3513.811 MB/sec
                 ·gc.alloc.rate.norm: 184.001 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 99.915 ns/op
                 ·gc.alloc.rate:      3511.265 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            12.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  100.512 ±(99.9%) 4.974 ns/op [Average]
  (min, avg, max) = (99.635, 100.512, 102.758), stdev = 1.292
  CI (99.9%): [95.538, 105.487] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  3490.476 ±(99.9%) 170.516 MB/sec [Average]
  (min, avg, max) = (3413.493, 3490.476, 3521.062), stdev = 44.282
  CI (99.9%): [3319.960, 3660.992] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  184.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (184.000, 184.000, 184.001), stdev = 0.001
  CI (99.9%): [183.999, 184.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  120.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (24.000, 24.000, 24.000), stdev = 0.001
  CI (99.9%): [120.000, 120.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.time":
  62.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 12.400, 16.000), stdev = 2.074
  CI (99.9%): [62.000, 62.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 200.200.200)

# Run progress: 7.58% complete, ETA 01:05:28
# Fork: 1 of 1
# Warmup Iteration   1: 167.480 ns/op
# Warmup Iteration   2: 127.612 ns/op
# Warmup Iteration   3: 126.488 ns/op
# Warmup Iteration   4: 126.991 ns/op
# Warmup Iteration   5: 126.411 ns/op
Iteration   1: 126.310 ns/op
                 ·gc.alloc.rate:      2777.385 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            9.000 ms

Iteration   2: 126.275 ns/op
                 ·gc.alloc.rate:      2777.724 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            10.000 ms

Iteration   3: 126.347 ns/op
                 ·gc.alloc.rate:      2776.227 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 126.445 ns/op
                 ·gc.alloc.rate:      2773.594 MB/sec
                 ·gc.alloc.rate.norm: 184.001 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            10.000 ms

Iteration   5: 126.413 ns/op
                 ·gc.alloc.rate:      2775.168 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  126.358 ±(99.9%) 0.273 ns/op [Average]
  (min, avg, max) = (126.275, 126.358, 126.445), stdev = 0.071
  CI (99.9%): [126.085, 126.631] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  2776.019 ±(99.9%) 6.507 MB/sec [Average]
  (min, avg, max) = (2773.594, 2776.019, 2777.724), stdev = 1.690
  CI (99.9%): [2769.512, 2782.526] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  184.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (184.000, 184.000, 184.001), stdev = 0.001
  CI (99.9%): [183.999, 184.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  95.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (19.000, 19.000, 19.000), stdev = 0.001
  CI (99.9%): [95.000, 95.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.time":
  49.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
  CI (99.9%): [49.000, 49.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 7.82% complete, ETA 01:05:17
# Fork: 1 of 1
# Warmup Iteration   1: 184.682 ns/op
# Warmup Iteration   2: 145.466 ns/op
# Warmup Iteration   3: 141.181 ns/op
# Warmup Iteration   4: 141.710 ns/op
# Warmup Iteration   5: 141.295 ns/op
Iteration   1: 141.455 ns/op
                 ·gc.alloc.rate:      2479.873 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            9.000 ms

Iteration   2: 141.184 ns/op
                 ·gc.alloc.rate:      2484.413 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            9.000 ms

Iteration   3: 140.877 ns/op
                 ·gc.alloc.rate:      2490.374 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 144.262 ns/op
                 ·gc.alloc.rate:      2431.537 MB/sec
                 ·gc.alloc.rate.norm: 184.001 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            10.000 ms

Iteration   5: 141.145 ns/op
                 ·gc.alloc.rate:      2485.439 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            9.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  141.785 ±(99.9%) 5.391 ns/op [Average]
  (min, avg, max) = (140.877, 141.785, 144.262), stdev = 1.400
  CI (99.9%): [136.394, 147.175] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  2474.327 ±(99.9%) 93.223 MB/sec [Average]
  (min, avg, max) = (2431.537, 2474.327, 2490.374), stdev = 24.210
  CI (99.9%): [2381.105, 2567.550] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  184.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (184.000, 184.000, 184.001), stdev = 0.001
  CI (99.9%): [183.999, 184.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  85.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (17.000, 17.000, 17.000), stdev = 0.001
  CI (99.9%): [85.000, 85.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.time":
  44.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (7.000, 8.800, 10.000), stdev = 1.095
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized1
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 8.07% complete, ETA 01:05:06
# Fork: 1 of 1
# Warmup Iteration   1: 217.280 ns/op
# Warmup Iteration   2: 155.896 ns/op
# Warmup Iteration   3: 155.155 ns/op
# Warmup Iteration   4: 154.923 ns/op
# Warmup Iteration   5: 155.370 ns/op
Iteration   1: 155.970 ns/op
                 ·gc.alloc.rate:      2249.150 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 158.276 ns/op
                 ·gc.alloc.rate:      2216.865 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 155.433 ns/op
                 ·gc.alloc.rate:      2256.889 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 155.051 ns/op
                 ·gc.alloc.rate:      2261.582 MB/sec
                 ·gc.alloc.rate.norm: 184.001 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 155.293 ns/op
                 ·gc.alloc.rate:      2258.737 MB/sec
                 ·gc.alloc.rate.norm: 184.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            8.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1":
  156.005 ±(99.9%) 5.058 ns/op [Average]
  (min, avg, max) = (155.051, 156.005, 158.276), stdev = 1.313
  CI (99.9%): [150.947, 161.062] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate":
  2248.645 ±(99.9%) 70.672 MB/sec [Average]
  (min, avg, max) = (2216.865, 2248.645, 2261.582), stdev = 18.353
  CI (99.9%): [2177.973, 2319.317] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.alloc.rate.norm":
  184.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (184.000, 184.000, 184.001), stdev = 0.001
  CI (99.9%): [183.999, 184.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.count":
  77.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.400, 16.000), stdev = 0.548
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized1:·gc.time":
  40.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 8.000, 11.000), stdev = 1.871
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = )

# Run progress: 8.31% complete, ETA 01:04:55
# Fork: 1 of 1
# Warmup Iteration   1: 2.178 ns/op
# Warmup Iteration   2: 2.561 ns/op
# Warmup Iteration   3: 2.072 ns/op
# Warmup Iteration   4: 2.072 ns/op
# Warmup Iteration   5: 2.071 ns/op
Iteration   1: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.069 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.071 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  2.070 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (2.069, 2.070, 2.071), stdev = 0.001
  CI (99.9%): [2.068, 2.072] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200)

# Run progress: 8.56% complete, ETA 01:04:45
# Fork: 1 of 1
# Warmup Iteration   1: 5.673 ns/op
# Warmup Iteration   2: 5.069 ns/op
# Warmup Iteration   3: 5.484 ns/op
# Warmup Iteration   4: 5.440 ns/op
# Warmup Iteration   5: 5.411 ns/op
Iteration   1: 5.424 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.300 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.330 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.348 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.336 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  5.348 ±(99.9%) 0.178 ns/op [Average]
  (min, avg, max) = (5.300, 5.348, 5.424), stdev = 0.046
  CI (99.9%): [5.170, 5.525] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.)

# Run progress: 8.80% complete, ETA 01:04:34
# Fork: 1 of 1
# Warmup Iteration   1: 6.871 ns/op
# Warmup Iteration   2: 7.205 ns/op
# Warmup Iteration   3: 6.516 ns/op
# Warmup Iteration   4: 6.552 ns/op
# Warmup Iteration   5: 6.529 ns/op
Iteration   1: 6.541 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.504 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.503 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.509 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.499 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  6.511 ±(99.9%) 0.067 ns/op [Average]
  (min, avg, max) = (6.499, 6.511, 6.541), stdev = 0.017
  CI (99.9%): [6.445, 6.578] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200)

# Run progress: 9.05% complete, ETA 01:04:23
# Fork: 1 of 1
# Warmup Iteration   1: 16.290 ns/op
# Warmup Iteration   2: 14.041 ns/op
# Warmup Iteration   3: 13.492 ns/op
# Warmup Iteration   4: 13.430 ns/op
# Warmup Iteration   5: 13.471 ns/op
Iteration   1: 13.501 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13.469 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13.486 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13.389 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13.477 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  13.464 ±(99.9%) 0.169 ns/op [Average]
  (min, avg, max) = (13.389, 13.464, 13.501), stdev = 0.044
  CI (99.9%): [13.296, 13.633] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.)

# Run progress: 9.29% complete, ETA 01:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 37.609 ns/op
# Warmup Iteration   2: 34.657 ns/op
# Warmup Iteration   3: 27.729 ns/op
# Warmup Iteration   4: 27.772 ns/op
# Warmup Iteration   5: 27.776 ns/op
Iteration   1: 29.367 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.755 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.729 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.578 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.741 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  28.034 ±(99.9%) 2.882 ns/op [Average]
  (min, avg, max) = (27.578, 28.034, 29.367), stdev = 0.749
  CI (99.9%): [25.151, 30.916] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = a.200.200)

# Run progress: 9.54% complete, ETA 01:04:01
# Fork: 1 of 1
# Warmup Iteration   1: 22.443 ns/op
# Warmup Iteration   2: 21.841 ns/op
# Warmup Iteration   3: 19.122 ns/op
# Warmup Iteration   4: 19.189 ns/op
# Warmup Iteration   5: 19.122 ns/op
Iteration   1: 19.171 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.085 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.057 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.555 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.129 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  19.200 ±(99.9%) 0.783 ns/op [Average]
  (min, avg, max) = (19.057, 19.200, 19.555), stdev = 0.203
  CI (99.9%): [18.416, 19.983] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.a.200)

# Run progress: 9.78% complete, ETA 01:03:50
# Fork: 1 of 1
# Warmup Iteration   1: 36.064 ns/op
# Warmup Iteration   2: 32.645 ns/op
# Warmup Iteration   3: 26.668 ns/op
# Warmup Iteration   4: 26.521 ns/op
# Warmup Iteration   5: 27.871 ns/op
Iteration   1: 26.737 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.655 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.736 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.729 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.753 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  26.722 ±(99.9%) 0.148 ns/op [Average]
  (min, avg, max) = (26.655, 26.722, 26.753), stdev = 0.038
  CI (99.9%): [26.575, 26.870] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.a)

# Run progress: 10.02% complete, ETA 01:03:39
# Fork: 1 of 1
# Warmup Iteration   1: 41.512 ns/op
# Warmup Iteration   2: 37.930 ns/op
# Warmup Iteration   3: 35.470 ns/op
# Warmup Iteration   4: 35.427 ns/op
# Warmup Iteration   5: 35.365 ns/op
Iteration   1: 35.325 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 35.275 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 35.394 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 35.318 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 35.393 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  35.341 ±(99.9%) 0.199 ns/op [Average]
  (min, avg, max) = (35.275, 35.341, 35.394), stdev = 0.052
  CI (99.9%): [35.142, 35.540] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.200.200)

# Run progress: 10.27% complete, ETA 01:03:29
# Fork: 1 of 1
# Warmup Iteration   1: 22.795 ns/op
# Warmup Iteration   2: 20.795 ns/op
# Warmup Iteration   3: 21.249 ns/op
# Warmup Iteration   4: 21.585 ns/op
# Warmup Iteration   5: 21.302 ns/op
Iteration   1: 21.375 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.361 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.362 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.346 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.323 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  21.354 ±(99.9%) 0.076 ns/op [Average]
  (min, avg, max) = (21.323, 21.354, 21.375), stdev = 0.020
  CI (99.9%): [21.278, 21.429] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.99999)

# Run progress: 10.51% complete, ETA 01:03:18
# Fork: 1 of 1
# Warmup Iteration   1: 98.989 ns/op
# Warmup Iteration   2: 89.569 ns/op
# Warmup Iteration   3: 89.091 ns/op
# Warmup Iteration   4: 89.101 ns/op
# Warmup Iteration   5: 89.191 ns/op
Iteration   1: 89.159 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 89.203 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 89.150 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 89.143 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 89.214 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  89.174 ±(99.9%) 0.125 ns/op [Average]
  (min, avg, max) = (89.143, 89.174, 89.214), stdev = 0.032
  CI (99.9%): [89.049, 89.299] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.-200)

# Run progress: 10.76% complete, ETA 01:03:07
# Fork: 1 of 1
# Warmup Iteration   1: 43.789 ns/op
# Warmup Iteration   2: 41.232 ns/op
# Warmup Iteration   3: 37.301 ns/op
# Warmup Iteration   4: 37.193 ns/op
# Warmup Iteration   5: 37.700 ns/op
Iteration   1: 37.844 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 37.862 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 38.051 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 37.901 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 38.018 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  37.935 ±(99.9%) 0.361 ns/op [Average]
  (min, avg, max) = (37.844, 37.935, 38.051), stdev = 0.094
  CI (99.9%): [37.574, 38.296] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 1.0.0)

# Run progress: 11.00% complete, ETA 01:02:56
# Fork: 1 of 1
# Warmup Iteration   1: 70.378 ns/op
# Warmup Iteration   2: 61.939 ns/op
# Warmup Iteration   3: 62.954 ns/op
# Warmup Iteration   4: 62.937 ns/op
# Warmup Iteration   5: 62.994 ns/op
Iteration   1: 65.949 ns/op
                 ·gc.alloc.rate:      1156.452 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 63.808 ns/op
                 ·gc.alloc.rate:      1195.297 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 62.975 ns/op
                 ·gc.alloc.rate:      1211.108 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 63.088 ns/op
                 ·gc.alloc.rate:      1208.460 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 62.998 ns/op
                 ·gc.alloc.rate:      1210.699 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  63.764 ±(99.9%) 4.887 ns/op [Average]
  (min, avg, max) = (62.975, 63.764, 65.949), stdev = 1.269
  CI (99.9%): [58.877, 68.650] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  1196.403 ±(99.9%) 89.548 MB/sec [Average]
  (min, avg, max) = (1156.452, 1196.403, 1211.108), stdev = 23.255
  CI (99.9%): [1106.855, 1285.951] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  41.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
  CI (99.9%): [41.000, 41.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 200.200.200)

# Run progress: 11.25% complete, ETA 01:02:46
# Fork: 1 of 1
# Warmup Iteration   1: 110.656 ns/op
# Warmup Iteration   2: 89.317 ns/op
# Warmup Iteration   3: 89.946 ns/op
# Warmup Iteration   4: 89.403 ns/op
# Warmup Iteration   5: 89.338 ns/op
Iteration   1: 89.247 ns/op
                 ·gc.alloc.rate:      854.555 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 89.377 ns/op
                 ·gc.alloc.rate:      853.250 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 89.343 ns/op
                 ·gc.alloc.rate:      853.464 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 89.358 ns/op
                 ·gc.alloc.rate:      853.252 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 89.363 ns/op
                 ·gc.alloc.rate:      853.313 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  89.338 ±(99.9%) 0.200 ns/op [Average]
  (min, avg, max) = (89.247, 89.338, 89.377), stdev = 0.052
  CI (99.9%): [89.138, 89.538] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  853.567 ±(99.9%) 2.153 MB/sec [Average]
  (min, avg, max) = (853.250, 853.567, 854.555), stdev = 0.559
  CI (99.9%): [851.413, 855.720] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 11.49% complete, ETA 01:02:35
# Fork: 1 of 1
# Warmup Iteration   1: 119.415 ns/op
# Warmup Iteration   2: 106.573 ns/op
# Warmup Iteration   3: 104.659 ns/op
# Warmup Iteration   4: 104.423 ns/op
# Warmup Iteration   5: 104.396 ns/op
Iteration   1: 104.054 ns/op
                 ·gc.alloc.rate:      733.002 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 104.150 ns/op
                 ·gc.alloc.rate:      732.284 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 104.170 ns/op
                 ·gc.alloc.rate:      732.176 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 104.099 ns/op
                 ·gc.alloc.rate:      732.448 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 104.063 ns/op
                 ·gc.alloc.rate:      732.940 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  104.107 ±(99.9%) 0.199 ns/op [Average]
  (min, avg, max) = (104.054, 104.107, 104.170), stdev = 0.052
  CI (99.9%): [103.908, 104.306] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  732.570 ±(99.9%) 1.461 MB/sec [Average]
  (min, avg, max) = (732.176, 732.570, 733.002), stdev = 0.379
  CI (99.9%): [731.109, 734.031] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  25.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.time":
  11.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
  CI (99.9%): [11.000, 11.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized2
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 11.74% complete, ETA 01:02:25
# Fork: 1 of 1
# Warmup Iteration   1: 137.655 ns/op
# Warmup Iteration   2: 116.815 ns/op
# Warmup Iteration   3: 116.541 ns/op
# Warmup Iteration   4: 115.748 ns/op
# Warmup Iteration   5: 115.310 ns/op
Iteration   1: 115.186 ns/op
                 ·gc.alloc.rate:      662.109 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 115.228 ns/op
                 ·gc.alloc.rate:      661.815 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 115.227 ns/op
                 ·gc.alloc.rate:      661.791 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 115.107 ns/op
                 ·gc.alloc.rate:      662.369 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            1.000 ms

Iteration   5: 118.370 ns/op
                 ·gc.alloc.rate:      644.738 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2":
  115.824 ±(99.9%) 5.485 ns/op [Average]
  (min, avg, max) = (115.107, 115.824, 118.370), stdev = 1.424
  CI (99.9%): [110.339, 121.309] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate":
  658.564 ±(99.9%) 29.777 MB/sec [Average]
  (min, avg, max) = (644.738, 658.564, 662.369), stdev = 7.733
  CI (99.9%): [628.787, 688.342] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.count":
  23.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized2:·gc.time":
  11.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
  CI (99.9%): [11.000, 11.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = )

# Run progress: 11.98% complete, ETA 01:02:14
# Fork: 1 of 1
# Warmup Iteration   1: 2.164 ns/op
# Warmup Iteration   2: 2.113 ns/op
# Warmup Iteration   3: 2.073 ns/op
# Warmup Iteration   4: 2.073 ns/op
# Warmup Iteration   5: 2.079 ns/op
Iteration   1: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.071 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.073 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  2.071 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (2.070, 2.071, 2.073), stdev = 0.001
  CI (99.9%): [2.066, 2.076] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200)

# Run progress: 12.22% complete, ETA 01:02:03
# Fork: 1 of 1
# Warmup Iteration   1: 11.760 ns/op
# Warmup Iteration   2: 11.282 ns/op
# Warmup Iteration   3: 11.340 ns/op
# Warmup Iteration   4: 11.339 ns/op
# Warmup Iteration   5: 11.373 ns/op
Iteration   1: 11.342 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.342 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.350 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.335 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.344 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  11.343 ±(99.9%) 0.020 ns/op [Average]
  (min, avg, max) = (11.335, 11.343, 11.350), stdev = 0.005
  CI (99.9%): [11.323, 11.363] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.)

# Run progress: 12.47% complete, ETA 01:01:53
# Fork: 1 of 1
# Warmup Iteration   1: 30.211 ns/op
# Warmup Iteration   2: 26.974 ns/op
# Warmup Iteration   3: 26.080 ns/op
# Warmup Iteration   4: 26.088 ns/op
# Warmup Iteration   5: 26.622 ns/op
Iteration   1: 26.094 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.103 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.073 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.480 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.128 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  26.376 ±(99.9%) 2.378 ns/op [Average]
  (min, avg, max) = (26.073, 26.376, 27.480), stdev = 0.617
  CI (99.9%): [23.998, 28.753] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200)

# Run progress: 12.71% complete, ETA 01:01:42
# Fork: 1 of 1
# Warmup Iteration   1: 35.258 ns/op
# Warmup Iteration   2: 32.879 ns/op
# Warmup Iteration   3: 31.597 ns/op
# Warmup Iteration   4: 31.598 ns/op
# Warmup Iteration   5: 33.010 ns/op
Iteration   1: 31.631 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.626 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.623 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31.664 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.673 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  31.644 ±(99.9%) 0.089 ns/op [Average]
  (min, avg, max) = (31.623, 31.644, 31.673), stdev = 0.023
  CI (99.9%): [31.554, 31.733] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.)

# Run progress: 12.96% complete, ETA 01:01:31
# Fork: 1 of 1
# Warmup Iteration   1: 56.470 ns/op
# Warmup Iteration   2: 51.673 ns/op
# Warmup Iteration   3: 50.620 ns/op
# Warmup Iteration   4: 50.623 ns/op
# Warmup Iteration   5: 50.614 ns/op
Iteration   1: 50.624 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 50.633 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 50.611 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 50.625 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 51.522 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  50.803 ±(99.9%) 1.549 ns/op [Average]
  (min, avg, max) = (50.611, 50.803, 51.522), stdev = 0.402
  CI (99.9%): [49.254, 52.352] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = a.200.200)

# Run progress: 13.20% complete, ETA 01:01:21
# Fork: 1 of 1
# Warmup Iteration   1: 2.518 ns/op
# Warmup Iteration   2: 2.417 ns/op
# Warmup Iteration   3: 2.367 ns/op
# Warmup Iteration   4: 2.365 ns/op
# Warmup Iteration   5: 2.366 ns/op
Iteration   1: 2.366 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.365 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.365 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.365 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.366 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  2.365 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (2.365, 2.365, 2.366), stdev = 0.001
  CI (99.9%): [2.363, 2.367] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.a.200)

# Run progress: 13.45% complete, ETA 01:01:10
# Fork: 1 of 1
# Warmup Iteration   1: 31.576 ns/op
# Warmup Iteration   2: 28.940 ns/op
# Warmup Iteration   3: 27.772 ns/op
# Warmup Iteration   4: 27.767 ns/op
# Warmup Iteration   5: 27.776 ns/op
Iteration   1: 27.777 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.771 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.780 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.808 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.795 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  27.786 ±(99.9%) 0.059 ns/op [Average]
  (min, avg, max) = (27.771, 27.786, 27.808), stdev = 0.015
  CI (99.9%): [27.727, 27.845] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.a)

# Run progress: 13.69% complete, ETA 01:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73.889 ns/op
# Warmup Iteration   2: 68.917 ns/op
# Warmup Iteration   3: 67.114 ns/op
# Warmup Iteration   4: 67.120 ns/op
# Warmup Iteration   5: 67.166 ns/op
Iteration   1: 67.131 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 67.116 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 67.088 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 67.110 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 67.023 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  67.093 ±(99.9%) 0.163 ns/op [Average]
  (min, avg, max) = (67.023, 67.093, 67.131), stdev = 0.042
  CI (99.9%): [66.930, 67.257] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.200.200)

# Run progress: 13.94% complete, ETA 01:00:49
# Fork: 1 of 1
# Warmup Iteration   1: 61.002 ns/op
# Warmup Iteration   2: 57.542 ns/op
# Warmup Iteration   3: 57.256 ns/op
# Warmup Iteration   4: 56.215 ns/op
# Warmup Iteration   5: 56.197 ns/op
Iteration   1: 56.249 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 56.218 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 56.191 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 56.314 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 56.269 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  56.248 ±(99.9%) 0.182 ns/op [Average]
  (min, avg, max) = (56.191, 56.248, 56.314), stdev = 0.047
  CI (99.9%): [56.066, 56.430] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.99999)

# Run progress: 14.18% complete, ETA 01:00:38
# Fork: 1 of 1
# Warmup Iteration   1: 87.088 ns/op
# Warmup Iteration   2: 76.832 ns/op
# Warmup Iteration   3: 74.818 ns/op
# Warmup Iteration   4: 74.847 ns/op
# Warmup Iteration   5: 76.210 ns/op
Iteration   1: 74.885 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 74.885 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 74.770 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 74.844 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 74.892 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  74.855 ±(99.9%) 0.197 ns/op [Average]
  (min, avg, max) = (74.770, 74.855, 74.892), stdev = 0.051
  CI (99.9%): [74.659, 75.052] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.-200)

# Run progress: 14.43% complete, ETA 01:00:28
# Fork: 1 of 1
# Warmup Iteration   1: 62.596 ns/op
# Warmup Iteration   2: 58.992 ns/op
# Warmup Iteration   3: 57.680 ns/op
# Warmup Iteration   4: 57.641 ns/op
# Warmup Iteration   5: 57.665 ns/op
Iteration   1: 57.683 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 57.672 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 58.745 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 57.702 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 57.669 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  57.894 ±(99.9%) 1.833 ns/op [Average]
  (min, avg, max) = (57.669, 57.894, 58.745), stdev = 0.476
  CI (99.9%): [56.062, 59.727] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 1.0.0)

# Run progress: 14.67% complete, ETA 01:00:17
# Fork: 1 of 1
# Warmup Iteration   1: 55.095 ns/op
# Warmup Iteration   2: 49.641 ns/op
# Warmup Iteration   3: 49.260 ns/op
# Warmup Iteration   4: 49.123 ns/op
# Warmup Iteration   5: 49.165 ns/op
Iteration   1: 49.179 ns/op
                 ·gc.alloc.rate:      1550.823 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            8.000 ms

Iteration   2: 49.059 ns/op
                 ·gc.alloc.rate:      1554.218 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 49.044 ns/op
                 ·gc.alloc.rate:      1555.025 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 49.234 ns/op
                 ·gc.alloc.rate:      1548.272 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 48.213 ns/op
                 ·gc.alloc.rate:      1581.891 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  48.946 ±(99.9%) 1.607 ns/op [Average]
  (min, avg, max) = (48.213, 48.946, 49.234), stdev = 0.417
  CI (99.9%): [47.338, 50.553] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  1558.046 ±(99.9%) 52.377 MB/sec [Average]
  (min, avg, max) = (1548.272, 1558.046, 1581.891), stdev = 13.602
  CI (99.9%): [1505.669, 1610.423] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  54.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.800, 11.000), stdev = 0.447
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.time":
  37.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 7.400, 10.000), stdev = 1.817
  CI (99.9%): [37.000, 37.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 200.200.200)

# Run progress: 14.91% complete, ETA 01:00:07
# Fork: 1 of 1
# Warmup Iteration   1: 103.384 ns/op
# Warmup Iteration   2: 85.289 ns/op
# Warmup Iteration   3: 81.700 ns/op
# Warmup Iteration   4: 81.418 ns/op
# Warmup Iteration   5: 81.444 ns/op
Iteration   1: 81.348 ns/op
                 ·gc.alloc.rate:      937.451 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 81.416 ns/op
                 ·gc.alloc.rate:      936.589 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 81.398 ns/op
                 ·gc.alloc.rate:      936.837 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 81.367 ns/op
                 ·gc.alloc.rate:      936.921 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 81.367 ns/op
                 ·gc.alloc.rate:      937.257 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  81.379 ±(99.9%) 0.105 ns/op [Average]
  (min, avg, max) = (81.348, 81.379, 81.416), stdev = 0.027
  CI (99.9%): [81.274, 81.485] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  937.011 ±(99.9%) 1.321 MB/sec [Average]
  (min, avg, max) = (936.589, 937.011, 937.451), stdev = 0.343
  CI (99.9%): [935.690, 938.332] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 15.16% complete, ETA 00:59:56
# Fork: 1 of 1
# Warmup Iteration   1: 126.630 ns/op
# Warmup Iteration   2: 113.002 ns/op
# Warmup Iteration   3: 108.385 ns/op
# Warmup Iteration   4: 108.039 ns/op
# Warmup Iteration   5: 107.911 ns/op
Iteration   1: 107.969 ns/op
                 ·gc.alloc.rate:      706.273 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 107.939 ns/op
                 ·gc.alloc.rate:      706.574 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 108.068 ns/op
                 ·gc.alloc.rate:      705.477 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 108.186 ns/op
                 ·gc.alloc.rate:      704.958 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 107.961 ns/op
                 ·gc.alloc.rate:      706.482 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  108.024 ±(99.9%) 0.397 ns/op [Average]
  (min, avg, max) = (107.939, 108.024, 108.186), stdev = 0.103
  CI (99.9%): [107.628, 108.421] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  705.953 ±(99.9%) 2.711 MB/sec [Average]
  (min, avg, max) = (704.958, 705.953, 706.574), stdev = 0.704
  CI (99.9%): [703.241, 708.664] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  25.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 15.40% complete, ETA 00:59:46
# Fork: 1 of 1
# Warmup Iteration   1: 143.272 ns/op
# Warmup Iteration   2: 123.126 ns/op
# Warmup Iteration   3: 120.700 ns/op
# Warmup Iteration   4: 120.726 ns/op
# Warmup Iteration   5: 120.224 ns/op
Iteration   1: 120.199 ns/op
                 ·gc.alloc.rate:      634.516 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 120.335 ns/op
                 ·gc.alloc.rate:      633.741 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 120.249 ns/op
                 ·gc.alloc.rate:      634.194 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 120.312 ns/op
                 ·gc.alloc.rate:      633.635 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 120.189 ns/op
                 ·gc.alloc.rate:      634.593 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3":
  120.257 ±(99.9%) 0.252 ns/op [Average]
  (min, avg, max) = (120.189, 120.257, 120.335), stdev = 0.066
  CI (99.9%): [120.005, 120.509] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate":
  634.136 ±(99.9%) 1.681 MB/sec [Average]
  (min, avg, max) = (633.635, 634.136, 634.593), stdev = 0.437
  CI (99.9%): [632.455, 635.817] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.count":
  22.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = )

# Run progress: 15.65% complete, ETA 00:59:35
# Fork: 1 of 1
# Warmup Iteration   1: 2.380 ns/op
# Warmup Iteration   2: 2.129 ns/op
# Warmup Iteration   3: 2.069 ns/op
# Warmup Iteration   4: 2.068 ns/op
# Warmup Iteration   5: 2.072 ns/op
Iteration   1: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.072 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.071 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.073 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.072 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  2.072 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (2.071, 2.072, 2.073), stdev = 0.001
  CI (99.9%): [2.070, 2.074] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200)

# Run progress: 15.89% complete, ETA 00:59:25
# Fork: 1 of 1
# Warmup Iteration   1: 11.899 ns/op
# Warmup Iteration   2: 11.392 ns/op
# Warmup Iteration   3: 11.319 ns/op
# Warmup Iteration   4: 11.593 ns/op
# Warmup Iteration   5: 11.353 ns/op
Iteration   1: 11.526 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.819 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.323 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.330 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.333 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  11.466 ±(99.9%) 0.828 ns/op [Average]
  (min, avg, max) = (11.323, 11.466, 11.819), stdev = 0.215
  CI (99.9%): [10.638, 12.294] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.)

# Run progress: 16.14% complete, ETA 00:59:14
# Fork: 1 of 1
# Warmup Iteration   1: 25.543 ns/op
# Warmup Iteration   2: 23.417 ns/op
# Warmup Iteration   3: 21.985 ns/op
# Warmup Iteration   4: 21.990 ns/op
# Warmup Iteration   5: 22.002 ns/op
Iteration   1: 22.010 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 22.011 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 22.003 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 22.013 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 22.010 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  22.010 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (22.003, 22.010, 22.013), stdev = 0.004
  CI (99.9%): [21.994, 22.025] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200)

# Run progress: 16.38% complete, ETA 00:59:04
# Fork: 1 of 1
# Warmup Iteration   1: 33.097 ns/op
# Warmup Iteration   2: 29.590 ns/op
# Warmup Iteration   3: 28.117 ns/op
# Warmup Iteration   4: 28.118 ns/op
# Warmup Iteration   5: 28.118 ns/op
Iteration   1: 28.153 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 28.229 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 28.102 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 28.115 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 28.091 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  28.138 ±(99.9%) 0.215 ns/op [Average]
  (min, avg, max) = (28.091, 28.138, 28.229), stdev = 0.056
  CI (99.9%): [27.922, 28.353] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.)

# Run progress: 16.63% complete, ETA 00:58:53
# Fork: 1 of 1
# Warmup Iteration   1: 55.536 ns/op
# Warmup Iteration   2: 50.736 ns/op
# Warmup Iteration   3: 49.453 ns/op
# Warmup Iteration   4: 49.441 ns/op
# Warmup Iteration   5: 49.437 ns/op
Iteration   1: 49.452 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 49.499 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 49.500 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 50.283 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 52.014 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  50.150 ±(99.9%) 4.229 ns/op [Average]
  (min, avg, max) = (49.452, 50.150, 52.014), stdev = 1.098
  CI (99.9%): [45.921, 54.379] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = a.200.200)

# Run progress: 16.87% complete, ETA 00:58:43
# Fork: 1 of 1
# Warmup Iteration   1: 2.495 ns/op
# Warmup Iteration   2: 2.450 ns/op
# Warmup Iteration   3: 2.368 ns/op
# Warmup Iteration   4: 2.366 ns/op
# Warmup Iteration   5: 2.366 ns/op
Iteration   1: 2.368 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.366 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.366 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.367 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.365 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  2.367 ±(99.9%) 0.003 ns/op [Average]
  (min, avg, max) = (2.365, 2.367, 2.368), stdev = 0.001
  CI (99.9%): [2.363, 2.370] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.a.200)

# Run progress: 17.11% complete, ETA 00:58:32
# Fork: 1 of 1
# Warmup Iteration   1: 27.492 ns/op
# Warmup Iteration   2: 25.058 ns/op
# Warmup Iteration   3: 23.817 ns/op
# Warmup Iteration   4: 23.840 ns/op
# Warmup Iteration   5: 23.775 ns/op
Iteration   1: 23.756 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 23.762 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 23.797 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 23.812 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 23.798 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  23.785 ±(99.9%) 0.094 ns/op [Average]
  (min, avg, max) = (23.756, 23.785, 23.812), stdev = 0.024
  CI (99.9%): [23.691, 23.879] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.a)

# Run progress: 17.36% complete, ETA 00:58:21
# Fork: 1 of 1
# Warmup Iteration   1: 64.000 ns/op
# Warmup Iteration   2: 59.800 ns/op
# Warmup Iteration   3: 58.445 ns/op
# Warmup Iteration   4: 59.199 ns/op
# Warmup Iteration   5: 58.419 ns/op
Iteration   1: 58.437 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 58.470 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 58.406 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 60.304 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 58.503 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  58.824 ±(99.9%) 3.188 ns/op [Average]
  (min, avg, max) = (58.406, 58.824, 60.304), stdev = 0.828
  CI (99.9%): [55.636, 62.012] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.200.200)

# Run progress: 17.60% complete, ETA 00:58:11
# Fork: 1 of 1
# Warmup Iteration   1: 60.941 ns/op
# Warmup Iteration   2: 57.503 ns/op
# Warmup Iteration   3: 56.346 ns/op
# Warmup Iteration   4: 56.339 ns/op
# Warmup Iteration   5: 56.366 ns/op
Iteration   1: 56.363 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 56.377 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 56.375 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 56.399 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 56.392 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  56.381 ±(99.9%) 0.056 ns/op [Average]
  (min, avg, max) = (56.363, 56.381, 56.399), stdev = 0.015
  CI (99.9%): [56.325, 56.437] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.99999)

# Run progress: 17.85% complete, ETA 00:58:00
# Fork: 1 of 1
# Warmup Iteration   1: 79.693 ns/op
# Warmup Iteration   2: 73.681 ns/op
# Warmup Iteration   3: 73.642 ns/op
# Warmup Iteration   4: 71.848 ns/op
# Warmup Iteration   5: 71.815 ns/op
Iteration   1: 71.832 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 71.870 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 71.821 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 71.799 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 71.800 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  71.824 ±(99.9%) 0.111 ns/op [Average]
  (min, avg, max) = (71.799, 71.824, 71.870), stdev = 0.029
  CI (99.9%): [71.713, 71.936] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.-200)

# Run progress: 18.09% complete, ETA 00:57:50
# Fork: 1 of 1
# Warmup Iteration   1: 63.289 ns/op
# Warmup Iteration   2: 60.452 ns/op
# Warmup Iteration   3: 58.772 ns/op
# Warmup Iteration   4: 58.799 ns/op
# Warmup Iteration   5: 58.835 ns/op
Iteration   1: 58.759 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 60.484 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 58.745 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 58.710 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 58.629 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  59.065 ±(99.9%) 3.060 ns/op [Average]
  (min, avg, max) = (58.629, 59.065, 60.484), stdev = 0.795
  CI (99.9%): [56.006, 62.125] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 1.0.0)

# Run progress: 18.34% complete, ETA 00:57:39
# Fork: 1 of 1
# Warmup Iteration   1: 51.213 ns/op
# Warmup Iteration   2: 46.452 ns/op
# Warmup Iteration   3: 44.989 ns/op
# Warmup Iteration   4: 43.835 ns/op
# Warmup Iteration   5: 43.809 ns/op
Iteration   1: 47.674 ns/op
                 ·gc.alloc.rate:      1599.771 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 44.282 ns/op
                 ·gc.alloc.rate:      1722.181 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 43.738 ns/op
                 ·gc.alloc.rate:      1743.333 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 43.700 ns/op
                 ·gc.alloc.rate:      1744.601 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 45.928 ns/op
                 ·gc.alloc.rate:      1660.528 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            8.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  45.064 ±(99.9%) 6.610 ns/op [Average]
  (min, avg, max) = (43.700, 45.064, 47.674), stdev = 1.717
  CI (99.9%): [38.455, 51.674] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  1694.083 ±(99.9%) 241.916 MB/sec [Average]
  (min, avg, max) = (1599.771, 1694.083, 1744.601), stdev = 62.825
  CI (99.9%): [1452.167, 1935.999] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  58.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
  CI (99.9%): [58.000, 58.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.time":
  31.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 200.200.200)

# Run progress: 18.58% complete, ETA 00:57:29
# Fork: 1 of 1
# Warmup Iteration   1: 89.418 ns/op
# Warmup Iteration   2: 79.723 ns/op
# Warmup Iteration   3: 75.904 ns/op
# Warmup Iteration   4: 75.903 ns/op
# Warmup Iteration   5: 75.880 ns/op
Iteration   1: 75.703 ns/op
                 ·gc.alloc.rate:      1007.427 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 75.692 ns/op
                 ·gc.alloc.rate:      1007.552 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 78.547 ns/op
                 ·gc.alloc.rate:      970.857 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 75.554 ns/op
                 ·gc.alloc.rate:      1009.000 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 77.466 ns/op
                 ·gc.alloc.rate:      984.299 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  76.592 ±(99.9%) 5.190 ns/op [Average]
  (min, avg, max) = (75.554, 76.592, 78.547), stdev = 1.348
  CI (99.9%): [71.403, 81.782] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  995.827 ±(99.9%) 66.749 MB/sec [Average]
  (min, avg, max) = (970.857, 995.827, 1009.000), stdev = 17.335
  CI (99.9%): [929.078, 1062.577] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 18.83% complete, ETA 00:57:18
# Fork: 1 of 1
# Warmup Iteration   1: 108.964 ns/op
# Warmup Iteration   2: 98.989 ns/op
# Warmup Iteration   3: 92.636 ns/op
# Warmup Iteration   4: 91.959 ns/op
# Warmup Iteration   5: 108.169 ns/op
Iteration   1: 91.878 ns/op
                 ·gc.alloc.rate:      830.071 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 92.099 ns/op
                 ·gc.alloc.rate:      827.961 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 92.125 ns/op
                 ·gc.alloc.rate:      827.834 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 92.306 ns/op
                 ·gc.alloc.rate:      825.950 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 92.153 ns/op
                 ·gc.alloc.rate:      827.647 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  92.112 ±(99.9%) 0.592 ns/op [Average]
  (min, avg, max) = (91.878, 92.112, 92.306), stdev = 0.154
  CI (99.9%): [91.520, 92.704] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  827.892 ±(99.9%) 5.642 MB/sec [Average]
  (min, avg, max) = (825.950, 827.892, 830.071), stdev = 1.465
  CI (99.9%): [822.251, 833.534] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 19.07% complete, ETA 00:57:08
# Fork: 1 of 1
# Warmup Iteration   1: 125.761 ns/op
# Warmup Iteration   2: 111.241 ns/op
# Warmup Iteration   3: 107.430 ns/op
# Warmup Iteration   4: 106.984 ns/op
# Warmup Iteration   5: 106.873 ns/op
Iteration   1: 106.733 ns/op
                 ·gc.alloc.rate:      714.552 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 106.768 ns/op
                 ·gc.alloc.rate:      714.303 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 106.994 ns/op
                 ·gc.alloc.rate:      712.723 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 109.009 ns/op
                 ·gc.alloc.rate:      699.448 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 107.129 ns/op
                 ·gc.alloc.rate:      711.900 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java":
  107.327 ±(99.9%) 3.675 ns/op [Average]
  (min, avg, max) = (106.733, 107.327, 109.009), stdev = 0.954
  CI (99.9%): [103.651, 111.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate":
  710.585 ±(99.9%) 24.346 MB/sec [Average]
  (min, avg, max) = (699.448, 710.585, 714.552), stdev = 6.323
  CI (99.9%): [686.239, 734.932] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.count":
  24.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3Java:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = )

# Run progress: 19.32% complete, ETA 00:56:58
# Fork: 1 of 1
# Warmup Iteration   1: 2.217 ns/op
# Warmup Iteration   2: 2.148 ns/op
# Warmup Iteration   3: 2.069 ns/op
# Warmup Iteration   4: 2.070 ns/op
# Warmup Iteration   5: 2.073 ns/op
Iteration   1: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.072 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.068 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.069 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.077 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  2.071 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (2.068, 2.071, 2.077), stdev = 0.004
  CI (99.9%): [2.058, 2.085] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200)

# Run progress: 19.56% complete, ETA 00:56:47
# Fork: 1 of 1
# Warmup Iteration   1: 11.837 ns/op
# Warmup Iteration   2: 11.787 ns/op
# Warmup Iteration   3: 11.275 ns/op
# Warmup Iteration   4: 11.272 ns/op
# Warmup Iteration   5: 11.457 ns/op
Iteration   1: 11.279 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.294 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.291 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.283 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.288 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  11.287 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (11.279, 11.287, 11.294), stdev = 0.006
  CI (99.9%): [11.264, 11.310] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.)

# Run progress: 19.80% complete, ETA 00:56:37
# Fork: 1 of 1
# Warmup Iteration   1: 24.606 ns/op
# Warmup Iteration   2: 22.997 ns/op
# Warmup Iteration   3: 21.985 ns/op
# Warmup Iteration   4: 21.994 ns/op
# Warmup Iteration   5: 22.022 ns/op
Iteration   1: 22.020 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.985 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.930 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.939 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.960 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  21.967 ±(99.9%) 0.141 ns/op [Average]
  (min, avg, max) = (21.930, 21.967, 22.020), stdev = 0.037
  CI (99.9%): [21.826, 22.108] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200)

# Run progress: 20.05% complete, ETA 00:56:26
# Fork: 1 of 1
# Warmup Iteration   1: 30.079 ns/op
# Warmup Iteration   2: 28.706 ns/op
# Warmup Iteration   3: 26.649 ns/op
# Warmup Iteration   4: 26.644 ns/op
# Warmup Iteration   5: 26.633 ns/op
Iteration   1: 27.898 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.663 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.184 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.687 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.681 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  27.022 ±(99.9%) 2.066 ns/op [Average]
  (min, avg, max) = (26.663, 27.022, 27.898), stdev = 0.536
  CI (99.9%): [24.957, 29.088] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.)

# Run progress: 20.29% complete, ETA 00:56:16
# Fork: 1 of 1
# Warmup Iteration   1: 54.037 ns/op
# Warmup Iteration   2: 50.372 ns/op
# Warmup Iteration   3: 49.065 ns/op
# Warmup Iteration   4: 49.150 ns/op
# Warmup Iteration   5: 49.102 ns/op
Iteration   1: 49.176 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 49.075 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 49.125 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 49.119 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 51.528 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  49.605 ±(99.9%) 4.143 ns/op [Average]
  (min, avg, max) = (49.075, 49.605, 51.528), stdev = 1.076
  CI (99.9%): [45.461, 53.748] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = a.200.200)

# Run progress: 20.54% complete, ETA 00:56:05
# Fork: 1 of 1
# Warmup Iteration   1: 3.135 ns/op
# Warmup Iteration   2: 3.042 ns/op
# Warmup Iteration   3: 2.956 ns/op
# Warmup Iteration   4: 2.957 ns/op
# Warmup Iteration   5: 2.957 ns/op
Iteration   1: 2.955 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.956 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.954 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.954 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.956 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  2.955 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (2.954, 2.955, 2.956), stdev = 0.001
  CI (99.9%): [2.951, 2.959] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.a.200)

# Run progress: 20.78% complete, ETA 00:55:55
# Fork: 1 of 1
# Warmup Iteration   1: 26.200 ns/op
# Warmup Iteration   2: 24.465 ns/op
# Warmup Iteration   3: 23.007 ns/op
# Warmup Iteration   4: 23.005 ns/op
# Warmup Iteration   5: 23.005 ns/op
Iteration   1: 23.022 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 23.023 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 23.025 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 23.035 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 23.032 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  23.027 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (23.022, 23.027, 23.035), stdev = 0.006
  CI (99.9%): [23.005, 23.049] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.a)

# Run progress: 21.03% complete, ETA 00:55:44
# Fork: 1 of 1
# Warmup Iteration   1: 58.147 ns/op
# Warmup Iteration   2: 54.392 ns/op
# Warmup Iteration   3: 53.862 ns/op
# Warmup Iteration   4: 52.937 ns/op
# Warmup Iteration   5: 52.921 ns/op
Iteration   1: 52.952 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 52.945 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 52.921 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 52.961 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 53.096 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  52.975 ±(99.9%) 0.266 ns/op [Average]
  (min, avg, max) = (52.921, 52.975, 53.096), stdev = 0.069
  CI (99.9%): [52.709, 53.241] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.200.200)

# Run progress: 21.27% complete, ETA 00:55:34
# Fork: 1 of 1
# Warmup Iteration   1: 59.050 ns/op
# Warmup Iteration   2: 56.320 ns/op
# Warmup Iteration   3: 53.608 ns/op
# Warmup Iteration   4: 53.584 ns/op
# Warmup Iteration   5: 53.760 ns/op
Iteration   1: 53.567 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 53.824 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 53.758 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 53.503 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 53.523 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  53.635 ±(99.9%) 0.563 ns/op [Average]
  (min, avg, max) = (53.503, 53.635, 53.824), stdev = 0.146
  CI (99.9%): [53.072, 54.198] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.99999)

# Run progress: 21.52% complete, ETA 00:55:23
# Fork: 1 of 1
# Warmup Iteration   1: 88.795 ns/op
# Warmup Iteration   2: 80.052 ns/op
# Warmup Iteration   3: 76.406 ns/op
# Warmup Iteration   4: 76.249 ns/op
# Warmup Iteration   5: 77.040 ns/op
Iteration   1: 77.031 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76.993 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 78.442 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76.460 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76.563 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  77.098 ±(99.9%) 3.053 ns/op [Average]
  (min, avg, max) = (76.460, 77.098, 78.442), stdev = 0.793
  CI (99.9%): [74.045, 80.151] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.-200)

# Run progress: 21.76% complete, ETA 00:55:13
# Fork: 1 of 1
# Warmup Iteration   1: 57.219 ns/op
# Warmup Iteration   2: 53.589 ns/op
# Warmup Iteration   3: 51.702 ns/op
# Warmup Iteration   4: 51.679 ns/op
# Warmup Iteration   5: 51.710 ns/op
Iteration   1: 51.671 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 51.726 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 51.711 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 51.759 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 51.753 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  51.724 ±(99.9%) 0.137 ns/op [Average]
  (min, avg, max) = (51.671, 51.724, 51.759), stdev = 0.036
  CI (99.9%): [51.587, 51.861] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 1.0.0)

# Run progress: 22.00% complete, ETA 00:55:02
# Fork: 1 of 1
# Warmup Iteration   1: 53.387 ns/op
# Warmup Iteration   2: 46.866 ns/op
# Warmup Iteration   3: 44.603 ns/op
# Warmup Iteration   4: 44.597 ns/op
# Warmup Iteration   5: 44.556 ns/op
Iteration   1: 44.611 ns/op
                 ·gc.alloc.rate:      1709.576 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            7.000 ms

Iteration   2: 44.851 ns/op
                 ·gc.alloc.rate:      1700.260 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            9.000 ms

Iteration   3: 44.840 ns/op
                 ·gc.alloc.rate:      1700.723 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 44.719 ns/op
                 ·gc.alloc.rate:      1704.827 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            8.000 ms

Iteration   5: 44.655 ns/op
                 ·gc.alloc.rate:      1707.860 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  44.735 ±(99.9%) 0.415 ns/op [Average]
  (min, avg, max) = (44.611, 44.735, 44.851), stdev = 0.108
  CI (99.9%): [44.321, 45.150] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  1704.649 ±(99.9%) 16.027 MB/sec [Average]
  (min, avg, max) = (1700.260, 1704.649, 1709.576), stdev = 4.162
  CI (99.9%): [1688.622, 1720.676] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  59.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.800, 12.000), stdev = 0.447
  CI (99.9%): [59.000, 59.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time":
  39.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.800, 9.000), stdev = 1.304
  CI (99.9%): [39.000, 39.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.200)

# Run progress: 22.25% complete, ETA 00:54:52
# Fork: 1 of 1
# Warmup Iteration   1: 91.182 ns/op
# Warmup Iteration   2: 78.500 ns/op
# Warmup Iteration   3: 74.859 ns/op
# Warmup Iteration   4: 74.610 ns/op
# Warmup Iteration   5: 74.689 ns/op
Iteration   1: 74.711 ns/op
                 ·gc.alloc.rate:      1020.900 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 74.796 ns/op
                 ·gc.alloc.rate:      1019.577 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 74.925 ns/op
                 ·gc.alloc.rate:      1017.896 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 74.659 ns/op
                 ·gc.alloc.rate:      1021.146 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 74.722 ns/op
                 ·gc.alloc.rate:      1020.660 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  74.762 ±(99.9%) 0.397 ns/op [Average]
  (min, avg, max) = (74.659, 74.762, 74.925), stdev = 0.103
  CI (99.9%): [74.366, 75.159] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  1020.036 ±(99.9%) 5.151 MB/sec [Average]
  (min, avg, max) = (1017.896, 1020.036, 1021.146), stdev = 1.338
  CI (99.9%): [1014.885, 1025.187] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 22.49% complete, ETA 00:54:42
# Fork: 1 of 1
# Warmup Iteration   1: 105.428 ns/op
# Warmup Iteration   2: 93.362 ns/op
# Warmup Iteration   3: 87.871 ns/op
# Warmup Iteration   4: 87.330 ns/op
# Warmup Iteration   5: 87.043 ns/op
Iteration   1: 87.355 ns/op
                 ·gc.alloc.rate:      873.082 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 87.110 ns/op
                 ·gc.alloc.rate:      875.333 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 87.112 ns/op
                 ·gc.alloc.rate:      875.431 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 86.977 ns/op
                 ·gc.alloc.rate:      876.647 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 87.344 ns/op
                 ·gc.alloc.rate:      873.096 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  87.180 ±(99.9%) 0.633 ns/op [Average]
  (min, avg, max) = (86.977, 87.180, 87.355), stdev = 0.164
  CI (99.9%): [86.546, 87.813] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  874.718 ±(99.9%) 6.063 MB/sec [Average]
  (min, avg, max) = (873.082, 874.718, 876.647), stdev = 1.575
  CI (99.9%): [868.655, 880.781] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 22.74% complete, ETA 00:54:31
# Fork: 1 of 1
# Warmup Iteration   1: 124.093 ns/op
# Warmup Iteration   2: 101.708 ns/op
# Warmup Iteration   3: 99.752 ns/op
# Warmup Iteration   4: 96.647 ns/op
# Warmup Iteration   5: 96.894 ns/op
Iteration   1: 96.729 ns/op
                 ·gc.alloc.rate:      788.360 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 99.378 ns/op
                 ·gc.alloc.rate:      767.121 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 96.534 ns/op
                 ·gc.alloc.rate:      789.887 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 96.435 ns/op
                 ·gc.alloc.rate:      790.575 MB/sec
                 ·gc.alloc.rate.norm: 40.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 96.499 ns/op
                 ·gc.alloc.rate:      790.393 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch":
  97.115 ±(99.9%) 4.890 ns/op [Average]
  (min, avg, max) = (96.435, 97.115, 99.378), stdev = 1.270
  CI (99.9%): [92.225, 102.005] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  785.267 ±(99.9%) 39.204 MB/sec [Average]
  (min, avg, max) = (767.121, 785.267, 790.575), stdev = 10.181
  CI (99.9%): [746.063, 824.472] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.001), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = )

# Run progress: 22.98% complete, ETA 00:54:21
# Fork: 1 of 1
# Warmup Iteration   1: 2.154 ns/op
# Warmup Iteration   2: 2.136 ns/op
# Warmup Iteration   3: 2.069 ns/op
# Warmup Iteration   4: 2.070 ns/op
# Warmup Iteration   5: 2.071 ns/op
Iteration   1: 2.104 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.069 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.069 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.072 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  2.077 ±(99.9%) 0.057 ns/op [Average]
  (min, avg, max) = (2.069, 2.077, 2.104), stdev = 0.015
  CI (99.9%): [2.019, 2.134] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200)

# Run progress: 23.23% complete, ETA 00:54:10
# Fork: 1 of 1
# Warmup Iteration   1: 16.913 ns/op
# Warmup Iteration   2: 15.861 ns/op
# Warmup Iteration   3: 15.892 ns/op
# Warmup Iteration   4: 15.883 ns/op
# Warmup Iteration   5: 15.887 ns/op
Iteration   1: 15.912 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15.906 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.902 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.914 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.901 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  15.907 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (15.901, 15.907, 15.914), stdev = 0.006
  CI (99.9%): [15.884, 15.930] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.)

# Run progress: 23.47% complete, ETA 00:54:00
# Fork: 1 of 1
# Warmup Iteration   1: 21.900 ns/op
# Warmup Iteration   2: 20.458 ns/op
# Warmup Iteration   3: 19.505 ns/op
# Warmup Iteration   4: 19.491 ns/op
# Warmup Iteration   5: 19.460 ns/op
Iteration   1: 19.466 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.529 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.456 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.480 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.461 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  19.479 ±(99.9%) 0.114 ns/op [Average]
  (min, avg, max) = (19.456, 19.479, 19.529), stdev = 0.030
  CI (99.9%): [19.364, 19.593] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200)

# Run progress: 23.72% complete, ETA 00:53:49
# Fork: 1 of 1
# Warmup Iteration   1: 32.920 ns/op
# Warmup Iteration   2: 30.393 ns/op
# Warmup Iteration   3: 29.160 ns/op
# Warmup Iteration   4: 29.172 ns/op
# Warmup Iteration   5: 29.187 ns/op
Iteration   1: 29.170 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.183 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.145 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.474 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.184 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  29.231 ±(99.9%) 0.526 ns/op [Average]
  (min, avg, max) = (29.145, 29.231, 29.474), stdev = 0.137
  CI (99.9%): [28.705, 29.757] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.)

# Run progress: 23.96% complete, ETA 00:53:39
# Fork: 1 of 1
# Warmup Iteration   1: 34.998 ns/op
# Warmup Iteration   2: 32.536 ns/op
# Warmup Iteration   3: 31.257 ns/op
# Warmup Iteration   4: 31.073 ns/op
# Warmup Iteration   5: 31.112 ns/op
Iteration   1: 31.110 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.136 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31.118 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.964 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  31.280 ±(99.9%) 1.477 ns/op [Average]
  (min, avg, max) = (31.070, 31.280, 31.964), stdev = 0.383
  CI (99.9%): [29.803, 32.756] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = a.200.200)

# Run progress: 24.21% complete, ETA 00:53:29
# Fork: 1 of 1
# Warmup Iteration   1: 2.499 ns/op
# Warmup Iteration   2: 2.437 ns/op
# Warmup Iteration   3: 2.365 ns/op
# Warmup Iteration   4: 2.376 ns/op
# Warmup Iteration   5: 2.366 ns/op
Iteration   1: 2.365 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.365 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.368 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.369 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.367 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  2.367 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (2.365, 2.367, 2.369), stdev = 0.002
  CI (99.9%): [2.360, 2.373] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.a.200)

# Run progress: 24.45% complete, ETA 00:53:18
# Fork: 1 of 1
# Warmup Iteration   1: 22.478 ns/op
# Warmup Iteration   2: 20.563 ns/op
# Warmup Iteration   3: 19.454 ns/op
# Warmup Iteration   4: 19.760 ns/op
# Warmup Iteration   5: 19.442 ns/op
Iteration   1: 19.451 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.454 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.444 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.450 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.456 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  19.451 ±(99.9%) 0.019 ns/op [Average]
  (min, avg, max) = (19.444, 19.451, 19.456), stdev = 0.005
  CI (99.9%): [19.432, 19.470] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.a)

# Run progress: 24.69% complete, ETA 00:53:08
# Fork: 1 of 1
# Warmup Iteration   1: 33.471 ns/op
# Warmup Iteration   2: 30.524 ns/op
# Warmup Iteration   3: 29.778 ns/op
# Warmup Iteration   4: 29.768 ns/op
# Warmup Iteration   5: 29.793 ns/op
Iteration   1: 29.770 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.783 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.776 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.754 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.780 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  29.772 ±(99.9%) 0.044 ns/op [Average]
  (min, avg, max) = (29.754, 29.772, 29.783), stdev = 0.011
  CI (99.9%): [29.728, 29.817] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.200.200)

# Run progress: 24.94% complete, ETA 00:52:57
# Fork: 1 of 1
# Warmup Iteration   1: 44.047 ns/op
# Warmup Iteration   2: 41.832 ns/op
# Warmup Iteration   3: 41.664 ns/op
# Warmup Iteration   4: 42.004 ns/op
# Warmup Iteration   5: 41.526 ns/op
Iteration   1: 41.623 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 41.774 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 41.804 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 41.710 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 41.914 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  41.765 ±(99.9%) 0.417 ns/op [Average]
  (min, avg, max) = (41.623, 41.765, 41.914), stdev = 0.108
  CI (99.9%): [41.348, 42.182] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.99999)

# Run progress: 25.18% complete, ETA 00:52:47
# Fork: 1 of 1
# Warmup Iteration   1: 48.373 ns/op
# Warmup Iteration   2: 45.230 ns/op
# Warmup Iteration   3: 44.199 ns/op
# Warmup Iteration   4: 44.279 ns/op
# Warmup Iteration   5: 44.304 ns/op
Iteration   1: 44.269 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 44.423 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 44.991 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 44.169 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 45.613 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  44.693 ±(99.9%) 2.328 ns/op [Average]
  (min, avg, max) = (44.169, 44.693, 45.613), stdev = 0.605
  CI (99.9%): [42.365, 47.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.-200)

# Run progress: 25.43% complete, ETA 00:52:37
# Fork: 1 of 1
# Warmup Iteration   1: 33.237 ns/op
# Warmup Iteration   2: 30.733 ns/op
# Warmup Iteration   3: 29.761 ns/op
# Warmup Iteration   4: 29.757 ns/op
# Warmup Iteration   5: 29.783 ns/op
Iteration   1: 29.793 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.785 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.784 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.780 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.774 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  29.783 ±(99.9%) 0.028 ns/op [Average]
  (min, avg, max) = (29.774, 29.783, 29.793), stdev = 0.007
  CI (99.9%): [29.755, 29.811] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 1.0.0)

# Run progress: 25.67% complete, ETA 00:52:26
# Fork: 1 of 1
# Warmup Iteration   1: 30.742 ns/op
# Warmup Iteration   2: 25.158 ns/op
# Warmup Iteration   3: 23.963 ns/op
# Warmup Iteration   4: 23.967 ns/op
# Warmup Iteration   5: 23.977 ns/op
Iteration   1: 24.067 ns/op
                 ·gc.alloc.rate:      3168.724 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 25.787 ns/op
                 ·gc.alloc.rate:      2957.485 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 23.993 ns/op
                 ·gc.alloc.rate:      3178.644 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 25.403 ns/op
                 ·gc.alloc.rate:      3001.302 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 24.636 ns/op
                 ·gc.alloc.rate:      3095.429 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  24.777 ±(99.9%) 3.074 ns/op [Average]
  (min, avg, max) = (23.993, 24.777, 25.787), stdev = 0.798
  CI (99.9%): [21.703, 27.851] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  3080.317 ±(99.9%) 380.433 MB/sec [Average]
  (min, avg, max) = (2957.485, 3080.317, 3178.644), stdev = 98.797
  CI (99.9%): [2699.884, 3460.749] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  92.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (17.000, 18.400, 19.000), stdev = 0.894
  CI (99.9%): [92.000, 92.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.time":
  51.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
  CI (99.9%): [51.000, 51.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 200.200.200)

# Run progress: 25.92% complete, ETA 00:52:16
# Fork: 1 of 1
# Warmup Iteration   1: 50.111 ns/op
# Warmup Iteration   2: 48.168 ns/op
# Warmup Iteration   3: 42.008 ns/op
# Warmup Iteration   4: 42.918 ns/op
# Warmup Iteration   5: 41.994 ns/op
Iteration   1: 41.866 ns/op
                 ·gc.alloc.rate:      1821.607 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 41.921 ns/op
                 ·gc.alloc.rate:      1819.100 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 41.954 ns/op
                 ·gc.alloc.rate:      1817.688 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 41.965 ns/op
                 ·gc.alloc.rate:      1816.590 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            8.000 ms

Iteration   5: 41.987 ns/op
                 ·gc.alloc.rate:      1816.493 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            9.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  41.939 ±(99.9%) 0.180 ns/op [Average]
  (min, avg, max) = (41.866, 41.939, 41.987), stdev = 0.047
  CI (99.9%): [41.758, 42.119] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  1818.296 ±(99.9%) 8.200 MB/sec [Average]
  (min, avg, max) = (1816.493, 1818.296, 1821.607), stdev = 2.129
  CI (99.9%): [1810.096, 1826.495] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  62.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 12.400, 13.000), stdev = 0.548
  CI (99.9%): [62.000, 62.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.time":
  38.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
  CI (99.9%): [38.000, 38.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 26.16% complete, ETA 00:52:05
# Fork: 1 of 1
# Warmup Iteration   1: 66.084 ns/op
# Warmup Iteration   2: 59.258 ns/op
# Warmup Iteration   3: 53.222 ns/op
# Warmup Iteration   4: 53.091 ns/op
# Warmup Iteration   5: 55.556 ns/op
Iteration   1: 53.178 ns/op
                 ·gc.alloc.rate:      1434.050 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 53.223 ns/op
                 ·gc.alloc.rate:      1432.639 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 53.143 ns/op
                 ·gc.alloc.rate:      1435.057 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 53.057 ns/op
                 ·gc.alloc.rate:      1436.795 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 53.121 ns/op
                 ·gc.alloc.rate:      1435.708 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  53.144 ±(99.9%) 0.239 ns/op [Average]
  (min, avg, max) = (53.057, 53.144, 53.223), stdev = 0.062
  CI (99.9%): [52.905, 53.383] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  1434.850 ±(99.9%) 6.116 MB/sec [Average]
  (min, avg, max) = (1432.639, 1434.850, 1436.795), stdev = 1.588
  CI (99.9%): [1428.734, 1440.965] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  49.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
  CI (99.9%): [49.000, 49.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.time":
  25.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized4
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 26.41% complete, ETA 00:51:55
# Fork: 1 of 1
# Warmup Iteration   1: 66.777 ns/op
# Warmup Iteration   2: 64.820 ns/op
# Warmup Iteration   3: 60.053 ns/op
# Warmup Iteration   4: 59.889 ns/op
# Warmup Iteration   5: 59.929 ns/op
Iteration   1: 60.143 ns/op
                 ·gc.alloc.rate:      1268.097 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 59.870 ns/op
                 ·gc.alloc.rate:      1273.745 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 60.069 ns/op
                 ·gc.alloc.rate:      1269.599 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 60.295 ns/op
                 ·gc.alloc.rate:      1264.477 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 59.923 ns/op
                 ·gc.alloc.rate:      1272.504 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4":
  60.060 ±(99.9%) 0.659 ns/op [Average]
  (min, avg, max) = (59.870, 60.060, 60.295), stdev = 0.171
  CI (99.9%): [59.401, 60.719] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate":
  1269.685 ±(99.9%) 14.159 MB/sec [Average]
  (min, avg, max) = (1264.477, 1269.685, 1273.745), stdev = 3.677
  CI (99.9%): [1255.525, 1283.844] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.count":
  44.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized4:·gc.time":
  22.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = )

# Run progress: 26.65% complete, ETA 00:51:45
# Fork: 1 of 1
# Warmup Iteration   1: 2.200 ns/op
# Warmup Iteration   2: 2.111 ns/op
# Warmup Iteration   3: 2.083 ns/op
# Warmup Iteration   4: 2.085 ns/op
# Warmup Iteration   5: 2.103 ns/op
Iteration   1: 2.093 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.085 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.084 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.083 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.085 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  2.086 ±(99.9%) 0.016 ns/op [Average]
  (min, avg, max) = (2.083, 2.086, 2.093), stdev = 0.004
  CI (99.9%): [2.070, 2.102] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200)

# Run progress: 26.89% complete, ETA 00:51:34
# Fork: 1 of 1
# Warmup Iteration   1: 17.503 ns/op
# Warmup Iteration   2: 16.245 ns/op
# Warmup Iteration   3: 15.606 ns/op
# Warmup Iteration   4: 15.608 ns/op
# Warmup Iteration   5: 15.613 ns/op
Iteration   1: 15.622 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15.617 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.610 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.619 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.619 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  15.617 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (15.610, 15.617, 15.622), stdev = 0.005
  CI (99.9%): [15.599, 15.635] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.)

# Run progress: 27.14% complete, ETA 00:51:24
# Fork: 1 of 1
# Warmup Iteration   1: 16.576 ns/op
# Warmup Iteration   2: 15.756 ns/op
# Warmup Iteration   3: 14.789 ns/op
# Warmup Iteration   4: 14.781 ns/op
# Warmup Iteration   5: 14.780 ns/op
Iteration   1: 14.755 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14.766 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14.753 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14.760 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14.779 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  14.762 ±(99.9%) 0.040 ns/op [Average]
  (min, avg, max) = (14.753, 14.762, 14.779), stdev = 0.010
  CI (99.9%): [14.723, 14.802] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200)

# Run progress: 27.38% complete, ETA 00:51:13
# Fork: 1 of 1
# Warmup Iteration   1: 36.177 ns/op
# Warmup Iteration   2: 33.254 ns/op
# Warmup Iteration   3: 32.429 ns/op
# Warmup Iteration   4: 32.413 ns/op
# Warmup Iteration   5: 32.434 ns/op
Iteration   1: 32.439 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.438 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.434 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.432 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.447 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  32.438 ±(99.9%) 0.021 ns/op [Average]
  (min, avg, max) = (32.432, 32.438, 32.447), stdev = 0.005
  CI (99.9%): [32.417, 32.459] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.)

# Run progress: 27.63% complete, ETA 00:51:03
# Fork: 1 of 1
# Warmup Iteration   1: 29.161 ns/op
# Warmup Iteration   2: 27.699 ns/op
# Warmup Iteration   3: 28.257 ns/op
# Warmup Iteration   4: 28.260 ns/op
# Warmup Iteration   5: 28.257 ns/op
Iteration   1: 28.626 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 28.292 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 28.305 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 28.268 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 28.251 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  28.348 ±(99.9%) 0.603 ns/op [Average]
  (min, avg, max) = (28.251, 28.348, 28.626), stdev = 0.157
  CI (99.9%): [27.745, 28.952] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = a.200.200)

# Run progress: 27.87% complete, ETA 00:50:53
# Fork: 1 of 1
# Warmup Iteration   1: 3.754 ns/op
# Warmup Iteration   2: 4.365 ns/op
# Warmup Iteration   3: 3.283 ns/op
# Warmup Iteration   4: 3.272 ns/op
# Warmup Iteration   5: 3.295 ns/op
Iteration   1: 3.291 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.280 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.270 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.278 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.274 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  3.279 ±(99.9%) 0.031 ns/op [Average]
  (min, avg, max) = (3.270, 3.279, 3.291), stdev = 0.008
  CI (99.9%): [3.248, 3.309] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.a.200)

# Run progress: 28.12% complete, ETA 00:50:42
# Fork: 1 of 1
# Warmup Iteration   1: 21.150 ns/op
# Warmup Iteration   2: 19.669 ns/op
# Warmup Iteration   3: 18.529 ns/op
# Warmup Iteration   4: 18.576 ns/op
# Warmup Iteration   5: 18.442 ns/op
Iteration   1: 18.441 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.434 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.438 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.461 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.444 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  18.443 ±(99.9%) 0.040 ns/op [Average]
  (min, avg, max) = (18.434, 18.443, 18.461), stdev = 0.010
  CI (99.9%): [18.403, 18.484] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.a)

# Run progress: 28.36% complete, ETA 00:50:32
# Fork: 1 of 1
# Warmup Iteration   1: 38.154 ns/op
# Warmup Iteration   2: 34.263 ns/op
# Warmup Iteration   3: 33.867 ns/op
# Warmup Iteration   4: 32.967 ns/op
# Warmup Iteration   5: 34.011 ns/op
Iteration   1: 33.037 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 33.033 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 33.011 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.057 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 33.002 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  33.028 ±(99.9%) 0.084 ns/op [Average]
  (min, avg, max) = (33.002, 33.028, 33.057), stdev = 0.022
  CI (99.9%): [32.944, 33.112] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.200.200)

# Run progress: 28.61% complete, ETA 00:50:22
# Fork: 1 of 1
# Warmup Iteration   1: 51.997 ns/op
# Warmup Iteration   2: 49.856 ns/op
# Warmup Iteration   3: 44.943 ns/op
# Warmup Iteration   4: 45.067 ns/op
# Warmup Iteration   5: 45.025 ns/op
Iteration   1: 44.992 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 45.064 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 45.116 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 45.496 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 44.979 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  45.129 ±(99.9%) 0.819 ns/op [Average]
  (min, avg, max) = (44.979, 45.129, 45.496), stdev = 0.213
  CI (99.9%): [44.311, 45.948] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.99999)

# Run progress: 28.85% complete, ETA 00:50:11
# Fork: 1 of 1
# Warmup Iteration   1: 58.354 ns/op
# Warmup Iteration   2: 54.314 ns/op
# Warmup Iteration   3: 50.126 ns/op
# Warmup Iteration   4: 50.058 ns/op
# Warmup Iteration   5: 50.048 ns/op
Iteration   1: 50.082 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 50.065 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 50.056 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 50.083 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 50.122 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  50.081 ±(99.9%) 0.097 ns/op [Average]
  (min, avg, max) = (50.056, 50.081, 50.122), stdev = 0.025
  CI (99.9%): [49.984, 50.179] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.-200)

# Run progress: 29.10% complete, ETA 00:50:01
# Fork: 1 of 1
# Warmup Iteration   1: 41.001 ns/op
# Warmup Iteration   2: 36.844 ns/op
# Warmup Iteration   3: 33.018 ns/op
# Warmup Iteration   4: 33.043 ns/op
# Warmup Iteration   5: 33.024 ns/op
Iteration   1: 33.066 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 33.065 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 33.024 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.546 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 33.074 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  33.155 ±(99.9%) 0.846 ns/op [Average]
  (min, avg, max) = (33.024, 33.155, 33.546), stdev = 0.220
  CI (99.9%): [32.310, 34.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 1.0.0)

# Run progress: 29.34% complete, ETA 00:49:50
# Fork: 1 of 1
# Warmup Iteration   1: 31.484 ns/op
# Warmup Iteration   2: 29.042 ns/op
# Warmup Iteration   3: 29.421 ns/op
# Warmup Iteration   4: 29.469 ns/op
# Warmup Iteration   5: 29.472 ns/op
Iteration   1: 29.434 ns/op
                 ·gc.alloc.rate:      2591.067 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            8.000 ms

Iteration   2: 29.467 ns/op
                 ·gc.alloc.rate:      2588.368 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 29.520 ns/op
                 ·gc.alloc.rate:      2583.516 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 29.606 ns/op
                 ·gc.alloc.rate:      2574.945 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 29.647 ns/op
                 ·gc.alloc.rate:      2572.684 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  29.535 ±(99.9%) 0.347 ns/op [Average]
  (min, avg, max) = (29.434, 29.535, 29.647), stdev = 0.090
  CI (99.9%): [29.188, 29.882] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  2582.116 ±(99.9%) 31.138 MB/sec [Average]
  (min, avg, max) = (2572.684, 2582.116, 2591.067), stdev = 8.086
  CI (99.9%): [2550.978, 2613.254] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  89.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (17.000, 17.800, 18.000), stdev = 0.447
  CI (99.9%): [89.000, 89.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.time":
  44.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 200.200.200)

# Run progress: 29.58% complete, ETA 00:49:40
# Fork: 1 of 1
# Warmup Iteration   1: 64.254 ns/op
# Warmup Iteration   2: 58.507 ns/op
# Warmup Iteration   3: 56.589 ns/op
# Warmup Iteration   4: 56.632 ns/op
# Warmup Iteration   5: 56.639 ns/op
Iteration   1: 56.514 ns/op
                 ·gc.alloc.rate:      1349.398 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 56.575 ns/op
                 ·gc.alloc.rate:      1348.108 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 56.775 ns/op
                 ·gc.alloc.rate:      1343.078 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 56.441 ns/op
                 ·gc.alloc.rate:      1350.816 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 56.234 ns/op
                 ·gc.alloc.rate:      1356.235 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  56.508 ±(99.9%) 0.759 ns/op [Average]
  (min, avg, max) = (56.234, 56.508, 56.775), stdev = 0.197
  CI (99.9%): [55.749, 57.267] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  1349.527 ±(99.9%) 18.294 MB/sec [Average]
  (min, avg, max) = (1343.078, 1349.527, 1356.235), stdev = 4.751
  CI (99.9%): [1331.232, 1367.821] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  46.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.time":
  31.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 6.200, 9.000), stdev = 1.924
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 29.83% complete, ETA 00:49:30
# Fork: 1 of 1
# Warmup Iteration   1: 80.103 ns/op
# Warmup Iteration   2: 72.696 ns/op
# Warmup Iteration   3: 71.192 ns/op
# Warmup Iteration   4: 70.006 ns/op
# Warmup Iteration   5: 69.885 ns/op
Iteration   1: 70.090 ns/op
                 ·gc.alloc.rate:      1088.158 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            7.000 ms

Iteration   2: 69.934 ns/op
                 ·gc.alloc.rate:      1090.535 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 70.007 ns/op
                 ·gc.alloc.rate:      1089.449 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 69.987 ns/op
                 ·gc.alloc.rate:      1089.413 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 70.014 ns/op
                 ·gc.alloc.rate:      1089.383 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  70.007 ±(99.9%) 0.215 ns/op [Average]
  (min, avg, max) = (69.934, 70.007, 70.090), stdev = 0.056
  CI (99.9%): [69.791, 70.222] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  1089.387 ±(99.9%) 3.241 MB/sec [Average]
  (min, avg, max) = (1088.158, 1089.387, 1090.535), stdev = 0.842
  CI (99.9%): [1086.147, 1092.628] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  38.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
  CI (99.9%): [38.000, 38.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.time":
  30.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized5
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 30.07% complete, ETA 00:49:19
# Fork: 1 of 1
# Warmup Iteration   1: 86.982 ns/op
# Warmup Iteration   2: 79.789 ns/op
# Warmup Iteration   3: 76.427 ns/op
# Warmup Iteration   4: 76.102 ns/op
# Warmup Iteration   5: 76.391 ns/op
Iteration   1: 76.782 ns/op
                 ·gc.alloc.rate:      993.305 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 76.342 ns/op
                 ·gc.alloc.rate:      998.837 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 76.269 ns/op
                 ·gc.alloc.rate:      999.767 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 76.109 ns/op
                 ·gc.alloc.rate:      1001.832 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 76.142 ns/op
                 ·gc.alloc.rate:      1001.628 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5":
  76.329 ±(99.9%) 1.042 ns/op [Average]
  (min, avg, max) = (76.109, 76.329, 76.782), stdev = 0.270
  CI (99.9%): [75.287, 77.370] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate":
  999.074 ±(99.9%) 13.332 MB/sec [Average]
  (min, avg, max) = (993.305, 999.074, 1001.832), stdev = 3.462
  CI (99.9%): [985.742, 1012.406] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [39.999, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized5:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = )

# Run progress: 30.32% complete, ETA 00:49:09
# Fork: 1 of 1
# Warmup Iteration   1: 2.189 ns/op
# Warmup Iteration   2: 2.137 ns/op
# Warmup Iteration   3: 2.069 ns/op
# Warmup Iteration   4: 2.070 ns/op
# Warmup Iteration   5: 2.071 ns/op
Iteration   1: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.072 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.069 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.069 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  2.070 ±(99.9%) 0.005 ns/op [Average]
  (min, avg, max) = (2.069, 2.070, 2.072), stdev = 0.001
  CI (99.9%): [2.065, 2.076] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200)

# Run progress: 30.56% complete, ETA 00:48:59
# Fork: 1 of 1
# Warmup Iteration   1: 14.663 ns/op
# Warmup Iteration   2: 13.408 ns/op
# Warmup Iteration   3: 12.594 ns/op
# Warmup Iteration   4: 12.581 ns/op
# Warmup Iteration   5: 12.596 ns/op
Iteration   1: 12.586 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12.586 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12.601 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.607 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13.371 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  12.750 ±(99.9%) 1.336 ns/op [Average]
  (min, avg, max) = (12.586, 12.750, 13.371), stdev = 0.347
  CI (99.9%): [11.414, 14.087] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.)

# Run progress: 30.81% complete, ETA 00:48:48
# Fork: 1 of 1
# Warmup Iteration   1: 18.188 ns/op
# Warmup Iteration   2: 16.279 ns/op
# Warmup Iteration   3: 15.323 ns/op
# Warmup Iteration   4: 16.133 ns/op
# Warmup Iteration   5: 16.436 ns/op
Iteration   1: 15.342 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15.345 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.616 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.320 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.317 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  15.388 ±(99.9%) 0.493 ns/op [Average]
  (min, avg, max) = (15.317, 15.388, 15.616), stdev = 0.128
  CI (99.9%): [14.895, 15.881] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200)

# Run progress: 31.05% complete, ETA 00:48:38
# Fork: 1 of 1
# Warmup Iteration   1: 28.362 ns/op
# Warmup Iteration   2: 26.134 ns/op
# Warmup Iteration   3: 23.288 ns/op
# Warmup Iteration   4: 23.301 ns/op
# Warmup Iteration   5: 23.285 ns/op
Iteration   1: 23.282 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 23.287 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 23.263 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 23.268 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 23.285 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  23.277 ±(99.9%) 0.041 ns/op [Average]
  (min, avg, max) = (23.263, 23.277, 23.287), stdev = 0.011
  CI (99.9%): [23.235, 23.318] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.)

# Run progress: 31.30% complete, ETA 00:48:27
# Fork: 1 of 1
# Warmup Iteration   1: 31.206 ns/op
# Warmup Iteration   2: 29.088 ns/op
# Warmup Iteration   3: 27.866 ns/op
# Warmup Iteration   4: 27.819 ns/op
# Warmup Iteration   5: 27.843 ns/op
Iteration   1: 27.840 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.905 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 28.507 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.850 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.829 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  27.986 ±(99.9%) 1.126 ns/op [Average]
  (min, avg, max) = (27.829, 27.986, 28.507), stdev = 0.292
  CI (99.9%): [26.860, 29.112] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = a.200.200)

# Run progress: 31.54% complete, ETA 00:48:17
# Fork: 1 of 1
# Warmup Iteration   1: 3.133 ns/op
# Warmup Iteration   2: 3.055 ns/op
# Warmup Iteration   3: 3.009 ns/op
# Warmup Iteration   4: 2.960 ns/op
# Warmup Iteration   5: 2.961 ns/op
Iteration   1: 2.963 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.962 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.963 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.955 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.957 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  2.960 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (2.955, 2.960, 2.963), stdev = 0.004
  CI (99.9%): [2.946, 2.974] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.a.200)

# Run progress: 31.78% complete, ETA 00:48:07
# Fork: 1 of 1
# Warmup Iteration   1: 18.772 ns/op
# Warmup Iteration   2: 17.461 ns/op
# Warmup Iteration   3: 16.329 ns/op
# Warmup Iteration   4: 16.320 ns/op
# Warmup Iteration   5: 16.333 ns/op
Iteration   1: 16.344 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.326 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.340 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.340 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.295 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  16.329 ±(99.9%) 0.077 ns/op [Average]
  (min, avg, max) = (16.295, 16.329, 16.344), stdev = 0.020
  CI (99.9%): [16.252, 16.406] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.a)

# Run progress: 32.03% complete, ETA 00:47:56
# Fork: 1 of 1
# Warmup Iteration   1: 30.986 ns/op
# Warmup Iteration   2: 28.772 ns/op
# Warmup Iteration   3: 29.546 ns/op
# Warmup Iteration   4: 29.517 ns/op
# Warmup Iteration   5: 29.540 ns/op
Iteration   1: 29.538 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.518 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.539 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.519 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.508 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  29.524 ±(99.9%) 0.052 ns/op [Average]
  (min, avg, max) = (29.508, 29.524, 29.539), stdev = 0.014
  CI (99.9%): [29.472, 29.576] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.200.200)

# Run progress: 32.27% complete, ETA 00:47:46
# Fork: 1 of 1
# Warmup Iteration   1: 37.060 ns/op
# Warmup Iteration   2: 34.818 ns/op
# Warmup Iteration   3: 33.854 ns/op
# Warmup Iteration   4: 33.887 ns/op
# Warmup Iteration   5: 33.723 ns/op
Iteration   1: 33.783 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 33.747 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 34.647 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.791 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 33.813 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  33.956 ±(99.9%) 1.489 ns/op [Average]
  (min, avg, max) = (33.747, 33.956, 34.647), stdev = 0.387
  CI (99.9%): [32.467, 35.446] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.99999)

# Run progress: 32.52% complete, ETA 00:47:35
# Fork: 1 of 1
# Warmup Iteration   1: 42.788 ns/op
# Warmup Iteration   2: 39.086 ns/op
# Warmup Iteration   3: 36.774 ns/op
# Warmup Iteration   4: 36.834 ns/op
# Warmup Iteration   5: 36.771 ns/op
Iteration   1: 36.742 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 36.868 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 36.773 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 36.770 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 36.785 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  36.787 ±(99.9%) 0.183 ns/op [Average]
  (min, avg, max) = (36.742, 36.787, 36.868), stdev = 0.048
  CI (99.9%): [36.604, 36.971] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.-200)

# Run progress: 32.76% complete, ETA 00:47:25
# Fork: 1 of 1
# Warmup Iteration   1: 29.197 ns/op
# Warmup Iteration   2: 28.730 ns/op
# Warmup Iteration   3: 28.789 ns/op
# Warmup Iteration   4: 28.687 ns/op
# Warmup Iteration   5: 28.681 ns/op
Iteration   1: 28.724 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 28.690 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 28.666 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 28.708 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 28.687 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  28.695 ±(99.9%) 0.085 ns/op [Average]
  (min, avg, max) = (28.666, 28.695, 28.724), stdev = 0.022
  CI (99.9%): [28.610, 28.779] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 1.0.0)

# Run progress: 33.01% complete, ETA 00:47:15
# Fork: 1 of 1
# Warmup Iteration   1: 27.358 ns/op
# Warmup Iteration   2: 25.186 ns/op
# Warmup Iteration   3: 22.170 ns/op
# Warmup Iteration   4: 22.155 ns/op
# Warmup Iteration   5: 22.205 ns/op
Iteration   1: 22.183 ns/op
                 ·gc.alloc.rate:      3438.034 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   2: 22.199 ns/op
                 ·gc.alloc.rate:      3435.725 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            10.000 ms

Iteration   3: 22.207 ns/op
                 ·gc.alloc.rate:      3434.519 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 22.185 ns/op
                 ·gc.alloc.rate:      3436.722 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 22.214 ns/op
                 ·gc.alloc.rate:      3433.515 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  22.198 ±(99.9%) 0.051 ns/op [Average]
  (min, avg, max) = (22.183, 22.198, 22.214), stdev = 0.013
  CI (99.9%): [22.146, 22.249] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  3435.703 ±(99.9%) 6.851 MB/sec [Average]
  (min, avg, max) = (3433.515, 3435.703, 3438.034), stdev = 1.779
  CI (99.9%): [3428.852, 3442.554] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  102.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (20.000, 20.400, 21.000), stdev = 0.548
  CI (99.9%): [102.000, 102.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.time":
  47.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
  CI (99.9%): [47.000, 47.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 200.200.200)

# Run progress: 33.25% complete, ETA 00:47:04
# Fork: 1 of 1
# Warmup Iteration   1: 45.632 ns/op
# Warmup Iteration   2: 41.242 ns/op
# Warmup Iteration   3: 37.284 ns/op
# Warmup Iteration   4: 37.204 ns/op
# Warmup Iteration   5: 37.856 ns/op
Iteration   1: 37.286 ns/op
                 ·gc.alloc.rate:      2045.523 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   2: 37.330 ns/op
                 ·gc.alloc.rate:      2042.494 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 37.259 ns/op
                 ·gc.alloc.rate:      2046.909 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 37.233 ns/op
                 ·gc.alloc.rate:      2047.365 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 37.938 ns/op
                 ·gc.alloc.rate:      2010.357 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            8.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  37.409 ±(99.9%) 1.147 ns/op [Average]
  (min, avg, max) = (37.233, 37.409, 37.938), stdev = 0.298
  CI (99.9%): [36.262, 38.557] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  2038.530 ±(99.9%) 61.084 MB/sec [Average]
  (min, avg, max) = (2010.357, 2038.530, 2047.365), stdev = 15.863
  CI (99.9%): [1977.446, 2099.614] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  70.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 14.000, 14.000), stdev = 0.001
  CI (99.9%): [70.000, 70.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.time":
  35.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 33.50% complete, ETA 00:46:54
# Fork: 1 of 1
# Warmup Iteration   1: 62.711 ns/op
# Warmup Iteration   2: 56.613 ns/op
# Warmup Iteration   3: 51.244 ns/op
# Warmup Iteration   4: 51.120 ns/op
# Warmup Iteration   5: 51.320 ns/op
Iteration   1: 51.125 ns/op
                 ·gc.alloc.rate:      1491.789 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 51.112 ns/op
                 ·gc.alloc.rate:      1492.010 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 51.298 ns/op
                 ·gc.alloc.rate:      1486.743 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 51.064 ns/op
                 ·gc.alloc.rate:      1493.009 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 51.144 ns/op
                 ·gc.alloc.rate:      1491.230 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  51.149 ±(99.9%) 0.341 ns/op [Average]
  (min, avg, max) = (51.064, 51.149, 51.298), stdev = 0.089
  CI (99.9%): [50.808, 51.490] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  1490.956 ±(99.9%) 9.401 MB/sec [Average]
  (min, avg, max) = (1486.743, 1490.956, 1493.009), stdev = 2.441
  CI (99.9%): [1481.555, 1500.357] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  52.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
  CI (99.9%): [52.000, 52.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.time":
  29.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.optimized6
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 33.74% complete, ETA 00:46:44
# Fork: 1 of 1
# Warmup Iteration   1: 67.127 ns/op
# Warmup Iteration   2: 63.401 ns/op
# Warmup Iteration   3: 57.289 ns/op
# Warmup Iteration   4: 57.426 ns/op
# Warmup Iteration   5: 59.168 ns/op
Iteration   1: 58.166 ns/op
                 ·gc.alloc.rate:      1311.183 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 57.412 ns/op
                 ·gc.alloc.rate:      1328.074 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 57.385 ns/op
                 ·gc.alloc.rate:      1328.722 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 58.262 ns/op
                 ·gc.alloc.rate:      1308.609 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 57.423 ns/op
                 ·gc.alloc.rate:      1328.135 MB/sec
                 ·gc.alloc.rate.norm: 40.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6":
  57.729 ±(99.9%) 1.709 ns/op [Average]
  (min, avg, max) = (57.385, 57.729, 58.262), stdev = 0.444
  CI (99.9%): [56.021, 59.438] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate":
  1320.945 ±(99.9%) 39.008 MB/sec [Average]
  (min, avg, max) = (1308.609, 1320.945, 1328.722), stdev = 10.130
  CI (99.9%): [1281.936, 1359.953] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.alloc.rate.norm":
  40.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (40.000, 40.000, 40.000), stdev = 0.001
  CI (99.9%): [40.000, 40.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.count":
  46.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.optimized6:·gc.time":
  24.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = )

# Run progress: 33.99% complete, ETA 00:46:33
# Fork: 1 of 1
# Warmup Iteration   1: 77.436 ns/op
# Warmup Iteration   2: 68.078 ns/op
# Warmup Iteration   3: 66.027 ns/op
# Warmup Iteration   4: 66.041 ns/op
# Warmup Iteration   5: 67.795 ns/op
Iteration   1: 66.014 ns/op
                 ·gc.alloc.rate:      6237.971 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           32.000 counts
                 ·gc.time:            16.000 ms

Iteration   2: 66.194 ns/op
                 ·gc.alloc.rate:      6220.544 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           32.000 counts
                 ·gc.time:            17.000 ms

Iteration   3: 72.211 ns/op
                 ·gc.alloc.rate:      5703.066 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           30.000 counts
                 ·gc.time:            17.000 ms

Iteration   4: 68.291 ns/op
                 ·gc.alloc.rate:      6027.639 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           31.000 counts
                 ·gc.time:            17.000 ms

Iteration   5: 65.882 ns/op
                 ·gc.alloc.rate:      6251.218 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           32.000 counts
                 ·gc.time:            16.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  67.718 ±(99.9%) 10.388 ns/op [Average]
  (min, avg, max) = (65.882, 67.718, 72.211), stdev = 2.698
  CI (99.9%): [57.330, 78.107] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  6088.088 ±(99.9%) 900.007 MB/sec [Average]
  (min, avg, max) = (5703.066, 6088.088, 6251.218), stdev = 233.729
  CI (99.9%): [5188.081, 6988.094] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.000), stdev = 0.001
  CI (99.9%): [215.999, 216.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  157.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (30.000, 31.400, 32.000), stdev = 0.894
  CI (99.9%): [157.000, 157.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  83.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (16.000, 16.600, 17.000), stdev = 0.548
  CI (99.9%): [83.000, 83.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200)

# Run progress: 34.23% complete, ETA 00:46:23
# Fork: 1 of 1
# Warmup Iteration   1: 157.781 ns/op
# Warmup Iteration   2: 122.442 ns/op
# Warmup Iteration   3: 117.805 ns/op
# Warmup Iteration   4: 117.978 ns/op
# Warmup Iteration   5: 118.017 ns/op
Iteration   1: 118.186 ns/op
                 ·gc.alloc.rate:      3484.255 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            12.000 ms

Iteration   2: 118.385 ns/op
                 ·gc.alloc.rate:      3478.167 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            15.000 ms

Iteration   3: 126.868 ns/op
                 ·gc.alloc.rate:      3246.139 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            14.000 ms

Iteration   4: 118.067 ns/op
                 ·gc.alloc.rate:      3486.737 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            14.000 ms

Iteration   5: 118.462 ns/op
                 ·gc.alloc.rate:      3476.499 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            17.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  119.994 ±(99.9%) 14.811 ns/op [Average]
  (min, avg, max) = (118.067, 119.994, 126.868), stdev = 3.846
  CI (99.9%): [105.183, 134.804] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  3434.360 ±(99.9%) 405.483 MB/sec [Average]
  (min, avg, max) = (3246.139, 3434.360, 3486.737), stdev = 105.303
  CI (99.9%): [3028.876, 3839.843] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.999, 216.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  118.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 23.600, 24.000), stdev = 0.894
  CI (99.9%): [118.000, 118.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  72.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 14.400, 17.000), stdev = 1.817
  CI (99.9%): [72.000, 72.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.)

# Run progress: 34.47% complete, ETA 00:46:13
# Fork: 1 of 1
# Warmup Iteration   1: 577.114 ns/op
# Warmup Iteration   2: 162.034 ns/op
# Warmup Iteration   3: 159.452 ns/op
# Warmup Iteration   4: 159.653 ns/op
# Warmup Iteration   5: 157.529 ns/op
Iteration   1: 157.279 ns/op
                 ·gc.alloc.rate:      2618.691 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 156.588 ns/op
                 ·gc.alloc.rate:      2630.064 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 156.924 ns/op
                 ·gc.alloc.rate:      2624.591 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 156.979 ns/op
                 ·gc.alloc.rate:      2622.788 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 165.778 ns/op
                 ·gc.alloc.rate:      2484.205 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            13.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  158.710 ±(99.9%) 15.244 ns/op [Average]
  (min, avg, max) = (156.588, 158.710, 165.778), stdev = 3.959
  CI (99.9%): [143.465, 173.954] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  2596.068 ±(99.9%) 241.307 MB/sec [Average]
  (min, avg, max) = (2484.205, 2596.068, 2630.064), stdev = 62.667
  CI (99.9%): [2354.761, 2837.375] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.999, 216.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  89.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (17.000, 17.800, 18.000), stdev = 0.447
  CI (99.9%): [89.000, 89.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  51.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 10.200, 13.000), stdev = 1.924
  CI (99.9%): [51.000, 51.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200)

# Run progress: 34.72% complete, ETA 00:46:02
# Fork: 1 of 1
# Warmup Iteration   1: 804.736 ns/op
# Warmup Iteration   2: 221.334 ns/op
# Warmup Iteration   3: 214.389 ns/op
# Warmup Iteration   4: 213.700 ns/op
# Warmup Iteration   5: 213.641 ns/op
Iteration   1: 213.305 ns/op
                 ·gc.alloc.rate:      1930.863 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 213.680 ns/op
                 ·gc.alloc.rate:      1927.211 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 213.960 ns/op
                 ·gc.alloc.rate:      1924.767 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 213.988 ns/op
                 ·gc.alloc.rate:      1924.073 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 214.174 ns/op
                 ·gc.alloc.rate:      1922.812 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  213.821 ±(99.9%) 1.304 ns/op [Average]
  (min, avg, max) = (213.305, 213.821, 214.174), stdev = 0.339
  CI (99.9%): [212.518, 215.125] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1925.945 ±(99.9%) 12.251 MB/sec [Average]
  (min, avg, max) = (1922.812, 1925.945, 1930.863), stdev = 3.182
  CI (99.9%): [1913.694, 1938.197] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.998, 216.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  66.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.200, 14.000), stdev = 0.447
  CI (99.9%): [66.000, 66.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  36.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.200, 10.000), stdev = 1.643
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.)

# Run progress: 34.96% complete, ETA 00:45:52
# Fork: 1 of 1
# Warmup Iteration   1: 616.858 ns/op
# Warmup Iteration   2: 257.227 ns/op
# Warmup Iteration   3: 248.233 ns/op
# Warmup Iteration   4: 248.521 ns/op
# Warmup Iteration   5: 248.414 ns/op
Iteration   1: 247.773 ns/op
                 ·gc.alloc.rate:      1662.094 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 248.400 ns/op
                 ·gc.alloc.rate:      1657.627 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 248.135 ns/op
                 ·gc.alloc.rate:      1659.474 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 255.128 ns/op
                 ·gc.alloc.rate:      1613.627 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 257.046 ns/op
                 ·gc.alloc.rate:      1602.109 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  251.297 ±(99.9%) 17.063 ns/op [Average]
  (min, avg, max) = (247.773, 251.297, 257.046), stdev = 4.431
  CI (99.9%): [234.234, 268.359] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1638.986 ±(99.9%) 110.673 MB/sec [Average]
  (min, avg, max) = (1602.109, 1638.986, 1662.094), stdev = 28.741
  CI (99.9%): [1528.314, 1749.659] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.998, 216.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  56.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
  CI (99.9%): [56.000, 56.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  29.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = a.200.200)

# Run progress: 35.21% complete, ETA 00:45:42
# Fork: 1 of 1
# Warmup Iteration   1: 58.407 ns/op
# Warmup Iteration   2: 49.960 ns/op
# Warmup Iteration   3: 47.881 ns/op
# Warmup Iteration   4: 48.604 ns/op
# Warmup Iteration   5: 47.933 ns/op
Iteration   1: 47.898 ns/op
                 ·gc.alloc.rate:      5732.024 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           30.000 counts
                 ·gc.time:            16.000 ms

Iteration   2: 47.836 ns/op
                 ·gc.alloc.rate:      5738.915 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           30.000 counts
                 ·gc.time:            14.000 ms

Iteration   3: 47.830 ns/op
                 ·gc.alloc.rate:      5740.195 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           30.000 counts
                 ·gc.time:            14.000 ms

Iteration   4: 47.754 ns/op
                 ·gc.alloc.rate:      5747.653 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           31.000 counts
                 ·gc.time:            15.000 ms

Iteration   5: 47.712 ns/op
                 ·gc.alloc.rate:      5754.621 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           30.000 counts
                 ·gc.time:            15.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  47.806 ±(99.9%) 0.281 ns/op [Average]
  (min, avg, max) = (47.712, 47.806, 47.898), stdev = 0.073
  CI (99.9%): [47.525, 48.087] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  5742.682 ±(99.9%) 33.414 MB/sec [Average]
  (min, avg, max) = (5732.024, 5742.682, 5754.621), stdev = 8.678
  CI (99.9%): [5709.267, 5776.096] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.000), stdev = 0.001
  CI (99.9%): [144.000, 144.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  151.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (30.000, 30.200, 31.000), stdev = 0.447
  CI (99.9%): [151.000, 151.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  74.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (14.000, 14.800, 16.000), stdev = 0.837
  CI (99.9%): [74.000, 74.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.a.200)

# Run progress: 35.45% complete, ETA 00:45:31
# Fork: 1 of 1
# Warmup Iteration   1: 237.962 ns/op
# Warmup Iteration   2: 168.579 ns/op
# Warmup Iteration   3: 163.855 ns/op
# Warmup Iteration   4: 164.426 ns/op
# Warmup Iteration   5: 164.356 ns/op
Iteration   1: 165.231 ns/op
                 ·gc.alloc.rate:      2492.302 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            14.000 ms

Iteration   2: 164.866 ns/op
                 ·gc.alloc.rate:      2497.699 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            14.000 ms

Iteration   3: 165.427 ns/op
                 ·gc.alloc.rate:      2489.405 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            13.000 ms

Iteration   4: 164.283 ns/op
                 ·gc.alloc.rate:      2505.894 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            8.000 ms

Iteration   5: 164.212 ns/op
                 ·gc.alloc.rate:      2507.393 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            8.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  164.804 ±(99.9%) 2.106 ns/op [Average]
  (min, avg, max) = (164.212, 164.804, 165.427), stdev = 0.547
  CI (99.9%): [162.698, 166.910] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  2498.539 ±(99.9%) 30.776 MB/sec [Average]
  (min, avg, max) = (2489.405, 2498.539, 2507.393), stdev = 7.992
  CI (99.9%): [2467.763, 2529.314] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.999, 216.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  86.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (17.000, 17.200, 18.000), stdev = 0.447
  CI (99.9%): [86.000, 86.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  57.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 11.400, 14.000), stdev = 3.130
  CI (99.9%): [57.000, 57.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.a)

# Run progress: 35.70% complete, ETA 00:45:21
# Fork: 1 of 1
# Warmup Iteration   1: 354.983 ns/op
# Warmup Iteration   2: 260.256 ns/op
# Warmup Iteration   3: 250.018 ns/op
# Warmup Iteration   4: 251.166 ns/op
# Warmup Iteration   5: 250.037 ns/op
Iteration   1: 249.622 ns/op
                 ·gc.alloc.rate:      1649.830 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 250.065 ns/op
                 ·gc.alloc.rate:      1646.990 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 249.801 ns/op
                 ·gc.alloc.rate:      1648.198 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 257.290 ns/op
                 ·gc.alloc.rate:      1600.840 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 249.405 ns/op
                 ·gc.alloc.rate:      1651.322 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  251.237 ±(99.9%) 13.064 ns/op [Average]
  (min, avg, max) = (249.405, 251.237, 257.290), stdev = 3.393
  CI (99.9%): [238.173, 264.300] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1639.436 ±(99.9%) 83.319 MB/sec [Average]
  (min, avg, max) = (1600.840, 1639.436, 1651.322), stdev = 21.638
  CI (99.9%): [1556.117, 1722.755] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.998, 216.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  56.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
  CI (99.9%): [56.000, 56.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  29.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.200.200)

# Run progress: 35.94% complete, ETA 00:45:11
# Fork: 1 of 1
# Warmup Iteration   1: 452.141 ns/op
# Warmup Iteration   2: 318.503 ns/op
# Warmup Iteration   3: 305.867 ns/op
# Warmup Iteration   4: 305.721 ns/op
# Warmup Iteration   5: 305.734 ns/op
Iteration   1: 305.055 ns/op
                 ·gc.alloc.rate:      1349.839 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 314.862 ns/op
                 ·gc.alloc.rate:      1307.900 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 306.146 ns/op
                 ·gc.alloc.rate:      1345.313 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 306.582 ns/op
                 ·gc.alloc.rate:      1342.872 MB/sec
                 ·gc.alloc.rate.norm: 216.002 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 313.904 ns/op
                 ·gc.alloc.rate:      1312.003 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  309.310 ±(99.9%) 18.008 ns/op [Average]
  (min, avg, max) = (305.055, 309.310, 314.862), stdev = 4.677
  CI (99.9%): [291.301, 327.318] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1331.585 ±(99.9%) 76.856 MB/sec [Average]
  (min, avg, max) = (1307.900, 1331.585, 1349.839), stdev = 19.959
  CI (99.9%): [1254.730, 1408.441] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.002), stdev = 0.001
  CI (99.9%): [215.998, 216.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  46.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
  CI (99.9%): [46.000, 46.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.99999)

# Run progress: 36.19% complete, ETA 00:45:00
# Fork: 1 of 1
# Warmup Iteration   1: 647.019 ns/op
# Warmup Iteration   2: 382.867 ns/op
# Warmup Iteration   3: 370.907 ns/op
# Warmup Iteration   4: 370.983 ns/op
# Warmup Iteration   5: 371.982 ns/op
Iteration   1: 370.164 ns/op
                 ·gc.alloc.rate:      1854.332 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 370.973 ns/op
                 ·gc.alloc.rate:      1850.083 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 371.190 ns/op
                 ·gc.alloc.rate:      1849.124 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 370.113 ns/op
                 ·gc.alloc.rate:      1853.950 MB/sec
                 ·gc.alloc.rate.norm: 360.002 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 370.766 ns/op
                 ·gc.alloc.rate:      1851.429 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  370.641 ±(99.9%) 1.860 ns/op [Average]
  (min, avg, max) = (370.113, 370.641, 371.190), stdev = 0.483
  CI (99.9%): [368.781, 372.501] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1851.784 ±(99.9%) 8.882 MB/sec [Average]
  (min, avg, max) = (1849.124, 1851.784, 1854.332), stdev = 2.307
  CI (99.9%): [1842.902, 1860.665] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.002), stdev = 0.001
  CI (99.9%): [359.997, 360.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  63.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 12.600, 13.000), stdev = 0.548
  CI (99.9%): [63.000, 63.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  32.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.-200)

# Run progress: 36.43% complete, ETA 00:44:50
# Fork: 1 of 1
# Warmup Iteration   1: 364.194 ns/op
# Warmup Iteration   2: 267.697 ns/op
# Warmup Iteration   3: 260.189 ns/op
# Warmup Iteration   4: 260.255 ns/op
# Warmup Iteration   5: 259.298 ns/op
Iteration   1: 259.979 ns/op
                 ·gc.alloc.rate:      1584.231 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 258.844 ns/op
                 ·gc.alloc.rate:      1590.785 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 260.173 ns/op
                 ·gc.alloc.rate:      1583.015 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 259.910 ns/op
                 ·gc.alloc.rate:      1583.760 MB/sec
                 ·gc.alloc.rate.norm: 216.002 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 260.457 ns/op
                 ·gc.alloc.rate:      1581.215 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  259.873 ±(99.9%) 2.360 ns/op [Average]
  (min, avg, max) = (258.844, 259.873, 260.457), stdev = 0.613
  CI (99.9%): [257.513, 262.232] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1584.601 ±(99.9%) 14.025 MB/sec [Average]
  (min, avg, max) = (1581.215, 1584.601, 1590.785), stdev = 3.642
  CI (99.9%): [1570.576, 1598.626] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.002), stdev = 0.001
  CI (99.9%): [215.998, 216.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  55.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.000, 11.000), stdev = 0.001
  CI (99.9%): [55.000, 55.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  30.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 1.0.0)

# Run progress: 36.67% complete, ETA 00:44:40
# Fork: 1 of 1
# Warmup Iteration   1: 430.605 ns/op
# Warmup Iteration   2: 219.148 ns/op
# Warmup Iteration   3: 216.542 ns/op
# Warmup Iteration   4: 215.760 ns/op
# Warmup Iteration   5: 216.960 ns/op
Iteration   1: 216.422 ns/op
                 ·gc.alloc.rate:      3524.041 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            14.000 ms

Iteration   2: 216.853 ns/op
                 ·gc.alloc.rate:      3516.250 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            16.000 ms

Iteration   3: 216.966 ns/op
                 ·gc.alloc.rate:      3514.603 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            16.000 ms

Iteration   4: 217.109 ns/op
                 ·gc.alloc.rate:      3511.572 MB/sec
                 ·gc.alloc.rate.norm: 400.001 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            16.000 ms

Iteration   5: 216.795 ns/op
                 ·gc.alloc.rate:      3517.645 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            16.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  216.829 ±(99.9%) 0.991 ns/op [Average]
  (min, avg, max) = (216.422, 216.829, 217.109), stdev = 0.257
  CI (99.9%): [215.838, 217.820] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  3516.822 ±(99.9%) 17.813 MB/sec [Average]
  (min, avg, max) = (3511.572, 3516.822, 3524.041), stdev = 4.626
  CI (99.9%): [3499.009, 3534.635] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  400.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (400.000, 400.000, 400.001), stdev = 0.001
  CI (99.9%): [399.998, 400.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  121.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (24.000, 24.200, 25.000), stdev = 0.447
  CI (99.9%): [121.000, 121.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  78.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (14.000, 15.600, 16.000), stdev = 0.894
  CI (99.9%): [78.000, 78.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 200.200.200)

# Run progress: 36.92% complete, ETA 00:44:29
# Fork: 1 of 1
# Warmup Iteration   1: 641.966 ns/op
# Warmup Iteration   2: 341.511 ns/op
# Warmup Iteration   3: 333.585 ns/op
# Warmup Iteration   4: 332.786 ns/op
# Warmup Iteration   5: 332.498 ns/op
Iteration   1: 333.179 ns/op
                 ·gc.alloc.rate:      2289.057 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            7.000 ms

Iteration   2: 332.031 ns/op
                 ·gc.alloc.rate:      2296.542 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 333.403 ns/op
                 ·gc.alloc.rate:      2287.496 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 332.497 ns/op
                 ·gc.alloc.rate:      2293.032 MB/sec
                 ·gc.alloc.rate.norm: 400.002 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 334.115 ns/op
                 ·gc.alloc.rate:      2282.426 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  333.045 ±(99.9%) 3.117 ns/op [Average]
  (min, avg, max) = (332.031, 333.045, 334.115), stdev = 0.809
  CI (99.9%): [329.928, 336.162] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  2289.711 ±(99.9%) 20.746 MB/sec [Average]
  (min, avg, max) = (2282.426, 2289.711, 2296.542), stdev = 5.388
  CI (99.9%): [2268.965, 2310.456] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  400.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (400.000, 400.001, 400.002), stdev = 0.001
  CI (99.9%): [399.997, 400.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  79.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.800, 16.000), stdev = 0.447
  CI (99.9%): [79.000, 79.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  44.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (7.000, 8.800, 10.000), stdev = 1.304
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 37.16% complete, ETA 00:44:19
# Fork: 1 of 1
# Warmup Iteration   1: 2037.760 ns/op
# Warmup Iteration   2: 398.032 ns/op
# Warmup Iteration   3: 387.933 ns/op
# Warmup Iteration   4: 386.064 ns/op
# Warmup Iteration   5: 394.138 ns/op
Iteration   1: 385.515 ns/op
                 ·gc.alloc.rate:      1978.361 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   2: 385.461 ns/op
                 ·gc.alloc.rate:      1978.563 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 385.344 ns/op
                 ·gc.alloc.rate:      1979.269 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 385.509 ns/op
                 ·gc.alloc.rate:      1977.459 MB/sec
                 ·gc.alloc.rate.norm: 400.002 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 385.971 ns/op
                 ·gc.alloc.rate:      1975.845 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  385.560 ±(99.9%) 0.924 ns/op [Average]
  (min, avg, max) = (385.344, 385.560, 385.971), stdev = 0.240
  CI (99.9%): [384.636, 386.484] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1977.899 ±(99.9%) 5.074 MB/sec [Average]
  (min, avg, max) = (1975.845, 1977.899, 1979.269), stdev = 1.318
  CI (99.9%): [1972.826, 1982.973] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  400.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (400.000, 400.001, 400.002), stdev = 0.001
  CI (99.9%): [399.997, 400.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  68.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.600, 14.000), stdev = 0.548
  CI (99.9%): [68.000, 68.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  33.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.regex
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 37.41% complete, ETA 00:44:09
# Fork: 1 of 1
# Warmup Iteration   1: 1265.175 ns/op
# Warmup Iteration   2: 393.075 ns/op
# Warmup Iteration   3: 384.139 ns/op
# Warmup Iteration   4: 384.855 ns/op
# Warmup Iteration   5: 385.652 ns/op
Iteration   1: 383.671 ns/op
                 ·gc.alloc.rate:      1987.850 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 384.382 ns/op
                 ·gc.alloc.rate:      1984.148 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 383.972 ns/op
                 ·gc.alloc.rate:      1986.218 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 384.390 ns/op
                 ·gc.alloc.rate:      1983.229 MB/sec
                 ·gc.alloc.rate.norm: 400.002 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 383.611 ns/op
                 ·gc.alloc.rate:      1988.121 MB/sec
                 ·gc.alloc.rate.norm: 400.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.regex":
  384.005 ±(99.9%) 1.439 ns/op [Average]
  (min, avg, max) = (383.611, 384.005, 384.390), stdev = 0.374
  CI (99.9%): [382.566, 385.444] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate":
  1985.913 ±(99.9%) 8.401 MB/sec [Average]
  (min, avg, max) = (1983.229, 1985.913, 1988.121), stdev = 2.182
  CI (99.9%): [1977.512, 1994.314] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.alloc.rate.norm":
  400.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (400.000, 400.001, 400.002), stdev = 0.001
  CI (99.9%): [399.997, 400.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.count":
  68.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.600, 14.000), stdev = 0.548
  CI (99.9%): [68.000, 68.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.regex:·gc.time":
  29.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = )

# Run progress: 37.65% complete, ETA 00:43:58
# Fork: 1 of 1
# Warmup Iteration   1: 3428.953 ns/op
# Warmup Iteration   2: 2855.799 ns/op
# Warmup Iteration   3: 2652.974 ns/op
# Warmup Iteration   4: 2648.671 ns/op
# Warmup Iteration   5: 2645.800 ns/op
Iteration   1: 2641.592 ns/op
                 ·gc.alloc.rate:      698.720 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2638.957 ns/op
                 ·gc.alloc.rate:      699.308 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2642.008 ns/op
                 ·gc.alloc.rate:      698.610 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2634.868 ns/op
                 ·gc.alloc.rate:      700.283 MB/sec
                 ·gc.alloc.rate.norm: 968.015 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2530.349 ns/op
                 ·gc.alloc.rate:      729.441 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2617.555 ±(99.9%) 188.037 ns/op [Average]
  (min, avg, max) = (2530.349, 2617.555, 2642.008), stdev = 48.833
  CI (99.9%): [2429.518, 2805.592] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  705.272 ±(99.9%) 52.088 MB/sec [Average]
  (min, avg, max) = (698.610, 705.272, 729.441), stdev = 13.527
  CI (99.9%): [653.184, 757.360] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  968.004 ±(99.9%) 0.024 B/op [Average]
  (min, avg, max) = (968.001, 968.004, 968.015), stdev = 0.006
  CI (99.9%): [967.980, 968.028] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  24.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200)

# Run progress: 37.90% complete, ETA 00:43:48
# Fork: 1 of 1
# Warmup Iteration   1: 2683.376 ns/op
# Warmup Iteration   2: 1940.705 ns/op
# Warmup Iteration   3: 1880.806 ns/op
# Warmup Iteration   4: 1867.797 ns/op
# Warmup Iteration   5: 1872.680 ns/op
Iteration   1: 1920.672 ns/op
                 ·gc.alloc.rate:      818.005 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 1865.864 ns/op
                 ·gc.alloc.rate:      841.967 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1913.925 ns/op
                 ·gc.alloc.rate:      820.922 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1863.516 ns/op
                 ·gc.alloc.rate:      842.796 MB/sec
                 ·gc.alloc.rate.norm: 824.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1752.792 ns/op
                 ·gc.alloc.rate:      896.332 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  1863.354 ±(99.9%) 258.834 ns/op [Average]
  (min, avg, max) = (1752.792, 1863.354, 1920.672), stdev = 67.218
  CI (99.9%): [1604.520, 2122.187] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  844.004 ±(99.9%) 121.044 MB/sec [Average]
  (min, avg, max) = (818.005, 844.004, 896.332), stdev = 31.435
  CI (99.9%): [722.961, 965.048] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  824.003 ±(99.9%) 0.017 B/op [Average]
  (min, avg, max) = (824.001, 824.003, 824.011), stdev = 0.004
  CI (99.9%): [823.986, 824.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  20.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
  CI (99.9%): [20.000, 20.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.)

# Run progress: 38.14% complete, ETA 00:43:38
# Fork: 1 of 1
# Warmup Iteration   1: 2751.231 ns/op
# Warmup Iteration   2: 2053.649 ns/op
# Warmup Iteration   3: 2004.574 ns/op
# Warmup Iteration   4: 1983.102 ns/op
# Warmup Iteration   5: 1983.306 ns/op
Iteration   1: 1983.930 ns/op
                 ·gc.alloc.rate:      914.814 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 1978.767 ns/op
                 ·gc.alloc.rate:      917.243 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 1980.052 ns/op
                 ·gc.alloc.rate:      916.666 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 1985.435 ns/op
                 ·gc.alloc.rate:      913.933 MB/sec
                 ·gc.alloc.rate.norm: 952.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 1868.782 ns/op
                 ·gc.alloc.rate:      971.361 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  1959.393 ±(99.9%) 195.330 ns/op [Average]
  (min, avg, max) = (1868.782, 1959.393, 1985.435), stdev = 50.727
  CI (99.9%): [1764.063, 2154.723] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  926.803 ±(99.9%) 96.053 MB/sec [Average]
  (min, avg, max) = (913.933, 926.803, 971.361), stdev = 24.945
  CI (99.9%): [830.751, 1022.856] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  952.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (952.001, 952.003, 952.012), stdev = 0.005
  CI (99.9%): [951.985, 952.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200)

# Run progress: 38.39% complete, ETA 00:43:27
# Fork: 1 of 1
# Warmup Iteration   1: 2907.103 ns/op
# Warmup Iteration   2: 2109.649 ns/op
# Warmup Iteration   3: 2047.849 ns/op
# Warmup Iteration   4: 2048.600 ns/op
# Warmup Iteration   5: 2033.190 ns/op
Iteration   1: 2031.428 ns/op
                 ·gc.alloc.rate:      938.563 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2033.831 ns/op
                 ·gc.alloc.rate:      937.430 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2034.706 ns/op
                 ·gc.alloc.rate:      936.951 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2041.001 ns/op
                 ·gc.alloc.rate:      933.808 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 1912.033 ns/op
                 ·gc.alloc.rate:      997.218 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2010.600 ±(99.9%) 212.610 ns/op [Average]
  (min, avg, max) = (1912.033, 2010.600, 2041.001), stdev = 55.214
  CI (99.9%): [1797.990, 2223.209] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  948.794 ±(99.9%) 104.457 MB/sec [Average]
  (min, avg, max) = (933.808, 948.794, 997.218), stdev = 27.127
  CI (99.9%): [844.336, 1053.251] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.984, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.)

# Run progress: 38.63% complete, ETA 00:43:17
# Fork: 1 of 1
# Warmup Iteration   1: 2977.407 ns/op
# Warmup Iteration   2: 2266.012 ns/op
# Warmup Iteration   3: 2115.493 ns/op
# Warmup Iteration   4: 2057.631 ns/op
# Warmup Iteration   5: 2051.091 ns/op
Iteration   1: 2048.451 ns/op
                 ·gc.alloc.rate:      930.749 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2049.133 ns/op
                 ·gc.alloc.rate:      930.414 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2046.390 ns/op
                 ·gc.alloc.rate:      931.788 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2121.940 ns/op
                 ·gc.alloc.rate:      898.196 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1936.202 ns/op
                 ·gc.alloc.rate:      984.755 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2040.423 ±(99.9%) 256.024 ns/op [Average]
  (min, avg, max) = (1936.202, 2040.423, 2121.940), stdev = 66.489
  CI (99.9%): [1784.399, 2296.447] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  935.180 ±(99.9%) 119.919 MB/sec [Average]
  (min, avg, max) = (898.196, 935.180, 984.755), stdev = 31.142
  CI (99.9%): [815.262, 1055.099] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.984, 1000.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = a.200.200)

# Run progress: 38.88% complete, ETA 00:43:06
# Fork: 1 of 1
# Warmup Iteration   1: 4274.127 ns/op
# Warmup Iteration   2: 2971.950 ns/op
# Warmup Iteration   3: 3071.169 ns/op
# Warmup Iteration   4: 3054.232 ns/op
# Warmup Iteration   5: 3059.847 ns/op
Iteration   1: 3045.187 ns/op
                 ·gc.alloc.rate:      756.355 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 3037.716 ns/op
                 ·gc.alloc.rate:      758.144 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 3041.111 ns/op
                 ·gc.alloc.rate:      757.236 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 3048.275 ns/op
                 ·gc.alloc.rate:      755.264 MB/sec
                 ·gc.alloc.rate.norm: 1208.018 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 2946.777 ns/op
                 ·gc.alloc.rate:      781.658 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  3023.813 ±(99.9%) 166.541 ns/op [Average]
  (min, avg, max) = (2946.777, 3023.813, 3048.275), stdev = 43.250
  CI (99.9%): [2857.272, 3190.354] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  761.731 ±(99.9%) 43.088 MB/sec [Average]
  (min, avg, max) = (755.264, 761.731, 781.658), stdev = 11.190
  CI (99.9%): [718.643, 804.820] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1208.005 ±(99.9%) 0.028 B/op [Average]
  (min, avg, max) = (1208.001, 1208.005, 1208.018), stdev = 0.007
  CI (99.9%): [1207.977, 1208.033] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  26.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
  CI (99.9%): [26.000, 26.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.a.200)

# Run progress: 39.12% complete, ETA 00:42:56
# Fork: 1 of 1
# Warmup Iteration   1: 4143.588 ns/op
# Warmup Iteration   2: 3076.169 ns/op
# Warmup Iteration   3: 3005.831 ns/op
# Warmup Iteration   4: 2979.327 ns/op
# Warmup Iteration   5: 3184.646 ns/op
Iteration   1: 2982.693 ns/op
                 ·gc.alloc.rate:      772.152 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2968.936 ns/op
                 ·gc.alloc.rate:      775.617 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2974.940 ns/op
                 ·gc.alloc.rate:      774.189 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2961.834 ns/op
                 ·gc.alloc.rate:      777.309 MB/sec
                 ·gc.alloc.rate.norm: 1208.017 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2849.219 ns/op
                 ·gc.alloc.rate:      808.330 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2947.524 ±(99.9%) 213.664 ns/op [Average]
  (min, avg, max) = (2849.219, 2947.524, 2982.693), stdev = 55.488
  CI (99.9%): [2733.860, 3161.188] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  781.519 ±(99.9%) 58.172 MB/sec [Average]
  (min, avg, max) = (772.152, 781.519, 808.330), stdev = 15.107
  CI (99.9%): [723.348, 839.691] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1208.005 ±(99.9%) 0.027 B/op [Average]
  (min, avg, max) = (1208.001, 1208.005, 1208.017), stdev = 0.007
  CI (99.9%): [1207.977, 1208.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  26.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
  CI (99.9%): [26.000, 26.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.a)

# Run progress: 39.36% complete, ETA 00:42:46
# Fork: 1 of 1
# Warmup Iteration   1: 3877.998 ns/op
# Warmup Iteration   2: 2814.072 ns/op
# Warmup Iteration   3: 2883.946 ns/op
# Warmup Iteration   4: 2868.169 ns/op
# Warmup Iteration   5: 2866.561 ns/op
Iteration   1: 2861.249 ns/op
                 ·gc.alloc.rate:      804.987 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2899.671 ns/op
                 ·gc.alloc.rate:      794.367 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2884.975 ns/op
                 ·gc.alloc.rate:      798.123 MB/sec
                 ·gc.alloc.rate.norm: 1208.017 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2754.538 ns/op
                 ·gc.alloc.rate:      836.235 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2749.450 ns/op
                 ·gc.alloc.rate:      837.740 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2829.977 ±(99.9%) 279.243 ns/op [Average]
  (min, avg, max) = (2749.450, 2829.977, 2899.671), stdev = 72.518
  CI (99.9%): [2550.734, 3109.219] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  814.290 ±(99.9%) 81.145 MB/sec [Average]
  (min, avg, max) = (794.367, 814.290, 837.740), stdev = 21.073
  CI (99.9%): [733.146, 895.435] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.027 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.017), stdev = 0.007
  CI (99.9%): [1207.978, 1208.031] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.200.200)

# Run progress: 39.61% complete, ETA 00:42:35
# Fork: 1 of 1
# Warmup Iteration   1: 3084.605 ns/op
# Warmup Iteration   2: 2251.692 ns/op
# Warmup Iteration   3: 2166.664 ns/op
# Warmup Iteration   4: 2150.017 ns/op
# Warmup Iteration   5: 2147.893 ns/op
Iteration   1: 2142.748 ns/op
                 ·gc.alloc.rate:      989.549 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2139.953 ns/op
                 ·gc.alloc.rate:      990.827 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2142.094 ns/op
                 ·gc.alloc.rate:      989.798 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2141.179 ns/op
                 ·gc.alloc.rate:      989.913 MB/sec
                 ·gc.alloc.rate.norm: 1112.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2023.163 ns/op
                 ·gc.alloc.rate:      1048.012 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2117.827 ±(99.9%) 203.813 ns/op [Average]
  (min, avg, max) = (2023.163, 2117.827, 2142.748), stdev = 52.930
  CI (99.9%): [1914.015, 2321.640] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  1001.620 ±(99.9%) 99.881 MB/sec [Average]
  (min, avg, max) = (989.549, 1001.620, 1048.012), stdev = 25.939
  CI (99.9%): [901.739, 1101.501] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1112.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (1112.001, 1112.003, 1112.012), stdev = 0.005
  CI (99.9%): [1111.983, 1112.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.99999)

# Run progress: 39.85% complete, ETA 00:42:25
# Fork: 1 of 1
# Warmup Iteration   1: 3067.465 ns/op
# Warmup Iteration   2: 2262.715 ns/op
# Warmup Iteration   3: 2168.211 ns/op
# Warmup Iteration   4: 2158.568 ns/op
# Warmup Iteration   5: 2157.872 ns/op
Iteration   1: 2157.985 ns/op
                 ·gc.alloc.rate:      961.344 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 2161.178 ns/op
                 ·gc.alloc.rate:      959.753 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 2156.867 ns/op
                 ·gc.alloc.rate:      961.649 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 2158.609 ns/op
                 ·gc.alloc.rate:      960.700 MB/sec
                 ·gc.alloc.rate.norm: 1088.013 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 2031.675 ns/op
                 ·gc.alloc.rate:      1020.993 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2133.263 ±(99.9%) 218.761 ns/op [Average]
  (min, avg, max) = (2031.675, 2133.263, 2161.178), stdev = 56.812
  CI (99.9%): [1914.502, 2352.024] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  972.888 ±(99.9%) 103.589 MB/sec [Average]
  (min, avg, max) = (959.753, 972.888, 1020.993), stdev = 26.902
  CI (99.9%): [869.299, 1076.477] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1088.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (1088.001, 1088.003, 1088.013), stdev = 0.005
  CI (99.9%): [1087.983, 1088.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  25.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.-200)

# Run progress: 40.10% complete, ETA 00:42:15
# Fork: 1 of 1
# Warmup Iteration   1: 3085.556 ns/op
# Warmup Iteration   2: 2445.559 ns/op
# Warmup Iteration   3: 2184.034 ns/op
# Warmup Iteration   4: 2168.175 ns/op
# Warmup Iteration   5: 2165.090 ns/op
Iteration   1: 2164.246 ns/op
                 ·gc.alloc.rate:      972.658 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2167.601 ns/op
                 ·gc.alloc.rate:      970.899 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2167.017 ns/op
                 ·gc.alloc.rate:      971.436 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2163.225 ns/op
                 ·gc.alloc.rate:      972.676 MB/sec
                 ·gc.alloc.rate.norm: 1104.013 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2041.359 ns/op
                 ·gc.alloc.rate:      1031.223 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  2140.690 ±(99.9%) 213.933 ns/op [Average]
  (min, avg, max) = (2041.359, 2140.690, 2167.601), stdev = 55.558
  CI (99.9%): [1926.757, 2354.622] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  983.778 ±(99.9%) 102.172 MB/sec [Average]
  (min, avg, max) = (970.899, 983.778, 1031.223), stdev = 26.534
  CI (99.9%): [881.606, 1085.950] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  1104.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (1104.001, 1104.003, 1104.013), stdev = 0.005
  CI (99.9%): [1103.983, 1104.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 1.0.0)

# Run progress: 40.34% complete, ETA 00:42:04
# Fork: 1 of 1
# Warmup Iteration   1: 282.102 ns/op
# Warmup Iteration   2: 172.047 ns/op
# Warmup Iteration   3: 162.866 ns/op
# Warmup Iteration   4: 162.845 ns/op
# Warmup Iteration   5: 163.043 ns/op
Iteration   1: 169.560 ns/op
                 ·gc.alloc.rate:      4228.376 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            13.000 ms

Iteration   2: 162.538 ns/op
                 ·gc.alloc.rate:      4410.211 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            14.000 ms

Iteration   3: 162.942 ns/op
                 ·gc.alloc.rate:      4399.916 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           27.000 counts
                 ·gc.time:            15.000 ms

Iteration   4: 162.388 ns/op
                 ·gc.alloc.rate:      4412.830 MB/sec
                 ·gc.alloc.rate.norm: 376.001 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            13.000 ms

Iteration   5: 161.851 ns/op
                 ·gc.alloc.rate:      4429.552 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           27.000 counts
                 ·gc.time:            12.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  163.856 ±(99.9%) 12.370 ns/op [Average]
  (min, avg, max) = (161.851, 163.856, 169.560), stdev = 3.212
  CI (99.9%): [151.486, 176.225] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  4376.177 ±(99.9%) 320.780 MB/sec [Average]
  (min, avg, max) = (4228.376, 4376.177, 4429.552), stdev = 83.306
  CI (99.9%): [4055.397, 4696.957] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  376.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (376.000, 376.000, 376.001), stdev = 0.001
  CI (99.9%): [375.999, 376.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  131.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (25.000, 26.200, 27.000), stdev = 0.837
  CI (99.9%): [131.000, 131.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  67.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 13.400, 15.000), stdev = 1.140
  CI (99.9%): [67.000, 67.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 200.200.200)

# Run progress: 40.59% complete, ETA 00:41:54
# Fork: 1 of 1
# Warmup Iteration   1: 316.388 ns/op
# Warmup Iteration   2: 200.817 ns/op
# Warmup Iteration   3: 188.047 ns/op
# Warmup Iteration   4: 187.781 ns/op
# Warmup Iteration   5: 186.776 ns/op
Iteration   1: 187.011 ns/op
                 ·gc.alloc.rate:      4159.918 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms

Iteration   2: 186.928 ns/op
                 ·gc.alloc.rate:      4161.445 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 186.846 ns/op
                 ·gc.alloc.rate:      4163.233 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms

Iteration   4: 186.601 ns/op
                 ·gc.alloc.rate:      4167.529 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 191.844 ns/op
                 ·gc.alloc.rate:      4054.797 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  187.846 ±(99.9%) 8.626 ns/op [Average]
  (min, avg, max) = (186.601, 187.846, 191.844), stdev = 2.240
  CI (99.9%): [179.220, 196.472] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  4141.384 ±(99.9%) 186.709 MB/sec [Average]
  (min, avg, max) = (4054.797, 4141.384, 4167.529), stdev = 48.488
  CI (99.9%): [3954.675, 4328.093] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.999, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  124.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (24.000, 24.800, 25.000), stdev = 0.447
  CI (99.9%): [124.000, 124.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  58.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
  CI (99.9%): [58.000, 58.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 40.83% complete, ETA 00:41:44
# Fork: 1 of 1
# Warmup Iteration   1: 340.181 ns/op
# Warmup Iteration   2: 223.453 ns/op
# Warmup Iteration   3: 205.444 ns/op
# Warmup Iteration   4: 205.004 ns/op
# Warmup Iteration   5: 205.167 ns/op
Iteration   1: 210.887 ns/op
                 ·gc.alloc.rate:      3688.522 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 205.348 ns/op
                 ·gc.alloc.rate:      3788.350 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            13.000 ms

Iteration   3: 206.087 ns/op
                 ·gc.alloc.rate:      3774.317 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            16.000 ms

Iteration   4: 204.933 ns/op
                 ·gc.alloc.rate:      3794.570 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 204.348 ns/op
                 ·gc.alloc.rate:      3806.763 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  206.321 ±(99.9%) 10.128 ns/op [Average]
  (min, avg, max) = (204.348, 206.321, 210.887), stdev = 2.630
  CI (99.9%): [196.193, 216.448] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  3770.504 ±(99.9%) 182.124 MB/sec [Average]
  (min, avg, max) = (3688.522, 3770.504, 3806.763), stdev = 47.297
  CI (99.9%): [3588.380, 3952.629] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.998, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  113.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.600, 23.000), stdev = 0.548
  CI (99.9%): [113.000, 113.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  63.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 12.600, 16.000), stdev = 2.074
  CI (99.9%): [63.000, 63.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yolo
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 41.08% complete, ETA 00:41:33
# Fork: 1 of 1
# Warmup Iteration   1: 406.699 ns/op
# Warmup Iteration   2: 232.974 ns/op
# Warmup Iteration   3: 217.322 ns/op
# Warmup Iteration   4: 217.971 ns/op
# Warmup Iteration   5: 218.145 ns/op
Iteration   1: 218.635 ns/op
                 ·gc.alloc.rate:      3557.803 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            14.000 ms

Iteration   2: 218.853 ns/op
                 ·gc.alloc.rate:      3553.886 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            17.000 ms

Iteration   3: 218.204 ns/op
                 ·gc.alloc.rate:      3564.707 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            16.000 ms

Iteration   4: 218.386 ns/op
                 ·gc.alloc.rate:      3560.789 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            14.000 ms

Iteration   5: 219.560 ns/op
                 ·gc.alloc.rate:      3543.225 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            16.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yolo":
  218.728 ±(99.9%) 2.026 ns/op [Average]
  (min, avg, max) = (218.204, 218.728, 219.560), stdev = 0.526
  CI (99.9%): [216.702, 220.754] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate":
  3556.082 ±(99.9%) 31.614 MB/sec [Average]
  (min, avg, max) = (3543.225, 3556.082, 3564.707), stdev = 8.210
  CI (99.9%): [3524.468, 3587.697] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.998, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.count":
  107.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 21.400, 22.000), stdev = 0.548
  CI (99.9%): [107.000, 107.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yolo:·gc.time":
  77.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (14.000, 15.400, 17.000), stdev = 1.342
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = )

# Run progress: 41.32% complete, ETA 00:41:23
# Fork: 1 of 1
# Warmup Iteration   1: 3569.899 ns/op
# Warmup Iteration   2: 2719.849 ns/op
# Warmup Iteration   3: 2654.593 ns/op
# Warmup Iteration   4: 2644.286 ns/op
# Warmup Iteration   5: 2631.569 ns/op
Iteration   1: 2629.024 ns/op
                 ·gc.alloc.rate:      701.955 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2631.467 ns/op
                 ·gc.alloc.rate:      701.385 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2632.785 ns/op
                 ·gc.alloc.rate:      701.013 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2632.967 ns/op
                 ·gc.alloc.rate:      700.722 MB/sec
                 ·gc.alloc.rate.norm: 968.015 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 2538.324 ns/op
                 ·gc.alloc.rate:      727.033 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  2612.913 ±(99.9%) 160.674 ns/op [Average]
  (min, avg, max) = (2538.324, 2612.913, 2632.967), stdev = 41.726
  CI (99.9%): [2452.240, 2773.587] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  706.422 ±(99.9%) 44.403 MB/sec [Average]
  (min, avg, max) = (700.722, 706.422, 727.033), stdev = 11.531
  CI (99.9%): [662.018, 750.825] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  968.004 ±(99.9%) 0.024 B/op [Average]
  (min, avg, max) = (968.001, 968.004, 968.015), stdev = 0.006
  CI (99.9%): [967.980, 968.028] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  24.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200)

# Run progress: 41.56% complete, ETA 00:41:13
# Fork: 1 of 1
# Warmup Iteration   1: 2789.227 ns/op
# Warmup Iteration   2: 1956.936 ns/op
# Warmup Iteration   3: 1869.378 ns/op
# Warmup Iteration   4: 1854.300 ns/op
# Warmup Iteration   5: 1848.855 ns/op
Iteration   1: 1854.544 ns/op
                 ·gc.alloc.rate:      847.120 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1857.893 ns/op
                 ·gc.alloc.rate:      845.502 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1853.954 ns/op
                 ·gc.alloc.rate:      847.279 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1864.622 ns/op
                 ·gc.alloc.rate:      842.161 MB/sec
                 ·gc.alloc.rate.norm: 824.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 1726.066 ns/op
                 ·gc.alloc.rate:      910.156 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  1831.416 ±(99.9%) 227.361 ns/op [Average]
  (min, avg, max) = (1726.066, 1831.416, 1864.622), stdev = 59.045
  CI (99.9%): [1604.055, 2058.777] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  858.443 ±(99.9%) 111.597 MB/sec [Average]
  (min, avg, max) = (842.161, 858.443, 910.156), stdev = 28.981
  CI (99.9%): [746.847, 970.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  824.003 ±(99.9%) 0.017 B/op [Average]
  (min, avg, max) = (824.001, 824.003, 824.011), stdev = 0.004
  CI (99.9%): [823.986, 824.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  22.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.)

# Run progress: 41.81% complete, ETA 00:41:02
# Fork: 1 of 1
# Warmup Iteration   1: 2891.253 ns/op
# Warmup Iteration   2: 2089.690 ns/op
# Warmup Iteration   3: 2010.296 ns/op
# Warmup Iteration   4: 1998.318 ns/op
# Warmup Iteration   5: 1993.510 ns/op
Iteration   1: 1992.583 ns/op
                 ·gc.alloc.rate:      910.966 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 1992.677 ns/op
                 ·gc.alloc.rate:      910.772 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1993.448 ns/op
                 ·gc.alloc.rate:      910.479 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1992.330 ns/op
                 ·gc.alloc.rate:      910.623 MB/sec
                 ·gc.alloc.rate.norm: 952.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1869.134 ns/op
                 ·gc.alloc.rate:      971.181 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  1968.034 ±(99.9%) 212.895 ns/op [Average]
  (min, avg, max) = (1869.134, 1968.034, 1993.448), stdev = 55.288
  CI (99.9%): [1755.139, 2180.930] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  922.804 ±(99.9%) 104.138 MB/sec [Average]
  (min, avg, max) = (910.479, 922.804, 971.181), stdev = 27.044
  CI (99.9%): [818.667, 1026.942] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  952.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (952.001, 952.003, 952.012), stdev = 0.005
  CI (99.9%): [951.985, 952.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200)

# Run progress: 42.05% complete, ETA 00:40:52
# Fork: 1 of 1
# Warmup Iteration   1: 3184.668 ns/op
# Warmup Iteration   2: 2133.148 ns/op
# Warmup Iteration   3: 2056.067 ns/op
# Warmup Iteration   4: 2045.397 ns/op
# Warmup Iteration   5: 2048.695 ns/op
Iteration   1: 2045.030 ns/op
                 ·gc.alloc.rate:      932.381 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2038.552 ns/op
                 ·gc.alloc.rate:      935.219 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2046.540 ns/op
                 ·gc.alloc.rate:      931.706 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2039.535 ns/op
                 ·gc.alloc.rate:      934.517 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1906.044 ns/op
                 ·gc.alloc.rate:      1000.243 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  2015.140 ±(99.9%) 235.209 ns/op [Average]
  (min, avg, max) = (1906.044, 2015.140, 2046.540), stdev = 61.083
  CI (99.9%): [1779.931, 2250.349] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  946.813 ±(99.9%) 115.147 MB/sec [Average]
  (min, avg, max) = (931.706, 946.813, 1000.243), stdev = 29.903
  CI (99.9%): [831.666, 1061.961] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.984, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.)

# Run progress: 42.30% complete, ETA 00:40:41
# Fork: 1 of 1
# Warmup Iteration   1: 2906.611 ns/op
# Warmup Iteration   2: 2145.087 ns/op
# Warmup Iteration   3: 2128.571 ns/op
# Warmup Iteration   4: 2058.482 ns/op
# Warmup Iteration   5: 2055.969 ns/op
Iteration   1: 2059.067 ns/op
                 ·gc.alloc.rate:      925.966 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2056.268 ns/op
                 ·gc.alloc.rate:      927.264 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2059.304 ns/op
                 ·gc.alloc.rate:      925.771 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2053.461 ns/op
                 ·gc.alloc.rate:      928.208 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1937.049 ns/op
                 ·gc.alloc.rate:      984.353 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  2033.030 ±(99.9%) 206.809 ns/op [Average]
  (min, avg, max) = (1937.049, 2033.030, 2059.304), stdev = 53.708
  CI (99.9%): [1826.220, 2239.839] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  938.312 ±(99.9%) 99.180 MB/sec [Average]
  (min, avg, max) = (925.771, 938.312, 984.353), stdev = 25.757
  CI (99.9%): [839.132, 1037.492] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.984, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = a.200.200)

# Run progress: 42.54% complete, ETA 00:40:31
# Fork: 1 of 1
# Warmup Iteration   1: 4132.680 ns/op
# Warmup Iteration   2: 3044.844 ns/op
# Warmup Iteration   3: 2957.078 ns/op
# Warmup Iteration   4: 2944.010 ns/op
# Warmup Iteration   5: 2933.732 ns/op
Iteration   1: 2931.697 ns/op
                 ·gc.alloc.rate:      785.517 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2928.516 ns/op
                 ·gc.alloc.rate:      786.317 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2943.874 ns/op
                 ·gc.alloc.rate:      782.312 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2929.582 ns/op
                 ·gc.alloc.rate:      785.905 MB/sec
                 ·gc.alloc.rate.norm: 1208.017 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2834.338 ns/op
                 ·gc.alloc.rate:      812.610 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  2913.601 ±(99.9%) 172.254 ns/op [Average]
  (min, avg, max) = (2834.338, 2913.601, 2943.874), stdev = 44.734
  CI (99.9%): [2741.347, 3085.855] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  790.532 ±(99.9%) 47.914 MB/sec [Average]
  (min, avg, max) = (782.312, 790.532, 812.610), stdev = 12.443
  CI (99.9%): [742.619, 838.446] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1208.005 ±(99.9%) 0.027 B/op [Average]
  (min, avg, max) = (1208.001, 1208.005, 1208.017), stdev = 0.007
  CI (99.9%): [1207.977, 1208.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.a.200)

# Run progress: 42.79% complete, ETA 00:40:21
# Fork: 1 of 1
# Warmup Iteration   1: 4295.481 ns/op
# Warmup Iteration   2: 3244.678 ns/op
# Warmup Iteration   3: 3064.588 ns/op
# Warmup Iteration   4: 3044.311 ns/op
# Warmup Iteration   5: 3046.568 ns/op
Iteration   1: 3043.157 ns/op
                 ·gc.alloc.rate:      756.849 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 3044.029 ns/op
                 ·gc.alloc.rate:      756.609 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 3121.308 ns/op
                 ·gc.alloc.rate:      737.808 MB/sec
                 ·gc.alloc.rate.norm: 1208.002 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 3033.913 ns/op
                 ·gc.alloc.rate:      758.840 MB/sec
                 ·gc.alloc.rate.norm: 1208.018 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2943.912 ns/op
                 ·gc.alloc.rate:      782.395 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  3037.264 ±(99.9%) 242.542 ns/op [Average]
  (min, avg, max) = (2943.912, 3037.264, 3121.308), stdev = 62.987
  CI (99.9%): [2794.721, 3279.806] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  758.500 ±(99.9%) 61.053 MB/sec [Average]
  (min, avg, max) = (737.808, 758.500, 782.395), stdev = 15.855
  CI (99.9%): [697.447, 819.553] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1208.005 ±(99.9%) 0.028 B/op [Average]
  (min, avg, max) = (1208.001, 1208.005, 1208.018), stdev = 0.007
  CI (99.9%): [1207.977, 1208.033] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  26.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
  CI (99.9%): [26.000, 26.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.a)

# Run progress: 43.03% complete, ETA 00:40:10
# Fork: 1 of 1
# Warmup Iteration   1: 4401.431 ns/op
# Warmup Iteration   2: 3266.132 ns/op
# Warmup Iteration   3: 3162.736 ns/op
# Warmup Iteration   4: 3157.966 ns/op
# Warmup Iteration   5: 3151.221 ns/op
Iteration   1: 3144.735 ns/op
                 ·gc.alloc.rate:      732.429 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 3244.680 ns/op
                 ·gc.alloc.rate:      709.861 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 3149.991 ns/op
                 ·gc.alloc.rate:      731.015 MB/sec
                 ·gc.alloc.rate.norm: 1208.002 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 3156.679 ns/op
                 ·gc.alloc.rate:      729.359 MB/sec
                 ·gc.alloc.rate.norm: 1208.018 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 3085.530 ns/op
                 ·gc.alloc.rate:      746.521 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  3156.323 ±(99.9%) 219.461 ns/op [Average]
  (min, avg, max) = (3085.530, 3156.323, 3244.680), stdev = 56.993
  CI (99.9%): [2936.862, 3375.784] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  729.837 ±(99.9%) 50.417 MB/sec [Average]
  (min, avg, max) = (709.861, 729.837, 746.521), stdev = 13.093
  CI (99.9%): [679.420, 780.254] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1208.005 ±(99.9%) 0.029 B/op [Average]
  (min, avg, max) = (1208.001, 1208.005, 1208.018), stdev = 0.008
  CI (99.9%): [1207.976, 1208.034] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  25.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.200.200)

# Run progress: 43.28% complete, ETA 00:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 2989.556 ns/op
# Warmup Iteration   2: 2291.355 ns/op
# Warmup Iteration   3: 2167.763 ns/op
# Warmup Iteration   4: 2159.119 ns/op
# Warmup Iteration   5: 2200.005 ns/op
Iteration   1: 2148.833 ns/op
                 ·gc.alloc.rate:      986.604 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2148.942 ns/op
                 ·gc.alloc.rate:      986.603 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2150.086 ns/op
                 ·gc.alloc.rate:      986.038 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2148.139 ns/op
                 ·gc.alloc.rate:      986.644 MB/sec
                 ·gc.alloc.rate.norm: 1112.013 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2023.812 ns/op
                 ·gc.alloc.rate:      1047.641 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  2123.962 ±(99.9%) 215.598 ns/op [Average]
  (min, avg, max) = (2023.812, 2123.962, 2150.086), stdev = 55.990
  CI (99.9%): [1908.364, 2339.560] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  998.706 ±(99.9%) 105.342 MB/sec [Average]
  (min, avg, max) = (986.038, 998.706, 1047.641), stdev = 27.357
  CI (99.9%): [893.364, 1104.048] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1112.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (1112.001, 1112.003, 1112.013), stdev = 0.005
  CI (99.9%): [1111.983, 1112.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.99999)

# Run progress: 43.52% complete, ETA 00:39:50
# Fork: 1 of 1
# Warmup Iteration   1: 317.380 ns/op
# Warmup Iteration   2: 208.034 ns/op
# Warmup Iteration   3: 192.507 ns/op
# Warmup Iteration   4: 192.687 ns/op
# Warmup Iteration   5: 192.180 ns/op
Iteration   1: 191.672 ns/op
                 ·gc.alloc.rate:      3660.993 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 192.288 ns/op
                 ·gc.alloc.rate:      3648.976 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 192.043 ns/op
                 ·gc.alloc.rate:      3653.819 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 192.243 ns/op
                 ·gc.alloc.rate:      3648.652 MB/sec
                 ·gc.alloc.rate.norm: 368.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 192.443 ns/op
                 ·gc.alloc.rate:      3646.304 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  192.138 ±(99.9%) 1.144 ns/op [Average]
  (min, avg, max) = (191.672, 192.138, 192.443), stdev = 0.297
  CI (99.9%): [190.994, 193.281] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  3651.749 ±(99.9%) 22.508 MB/sec [Average]
  (min, avg, max) = (3646.304, 3651.749, 3660.993), stdev = 5.845
  CI (99.9%): [3629.241, 3674.256] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  368.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (368.000, 368.000, 368.001), stdev = 0.001
  CI (99.9%): [367.999, 368.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  110.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.000, 22.000), stdev = 0.001
  CI (99.9%): [110.000, 110.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  55.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 11.000, 12.000), stdev = 0.707
  CI (99.9%): [55.000, 55.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.-200)

# Run progress: 43.77% complete, ETA 00:39:39
# Fork: 1 of 1
# Warmup Iteration   1: 360.735 ns/op
# Warmup Iteration   2: 219.809 ns/op
# Warmup Iteration   3: 195.183 ns/op
# Warmup Iteration   4: 194.959 ns/op
# Warmup Iteration   5: 194.973 ns/op
Iteration   1: 195.097 ns/op
                 ·gc.alloc.rate:      3752.702 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 195.647 ns/op
                 ·gc.alloc.rate:      3742.278 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 195.272 ns/op
                 ·gc.alloc.rate:      3749.684 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 196.335 ns/op
                 ·gc.alloc.rate:      3727.255 MB/sec
                 ·gc.alloc.rate.norm: 384.001 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            13.000 ms

Iteration   5: 196.230 ns/op
                 ·gc.alloc.rate:      3731.158 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            14.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  195.716 ±(99.9%) 2.138 ns/op [Average]
  (min, avg, max) = (195.097, 195.716, 196.335), stdev = 0.555
  CI (99.9%): [193.578, 197.854] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  3740.615 ±(99.9%) 43.009 MB/sec [Average]
  (min, avg, max) = (3727.255, 3740.615, 3752.702), stdev = 11.169
  CI (99.9%): [3697.606, 3783.625] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  384.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (384.000, 384.000, 384.001), stdev = 0.001
  CI (99.9%): [383.998, 384.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  112.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.400, 23.000), stdev = 0.548
  CI (99.9%): [112.000, 112.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  58.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 11.600, 14.000), stdev = 1.817
  CI (99.9%): [58.000, 58.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 1.0.0)

# Run progress: 44.01% complete, ETA 00:39:29
# Fork: 1 of 1
# Warmup Iteration   1: 296.938 ns/op
# Warmup Iteration   2: 179.769 ns/op
# Warmup Iteration   3: 162.083 ns/op
# Warmup Iteration   4: 162.115 ns/op
# Warmup Iteration   5: 162.439 ns/op
Iteration   1: 162.155 ns/op
                 ·gc.alloc.rate:      4421.124 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           27.000 counts
                 ·gc.time:            13.000 ms

Iteration   2: 162.355 ns/op
                 ·gc.alloc.rate:      4415.172 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            14.000 ms

Iteration   3: 162.139 ns/op
                 ·gc.alloc.rate:      4421.474 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           27.000 counts
                 ·gc.time:            13.000 ms

Iteration   4: 168.282 ns/op
                 ·gc.alloc.rate:      4257.816 MB/sec
                 ·gc.alloc.rate.norm: 376.001 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            13.000 ms

Iteration   5: 161.607 ns/op
                 ·gc.alloc.rate:      4435.939 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           27.000 counts
                 ·gc.time:            13.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  163.308 ±(99.9%) 10.761 ns/op [Average]
  (min, avg, max) = (161.607, 163.308, 168.282), stdev = 2.795
  CI (99.9%): [152.547, 174.069] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  4390.305 ±(99.9%) 286.708 MB/sec [Average]
  (min, avg, max) = (4257.816, 4390.305, 4435.939), stdev = 74.457
  CI (99.9%): [4103.597, 4677.013] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  376.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (376.000, 376.000, 376.001), stdev = 0.001
  CI (99.9%): [375.999, 376.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  132.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (25.000, 26.400, 27.000), stdev = 0.894
  CI (99.9%): [132.000, 132.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  66.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (13.000, 13.200, 14.000), stdev = 0.447
  CI (99.9%): [66.000, 66.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.200)

# Run progress: 44.25% complete, ETA 00:39:19
# Fork: 1 of 1
# Warmup Iteration   1: 307.702 ns/op
# Warmup Iteration   2: 226.937 ns/op
# Warmup Iteration   3: 210.557 ns/op
# Warmup Iteration   4: 199.779 ns/op
# Warmup Iteration   5: 208.411 ns/op
Iteration   1: 200.594 ns/op
                 ·gc.alloc.rate:      3878.203 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            16.000 ms

Iteration   2: 205.429 ns/op
                 ·gc.alloc.rate:      3787.236 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 200.761 ns/op
                 ·gc.alloc.rate:      3873.188 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            16.000 ms

Iteration   4: 206.882 ns/op
                 ·gc.alloc.rate:      3757.236 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 208.557 ns/op
                 ·gc.alloc.rate:      3730.242 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  204.445 ±(99.9%) 13.913 ns/op [Average]
  (min, avg, max) = (200.594, 204.445, 208.557), stdev = 3.613
  CI (99.9%): [190.532, 218.358] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  3805.221 ±(99.9%) 259.695 MB/sec [Average]
  (min, avg, max) = (3730.242, 3805.221, 3878.203), stdev = 67.442
  CI (99.9%): [3545.526, 4064.916] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.998, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  114.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.800, 23.000), stdev = 0.447
  CI (99.9%): [114.000, 114.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  65.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 13.000, 16.000), stdev = 2.828
  CI (99.9%): [65.000, 65.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 44.50% complete, ETA 00:39:08
# Fork: 1 of 1
# Warmup Iteration   1: 341.761 ns/op
# Warmup Iteration   2: 220.685 ns/op
# Warmup Iteration   3: 206.667 ns/op
# Warmup Iteration   4: 212.401 ns/op
# Warmup Iteration   5: 205.756 ns/op
Iteration   1: 206.271 ns/op
                 ·gc.alloc.rate:      3771.290 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            15.000 ms

Iteration   2: 206.182 ns/op
                 ·gc.alloc.rate:      3772.323 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            15.000 ms

Iteration   3: 206.423 ns/op
                 ·gc.alloc.rate:      3767.822 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            14.000 ms

Iteration   4: 205.361 ns/op
                 ·gc.alloc.rate:      3786.622 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 205.660 ns/op
                 ·gc.alloc.rate:      3781.888 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  205.980 ±(99.9%) 1.730 ns/op [Average]
  (min, avg, max) = (205.361, 205.980, 206.423), stdev = 0.449
  CI (99.9%): [204.249, 207.710] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  3775.989 ±(99.9%) 30.446 MB/sec [Average]
  (min, avg, max) = (3767.822, 3775.989, 3786.622), stdev = 7.907
  CI (99.9%): [3745.543, 3806.435] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.998, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  114.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.800, 23.000), stdev = 0.447
  CI (99.9%): [114.000, 114.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  67.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 13.400, 15.000), stdev = 1.817
  CI (99.9%): [67.000, 67.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 44.74% complete, ETA 00:38:58
# Fork: 1 of 1
# Warmup Iteration   1: 405.804 ns/op
# Warmup Iteration   2: 230.359 ns/op
# Warmup Iteration   3: 210.324 ns/op
# Warmup Iteration   4: 209.146 ns/op
# Warmup Iteration   5: 208.846 ns/op
Iteration   1: 209.378 ns/op
                 ·gc.alloc.rate:      3715.467 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 209.722 ns/op
                 ·gc.alloc.rate:      3708.650 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 209.101 ns/op
                 ·gc.alloc.rate:      3720.296 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 208.654 ns/op
                 ·gc.alloc.rate:      3726.888 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   5: 208.477 ns/op
                 ·gc.alloc.rate:      3731.505 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow":
  209.066 ±(99.9%) 1.968 ns/op [Average]
  (min, avg, max) = (208.477, 209.066, 209.722), stdev = 0.511
  CI (99.9%): [207.099, 211.034] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate":
  3720.561 ±(99.9%) 34.853 MB/sec [Average]
  (min, avg, max) = (3708.650, 3720.561, 3731.505), stdev = 9.051
  CI (99.9%): [3685.708, 3755.414] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.998, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.count":
  112.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.400, 23.000), stdev = 0.548
  CI (99.9%): [112.000, 112.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrow:·gc.time":
  54.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.800, 12.000), stdev = 0.837
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = )

# Run progress: 44.99% complete, ETA 00:38:48
# Fork: 1 of 1
# Warmup Iteration   1: 3335.209 ns/op
# Warmup Iteration   2: 2696.426 ns/op
# Warmup Iteration   3: 2661.853 ns/op
# Warmup Iteration   4: 2651.350 ns/op
# Warmup Iteration   5: 2654.573 ns/op
Iteration   1: 2645.338 ns/op
                 ·gc.alloc.rate:      697.621 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2640.860 ns/op
                 ·gc.alloc.rate:      698.904 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2648.919 ns/op
                 ·gc.alloc.rate:      696.776 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2647.444 ns/op
                 ·gc.alloc.rate:      696.906 MB/sec
                 ·gc.alloc.rate.norm: 968.015 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2587.859 ns/op
                 ·gc.alloc.rate:      713.204 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2634.084 ±(99.9%) 100.189 ns/op [Average]
  (min, avg, max) = (2587.859, 2634.084, 2648.919), stdev = 26.019
  CI (99.9%): [2533.895, 2734.273] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  700.682 ±(99.9%) 27.150 MB/sec [Average]
  (min, avg, max) = (696.776, 700.682, 713.204), stdev = 7.051
  CI (99.9%): [673.532, 727.833] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  968.004 ±(99.9%) 0.025 B/op [Average]
  (min, avg, max) = (968.001, 968.004, 968.015), stdev = 0.006
  CI (99.9%): [967.980, 968.029] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  24.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200)

# Run progress: 45.23% complete, ETA 00:38:37
# Fork: 1 of 1
# Warmup Iteration   1: 2264.054 ns/op
# Warmup Iteration   2: 1840.206 ns/op
# Warmup Iteration   3: 1810.330 ns/op
# Warmup Iteration   4: 1801.432 ns/op
# Warmup Iteration   5: 1798.104 ns/op
Iteration   1: 1798.148 ns/op
                 ·gc.alloc.rate:      873.621 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 1798.640 ns/op
                 ·gc.alloc.rate:      873.501 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 1798.465 ns/op
                 ·gc.alloc.rate:      873.609 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 1796.956 ns/op
                 ·gc.alloc.rate:      874.048 MB/sec
                 ·gc.alloc.rate.norm: 824.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1667.179 ns/op
                 ·gc.alloc.rate:      942.308 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  1771.878 ±(99.9%) 225.386 ns/op [Average]
  (min, avg, max) = (1667.179, 1771.878, 1798.640), stdev = 58.532
  CI (99.9%): [1546.492, 1997.263] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  887.417 ±(99.9%) 118.159 MB/sec [Average]
  (min, avg, max) = (873.501, 887.417, 942.308), stdev = 30.685
  CI (99.9%): [769.259, 1005.576] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  824.003 ±(99.9%) 0.017 B/op [Average]
  (min, avg, max) = (824.001, 824.003, 824.011), stdev = 0.004
  CI (99.9%): [823.986, 824.019] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  22.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.)

# Run progress: 45.48% complete, ETA 00:38:27
# Fork: 1 of 1
# Warmup Iteration   1: 2640.209 ns/op
# Warmup Iteration   2: 2002.537 ns/op
# Warmup Iteration   3: 1946.673 ns/op
# Warmup Iteration   4: 1941.436 ns/op
# Warmup Iteration   5: 2040.344 ns/op
Iteration   1: 1936.691 ns/op
                 ·gc.alloc.rate:      937.296 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 1939.618 ns/op
                 ·gc.alloc.rate:      935.801 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 1938.503 ns/op
                 ·gc.alloc.rate:      936.267 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1940.356 ns/op
                 ·gc.alloc.rate:      935.128 MB/sec
                 ·gc.alloc.rate.norm: 952.011 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1807.618 ns/op
                 ·gc.alloc.rate:      1004.118 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  1912.557 ±(99.9%) 225.952 ns/op [Average]
  (min, avg, max) = (1807.618, 1912.557, 1940.356), stdev = 58.679
  CI (99.9%): [1686.605, 2138.509] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  949.722 ±(99.9%) 117.131 MB/sec [Average]
  (min, avg, max) = (935.128, 949.722, 1004.118), stdev = 30.419
  CI (99.9%): [832.591, 1066.853] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  952.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (952.001, 952.003, 952.011), stdev = 0.005
  CI (99.9%): [951.985, 952.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  20.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
  CI (99.9%): [20.000, 20.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200)

# Run progress: 45.72% complete, ETA 00:38:16
# Fork: 1 of 1
# Warmup Iteration   1: 2609.897 ns/op
# Warmup Iteration   2: 1993.706 ns/op
# Warmup Iteration   3: 1971.567 ns/op
# Warmup Iteration   4: 1966.756 ns/op
# Warmup Iteration   5: 2011.192 ns/op
Iteration   1: 1954.467 ns/op
                 ·gc.alloc.rate:      975.490 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1952.951 ns/op
                 ·gc.alloc.rate:      976.091 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1952.134 ns/op
                 ·gc.alloc.rate:      976.286 MB/sec
                 ·gc.alloc.rate.norm: 1000.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1842.314 ns/op
                 ·gc.alloc.rate:      1034.841 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1838.036 ns/op
                 ·gc.alloc.rate:      1037.343 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  1907.980 ±(99.9%) 238.438 ns/op [Average]
  (min, avg, max) = (1838.036, 1907.980, 1954.467), stdev = 61.922
  CI (99.9%): [1669.542, 2146.419] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1000.010 ±(99.9%) 126.883 MB/sec [Average]
  (min, avg, max) = (975.490, 1000.010, 1037.343), stdev = 32.951
  CI (99.9%): [873.127, 1126.894] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.011), stdev = 0.005
  CI (99.9%): [999.985, 1000.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.)

# Run progress: 45.97% complete, ETA 00:38:06
# Fork: 1 of 1
# Warmup Iteration   1: 2963.257 ns/op
# Warmup Iteration   2: 2020.862 ns/op
# Warmup Iteration   3: 2004.592 ns/op
# Warmup Iteration   4: 2004.021 ns/op
# Warmup Iteration   5: 2003.648 ns/op
Iteration   1: 2008.090 ns/op
                 ·gc.alloc.rate:      949.471 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2003.927 ns/op
                 ·gc.alloc.rate:      951.385 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2000.889 ns/op
                 ·gc.alloc.rate:      952.962 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2004.642 ns/op
                 ·gc.alloc.rate:      950.845 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1989.949 ns/op
                 ·gc.alloc.rate:      958.145 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2001.499 ±(99.9%) 26.746 ns/op [Average]
  (min, avg, max) = (1989.949, 2001.499, 2008.090), stdev = 6.946
  CI (99.9%): [1974.753, 2028.246] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  952.562 ±(99.9%) 12.947 MB/sec [Average]
  (min, avg, max) = (949.471, 952.562, 958.145), stdev = 3.362
  CI (99.9%): [939.615, 965.509] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.985, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = a.200.200)

# Run progress: 46.21% complete, ETA 00:37:56
# Fork: 1 of 1
# Warmup Iteration   1: 3971.843 ns/op
# Warmup Iteration   2: 2884.082 ns/op
# Warmup Iteration   3: 2836.584 ns/op
# Warmup Iteration   4: 2818.598 ns/op
# Warmup Iteration   5: 2815.752 ns/op
Iteration   1: 2813.928 ns/op
                 ·gc.alloc.rate:      818.447 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2810.111 ns/op
                 ·gc.alloc.rate:      819.595 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2897.268 ns/op
                 ·gc.alloc.rate:      794.947 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2811.953 ns/op
                 ·gc.alloc.rate:      818.801 MB/sec
                 ·gc.alloc.rate.norm: 1208.016 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 2711.667 ns/op
                 ·gc.alloc.rate:      849.451 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2808.985 ±(99.9%) 253.231 ns/op [Average]
  (min, avg, max) = (2711.667, 2808.985, 2897.268), stdev = 65.763
  CI (99.9%): [2555.754, 3062.216] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  820.248 ±(99.9%) 74.536 MB/sec [Average]
  (min, avg, max) = (794.947, 820.248, 849.451), stdev = 19.357
  CI (99.9%): [745.713, 894.784] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.026 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.016), stdev = 0.007
  CI (99.9%): [1207.978, 1208.030] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  20.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
  CI (99.9%): [20.000, 20.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.a.200)

# Run progress: 46.45% complete, ETA 00:37:45
# Fork: 1 of 1
# Warmup Iteration   1: 3762.437 ns/op
# Warmup Iteration   2: 2845.971 ns/op
# Warmup Iteration   3: 2812.184 ns/op
# Warmup Iteration   4: 2802.383 ns/op
# Warmup Iteration   5: 2794.098 ns/op
Iteration   1: 2796.642 ns/op
                 ·gc.alloc.rate:      823.651 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2885.109 ns/op
                 ·gc.alloc.rate:      798.332 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2892.021 ns/op
                 ·gc.alloc.rate:      796.465 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2800.623 ns/op
                 ·gc.alloc.rate:      822.093 MB/sec
                 ·gc.alloc.rate.norm: 1208.016 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2685.752 ns/op
                 ·gc.alloc.rate:      857.562 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2812.029 ±(99.9%) 322.468 ns/op [Average]
  (min, avg, max) = (2685.752, 2812.029, 2892.021), stdev = 83.744
  CI (99.9%): [2489.561, 3134.497] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  819.621 ±(99.9%) 95.325 MB/sec [Average]
  (min, avg, max) = (796.465, 819.621, 857.562), stdev = 24.756
  CI (99.9%): [724.296, 914.946] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.026 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.016), stdev = 0.007
  CI (99.9%): [1207.978, 1208.030] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.a)

# Run progress: 46.70% complete, ETA 00:37:35
# Fork: 1 of 1
# Warmup Iteration   1: 3863.491 ns/op
# Warmup Iteration   2: 2873.277 ns/op
# Warmup Iteration   3: 2874.793 ns/op
# Warmup Iteration   4: 2833.760 ns/op
# Warmup Iteration   5: 2831.178 ns/op
Iteration   1: 2819.648 ns/op
                 ·gc.alloc.rate:      816.771 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 2818.694 ns/op
                 ·gc.alloc.rate:      817.047 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2835.234 ns/op
                 ·gc.alloc.rate:      812.459 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2846.740 ns/op
                 ·gc.alloc.rate:      808.860 MB/sec
                 ·gc.alloc.rate.norm: 1208.017 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 2730.448 ns/op
                 ·gc.alloc.rate:      843.607 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2810.153 ±(99.9%) 177.336 ns/op [Average]
  (min, avg, max) = (2730.448, 2810.153, 2846.740), stdev = 46.054
  CI (99.9%): [2632.817, 2987.489] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  819.749 ±(99.9%) 52.976 MB/sec [Average]
  (min, avg, max) = (808.860, 819.749, 843.607), stdev = 13.758
  CI (99.9%): [766.773, 872.725] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.026 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.017), stdev = 0.007
  CI (99.9%): [1207.978, 1208.031] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.200.200)

# Run progress: 46.94% complete, ETA 00:37:25
# Fork: 1 of 1
# Warmup Iteration   1: 2779.469 ns/op
# Warmup Iteration   2: 2111.692 ns/op
# Warmup Iteration   3: 2135.193 ns/op
# Warmup Iteration   4: 2060.976 ns/op
# Warmup Iteration   5: 2060.863 ns/op
Iteration   1: 2058.982 ns/op
                 ·gc.alloc.rate:      1029.623 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2057.911 ns/op
                 ·gc.alloc.rate:      1030.051 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2059.495 ns/op
                 ·gc.alloc.rate:      1029.375 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2062.348 ns/op
                 ·gc.alloc.rate:      1027.630 MB/sec
                 ·gc.alloc.rate.norm: 1112.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1948.790 ns/op
                 ·gc.alloc.rate:      1087.924 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  2037.505 ±(99.9%) 191.070 ns/op [Average]
  (min, avg, max) = (1948.790, 2037.505, 2062.348), stdev = 49.620
  CI (99.9%): [1846.435, 2228.575] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1040.921 ±(99.9%) 101.240 MB/sec [Average]
  (min, avg, max) = (1027.630, 1040.921, 1087.924), stdev = 26.292
  CI (99.9%): [939.680, 1142.161] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1112.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1112.001, 1112.003, 1112.012), stdev = 0.005
  CI (99.9%): [1111.984, 1112.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  36.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.99999)

# Run progress: 47.19% complete, ETA 00:37:14
# Fork: 1 of 1
# Warmup Iteration   1: 327.748 ns/op
# Warmup Iteration   2: 212.086 ns/op
# Warmup Iteration   3: 197.665 ns/op
# Warmup Iteration   4: 193.192 ns/op
# Warmup Iteration   5: 193.161 ns/op
Iteration   1: 193.965 ns/op
                 ·gc.alloc.rate:      3617.385 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            15.000 ms

Iteration   2: 193.244 ns/op
                 ·gc.alloc.rate:      3631.141 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 193.485 ns/op
                 ·gc.alloc.rate:      3625.771 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            12.000 ms

Iteration   4: 193.737 ns/op
                 ·gc.alloc.rate:      3620.124 MB/sec
                 ·gc.alloc.rate.norm: 368.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            14.000 ms

Iteration   5: 193.897 ns/op
                 ·gc.alloc.rate:      3618.754 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            15.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  193.666 ±(99.9%) 1.154 ns/op [Average]
  (min, avg, max) = (193.244, 193.666, 193.965), stdev = 0.300
  CI (99.9%): [192.512, 194.819] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3622.635 ±(99.9%) 22.046 MB/sec [Average]
  (min, avg, max) = (3617.385, 3622.635, 3631.141), stdev = 5.725
  CI (99.9%): [3600.589, 3644.681] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  368.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (368.000, 368.000, 368.001), stdev = 0.001
  CI (99.9%): [367.999, 368.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  109.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 21.800, 22.000), stdev = 0.447
  CI (99.9%): [109.000, 109.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  68.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 13.600, 15.000), stdev = 1.517
  CI (99.9%): [68.000, 68.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.-200)

# Run progress: 47.43% complete, ETA 00:37:04
# Fork: 1 of 1
# Warmup Iteration   1: 289.092 ns/op
# Warmup Iteration   2: 197.314 ns/op
# Warmup Iteration   3: 194.945 ns/op
# Warmup Iteration   4: 194.403 ns/op
# Warmup Iteration   5: 194.148 ns/op
Iteration   1: 194.652 ns/op
                 ·gc.alloc.rate:      3761.307 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   2: 194.546 ns/op
                 ·gc.alloc.rate:      3763.199 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            13.000 ms

Iteration   3: 195.171 ns/op
                 ·gc.alloc.rate:      3751.324 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            15.000 ms

Iteration   4: 194.568 ns/op
                 ·gc.alloc.rate:      3761.068 MB/sec
                 ·gc.alloc.rate.norm: 384.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 194.517 ns/op
                 ·gc.alloc.rate:      3763.760 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  194.691 ±(99.9%) 1.052 ns/op [Average]
  (min, avg, max) = (194.517, 194.691, 195.171), stdev = 0.273
  CI (99.9%): [193.639, 195.743] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3760.131 ±(99.9%) 19.483 MB/sec [Average]
  (min, avg, max) = (3751.324, 3760.131, 3763.760), stdev = 5.060
  CI (99.9%): [3740.648, 3779.615] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  384.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (384.000, 384.000, 384.001), stdev = 0.001
  CI (99.9%): [383.999, 384.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  113.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.600, 23.000), stdev = 0.548
  CI (99.9%): [113.000, 113.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  64.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 12.800, 15.000), stdev = 1.304
  CI (99.9%): [64.000, 64.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 1.0.0)

# Run progress: 47.68% complete, ETA 00:36:54
# Fork: 1 of 1
# Warmup Iteration   1: 256.911 ns/op
# Warmup Iteration   2: 171.797 ns/op
# Warmup Iteration   3: 165.797 ns/op
# Warmup Iteration   4: 167.028 ns/op
# Warmup Iteration   5: 166.955 ns/op
Iteration   1: 166.340 ns/op
                 ·gc.alloc.rate:      4310.132 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            14.000 ms

Iteration   2: 166.834 ns/op
                 ·gc.alloc.rate:      4297.358 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            14.000 ms

Iteration   3: 166.577 ns/op
                 ·gc.alloc.rate:      4304.069 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            13.000 ms

Iteration   4: 166.373 ns/op
                 ·gc.alloc.rate:      4307.306 MB/sec
                 ·gc.alloc.rate.norm: 376.001 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 167.480 ns/op
                 ·gc.alloc.rate:      4280.685 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            14.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  166.721 ±(99.9%) 1.802 ns/op [Average]
  (min, avg, max) = (166.340, 166.721, 167.480), stdev = 0.468
  CI (99.9%): [164.919, 168.523] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  4299.910 ±(99.9%) 45.259 MB/sec [Average]
  (min, avg, max) = (4280.685, 4299.910, 4310.132), stdev = 11.754
  CI (99.9%): [4254.651, 4345.169] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  376.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (376.000, 376.000, 376.001), stdev = 0.001
  CI (99.9%): [375.999, 376.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  129.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (25.000, 25.800, 26.000), stdev = 0.447
  CI (99.9%): [129.000, 129.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  67.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 13.400, 14.000), stdev = 0.894
  CI (99.9%): [67.000, 67.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.200)

# Run progress: 47.92% complete, ETA 00:36:43
# Fork: 1 of 1
# Warmup Iteration   1: 309.348 ns/op
# Warmup Iteration   2: 202.762 ns/op
# Warmup Iteration   3: 197.982 ns/op
# Warmup Iteration   4: 191.215 ns/op
# Warmup Iteration   5: 192.058 ns/op
Iteration   1: 197.881 ns/op
                 ·gc.alloc.rate:      3931.105 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 192.010 ns/op
                 ·gc.alloc.rate:      4051.552 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 196.648 ns/op
                 ·gc.alloc.rate:      3955.662 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            13.000 ms

Iteration   4: 197.662 ns/op
                 ·gc.alloc.rate:      3934.536 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            17.000 ms

Iteration   5: 193.345 ns/op
                 ·gc.alloc.rate:      4023.514 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            17.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  195.509 ±(99.9%) 10.275 ns/op [Average]
  (min, avg, max) = (192.010, 195.509, 197.881), stdev = 2.668
  CI (99.9%): [185.234, 205.784] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3979.274 ±(99.9%) 211.439 MB/sec [Average]
  (min, avg, max) = (3931.105, 3979.274, 4051.552), stdev = 54.910
  CI (99.9%): [3767.835, 4190.713] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.998, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  120.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (24.000, 24.000, 24.000), stdev = 0.001
  CI (99.9%): [120.000, 120.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  70.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 14.000, 17.000), stdev = 2.828
  CI (99.9%): [70.000, 70.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 48.17% complete, ETA 00:36:33
# Fork: 1 of 1
# Warmup Iteration   1: 321.472 ns/op
# Warmup Iteration   2: 211.049 ns/op
# Warmup Iteration   3: 208.485 ns/op
# Warmup Iteration   4: 222.076 ns/op
# Warmup Iteration   5: 209.109 ns/op
Iteration   1: 208.982 ns/op
                 ·gc.alloc.rate:      3722.658 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 223.265 ns/op
                 ·gc.alloc.rate:      3483.992 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 218.747 ns/op
                 ·gc.alloc.rate:      3554.205 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 205.152 ns/op
                 ·gc.alloc.rate:      3791.872 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 204.578 ns/op
                 ·gc.alloc.rate:      3802.646 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  212.145 ±(99.9%) 32.412 ns/op [Average]
  (min, avg, max) = (204.578, 212.145, 223.265), stdev = 8.417
  CI (99.9%): [179.732, 244.557] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3671.075 ±(99.9%) 555.422 MB/sec [Average]
  (min, avg, max) = (3483.992, 3671.075, 3802.646), stdev = 144.241
  CI (99.9%): [3115.653, 4226.497] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.998, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  110.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 22.000, 23.000), stdev = 1.000
  CI (99.9%): [110.000, 110.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  54.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.800, 12.000), stdev = 0.837
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 48.41% complete, ETA 00:36:23
# Fork: 1 of 1
# Warmup Iteration   1: 360.168 ns/op
# Warmup Iteration   2: 227.540 ns/op
# Warmup Iteration   3: 223.861 ns/op
# Warmup Iteration   4: 223.648 ns/op
# Warmup Iteration   5: 224.447 ns/op
Iteration   1: 223.906 ns/op
                 ·gc.alloc.rate:      3473.676 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 223.566 ns/op
                 ·gc.alloc.rate:      3479.076 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            10.000 ms

Iteration   3: 223.924 ns/op
                 ·gc.alloc.rate:      3473.988 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 224.167 ns/op
                 ·gc.alloc.rate:      3469.185 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 224.216 ns/op
                 ·gc.alloc.rate:      3469.757 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry":
  223.956 ±(99.9%) 0.996 ns/op [Average]
  (min, avg, max) = (223.566, 223.956, 224.216), stdev = 0.259
  CI (99.9%): [222.960, 224.952] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3473.136 ±(99.9%) 15.322 MB/sec [Average]
  (min, avg, max) = (3469.185, 3473.136, 3479.076), stdev = 3.979
  CI (99.9%): [3457.814, 3488.459] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.998, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.count":
  104.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (20.000, 20.800, 21.000), stdev = 0.447
  CI (99.9%): [104.000, 104.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoThrowNoTry:·gc.time":
  53.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
  CI (99.9%): [53.000, 53.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = )

# Run progress: 48.66% complete, ETA 00:36:12
# Fork: 1 of 1
# Warmup Iteration   1: 3489.513 ns/op
# Warmup Iteration   2: 2794.306 ns/op
# Warmup Iteration   3: 2691.038 ns/op
# Warmup Iteration   4: 2692.542 ns/op
# Warmup Iteration   5: 2680.057 ns/op
Iteration   1: 2769.803 ns/op
                 ·gc.alloc.rate:      666.309 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2682.260 ns/op
                 ·gc.alloc.rate:      688.128 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2683.554 ns/op
                 ·gc.alloc.rate:      687.768 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2682.497 ns/op
                 ·gc.alloc.rate:      687.849 MB/sec
                 ·gc.alloc.rate.norm: 968.016 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 2568.495 ns/op
                 ·gc.alloc.rate:      718.515 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2677.322 ±(99.9%) 275.570 ns/op [Average]
  (min, avg, max) = (2568.495, 2677.322, 2769.803), stdev = 71.565
  CI (99.9%): [2401.752, 2952.892] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  689.714 ±(99.9%) 71.705 MB/sec [Average]
  (min, avg, max) = (666.309, 689.714, 718.515), stdev = 18.622
  CI (99.9%): [618.009, 761.419] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  968.004 ±(99.9%) 0.025 B/op [Average]
  (min, avg, max) = (968.001, 968.004, 968.016), stdev = 0.006
  CI (99.9%): [967.979, 968.029] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  24.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200)

# Run progress: 48.90% complete, ETA 00:36:02
# Fork: 1 of 1
# Warmup Iteration   1: 2243.586 ns/op
# Warmup Iteration   2: 1855.742 ns/op
# Warmup Iteration   3: 1797.778 ns/op
# Warmup Iteration   4: 1789.926 ns/op
# Warmup Iteration   5: 1788.227 ns/op
Iteration   1: 1787.616 ns/op
                 ·gc.alloc.rate:      878.780 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 1787.022 ns/op
                 ·gc.alloc.rate:      879.004 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1786.751 ns/op
                 ·gc.alloc.rate:      879.189 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1837.744 ns/op
                 ·gc.alloc.rate:      854.669 MB/sec
                 ·gc.alloc.rate.norm: 824.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1668.437 ns/op
                 ·gc.alloc.rate:      941.597 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  1773.514 ±(99.9%) 241.421 ns/op [Average]
  (min, avg, max) = (1668.437, 1773.514, 1837.744), stdev = 62.696
  CI (99.9%): [1532.093, 2014.935] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  886.648 ±(99.9%) 125.042 MB/sec [Average]
  (min, avg, max) = (854.669, 886.648, 941.597), stdev = 32.473
  CI (99.9%): [761.606, 1011.689] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  824.003 ±(99.9%) 0.017 B/op [Average]
  (min, avg, max) = (824.001, 824.003, 824.011), stdev = 0.004
  CI (99.9%): [823.986, 824.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.)

# Run progress: 49.14% complete, ETA 00:35:51
# Fork: 1 of 1
# Warmup Iteration   1: 2631.819 ns/op
# Warmup Iteration   2: 1978.732 ns/op
# Warmup Iteration   3: 1952.266 ns/op
# Warmup Iteration   4: 2155.746 ns/op
# Warmup Iteration   5: 2153.535 ns/op
Iteration   1: 2152.958 ns/op
                 ·gc.alloc.rate:      843.160 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 2151.204 ns/op
                 ·gc.alloc.rate:      843.692 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2150.979 ns/op
                 ·gc.alloc.rate:      843.902 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 2153.057 ns/op
                 ·gc.alloc.rate:      842.689 MB/sec
                 ·gc.alloc.rate.norm: 952.013 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 2052.560 ns/op
                 ·gc.alloc.rate:      884.299 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2132.151 ±(99.9%) 171.367 ns/op [Average]
  (min, avg, max) = (2052.560, 2132.151, 2153.057), stdev = 44.503
  CI (99.9%): [1960.784, 2303.518] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  851.548 ±(99.9%) 70.523 MB/sec [Average]
  (min, avg, max) = (842.689, 851.548, 884.299), stdev = 18.315
  CI (99.9%): [781.026, 922.071] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  952.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (952.001, 952.003, 952.013), stdev = 0.005
  CI (99.9%): [951.983, 952.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  23.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200)

# Run progress: 49.39% complete, ETA 00:35:41
# Fork: 1 of 1
# Warmup Iteration   1: 2723.010 ns/op
# Warmup Iteration   2: 1989.720 ns/op
# Warmup Iteration   3: 1978.081 ns/op
# Warmup Iteration   4: 2122.619 ns/op
# Warmup Iteration   5: 1968.399 ns/op
Iteration   1: 1967.685 ns/op
                 ·gc.alloc.rate:      968.987 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 1966.326 ns/op
                 ·gc.alloc.rate:      969.711 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1964.493 ns/op
                 ·gc.alloc.rate:      970.562 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1966.421 ns/op
                 ·gc.alloc.rate:      969.365 MB/sec
                 ·gc.alloc.rate.norm: 1000.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1844.270 ns/op
                 ·gc.alloc.rate:      1033.015 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  1941.839 ±(99.9%) 210.070 ns/op [Average]
  (min, avg, max) = (1844.270, 1941.839, 1967.685), stdev = 54.555
  CI (99.9%): [1731.768, 2151.909] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  982.328 ±(99.9%) 109.131 MB/sec [Average]
  (min, avg, max) = (968.987, 982.328, 1033.015), stdev = 28.341
  CI (99.9%): [873.197, 1091.459] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.011), stdev = 0.005
  CI (99.9%): [999.985, 1000.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.)

# Run progress: 49.63% complete, ETA 00:35:31
# Fork: 1 of 1
# Warmup Iteration   1: 2797.774 ns/op
# Warmup Iteration   2: 2069.997 ns/op
# Warmup Iteration   3: 2032.448 ns/op
# Warmup Iteration   4: 2025.257 ns/op
# Warmup Iteration   5: 2016.858 ns/op
Iteration   1: 2020.485 ns/op
                 ·gc.alloc.rate:      943.544 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 2016.703 ns/op
                 ·gc.alloc.rate:      945.355 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 2030.241 ns/op
                 ·gc.alloc.rate:      939.045 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 2015.400 ns/op
                 ·gc.alloc.rate:      945.607 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 1894.502 ns/op
                 ·gc.alloc.rate:      1006.320 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  1995.466 ±(99.9%) 218.482 ns/op [Average]
  (min, avg, max) = (1894.502, 1995.466, 2030.241), stdev = 56.739
  CI (99.9%): [1776.984, 2213.948] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  955.974 ±(99.9%) 108.846 MB/sec [Average]
  (min, avg, max) = (939.045, 955.974, 1006.320), stdev = 28.267
  CI (99.9%): [847.128, 1064.820] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.984, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  26.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
  CI (99.9%): [26.000, 26.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = a.200.200)

# Run progress: 49.88% complete, ETA 00:35:20
# Fork: 1 of 1
# Warmup Iteration   1: 3934.098 ns/op
# Warmup Iteration   2: 2823.595 ns/op
# Warmup Iteration   3: 2801.393 ns/op
# Warmup Iteration   4: 2789.527 ns/op
# Warmup Iteration   5: 2784.463 ns/op
Iteration   1: 2784.837 ns/op
                 ·gc.alloc.rate:      827.053 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2786.453 ns/op
                 ·gc.alloc.rate:      826.477 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2856.601 ns/op
                 ·gc.alloc.rate:      806.208 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2781.178 ns/op
                 ·gc.alloc.rate:      827.894 MB/sec
                 ·gc.alloc.rate.norm: 1208.016 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2656.806 ns/op
                 ·gc.alloc.rate:      866.923 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2773.175 ±(99.9%) 278.194 ns/op [Average]
  (min, avg, max) = (2656.806, 2773.175, 2856.601), stdev = 72.246
  CI (99.9%): [2494.981, 3051.369] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  830.911 ±(99.9%) 85.036 MB/sec [Average]
  (min, avg, max) = (806.208, 830.911, 866.923), stdev = 22.084
  CI (99.9%): [745.875, 915.947] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.026 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.016), stdev = 0.007
  CI (99.9%): [1207.979, 1208.030] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.a.200)

# Run progress: 50.12% complete, ETA 00:35:10
# Fork: 1 of 1
# Warmup Iteration   1: 3563.446 ns/op
# Warmup Iteration   2: 2618.965 ns/op
# Warmup Iteration   3: 2610.808 ns/op
# Warmup Iteration   4: 2556.990 ns/op
# Warmup Iteration   5: 2554.401 ns/op
Iteration   1: 2549.186 ns/op
                 ·gc.alloc.rate:      903.572 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2558.383 ns/op
                 ·gc.alloc.rate:      900.247 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2563.743 ns/op
                 ·gc.alloc.rate:      898.304 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2555.132 ns/op
                 ·gc.alloc.rate:      901.200 MB/sec
                 ·gc.alloc.rate.norm: 1208.015 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2455.483 ns/op
                 ·gc.alloc.rate:      937.846 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2536.385 ±(99.9%) 175.330 ns/op [Average]
  (min, avg, max) = (2455.483, 2536.385, 2563.743), stdev = 45.533
  CI (99.9%): [2361.056, 2711.715] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  908.234 ±(99.9%) 64.160 MB/sec [Average]
  (min, avg, max) = (898.304, 908.234, 937.846), stdev = 16.662
  CI (99.9%): [844.074, 972.394] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.024 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.015), stdev = 0.006
  CI (99.9%): [1207.980, 1208.028] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.a)

# Run progress: 50.37% complete, ETA 00:35:00
# Fork: 1 of 1
# Warmup Iteration   1: 3839.121 ns/op
# Warmup Iteration   2: 2991.109 ns/op
# Warmup Iteration   3: 2900.636 ns/op
# Warmup Iteration   4: 2905.645 ns/op
# Warmup Iteration   5: 2882.432 ns/op
Iteration   1: 2886.124 ns/op
                 ·gc.alloc.rate:      798.024 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2889.403 ns/op
                 ·gc.alloc.rate:      796.989 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2888.981 ns/op
                 ·gc.alloc.rate:      797.155 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2888.954 ns/op
                 ·gc.alloc.rate:      796.893 MB/sec
                 ·gc.alloc.rate.norm: 1208.017 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2781.001 ns/op
                 ·gc.alloc.rate:      828.168 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2866.893 ±(99.9%) 184.957 ns/op [Average]
  (min, avg, max) = (2781.001, 2866.893, 2889.403), stdev = 48.033
  CI (99.9%): [2681.935, 3051.850] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  803.446 ±(99.9%) 53.245 MB/sec [Average]
  (min, avg, max) = (796.893, 803.446, 828.168), stdev = 13.828
  CI (99.9%): [750.201, 856.691] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.027 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.017), stdev = 0.007
  CI (99.9%): [1207.978, 1208.031] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.200.200)

# Run progress: 50.61% complete, ETA 00:34:49
# Fork: 1 of 1
# Warmup Iteration   1: 2925.987 ns/op
# Warmup Iteration   2: 2246.393 ns/op
# Warmup Iteration   3: 2081.119 ns/op
# Warmup Iteration   4: 2071.831 ns/op
# Warmup Iteration   5: 2136.359 ns/op
Iteration   1: 2067.024 ns/op
                 ·gc.alloc.rate:      1025.687 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2065.515 ns/op
                 ·gc.alloc.rate:      1026.466 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2067.558 ns/op
                 ·gc.alloc.rate:      1025.457 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2068.211 ns/op
                 ·gc.alloc.rate:      1024.851 MB/sec
                 ·gc.alloc.rate.norm: 1112.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1954.888 ns/op
                 ·gc.alloc.rate:      1084.615 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2044.639 ±(99.9%) 193.233 ns/op [Average]
  (min, avg, max) = (1954.888, 2044.639, 2068.211), stdev = 50.182
  CI (99.9%): [1851.406, 2237.873] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  1037.415 ±(99.9%) 101.625 MB/sec [Average]
  (min, avg, max) = (1024.851, 1037.415, 1084.615), stdev = 26.392
  CI (99.9%): [935.790, 1139.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1112.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1112.001, 1112.003, 1112.012), stdev = 0.005
  CI (99.9%): [1111.984, 1112.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  36.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.99999)

# Run progress: 50.86% complete, ETA 00:34:39
# Fork: 1 of 1
# Warmup Iteration   1: 3218.546 ns/op
# Warmup Iteration   2: 2186.837 ns/op
# Warmup Iteration   3: 2107.698 ns/op
# Warmup Iteration   4: 2100.590 ns/op
# Warmup Iteration   5: 2103.943 ns/op
Iteration   1: 2096.928 ns/op
                 ·gc.alloc.rate:      989.238 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2099.325 ns/op
                 ·gc.alloc.rate:      988.074 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2096.155 ns/op
                 ·gc.alloc.rate:      989.593 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2095.284 ns/op
                 ·gc.alloc.rate:      989.717 MB/sec
                 ·gc.alloc.rate.norm: 1088.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 2064.853 ns/op
                 ·gc.alloc.rate:      1004.574 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2090.509 ±(99.9%) 55.529 ns/op [Average]
  (min, avg, max) = (2064.853, 2090.509, 2099.325), stdev = 14.421
  CI (99.9%): [2034.980, 2146.038] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  992.239 ±(99.9%) 26.668 MB/sec [Average]
  (min, avg, max) = (988.074, 992.239, 1004.574), stdev = 6.926
  CI (99.9%): [965.571, 1018.907] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1088.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1088.001, 1088.003, 1088.012), stdev = 0.005
  CI (99.9%): [1087.984, 1088.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  22.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.-200)

# Run progress: 51.10% complete, ETA 00:34:29
# Fork: 1 of 1
# Warmup Iteration   1: 2913.551 ns/op
# Warmup Iteration   2: 2185.141 ns/op
# Warmup Iteration   3: 2109.651 ns/op
# Warmup Iteration   4: 2097.735 ns/op
# Warmup Iteration   5: 2095.564 ns/op
Iteration   1: 2095.602 ns/op
                 ·gc.alloc.rate:      1004.347 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2095.111 ns/op
                 ·gc.alloc.rate:      1004.546 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2095.693 ns/op
                 ·gc.alloc.rate:      1004.455 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2103.653 ns/op
                 ·gc.alloc.rate:      1000.105 MB/sec
                 ·gc.alloc.rate.norm: 1104.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 1979.223 ns/op
                 ·gc.alloc.rate:      1063.442 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  2073.857 ±(99.9%) 204.163 ns/op [Average]
  (min, avg, max) = (1979.223, 2073.857, 2103.653), stdev = 53.021
  CI (99.9%): [1869.693, 2278.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  1015.379 ±(99.9%) 103.713 MB/sec [Average]
  (min, avg, max) = (1000.105, 1015.379, 1063.442), stdev = 26.934
  CI (99.9%): [911.666, 1119.092] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1104.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1104.001, 1104.003, 1104.012), stdev = 0.005
  CI (99.9%): [1103.984, 1104.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  20.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
  CI (99.9%): [20.000, 20.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 1.0.0)

# Run progress: 51.34% complete, ETA 00:34:18
# Fork: 1 of 1
# Warmup Iteration   1: 264.436 ns/op
# Warmup Iteration   2: 167.937 ns/op
# Warmup Iteration   3: 163.440 ns/op
# Warmup Iteration   4: 164.253 ns/op
# Warmup Iteration   5: 163.412 ns/op
Iteration   1: 163.280 ns/op
                 ·gc.alloc.rate:      4390.772 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            13.000 ms

Iteration   2: 166.787 ns/op
                 ·gc.alloc.rate:      4298.438 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 163.465 ns/op
                 ·gc.alloc.rate:      4385.801 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            14.000 ms

Iteration   4: 164.733 ns/op
                 ·gc.alloc.rate:      4350.439 MB/sec
                 ·gc.alloc.rate.norm: 376.001 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            21.000 ms

Iteration   5: 164.297 ns/op
                 ·gc.alloc.rate:      4363.792 MB/sec
                 ·gc.alloc.rate.norm: 376.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            13.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  164.512 ±(99.9%) 5.407 ns/op [Average]
  (min, avg, max) = (163.280, 164.512, 166.787), stdev = 1.404
  CI (99.9%): [159.106, 169.919] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  4357.848 ±(99.9%) 142.592 MB/sec [Average]
  (min, avg, max) = (4298.438, 4357.848, 4390.772), stdev = 37.031
  CI (99.9%): [4215.256, 4500.440] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  376.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (376.000, 376.000, 376.001), stdev = 0.001
  CI (99.9%): [375.999, 376.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  130.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (26.000, 26.000, 26.000), stdev = 0.001
  CI (99.9%): [130.000, 130.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  73.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 14.600, 21.000), stdev = 3.647
  CI (99.9%): [73.000, 73.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.200)

# Run progress: 51.59% complete, ETA 00:34:08
# Fork: 1 of 1
# Warmup Iteration   1: 304.953 ns/op
# Warmup Iteration   2: 194.993 ns/op
# Warmup Iteration   3: 188.685 ns/op
# Warmup Iteration   4: 188.710 ns/op
# Warmup Iteration   5: 188.318 ns/op
Iteration   1: 188.470 ns/op
                 ·gc.alloc.rate:      4127.655 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms

Iteration   2: 188.824 ns/op
                 ·gc.alloc.rate:      4119.607 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 189.160 ns/op
                 ·gc.alloc.rate:      4112.127 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms

Iteration   4: 188.943 ns/op
                 ·gc.alloc.rate:      4115.438 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            13.000 ms

Iteration   5: 189.597 ns/op
                 ·gc.alloc.rate:      4103.024 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            13.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  188.999 ±(99.9%) 1.607 ns/op [Average]
  (min, avg, max) = (188.470, 188.999, 189.597), stdev = 0.417
  CI (99.9%): [187.392, 190.606] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  4115.570 ±(99.9%) 35.061 MB/sec [Average]
  (min, avg, max) = (4103.024, 4115.570, 4127.655), stdev = 9.105
  CI (99.9%): [4080.509, 4150.631] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.999, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  124.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (24.000, 24.800, 25.000), stdev = 0.447
  CI (99.9%): [124.000, 124.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  61.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 12.200, 13.000), stdev = 0.837
  CI (99.9%): [61.000, 61.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 51.83% complete, ETA 00:33:58
# Fork: 1 of 1
# Warmup Iteration   1: 299.442 ns/op
# Warmup Iteration   2: 237.192 ns/op
# Warmup Iteration   3: 211.160 ns/op
# Warmup Iteration   4: 210.869 ns/op
# Warmup Iteration   5: 211.819 ns/op
Iteration   1: 223.428 ns/op
                 ·gc.alloc.rate:      3481.798 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 211.142 ns/op
                 ·gc.alloc.rate:      3683.996 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 211.556 ns/op
                 ·gc.alloc.rate:      3677.189 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 210.565 ns/op
                 ·gc.alloc.rate:      3693.223 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   5: 210.426 ns/op
                 ·gc.alloc.rate:      3696.954 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  213.424 ±(99.9%) 21.607 ns/op [Average]
  (min, avg, max) = (210.426, 213.424, 223.428), stdev = 5.611
  CI (99.9%): [191.817, 235.030] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  3646.632 ±(99.9%) 356.070 MB/sec [Average]
  (min, avg, max) = (3481.798, 3646.632, 3696.954), stdev = 92.470
  CI (99.9%): [3290.562, 4002.702] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.998, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  109.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 21.800, 22.000), stdev = 0.447
  CI (99.9%): [109.000, 109.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  52.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
  CI (99.9%): [52.000, 52.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 52.08% complete, ETA 00:33:47
# Fork: 1 of 1
# Warmup Iteration   1: 338.222 ns/op
# Warmup Iteration   2: 222.831 ns/op
# Warmup Iteration   3: 216.294 ns/op
# Warmup Iteration   4: 216.636 ns/op
# Warmup Iteration   5: 216.921 ns/op
Iteration   1: 225.164 ns/op
                 ·gc.alloc.rate:      3454.935 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            12.000 ms

Iteration   2: 234.027 ns/op
                 ·gc.alloc.rate:      3323.979 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 218.207 ns/op
                 ·gc.alloc.rate:      3564.918 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            13.000 ms

Iteration   4: 217.784 ns/op
                 ·gc.alloc.rate:      3570.804 MB/sec
                 ·gc.alloc.rate.norm: 408.001 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            10.000 ms

Iteration   5: 223.946 ns/op
                 ·gc.alloc.rate:      3474.122 MB/sec
                 ·gc.alloc.rate.norm: 408.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            12.000 ms



Result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry":
  223.826 ±(99.9%) 25.393 ns/op [Average]
  (min, avg, max) = (217.784, 223.826, 234.027), stdev = 6.594
  CI (99.9%): [198.433, 249.218] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate":
  3477.752 ±(99.9%) 387.160 MB/sec [Average]
  (min, avg, max) = (3323.979, 3477.752, 3570.804), stdev = 100.544
  CI (99.9%): [3090.592, 3864.911] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  408.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (408.000, 408.000, 408.001), stdev = 0.001
  CI (99.9%): [407.998, 408.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.count":
  105.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (20.000, 21.000, 22.000), stdev = 0.707
  CI (99.9%): [105.000, 105.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseBenchmark.yoloNoTry:·gc.time":
  58.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 11.600, 13.000), stdev = 1.140
  CI (99.9%): [58.000, 58.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = )

# Run progress: 52.32% complete, ETA 00:33:37
# Fork: 1 of 1
# Warmup Iteration   1: 2.296 ns/op
# Warmup Iteration   2: 2.513 ns/op
# Warmup Iteration   3: 2.071 ns/op
# Warmup Iteration   4: 2.069 ns/op
# Warmup Iteration   5: 2.074 ns/op
Iteration   1: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.103 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.076 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.072 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  2.078 ±(99.9%) 0.053 ns/op [Average]
  (min, avg, max) = (2.071, 2.078, 2.103), stdev = 0.014
  CI (99.9%): [2.026, 2.131] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200)

# Run progress: 52.57% complete, ETA 00:33:27
# Fork: 1 of 1
# Warmup Iteration   1: 6.079 ns/op
# Warmup Iteration   2: 5.586 ns/op
# Warmup Iteration   3: 5.532 ns/op
# Warmup Iteration   4: 5.547 ns/op
# Warmup Iteration   5: 5.514 ns/op
Iteration   1: 5.509 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.536 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.561 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.494 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.437 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  5.507 ±(99.9%) 0.182 ns/op [Average]
  (min, avg, max) = (5.437, 5.507, 5.561), stdev = 0.047
  CI (99.9%): [5.326, 5.689] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.)

# Run progress: 52.81% complete, ETA 00:33:16
# Fork: 1 of 1
# Warmup Iteration   1: 7.258 ns/op
# Warmup Iteration   2: 7.279 ns/op
# Warmup Iteration   3: 6.435 ns/op
# Warmup Iteration   4: 6.776 ns/op
# Warmup Iteration   5: 6.556 ns/op
Iteration   1: 6.458 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.467 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.440 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.456 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.450 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  6.454 ±(99.9%) 0.038 ns/op [Average]
  (min, avg, max) = (6.440, 6.454, 6.467), stdev = 0.010
  CI (99.9%): [6.416, 6.492] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200)

# Run progress: 53.06% complete, ETA 00:33:06
# Fork: 1 of 1
# Warmup Iteration   1: 16.731 ns/op
# Warmup Iteration   2: 14.039 ns/op
# Warmup Iteration   3: 13.532 ns/op
# Warmup Iteration   4: 13.520 ns/op
# Warmup Iteration   5: 13.471 ns/op
Iteration   1: 13.549 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13.532 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13.534 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13.517 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13.480 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  13.522 ±(99.9%) 0.102 ns/op [Average]
  (min, avg, max) = (13.480, 13.522, 13.549), stdev = 0.026
  CI (99.9%): [13.421, 13.624] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.)

# Run progress: 53.30% complete, ETA 00:32:55
# Fork: 1 of 1
# Warmup Iteration   1: 40.569 ns/op
# Warmup Iteration   2: 34.503 ns/op
# Warmup Iteration   3: 26.836 ns/op
# Warmup Iteration   4: 26.876 ns/op
# Warmup Iteration   5: 26.949 ns/op
Iteration   1: 26.848 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.884 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.893 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.846 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.876 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  26.869 ±(99.9%) 0.082 ns/op [Average]
  (min, avg, max) = (26.846, 26.869, 26.893), stdev = 0.021
  CI (99.9%): [26.787, 26.952] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = a.200.200)

# Run progress: 53.55% complete, ETA 00:32:45
# Fork: 1 of 1
# Warmup Iteration   1: 23.478 ns/op
# Warmup Iteration   2: 20.034 ns/op
# Warmup Iteration   3: 20.486 ns/op
# Warmup Iteration   4: 20.475 ns/op
# Warmup Iteration   5: 20.455 ns/op
Iteration   1: 20.466 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 20.465 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 20.829 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 20.462 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 20.471 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  20.538 ±(99.9%) 0.624 ns/op [Average]
  (min, avg, max) = (20.462, 20.538, 20.829), stdev = 0.162
  CI (99.9%): [19.914, 21.163] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.a.200)

# Run progress: 53.79% complete, ETA 00:32:35
# Fork: 1 of 1
# Warmup Iteration   1: 42.784 ns/op
# Warmup Iteration   2: 32.234 ns/op
# Warmup Iteration   3: 30.746 ns/op
# Warmup Iteration   4: 30.739 ns/op
# Warmup Iteration   5: 30.756 ns/op
Iteration   1: 30.789 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 30.794 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 30.785 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 30.791 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 30.776 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  30.787 ±(99.9%) 0.027 ns/op [Average]
  (min, avg, max) = (30.776, 30.787, 30.794), stdev = 0.007
  CI (99.9%): [30.760, 30.814] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.a)

# Run progress: 54.03% complete, ETA 00:32:24
# Fork: 1 of 1
# Warmup Iteration   1: 44.336 ns/op
# Warmup Iteration   2: 37.967 ns/op
# Warmup Iteration   3: 34.412 ns/op
# Warmup Iteration   4: 34.477 ns/op
# Warmup Iteration   5: 35.136 ns/op
Iteration   1: 34.674 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 34.635 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 34.733 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 34.647 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 34.546 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  34.647 ±(99.9%) 0.262 ns/op [Average]
  (min, avg, max) = (34.546, 34.647, 34.733), stdev = 0.068
  CI (99.9%): [34.385, 34.909] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.200.200)

# Run progress: 54.28% complete, ETA 00:32:14
# Fork: 1 of 1
# Warmup Iteration   1: 24.296 ns/op
# Warmup Iteration   2: 20.903 ns/op
# Warmup Iteration   3: 21.817 ns/op
# Warmup Iteration   4: 21.273 ns/op
# Warmup Iteration   5: 21.239 ns/op
Iteration   1: 21.284 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.266 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.304 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.181 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.138 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  21.235 ±(99.9%) 0.275 ns/op [Average]
  (min, avg, max) = (21.138, 21.235, 21.304), stdev = 0.071
  CI (99.9%): [20.960, 21.510] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.99999)

# Run progress: 54.52% complete, ETA 00:32:04
# Fork: 1 of 1
# Warmup Iteration   1: 157.927 ns/op
# Warmup Iteration   2: 126.788 ns/op
# Warmup Iteration   3: 124.934 ns/op
# Warmup Iteration   4: 124.778 ns/op
# Warmup Iteration   5: 124.917 ns/op
Iteration   1: 127.939 ns/op
                 ·gc.alloc.rate:      2146.171 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   2: 124.963 ns/op
                 ·gc.alloc.rate:      2196.553 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 124.750 ns/op
                 ·gc.alloc.rate:      2200.582 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 125.133 ns/op
                 ·gc.alloc.rate:      2193.282 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            8.000 ms

Iteration   5: 124.867 ns/op
                 ·gc.alloc.rate:      2198.940 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  125.531 ±(99.9%) 5.213 ns/op [Average]
  (min, avg, max) = (124.750, 125.531, 127.939), stdev = 1.354
  CI (99.9%): [120.318, 130.743] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  2187.105 ±(99.9%) 88.747 MB/sec [Average]
  (min, avg, max) = (2146.171, 2187.105, 2200.582), stdev = 23.047
  CI (99.9%): [2098.359, 2275.852] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.001), stdev = 0.001
  CI (99.9%): [143.999, 144.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  75.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 15.000, 16.000), stdev = 0.707
  CI (99.9%): [75.000, 75.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.time":
  34.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.-200)

# Run progress: 54.77% complete, ETA 00:31:53
# Fork: 1 of 1
# Warmup Iteration   1: 49.785 ns/op
# Warmup Iteration   2: 41.663 ns/op
# Warmup Iteration   3: 40.020 ns/op
# Warmup Iteration   4: 39.909 ns/op
# Warmup Iteration   5: 39.937 ns/op
Iteration   1: 39.914 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 39.794 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 40.075 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 42.152 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 39.933 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  40.374 ±(99.9%) 3.848 ns/op [Average]
  (min, avg, max) = (39.794, 40.374, 42.152), stdev = 0.999
  CI (99.9%): [36.526, 44.222] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 1.0.0)

# Run progress: 55.01% complete, ETA 00:31:43
# Fork: 1 of 1
# Warmup Iteration   1: 120.250 ns/op
# Warmup Iteration   2: 91.349 ns/op
# Warmup Iteration   3: 91.780 ns/op
# Warmup Iteration   4: 91.841 ns/op
# Warmup Iteration   5: 91.863 ns/op
Iteration   1: 93.457 ns/op
                 ·gc.alloc.rate:      2937.546 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            8.000 ms

Iteration   2: 91.662 ns/op
                 ·gc.alloc.rate:      2995.176 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            9.000 ms

Iteration   3: 91.670 ns/op
                 ·gc.alloc.rate:      2994.835 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            8.000 ms

Iteration   4: 91.608 ns/op
                 ·gc.alloc.rate:      2996.250 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 91.506 ns/op
                 ·gc.alloc.rate:      3000.633 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            8.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  91.981 ±(99.9%) 3.188 ns/op [Average]
  (min, avg, max) = (91.506, 91.981, 93.457), stdev = 0.828
  CI (99.9%): [88.792, 95.169] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  2984.888 ±(99.9%) 102.296 MB/sec [Average]
  (min, avg, max) = (2937.546, 2984.888, 3000.633), stdev = 26.566
  CI (99.9%): [2882.592, 3087.184] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.001), stdev = 0.001
  CI (99.9%): [143.999, 144.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  89.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (17.000, 17.800, 18.000), stdev = 0.447
  CI (99.9%): [89.000, 89.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.time":
  42.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
  CI (99.9%): [42.000, 42.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 200.200.200)

# Run progress: 55.26% complete, ETA 00:31:33
# Fork: 1 of 1
# Warmup Iteration   1: 158.695 ns/op
# Warmup Iteration   2: 121.971 ns/op
# Warmup Iteration   3: 122.299 ns/op
# Warmup Iteration   4: 122.483 ns/op
# Warmup Iteration   5: 121.705 ns/op
Iteration   1: 121.895 ns/op
                 ·gc.alloc.rate:      2252.506 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            8.000 ms

Iteration   2: 121.813 ns/op
                 ·gc.alloc.rate:      2254.000 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 121.808 ns/op
                 ·gc.alloc.rate:      2252.334 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 121.706 ns/op
                 ·gc.alloc.rate:      2254.775 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 121.971 ns/op
                 ·gc.alloc.rate:      2251.168 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  121.839 ±(99.9%) 0.384 ns/op [Average]
  (min, avg, max) = (121.706, 121.839, 121.971), stdev = 0.100
  CI (99.9%): [121.455, 122.223] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  2252.957 ±(99.9%) 5.508 MB/sec [Average]
  (min, avg, max) = (2251.168, 2252.957, 2254.775), stdev = 1.430
  CI (99.9%): [2247.449, 2258.464] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.001), stdev = 0.001
  CI (99.9%): [143.999, 144.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  77.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (15.000, 15.400, 16.000), stdev = 0.548
  CI (99.9%): [77.000, 77.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.time":
  38.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
  CI (99.9%): [38.000, 38.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 55.50% complete, ETA 00:31:22
# Fork: 1 of 1
# Warmup Iteration   1: 178.692 ns/op
# Warmup Iteration   2: 134.322 ns/op
# Warmup Iteration   3: 138.246 ns/op
# Warmup Iteration   4: 134.032 ns/op
# Warmup Iteration   5: 133.928 ns/op
Iteration   1: 134.153 ns/op
                 ·gc.alloc.rate:      2046.655 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 134.614 ns/op
                 ·gc.alloc.rate:      2039.407 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 133.656 ns/op
                 ·gc.alloc.rate:      2052.985 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 133.639 ns/op
                 ·gc.alloc.rate:      2054.456 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 133.691 ns/op
                 ·gc.alloc.rate:      2053.665 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  133.951 ±(99.9%) 1.647 ns/op [Average]
  (min, avg, max) = (133.639, 133.951, 134.614), stdev = 0.428
  CI (99.9%): [132.304, 135.597] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  2049.434 ±(99.9%) 24.656 MB/sec [Average]
  (min, avg, max) = (2039.407, 2049.434, 2054.456), stdev = 6.403
  CI (99.9%): [2024.777, 2074.090] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.001), stdev = 0.001
  CI (99.9%): [143.999, 144.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  70.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 14.000, 14.000), stdev = 0.001
  CI (99.9%): [70.000, 70.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.time":
  42.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 8.400, 12.000), stdev = 2.510
  CI (99.9%): [42.000, 42.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 55.75% complete, ETA 00:31:12
# Fork: 1 of 1
# Warmup Iteration   1: 201.854 ns/op
# Warmup Iteration   2: 147.745 ns/op
# Warmup Iteration   3: 146.302 ns/op
# Warmup Iteration   4: 146.351 ns/op
# Warmup Iteration   5: 146.258 ns/op
Iteration   1: 146.137 ns/op
                 ·gc.alloc.rate:      1878.483 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 146.158 ns/op
                 ·gc.alloc.rate:      1878.155 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 146.252 ns/op
                 ·gc.alloc.rate:      1877.398 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 146.143 ns/op
                 ·gc.alloc.rate:      1877.961 MB/sec
                 ·gc.alloc.rate.norm: 144.001 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 146.223 ns/op
                 ·gc.alloc.rate:      1877.573 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1":
  146.182 ±(99.9%) 0.199 ns/op [Average]
  (min, avg, max) = (146.137, 146.182, 146.252), stdev = 0.052
  CI (99.9%): [145.984, 146.381] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate":
  1877.914 ±(99.9%) 1.686 MB/sec [Average]
  (min, avg, max) = (1877.398, 1877.914, 1878.483), stdev = 0.438
  CI (99.9%): [1876.229, 1879.600] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.001), stdev = 0.001
  CI (99.9%): [143.999, 144.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.count":
  65.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.000, 13.000), stdev = 0.001
  CI (99.9%): [65.000, 65.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized1:·gc.time":
  33.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = )

# Run progress: 55.99% complete, ETA 00:31:01
# Fork: 1 of 1
# Warmup Iteration   1: 2.463 ns/op
# Warmup Iteration   2: 2.444 ns/op
# Warmup Iteration   3: 2.069 ns/op
# Warmup Iteration   4: 2.069 ns/op
# Warmup Iteration   5: 2.068 ns/op
Iteration   1: 2.068 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.068 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.068 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.069 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  2.069 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (2.068, 2.069, 2.070), stdev = 0.001
  CI (99.9%): [2.066, 2.071] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200)

# Run progress: 56.23% complete, ETA 00:30:51
# Fork: 1 of 1
# Warmup Iteration   1: 6.153 ns/op
# Warmup Iteration   2: 5.633 ns/op
# Warmup Iteration   3: 5.473 ns/op
# Warmup Iteration   4: 5.409 ns/op
# Warmup Iteration   5: 5.478 ns/op
Iteration   1: 5.493 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 5.514 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 5.525 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 5.522 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 5.521 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  5.515 ±(99.9%) 0.051 ns/op [Average]
  (min, avg, max) = (5.493, 5.515, 5.525), stdev = 0.013
  CI (99.9%): [5.464, 5.566] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.)

# Run progress: 56.48% complete, ETA 00:30:41
# Fork: 1 of 1
# Warmup Iteration   1: 7.306 ns/op
# Warmup Iteration   2: 7.133 ns/op
# Warmup Iteration   3: 6.461 ns/op
# Warmup Iteration   4: 6.534 ns/op
# Warmup Iteration   5: 6.455 ns/op
Iteration   1: 6.485 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6.453 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6.451 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6.468 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6.472 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  6.466 ±(99.9%) 0.054 ns/op [Average]
  (min, avg, max) = (6.451, 6.466, 6.485), stdev = 0.014
  CI (99.9%): [6.412, 6.519] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200)

# Run progress: 56.72% complete, ETA 00:30:30
# Fork: 1 of 1
# Warmup Iteration   1: 18.410 ns/op
# Warmup Iteration   2: 14.046 ns/op
# Warmup Iteration   3: 13.528 ns/op
# Warmup Iteration   4: 13.534 ns/op
# Warmup Iteration   5: 13.593 ns/op
Iteration   1: 13.716 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13.513 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13.513 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14.157 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14.097 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  13.799 ±(99.9%) 1.198 ns/op [Average]
  (min, avg, max) = (13.513, 13.799, 14.157), stdev = 0.311
  CI (99.9%): [12.601, 14.998] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.)

# Run progress: 56.97% complete, ETA 00:30:20
# Fork: 1 of 1
# Warmup Iteration   1: 41.050 ns/op
# Warmup Iteration   2: 34.897 ns/op
# Warmup Iteration   3: 27.098 ns/op
# Warmup Iteration   4: 27.084 ns/op
# Warmup Iteration   5: 27.048 ns/op
Iteration   1: 27.037 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.036 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.029 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.773 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.047 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  27.184 ±(99.9%) 1.267 ns/op [Average]
  (min, avg, max) = (27.029, 27.184, 27.773), stdev = 0.329
  CI (99.9%): [25.917, 28.451] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = a.200.200)

# Run progress: 57.21% complete, ETA 00:30:10
# Fork: 1 of 1
# Warmup Iteration   1: 24.077 ns/op
# Warmup Iteration   2: 21.945 ns/op
# Warmup Iteration   3: 18.951 ns/op
# Warmup Iteration   4: 18.967 ns/op
# Warmup Iteration   5: 18.974 ns/op
Iteration   1: 18.956 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.985 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.017 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.040 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.976 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  18.995 ±(99.9%) 0.130 ns/op [Average]
  (min, avg, max) = (18.956, 18.995, 19.040), stdev = 0.034
  CI (99.9%): [18.865, 19.124] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.a.200)

# Run progress: 57.46% complete, ETA 00:29:59
# Fork: 1 of 1
# Warmup Iteration   1: 37.717 ns/op
# Warmup Iteration   2: 33.007 ns/op
# Warmup Iteration   3: 26.658 ns/op
# Warmup Iteration   4: 26.651 ns/op
# Warmup Iteration   5: 26.620 ns/op
Iteration   1: 26.619 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.608 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.564 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.589 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.573 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  26.591 ±(99.9%) 0.089 ns/op [Average]
  (min, avg, max) = (26.564, 26.591, 26.619), stdev = 0.023
  CI (99.9%): [26.502, 26.679] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.a)

# Run progress: 57.70% complete, ETA 00:29:49
# Fork: 1 of 1
# Warmup Iteration   1: 42.617 ns/op
# Warmup Iteration   2: 38.990 ns/op
# Warmup Iteration   3: 35.342 ns/op
# Warmup Iteration   4: 35.205 ns/op
# Warmup Iteration   5: 35.240 ns/op
Iteration   1: 35.241 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 35.294 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 35.178 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 35.191 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 35.144 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  35.210 ±(99.9%) 0.226 ns/op [Average]
  (min, avg, max) = (35.144, 35.210, 35.294), stdev = 0.059
  CI (99.9%): [34.984, 35.435] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.200.200)

# Run progress: 57.95% complete, ETA 00:29:39
# Fork: 1 of 1
# Warmup Iteration   1: 24.156 ns/op
# Warmup Iteration   2: 21.068 ns/op
# Warmup Iteration   3: 21.304 ns/op
# Warmup Iteration   4: 21.287 ns/op
# Warmup Iteration   5: 21.313 ns/op
Iteration   1: 21.355 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.300 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.312 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.246 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.243 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  21.291 ±(99.9%) 0.182 ns/op [Average]
  (min, avg, max) = (21.243, 21.291, 21.355), stdev = 0.047
  CI (99.9%): [21.109, 21.474] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.99999)

# Run progress: 58.19% complete, ETA 00:29:28
# Fork: 1 of 1
# Warmup Iteration   1: 109.075 ns/op
# Warmup Iteration   2: 91.487 ns/op
# Warmup Iteration   3: 91.197 ns/op
# Warmup Iteration   4: 91.065 ns/op
# Warmup Iteration   5: 91.138 ns/op
Iteration   1: 91.110 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 91.125 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 91.252 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 91.140 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 91.081 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  91.141 ±(99.9%) 0.252 ns/op [Average]
  (min, avg, max) = (91.081, 91.141, 91.252), stdev = 0.065
  CI (99.9%): [90.890, 91.393] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.-200)

# Run progress: 58.44% complete, ETA 00:29:18
# Fork: 1 of 1
# Warmup Iteration   1: 46.473 ns/op
# Warmup Iteration   2: 41.541 ns/op
# Warmup Iteration   3: 38.158 ns/op
# Warmup Iteration   4: 38.131 ns/op
# Warmup Iteration   5: 38.134 ns/op
Iteration   1: 37.918 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 38.479 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 37.654 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 37.737 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 37.578 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  37.873 ±(99.9%) 1.391 ns/op [Average]
  (min, avg, max) = (37.578, 37.873, 38.479), stdev = 0.361
  CI (99.9%): [36.482, 39.265] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 1.0.0)

# Run progress: 58.68% complete, ETA 00:29:08
# Fork: 1 of 1
# Warmup Iteration   1: 66.844 ns/op
# Warmup Iteration   2: 56.157 ns/op
# Warmup Iteration   3: 56.909 ns/op
# Warmup Iteration   4: 56.888 ns/op
# Warmup Iteration   5: 56.922 ns/op
Iteration   1: 56.966 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 56.843 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 56.787 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 56.940 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 56.902 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  56.888 ±(99.9%) 0.280 ns/op [Average]
  (min, avg, max) = (56.787, 56.888, 56.966), stdev = 0.073
  CI (99.9%): [56.608, 57.168] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 200.200.200)

# Run progress: 58.92% complete, ETA 00:28:57
# Fork: 1 of 1
# Warmup Iteration   1: 101.722 ns/op
# Warmup Iteration   2: 85.580 ns/op
# Warmup Iteration   3: 85.127 ns/op
# Warmup Iteration   4: 85.103 ns/op
# Warmup Iteration   5: 85.172 ns/op
Iteration   1: 85.192 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 85.119 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 85.154 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 85.158 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 85.151 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  85.155 ±(99.9%) 0.099 ns/op [Average]
  (min, avg, max) = (85.119, 85.155, 85.192), stdev = 0.026
  CI (99.9%): [85.056, 85.253] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 59.17% complete, ETA 00:28:47
# Fork: 1 of 1
# Warmup Iteration   1: 118.634 ns/op
# Warmup Iteration   2: 99.091 ns/op
# Warmup Iteration   3: 99.074 ns/op
# Warmup Iteration   4: 99.144 ns/op
# Warmup Iteration   5: 99.059 ns/op
Iteration   1: 99.114 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 99.084 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 99.044 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 99.072 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 99.355 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  99.134 ±(99.9%) 0.485 ns/op [Average]
  (min, avg, max) = (99.044, 99.134, 99.355), stdev = 0.126
  CI (99.9%): [98.648, 99.619] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 59.41% complete, ETA 00:28:36
# Fork: 1 of 1
# Warmup Iteration   1: 134.288 ns/op
# Warmup Iteration   2: 112.026 ns/op
# Warmup Iteration   3: 112.188 ns/op
# Warmup Iteration   4: 112.031 ns/op
# Warmup Iteration   5: 112.258 ns/op
Iteration   1: 112.041 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 112.007 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 111.973 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 112.009 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 113.002 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2":
  112.207 ±(99.9%) 1.715 ns/op [Average]
  (min, avg, max) = (111.973, 112.207, 113.002), stdev = 0.445
  CI (99.9%): [110.491, 113.922] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized2:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = )

# Run progress: 59.66% complete, ETA 00:28:26
# Fork: 1 of 1
# Warmup Iteration   1: 2.322 ns/op
# Warmup Iteration   2: 2.120 ns/op
# Warmup Iteration   3: 2.205 ns/op
# Warmup Iteration   4: 2.072 ns/op
# Warmup Iteration   5: 2.078 ns/op
Iteration   1: 2.231 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.069 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.069 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.070 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  2.102 ±(99.9%) 0.279 ns/op [Average]
  (min, avg, max) = (2.069, 2.102, 2.231), stdev = 0.072
  CI (99.9%): [1.823, 2.381] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200)

# Run progress: 59.90% complete, ETA 00:28:16
# Fork: 1 of 1
# Warmup Iteration   1: 12.300 ns/op
# Warmup Iteration   2: 11.297 ns/op
# Warmup Iteration   3: 11.365 ns/op
# Warmup Iteration   4: 11.363 ns/op
# Warmup Iteration   5: 11.496 ns/op
Iteration   1: 11.389 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.340 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.343 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.345 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.341 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  11.352 ±(99.9%) 0.081 ns/op [Average]
  (min, avg, max) = (11.340, 11.352, 11.389), stdev = 0.021
  CI (99.9%): [11.271, 11.432] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.)

# Run progress: 60.15% complete, ETA 00:28:05
# Fork: 1 of 1
# Warmup Iteration   1: 31.950 ns/op
# Warmup Iteration   2: 27.140 ns/op
# Warmup Iteration   3: 26.089 ns/op
# Warmup Iteration   4: 26.160 ns/op
# Warmup Iteration   5: 26.173 ns/op
Iteration   1: 26.174 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.160 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.145 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.143 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.138 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  26.152 ±(99.9%) 0.056 ns/op [Average]
  (min, avg, max) = (26.138, 26.152, 26.174), stdev = 0.015
  CI (99.9%): [26.096, 26.209] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200)

# Run progress: 60.39% complete, ETA 00:27:55
# Fork: 1 of 1
# Warmup Iteration   1: 37.806 ns/op
# Warmup Iteration   2: 32.815 ns/op
# Warmup Iteration   3: 31.644 ns/op
# Warmup Iteration   4: 31.650 ns/op
# Warmup Iteration   5: 31.649 ns/op
Iteration   1: 31.616 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.617 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.609 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 34.091 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.624 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  32.111 ±(99.9%) 4.262 ns/op [Average]
  (min, avg, max) = (31.609, 32.111, 34.091), stdev = 1.107
  CI (99.9%): [27.849, 36.374] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.)

# Run progress: 60.64% complete, ETA 00:27:45
# Fork: 1 of 1
# Warmup Iteration   1: 56.005 ns/op
# Warmup Iteration   2: 49.333 ns/op
# Warmup Iteration   3: 49.293 ns/op
# Warmup Iteration   4: 47.370 ns/op
# Warmup Iteration   5: 49.975 ns/op
Iteration   1: 47.920 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 47.850 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 48.173 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 48.624 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 47.919 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  48.097 ±(99.9%) 1.229 ns/op [Average]
  (min, avg, max) = (47.850, 48.097, 48.624), stdev = 0.319
  CI (99.9%): [46.868, 49.326] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = a.200.200)

# Run progress: 60.88% complete, ETA 00:27:34
# Fork: 1 of 1
# Warmup Iteration   1: 2.642 ns/op
# Warmup Iteration   2: 2.425 ns/op
# Warmup Iteration   3: 2.366 ns/op
# Warmup Iteration   4: 2.367 ns/op
# Warmup Iteration   5: 2.368 ns/op
Iteration   1: 2.366 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.367 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.366 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.368 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.368 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  2.367 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (2.366, 2.367, 2.368), stdev = 0.001
  CI (99.9%): [2.363, 2.372] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.a.200)

# Run progress: 61.12% complete, ETA 00:27:24
# Fork: 1 of 1
# Warmup Iteration   1: 36.622 ns/op
# Warmup Iteration   2: 29.165 ns/op
# Warmup Iteration   3: 28.004 ns/op
# Warmup Iteration   4: 27.964 ns/op
# Warmup Iteration   5: 27.957 ns/op
Iteration   1: 27.981 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.953 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.993 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.971 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.964 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  27.972 ±(99.9%) 0.060 ns/op [Average]
  (min, avg, max) = (27.953, 27.972, 27.993), stdev = 0.015
  CI (99.9%): [27.913, 28.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.a)

# Run progress: 61.37% complete, ETA 00:27:14
# Fork: 1 of 1
# Warmup Iteration   1: 78.019 ns/op
# Warmup Iteration   2: 68.818 ns/op
# Warmup Iteration   3: 68.128 ns/op
# Warmup Iteration   4: 67.236 ns/op
# Warmup Iteration   5: 67.205 ns/op
Iteration   1: 67.196 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 67.175 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 67.238 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 67.162 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 67.219 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  67.198 ±(99.9%) 0.120 ns/op [Average]
  (min, avg, max) = (67.162, 67.198, 67.238), stdev = 0.031
  CI (99.9%): [67.078, 67.318] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.200.200)

# Run progress: 61.61% complete, ETA 00:27:03
# Fork: 1 of 1
# Warmup Iteration   1: 72.647 ns/op
# Warmup Iteration   2: 60.963 ns/op
# Warmup Iteration   3: 58.851 ns/op
# Warmup Iteration   4: 58.870 ns/op
# Warmup Iteration   5: 58.764 ns/op
Iteration   1: 58.862 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 58.991 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 58.856 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 58.937 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 58.938 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  58.917 ±(99.9%) 0.220 ns/op [Average]
  (min, avg, max) = (58.856, 58.917, 58.991), stdev = 0.057
  CI (99.9%): [58.697, 59.137] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.99999)

# Run progress: 61.86% complete, ETA 00:26:53
# Fork: 1 of 1
# Warmup Iteration   1: 98.428 ns/op
# Warmup Iteration   2: 82.864 ns/op
# Warmup Iteration   3: 80.302 ns/op
# Warmup Iteration   4: 80.377 ns/op
# Warmup Iteration   5: 80.435 ns/op
Iteration   1: 80.373 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 80.486 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 80.221 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 80.261 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 80.251 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  80.319 ±(99.9%) 0.423 ns/op [Average]
  (min, avg, max) = (80.221, 80.319, 80.486), stdev = 0.110
  CI (99.9%): [79.895, 80.742] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.-200)

# Run progress: 62.10% complete, ETA 00:26:43
# Fork: 1 of 1
# Warmup Iteration   1: 70.144 ns/op
# Warmup Iteration   2: 58.524 ns/op
# Warmup Iteration   3: 57.617 ns/op
# Warmup Iteration   4: 57.617 ns/op
# Warmup Iteration   5: 57.631 ns/op
Iteration   1: 57.679 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 58.687 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 57.717 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 57.710 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 57.757 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  57.910 ±(99.9%) 1.677 ns/op [Average]
  (min, avg, max) = (57.679, 57.910, 58.687), stdev = 0.435
  CI (99.9%): [56.233, 59.587] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 1.0.0)

# Run progress: 62.35% complete, ETA 00:26:32
# Fork: 1 of 1
# Warmup Iteration   1: 47.993 ns/op
# Warmup Iteration   2: 42.540 ns/op
# Warmup Iteration   3: 41.413 ns/op
# Warmup Iteration   4: 41.364 ns/op
# Warmup Iteration   5: 41.325 ns/op
Iteration   1: 41.321 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 41.421 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 41.342 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 41.443 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 41.588 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  41.423 ±(99.9%) 0.408 ns/op [Average]
  (min, avg, max) = (41.321, 41.423, 41.588), stdev = 0.106
  CI (99.9%): [41.015, 41.831] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 200.200.200)

# Run progress: 62.59% complete, ETA 00:26:22
# Fork: 1 of 1
# Warmup Iteration   1: 85.770 ns/op
# Warmup Iteration   2: 69.268 ns/op
# Warmup Iteration   3: 67.840 ns/op
# Warmup Iteration   4: 67.832 ns/op
# Warmup Iteration   5: 67.848 ns/op
Iteration   1: 67.812 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 67.835 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 67.877 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 67.855 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 67.878 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  67.851 ±(99.9%) 0.110 ns/op [Average]
  (min, avg, max) = (67.812, 67.851, 67.878), stdev = 0.028
  CI (99.9%): [67.742, 67.961] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 62.84% complete, ETA 00:26:12
# Fork: 1 of 1
# Warmup Iteration   1: 99.686 ns/op
# Warmup Iteration   2: 88.406 ns/op
# Warmup Iteration   3: 85.258 ns/op
# Warmup Iteration   4: 85.292 ns/op
# Warmup Iteration   5: 85.307 ns/op
Iteration   1: 85.214 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 85.124 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 85.204 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 85.283 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 85.324 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  85.230 ±(99.9%) 0.297 ns/op [Average]
  (min, avg, max) = (85.124, 85.230, 85.324), stdev = 0.077
  CI (99.9%): [84.933, 85.527] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 63.08% complete, ETA 00:26:01
# Fork: 1 of 1
# Warmup Iteration   1: 116.414 ns/op
# Warmup Iteration   2: 101.107 ns/op
# Warmup Iteration   3: 99.574 ns/op
# Warmup Iteration   4: 99.563 ns/op
# Warmup Iteration   5: 99.763 ns/op
Iteration   1: 99.666 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 99.611 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 99.683 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 99.743 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 99.625 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3":
  99.666 ±(99.9%) 0.201 ns/op [Average]
  (min, avg, max) = (99.611, 99.666, 99.743), stdev = 0.052
  CI (99.9%): [99.465, 99.867] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = )

# Run progress: 63.33% complete, ETA 00:25:51
# Fork: 1 of 1
# Warmup Iteration   1: 2.318 ns/op
# Warmup Iteration   2: 2.142 ns/op
# Warmup Iteration   3: 2.070 ns/op
# Warmup Iteration   4: 2.077 ns/op
# Warmup Iteration   5: 2.070 ns/op
Iteration   1: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.069 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.069 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  2.070 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (2.069, 2.070, 2.070), stdev = 0.001
  CI (99.9%): [2.068, 2.071] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200)

# Run progress: 63.57% complete, ETA 00:25:41
# Fork: 1 of 1
# Warmup Iteration   1: 12.369 ns/op
# Warmup Iteration   2: 11.362 ns/op
# Warmup Iteration   3: 11.343 ns/op
# Warmup Iteration   4: 11.497 ns/op
# Warmup Iteration   5: 11.351 ns/op
Iteration   1: 11.344 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.379 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.380 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.402 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11.369 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  11.375 ±(99.9%) 0.081 ns/op [Average]
  (min, avg, max) = (11.344, 11.375, 11.402), stdev = 0.021
  CI (99.9%): [11.294, 11.455] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.)

# Run progress: 63.81% complete, ETA 00:25:30
# Fork: 1 of 1
# Warmup Iteration   1: 29.752 ns/op
# Warmup Iteration   2: 23.836 ns/op
# Warmup Iteration   3: 22.699 ns/op
# Warmup Iteration   4: 22.704 ns/op
# Warmup Iteration   5: 22.747 ns/op
Iteration   1: 22.734 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 22.703 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 22.693 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 22.774 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 22.700 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  22.721 ±(99.9%) 0.129 ns/op [Average]
  (min, avg, max) = (22.693, 22.721, 22.774), stdev = 0.034
  CI (99.9%): [22.592, 22.850] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200)

# Run progress: 64.06% complete, ETA 00:25:20
# Fork: 1 of 1
# Warmup Iteration   1: 32.793 ns/op
# Warmup Iteration   2: 28.917 ns/op
# Warmup Iteration   3: 26.782 ns/op
# Warmup Iteration   4: 27.360 ns/op
# Warmup Iteration   5: 26.783 ns/op
Iteration   1: 26.788 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.789 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.780 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.242 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.794 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  26.879 ±(99.9%) 0.783 ns/op [Average]
  (min, avg, max) = (26.780, 26.879, 27.242), stdev = 0.203
  CI (99.9%): [26.096, 27.662] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.)

# Run progress: 64.30% complete, ETA 00:25:09
# Fork: 1 of 1
# Warmup Iteration   1: 59.145 ns/op
# Warmup Iteration   2: 48.536 ns/op
# Warmup Iteration   3: 47.721 ns/op
# Warmup Iteration   4: 47.921 ns/op
# Warmup Iteration   5: 47.721 ns/op
Iteration   1: 47.803 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 47.768 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 47.753 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 47.730 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 47.681 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  47.747 ±(99.9%) 0.176 ns/op [Average]
  (min, avg, max) = (47.681, 47.747, 47.803), stdev = 0.046
  CI (99.9%): [47.571, 47.923] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = a.200.200)

# Run progress: 64.55% complete, ETA 00:24:59
# Fork: 1 of 1
# Warmup Iteration   1: 2.661 ns/op
# Warmup Iteration   2: 2.451 ns/op
# Warmup Iteration   3: 2.436 ns/op
# Warmup Iteration   4: 2.369 ns/op
# Warmup Iteration   5: 2.370 ns/op
Iteration   1: 2.372 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.365 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.366 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.365 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.367 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  2.367 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (2.365, 2.367, 2.372), stdev = 0.003
  CI (99.9%): [2.355, 2.379] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.a.200)

# Run progress: 64.79% complete, ETA 00:24:49
# Fork: 1 of 1
# Warmup Iteration   1: 29.458 ns/op
# Warmup Iteration   2: 25.138 ns/op
# Warmup Iteration   3: 23.785 ns/op
# Warmup Iteration   4: 23.788 ns/op
# Warmup Iteration   5: 23.794 ns/op
Iteration   1: 23.793 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 23.792 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 23.784 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 23.783 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 23.785 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  23.787 ±(99.9%) 0.018 ns/op [Average]
  (min, avg, max) = (23.783, 23.787, 23.793), stdev = 0.005
  CI (99.9%): [23.770, 23.805] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.a)

# Run progress: 65.04% complete, ETA 00:24:38
# Fork: 1 of 1
# Warmup Iteration   1: 72.986 ns/op
# Warmup Iteration   2: 60.987 ns/op
# Warmup Iteration   3: 58.503 ns/op
# Warmup Iteration   4: 58.527 ns/op
# Warmup Iteration   5: 58.532 ns/op
Iteration   1: 58.553 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 58.633 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 58.614 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 58.630 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 59.759 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  58.838 ±(99.9%) 1.986 ns/op [Average]
  (min, avg, max) = (58.553, 58.838, 59.759), stdev = 0.516
  CI (99.9%): [56.851, 60.824] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.200.200)

# Run progress: 65.28% complete, ETA 00:24:28
# Fork: 1 of 1
# Warmup Iteration   1: 63.565 ns/op
# Warmup Iteration   2: 55.775 ns/op
# Warmup Iteration   3: 54.977 ns/op
# Warmup Iteration   4: 54.930 ns/op
# Warmup Iteration   5: 54.999 ns/op
Iteration   1: 55.016 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 55.021 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 55.008 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 55.026 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 55.016 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  55.017 ±(99.9%) 0.025 ns/op [Average]
  (min, avg, max) = (55.008, 55.017, 55.026), stdev = 0.007
  CI (99.9%): [54.992, 55.043] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.99999)

# Run progress: 65.53% complete, ETA 00:24:18
# Fork: 1 of 1
# Warmup Iteration   1: 86.544 ns/op
# Warmup Iteration   2: 75.523 ns/op
# Warmup Iteration   3: 73.647 ns/op
# Warmup Iteration   4: 73.640 ns/op
# Warmup Iteration   5: 73.679 ns/op
Iteration   1: 73.696 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 77.570 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 73.748 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 73.710 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 73.628 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  74.471 ±(99.9%) 6.674 ns/op [Average]
  (min, avg, max) = (73.628, 74.471, 77.570), stdev = 1.733
  CI (99.9%): [67.796, 81.145] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.-200)

# Run progress: 65.77% complete, ETA 00:24:07
# Fork: 1 of 1
# Warmup Iteration   1: 67.421 ns/op
# Warmup Iteration   2: 58.436 ns/op
# Warmup Iteration   3: 57.936 ns/op
# Warmup Iteration   4: 57.910 ns/op
# Warmup Iteration   5: 57.912 ns/op
Iteration   1: 57.939 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 57.942 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 57.900 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 57.999 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 57.922 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  57.940 ±(99.9%) 0.141 ns/op [Average]
  (min, avg, max) = (57.900, 57.940, 57.999), stdev = 0.037
  CI (99.9%): [57.800, 58.081] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 1.0.0)

# Run progress: 66.01% complete, ETA 00:23:57
# Fork: 1 of 1
# Warmup Iteration   1: 50.815 ns/op
# Warmup Iteration   2: 44.970 ns/op
# Warmup Iteration   3: 43.732 ns/op
# Warmup Iteration   4: 43.720 ns/op
# Warmup Iteration   5: 43.763 ns/op
Iteration   1: 43.809 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 43.802 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 43.702 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 43.767 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 43.825 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  43.781 ±(99.9%) 0.188 ns/op [Average]
  (min, avg, max) = (43.702, 43.781, 43.825), stdev = 0.049
  CI (99.9%): [43.593, 43.969] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 200.200.200)

# Run progress: 66.26% complete, ETA 00:23:47
# Fork: 1 of 1
# Warmup Iteration   1: 83.972 ns/op
# Warmup Iteration   2: 73.534 ns/op
# Warmup Iteration   3: 71.445 ns/op
# Warmup Iteration   4: 71.438 ns/op
# Warmup Iteration   5: 71.466 ns/op
Iteration   1: 71.482 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 71.471 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 71.426 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 71.324 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 72.506 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  71.642 ±(99.9%) 1.876 ns/op [Average]
  (min, avg, max) = (71.324, 71.642, 72.506), stdev = 0.487
  CI (99.9%): [69.766, 73.517] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 66.50% complete, ETA 00:23:36
# Fork: 1 of 1
# Warmup Iteration   1: 103.305 ns/op
# Warmup Iteration   2: 89.649 ns/op
# Warmup Iteration   3: 87.471 ns/op
# Warmup Iteration   4: 87.382 ns/op
# Warmup Iteration   5: 87.384 ns/op
Iteration   1: 87.413 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 87.399 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 87.437 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 96.229 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 87.503 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  89.196 ±(99.9%) 15.139 ns/op [Average]
  (min, avg, max) = (87.399, 89.196, 96.229), stdev = 3.932
  CI (99.9%): [74.057, 104.335] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 66.75% complete, ETA 00:23:26
# Fork: 1 of 1
# Warmup Iteration   1: 110.698 ns/op
# Warmup Iteration   2: 96.442 ns/op
# Warmup Iteration   3: 94.493 ns/op
# Warmup Iteration   4: 94.413 ns/op
# Warmup Iteration   5: 94.767 ns/op
Iteration   1: 94.463 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 94.383 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 94.463 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 94.562 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 94.418 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java":
  94.458 ±(99.9%) 0.260 ns/op [Average]
  (min, avg, max) = (94.383, 94.458, 94.562), stdev = 0.067
  CI (99.9%): [94.198, 94.717] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3Java:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = )

# Run progress: 66.99% complete, ETA 00:23:16
# Fork: 1 of 1
# Warmup Iteration   1: 2.480 ns/op
# Warmup Iteration   2: 2.133 ns/op
# Warmup Iteration   3: 2.071 ns/op
# Warmup Iteration   4: 2.069 ns/op
# Warmup Iteration   5: 2.099 ns/op
Iteration   1: 2.072 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.072 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.072 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.072 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  2.072 ±(99.9%) 0.002 ns/op [Average]
  (min, avg, max) = (2.071, 2.072, 2.072), stdev = 0.001
  CI (99.9%): [2.069, 2.074] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200)

# Run progress: 67.24% complete, ETA 00:23:05
# Fork: 1 of 1
# Warmup Iteration   1: 12.557 ns/op
# Warmup Iteration   2: 11.818 ns/op
# Warmup Iteration   3: 11.248 ns/op
# Warmup Iteration   4: 11.258 ns/op
# Warmup Iteration   5: 11.570 ns/op
Iteration   1: 11.547 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11.260 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11.249 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11.262 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12.079 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  11.479 ±(99.9%) 1.379 ns/op [Average]
  (min, avg, max) = (11.249, 11.479, 12.079), stdev = 0.358
  CI (99.9%): [10.101, 12.858] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.)

# Run progress: 67.48% complete, ETA 00:22:55
# Fork: 1 of 1
# Warmup Iteration   1: 26.180 ns/op
# Warmup Iteration   2: 23.043 ns/op
# Warmup Iteration   3: 21.899 ns/op
# Warmup Iteration   4: 21.901 ns/op
# Warmup Iteration   5: 21.894 ns/op
Iteration   1: 21.905 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.908 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.898 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.914 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.904 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  21.906 ±(99.9%) 0.023 ns/op [Average]
  (min, avg, max) = (21.898, 21.906, 21.914), stdev = 0.006
  CI (99.9%): [21.883, 21.928] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200)

# Run progress: 67.73% complete, ETA 00:22:45
# Fork: 1 of 1
# Warmup Iteration   1: 33.214 ns/op
# Warmup Iteration   2: 28.200 ns/op
# Warmup Iteration   3: 26.555 ns/op
# Warmup Iteration   4: 26.558 ns/op
# Warmup Iteration   5: 26.566 ns/op
Iteration   1: 26.550 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.566 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.537 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.045 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.562 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  26.652 ±(99.9%) 0.847 ns/op [Average]
  (min, avg, max) = (26.537, 26.652, 27.045), stdev = 0.220
  CI (99.9%): [25.805, 27.499] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.)

# Run progress: 67.97% complete, ETA 00:22:34
# Fork: 1 of 1
# Warmup Iteration   1: 57.756 ns/op
# Warmup Iteration   2: 49.967 ns/op
# Warmup Iteration   3: 48.602 ns/op
# Warmup Iteration   4: 48.503 ns/op
# Warmup Iteration   5: 48.507 ns/op
Iteration   1: 48.569 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 48.576 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 48.593 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 48.601 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 48.645 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  48.597 ±(99.9%) 0.115 ns/op [Average]
  (min, avg, max) = (48.569, 48.597, 48.645), stdev = 0.030
  CI (99.9%): [48.482, 48.712] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = a.200.200)

# Run progress: 68.22% complete, ETA 00:22:24
# Fork: 1 of 1
# Warmup Iteration   1: 3.482 ns/op
# Warmup Iteration   2: 3.058 ns/op
# Warmup Iteration   3: 2.956 ns/op
# Warmup Iteration   4: 2.956 ns/op
# Warmup Iteration   5: 2.955 ns/op
Iteration   1: 2.956 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.958 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.956 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.958 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.958 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  2.957 ±(99.9%) 0.004 ns/op [Average]
  (min, avg, max) = (2.956, 2.957, 2.958), stdev = 0.001
  CI (99.9%): [2.953, 2.961] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.a.200)

# Run progress: 68.46% complete, ETA 00:22:14
# Fork: 1 of 1
# Warmup Iteration   1: 27.757 ns/op
# Warmup Iteration   2: 25.334 ns/op
# Warmup Iteration   3: 22.903 ns/op
# Warmup Iteration   4: 23.432 ns/op
# Warmup Iteration   5: 22.870 ns/op
Iteration   1: 22.920 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 22.947 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 22.928 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 22.886 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 22.890 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  22.914 ±(99.9%) 0.100 ns/op [Average]
  (min, avg, max) = (22.886, 22.914, 22.947), stdev = 0.026
  CI (99.9%): [22.814, 23.015] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.a)

# Run progress: 68.70% complete, ETA 00:22:03
# Fork: 1 of 1
# Warmup Iteration   1: 61.956 ns/op
# Warmup Iteration   2: 53.826 ns/op
# Warmup Iteration   3: 53.159 ns/op
# Warmup Iteration   4: 53.093 ns/op
# Warmup Iteration   5: 53.112 ns/op
Iteration   1: 53.140 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 53.095 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 53.126 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 53.135 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 53.110 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  53.121 ±(99.9%) 0.072 ns/op [Average]
  (min, avg, max) = (53.095, 53.121, 53.140), stdev = 0.019
  CI (99.9%): [53.049, 53.193] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.200.200)

# Run progress: 68.95% complete, ETA 00:21:53
# Fork: 1 of 1
# Warmup Iteration   1: 62.224 ns/op
# Warmup Iteration   2: 55.348 ns/op
# Warmup Iteration   3: 53.097 ns/op
# Warmup Iteration   4: 53.036 ns/op
# Warmup Iteration   5: 53.092 ns/op
Iteration   1: 53.126 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 53.156 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 53.110 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 53.156 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 53.115 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  53.133 ±(99.9%) 0.086 ns/op [Average]
  (min, avg, max) = (53.110, 53.133, 53.156), stdev = 0.022
  CI (99.9%): [53.047, 53.218] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.99999)

# Run progress: 69.19% complete, ETA 00:21:43
# Fork: 1 of 1
# Warmup Iteration   1: 92.547 ns/op
# Warmup Iteration   2: 80.698 ns/op
# Warmup Iteration   3: 79.032 ns/op
# Warmup Iteration   4: 79.000 ns/op
# Warmup Iteration   5: 78.910 ns/op
Iteration   1: 78.930 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 80.020 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 78.834 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 79.037 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 78.949 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  79.154 ±(99.9%) 1.886 ns/op [Average]
  (min, avg, max) = (78.834, 79.154, 80.020), stdev = 0.490
  CI (99.9%): [77.268, 81.040] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.-200)

# Run progress: 69.44% complete, ETA 00:21:32
# Fork: 1 of 1
# Warmup Iteration   1: 57.873 ns/op
# Warmup Iteration   2: 51.093 ns/op
# Warmup Iteration   3: 48.938 ns/op
# Warmup Iteration   4: 48.958 ns/op
# Warmup Iteration   5: 48.979 ns/op
Iteration   1: 48.886 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 48.940 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 49.028 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 48.961 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 48.775 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  48.918 ±(99.9%) 0.365 ns/op [Average]
  (min, avg, max) = (48.775, 48.918, 49.028), stdev = 0.095
  CI (99.9%): [48.553, 49.283] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 1.0.0)

# Run progress: 69.68% complete, ETA 00:21:22
# Fork: 1 of 1
# Warmup Iteration   1: 46.245 ns/op
# Warmup Iteration   2: 42.243 ns/op
# Warmup Iteration   3: 39.704 ns/op
# Warmup Iteration   4: 39.706 ns/op
# Warmup Iteration   5: 39.666 ns/op
Iteration   1: 39.669 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 39.701 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 39.606 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 39.754 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 39.744 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  39.695 ±(99.9%) 0.232 ns/op [Average]
  (min, avg, max) = (39.606, 39.695, 39.754), stdev = 0.060
  CI (99.9%): [39.462, 39.927] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 200.200.200)

# Run progress: 69.93% complete, ETA 00:21:11
# Fork: 1 of 1
# Warmup Iteration   1: 80.469 ns/op
# Warmup Iteration   2: 69.989 ns/op
# Warmup Iteration   3: 67.492 ns/op
# Warmup Iteration   4: 67.490 ns/op
# Warmup Iteration   5: 67.593 ns/op
Iteration   1: 67.586 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 67.568 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 67.527 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 67.552 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 67.559 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  67.558 ±(99.9%) 0.084 ns/op [Average]
  (min, avg, max) = (67.527, 67.558, 67.586), stdev = 0.022
  CI (99.9%): [67.475, 67.642] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 70.17% complete, ETA 00:21:01
# Fork: 1 of 1
# Warmup Iteration   1: 104.844 ns/op
# Warmup Iteration   2: 89.883 ns/op
# Warmup Iteration   3: 88.728 ns/op
# Warmup Iteration   4: 88.769 ns/op
# Warmup Iteration   5: 88.739 ns/op
Iteration   1: 88.759 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 88.742 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 88.833 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 88.797 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 88.871 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  88.800 ±(99.9%) 0.203 ns/op [Average]
  (min, avg, max) = (88.742, 88.800, 88.871), stdev = 0.053
  CI (99.9%): [88.597, 89.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 70.42% complete, ETA 00:20:51
# Fork: 1 of 1
# Warmup Iteration   1: 116.639 ns/op
# Warmup Iteration   2: 101.412 ns/op
# Warmup Iteration   3: 99.368 ns/op
# Warmup Iteration   4: 99.203 ns/op
# Warmup Iteration   5: 99.443 ns/op
Iteration   1: 99.103 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 99.041 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 99.045 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 99.160 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: 0.001 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 99.045 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch":
  99.079 ±(99.9%) 0.200 ns/op [Average]
  (min, avg, max) = (99.041, 99.079, 99.160), stdev = 0.052
  CI (99.9%): [98.879, 99.279] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = )

# Run progress: 70.66% complete, ETA 00:20:40
# Fork: 1 of 1
# Warmup Iteration   1: 2.328 ns/op
# Warmup Iteration   2: 2.135 ns/op
# Warmup Iteration   3: 2.069 ns/op
# Warmup Iteration   4: 2.098 ns/op
# Warmup Iteration   5: 2.069 ns/op
Iteration   1: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.070 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.071 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.075 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  2.071 ±(99.9%) 0.008 ns/op [Average]
  (min, avg, max) = (2.070, 2.071, 2.075), stdev = 0.002
  CI (99.9%): [2.063, 2.079] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200)

# Run progress: 70.90% complete, ETA 00:20:30
# Fork: 1 of 1
# Warmup Iteration   1: 17.763 ns/op
# Warmup Iteration   2: 15.942 ns/op
# Warmup Iteration   3: 15.910 ns/op
# Warmup Iteration   4: 15.922 ns/op
# Warmup Iteration   5: 15.922 ns/op
Iteration   1: 15.925 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15.921 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.907 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.911 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.915 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  15.916 ±(99.9%) 0.027 ns/op [Average]
  (min, avg, max) = (15.907, 15.916, 15.925), stdev = 0.007
  CI (99.9%): [15.889, 15.943] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.)

# Run progress: 71.15% complete, ETA 00:20:20
# Fork: 1 of 1
# Warmup Iteration   1: 23.285 ns/op
# Warmup Iteration   2: 19.970 ns/op
# Warmup Iteration   3: 19.546 ns/op
# Warmup Iteration   4: 19.546 ns/op
# Warmup Iteration   5: 19.585 ns/op
Iteration   1: 19.566 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.530 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.535 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.823 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.528 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  19.596 ±(99.9%) 0.491 ns/op [Average]
  (min, avg, max) = (19.528, 19.596, 19.823), stdev = 0.128
  CI (99.9%): [19.105, 20.087] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200)

# Run progress: 71.39% complete, ETA 00:20:09
# Fork: 1 of 1
# Warmup Iteration   1: 36.588 ns/op
# Warmup Iteration   2: 30.403 ns/op
# Warmup Iteration   3: 29.224 ns/op
# Warmup Iteration   4: 29.171 ns/op
# Warmup Iteration   5: 29.182 ns/op
Iteration   1: 29.182 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.143 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.346 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.176 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.145 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  29.198 ±(99.9%) 0.324 ns/op [Average]
  (min, avg, max) = (29.143, 29.198, 29.346), stdev = 0.084
  CI (99.9%): [28.874, 29.523] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.)

# Run progress: 71.64% complete, ETA 00:19:59
# Fork: 1 of 1
# Warmup Iteration   1: 39.888 ns/op
# Warmup Iteration   2: 32.380 ns/op
# Warmup Iteration   3: 31.254 ns/op
# Warmup Iteration   4: 31.244 ns/op
# Warmup Iteration   5: 31.245 ns/op
Iteration   1: 31.202 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31.230 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31.219 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31.222 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31.234 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  31.221 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (31.202, 31.221, 31.234), stdev = 0.012
  CI (99.9%): [31.174, 31.269] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = a.200.200)

# Run progress: 71.88% complete, ETA 00:19:49
# Fork: 1 of 1
# Warmup Iteration   1: 2.682 ns/op
# Warmup Iteration   2: 2.450 ns/op
# Warmup Iteration   3: 2.367 ns/op
# Warmup Iteration   4: 2.365 ns/op
# Warmup Iteration   5: 2.366 ns/op
Iteration   1: 2.365 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.365 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.369 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.366 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.366 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  2.366 ±(99.9%) 0.007 ns/op [Average]
  (min, avg, max) = (2.365, 2.366, 2.369), stdev = 0.002
  CI (99.9%): [2.359, 2.374] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.a.200)

# Run progress: 72.13% complete, ETA 00:19:38
# Fork: 1 of 1
# Warmup Iteration   1: 23.851 ns/op
# Warmup Iteration   2: 20.567 ns/op
# Warmup Iteration   3: 19.516 ns/op
# Warmup Iteration   4: 19.210 ns/op
# Warmup Iteration   5: 19.201 ns/op
Iteration   1: 19.193 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.192 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.182 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.179 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.196 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  19.188 ±(99.9%) 0.029 ns/op [Average]
  (min, avg, max) = (19.179, 19.188, 19.196), stdev = 0.007
  CI (99.9%): [19.160, 19.217] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.017 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.a)

# Run progress: 72.37% complete, ETA 00:19:28
# Fork: 1 of 1
# Warmup Iteration   1: 36.221 ns/op
# Warmup Iteration   2: 30.638 ns/op
# Warmup Iteration   3: 29.860 ns/op
# Warmup Iteration   4: 29.875 ns/op
# Warmup Iteration   5: 29.834 ns/op
Iteration   1: 29.860 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.786 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.815 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.810 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.800 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  29.814 ±(99.9%) 0.107 ns/op [Average]
  (min, avg, max) = (29.786, 29.814, 29.860), stdev = 0.028
  CI (99.9%): [29.707, 29.921] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.200.200)

# Run progress: 72.62% complete, ETA 00:19:18
# Fork: 1 of 1
# Warmup Iteration   1: 47.750 ns/op
# Warmup Iteration   2: 41.445 ns/op
# Warmup Iteration   3: 40.690 ns/op
# Warmup Iteration   4: 40.772 ns/op
# Warmup Iteration   5: 40.911 ns/op
Iteration   1: 41.613 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 40.571 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 40.616 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 40.855 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 40.719 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  40.875 ±(99.9%) 1.643 ns/op [Average]
  (min, avg, max) = (40.571, 40.875, 41.613), stdev = 0.427
  CI (99.9%): [39.232, 42.518] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.99999)

# Run progress: 72.86% complete, ETA 00:19:07
# Fork: 1 of 1
# Warmup Iteration   1: 51.716 ns/op
# Warmup Iteration   2: 45.354 ns/op
# Warmup Iteration   3: 44.236 ns/op
# Warmup Iteration   4: 44.261 ns/op
# Warmup Iteration   5: 44.234 ns/op
Iteration   1: 44.266 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 44.242 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 44.362 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 44.331 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 44.271 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  44.294 ±(99.9%) 0.192 ns/op [Average]
  (min, avg, max) = (44.242, 44.294, 44.362), stdev = 0.050
  CI (99.9%): [44.102, 44.486] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.-200)

# Run progress: 73.11% complete, ETA 00:18:57
# Fork: 1 of 1
# Warmup Iteration   1: 35.972 ns/op
# Warmup Iteration   2: 30.251 ns/op
# Warmup Iteration   3: 29.774 ns/op
# Warmup Iteration   4: 29.769 ns/op
# Warmup Iteration   5: 29.776 ns/op
Iteration   1: 29.717 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.721 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.752 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.758 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.767 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  29.743 ±(99.9%) 0.087 ns/op [Average]
  (min, avg, max) = (29.717, 29.743, 29.767), stdev = 0.023
  CI (99.9%): [29.655, 29.830] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 1.0.0)

# Run progress: 73.35% complete, ETA 00:18:47
# Fork: 1 of 1
# Warmup Iteration   1: 26.927 ns/op
# Warmup Iteration   2: 23.441 ns/op
# Warmup Iteration   3: 21.903 ns/op
# Warmup Iteration   4: 21.899 ns/op
# Warmup Iteration   5: 21.898 ns/op
Iteration   1: 21.913 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 21.939 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 21.982 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 21.939 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 21.939 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  21.942 ±(99.9%) 0.095 ns/op [Average]
  (min, avg, max) = (21.913, 21.942, 21.982), stdev = 0.025
  CI (99.9%): [21.848, 22.037] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 200.200.200)

# Run progress: 73.59% complete, ETA 00:18:36
# Fork: 1 of 1
# Warmup Iteration   1: 52.371 ns/op
# Warmup Iteration   2: 42.281 ns/op
# Warmup Iteration   3: 40.747 ns/op
# Warmup Iteration   4: 40.592 ns/op
# Warmup Iteration   5: 40.748 ns/op
Iteration   1: 40.726 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 40.672 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 40.770 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 40.788 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 40.716 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  40.734 ±(99.9%) 0.177 ns/op [Average]
  (min, avg, max) = (40.672, 40.734, 40.788), stdev = 0.046
  CI (99.9%): [40.557, 40.911] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 73.84% complete, ETA 00:18:26
# Fork: 1 of 1
# Warmup Iteration   1: 63.436 ns/op
# Warmup Iteration   2: 54.765 ns/op
# Warmup Iteration   3: 52.693 ns/op
# Warmup Iteration   4: 52.665 ns/op
# Warmup Iteration   5: 52.748 ns/op
Iteration   1: 54.113 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 53.008 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 52.798 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 52.891 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 52.787 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  53.119 ±(99.9%) 2.166 ns/op [Average]
  (min, avg, max) = (52.787, 53.119, 54.113), stdev = 0.562
  CI (99.9%): [50.954, 55.285] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 74.08% complete, ETA 00:18:16
# Fork: 1 of 1
# Warmup Iteration   1: 73.517 ns/op
# Warmup Iteration   2: 60.583 ns/op
# Warmup Iteration   3: 58.320 ns/op
# Warmup Iteration   4: 58.361 ns/op
# Warmup Iteration   5: 58.345 ns/op
Iteration   1: 58.479 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 58.892 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 58.279 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 58.313 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 58.351 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4":
  58.463 ±(99.9%) 0.969 ns/op [Average]
  (min, avg, max) = (58.279, 58.463, 58.892), stdev = 0.252
  CI (99.9%): [57.494, 59.432] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized4:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = )

# Run progress: 74.33% complete, ETA 00:18:05
# Fork: 1 of 1
# Warmup Iteration   1: 2.330 ns/op
# Warmup Iteration   2: 2.140 ns/op
# Warmup Iteration   3: 2.087 ns/op
# Warmup Iteration   4: 2.087 ns/op
# Warmup Iteration   5: 2.098 ns/op
Iteration   1: 2.082 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.089 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.086 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.085 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.086 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  2.085 ±(99.9%) 0.010 ns/op [Average]
  (min, avg, max) = (2.082, 2.085, 2.089), stdev = 0.003
  CI (99.9%): [2.076, 2.095] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200)

# Run progress: 74.57% complete, ETA 00:17:55
# Fork: 1 of 1
# Warmup Iteration   1: 18.284 ns/op
# Warmup Iteration   2: 16.044 ns/op
# Warmup Iteration   3: 15.693 ns/op
# Warmup Iteration   4: 15.698 ns/op
# Warmup Iteration   5: 15.702 ns/op
Iteration   1: 15.693 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15.711 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.764 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.716 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.733 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  15.723 ±(99.9%) 0.104 ns/op [Average]
  (min, avg, max) = (15.693, 15.723, 15.764), stdev = 0.027
  CI (99.9%): [15.619, 15.828] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.)

# Run progress: 74.82% complete, ETA 00:17:45
# Fork: 1 of 1
# Warmup Iteration   1: 19.033 ns/op
# Warmup Iteration   2: 15.599 ns/op
# Warmup Iteration   3: 14.832 ns/op
# Warmup Iteration   4: 14.816 ns/op
# Warmup Iteration   5: 14.823 ns/op
Iteration   1: 14.840 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14.832 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14.822 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.003 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.094 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  14.918 ±(99.9%) 0.475 ns/op [Average]
  (min, avg, max) = (14.822, 14.918, 15.094), stdev = 0.123
  CI (99.9%): [14.443, 15.393] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200)

# Run progress: 75.06% complete, ETA 00:17:34
# Fork: 1 of 1
# Warmup Iteration   1: 40.985 ns/op
# Warmup Iteration   2: 33.243 ns/op
# Warmup Iteration   3: 32.615 ns/op
# Warmup Iteration   4: 32.679 ns/op
# Warmup Iteration   5: 32.589 ns/op
Iteration   1: 32.585 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.573 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.619 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.585 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.578 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  32.588 ±(99.9%) 0.069 ns/op [Average]
  (min, avg, max) = (32.573, 32.588, 32.619), stdev = 0.018
  CI (99.9%): [32.519, 32.657] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.)

# Run progress: 75.31% complete, ETA 00:17:24
# Fork: 1 of 1
# Warmup Iteration   1: 34.302 ns/op
# Warmup Iteration   2: 27.753 ns/op
# Warmup Iteration   3: 27.806 ns/op
# Warmup Iteration   4: 27.841 ns/op
# Warmup Iteration   5: 27.874 ns/op
Iteration   1: 27.860 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.850 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.867 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.873 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.824 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  27.855 ±(99.9%) 0.074 ns/op [Average]
  (min, avg, max) = (27.824, 27.855, 27.873), stdev = 0.019
  CI (99.9%): [27.781, 27.929] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = a.200.200)

# Run progress: 75.55% complete, ETA 00:17:13
# Fork: 1 of 1
# Warmup Iteration   1: 4.005 ns/op
# Warmup Iteration   2: 4.351 ns/op
# Warmup Iteration   3: 3.267 ns/op
# Warmup Iteration   4: 3.291 ns/op
# Warmup Iteration   5: 3.296 ns/op
Iteration   1: 3.287 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3.285 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3.292 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.291 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3.277 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  3.286 ±(99.9%) 0.022 ns/op [Average]
  (min, avg, max) = (3.277, 3.286, 3.292), stdev = 0.006
  CI (99.9%): [3.264, 3.308] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.a.200)

# Run progress: 75.79% complete, ETA 00:17:03
# Fork: 1 of 1
# Warmup Iteration   1: 22.883 ns/op
# Warmup Iteration   2: 19.653 ns/op
# Warmup Iteration   3: 18.439 ns/op
# Warmup Iteration   4: 18.437 ns/op
# Warmup Iteration   5: 18.438 ns/op
Iteration   1: 18.428 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.428 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.415 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.430 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.422 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  18.425 ±(99.9%) 0.024 ns/op [Average]
  (min, avg, max) = (18.415, 18.425, 18.430), stdev = 0.006
  CI (99.9%): [18.401, 18.448] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.a)

# Run progress: 76.04% complete, ETA 00:16:53
# Fork: 1 of 1
# Warmup Iteration   1: 40.467 ns/op
# Warmup Iteration   2: 34.378 ns/op
# Warmup Iteration   3: 33.054 ns/op
# Warmup Iteration   4: 33.065 ns/op
# Warmup Iteration   5: 33.070 ns/op
Iteration   1: 33.083 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 33.075 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 33.080 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 33.098 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 33.092 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  33.086 ±(99.9%) 0.036 ns/op [Average]
  (min, avg, max) = (33.075, 33.086, 33.098), stdev = 0.009
  CI (99.9%): [33.050, 33.121] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.200.200)

# Run progress: 76.28% complete, ETA 00:16:42
# Fork: 1 of 1
# Warmup Iteration   1: 56.268 ns/op
# Warmup Iteration   2: 49.043 ns/op
# Warmup Iteration   3: 45.484 ns/op
# Warmup Iteration   4: 45.490 ns/op
# Warmup Iteration   5: 45.497 ns/op
Iteration   1: 45.485 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 45.511 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 45.787 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 46.867 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 45.507 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  45.831 ±(99.9%) 2.280 ns/op [Average]
  (min, avg, max) = (45.485, 45.831, 46.867), stdev = 0.592
  CI (99.9%): [43.552, 48.111] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.99999)

# Run progress: 76.53% complete, ETA 00:16:32
# Fork: 1 of 1
# Warmup Iteration   1: 59.107 ns/op
# Warmup Iteration   2: 51.772 ns/op
# Warmup Iteration   3: 49.605 ns/op
# Warmup Iteration   4: 49.609 ns/op
# Warmup Iteration   5: 49.616 ns/op
Iteration   1: 49.600 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 49.769 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 49.617 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 49.589 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 49.604 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  49.636 ±(99.9%) 0.289 ns/op [Average]
  (min, avg, max) = (49.589, 49.636, 49.769), stdev = 0.075
  CI (99.9%): [49.347, 49.925] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.-200)

# Run progress: 76.77% complete, ETA 00:16:22
# Fork: 1 of 1
# Warmup Iteration   1: 39.350 ns/op
# Warmup Iteration   2: 33.955 ns/op
# Warmup Iteration   3: 32.217 ns/op
# Warmup Iteration   4: 32.170 ns/op
# Warmup Iteration   5: 32.146 ns/op
Iteration   1: 32.149 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.159 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.143 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.165 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.152 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  32.154 ±(99.9%) 0.033 ns/op [Average]
  (min, avg, max) = (32.143, 32.154, 32.165), stdev = 0.009
  CI (99.9%): [32.121, 32.187] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 1.0.0)

# Run progress: 77.02% complete, ETA 00:16:11
# Fork: 1 of 1
# Warmup Iteration   1: 31.841 ns/op
# Warmup Iteration   2: 28.283 ns/op
# Warmup Iteration   3: 26.862 ns/op
# Warmup Iteration   4: 26.857 ns/op
# Warmup Iteration   5: 26.856 ns/op
Iteration   1: 26.851 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 26.875 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 26.862 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 26.868 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 26.867 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  26.865 ±(99.9%) 0.033 ns/op [Average]
  (min, avg, max) = (26.851, 26.865, 26.875), stdev = 0.009
  CI (99.9%): [26.831, 26.898] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 200.200.200)

# Run progress: 77.26% complete, ETA 00:16:01
# Fork: 1 of 1
# Warmup Iteration   1: 64.464 ns/op
# Warmup Iteration   2: 56.304 ns/op
# Warmup Iteration   3: 54.891 ns/op
# Warmup Iteration   4: 53.629 ns/op
# Warmup Iteration   5: 53.660 ns/op
Iteration   1: 53.675 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 53.666 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 53.689 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 53.709 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 53.690 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  53.686 ±(99.9%) 0.064 ns/op [Average]
  (min, avg, max) = (53.666, 53.686, 53.709), stdev = 0.017
  CI (99.9%): [53.622, 53.750] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 77.51% complete, ETA 00:15:51
# Fork: 1 of 1
# Warmup Iteration   1: 79.329 ns/op
# Warmup Iteration   2: 69.342 ns/op
# Warmup Iteration   3: 69.786 ns/op
# Warmup Iteration   4: 69.959 ns/op
# Warmup Iteration   5: 69.891 ns/op
Iteration   1: 69.835 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 69.802 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 69.756 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 69.766 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 69.796 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  69.791 ±(99.9%) 0.121 ns/op [Average]
  (min, avg, max) = (69.756, 69.791, 69.835), stdev = 0.031
  CI (99.9%): [69.670, 69.912] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 77.75% complete, ETA 00:15:40
# Fork: 1 of 1
# Warmup Iteration   1: 86.724 ns/op
# Warmup Iteration   2: 75.742 ns/op
# Warmup Iteration   3: 75.647 ns/op
# Warmup Iteration   4: 75.637 ns/op
# Warmup Iteration   5: 75.855 ns/op
Iteration   1: 75.756 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 75.595 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 75.586 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 75.589 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 79.044 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5":
  76.314 ±(99.9%) 5.884 ns/op [Average]
  (min, avg, max) = (75.586, 76.314, 79.044), stdev = 1.528
  CI (99.9%): [70.430, 82.198] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized5:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = )

# Run progress: 78.00% complete, ETA 00:15:30
# Fork: 1 of 1
# Warmup Iteration   1: 2.322 ns/op
# Warmup Iteration   2: 2.132 ns/op
# Warmup Iteration   3: 2.220 ns/op
# Warmup Iteration   4: 2.072 ns/op
# Warmup Iteration   5: 2.071 ns/op
Iteration   1: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.071 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.072 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.071 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.079 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  2.073 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (2.071, 2.073, 2.079), stdev = 0.003
  CI (99.9%): [2.061, 2.085] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200)

# Run progress: 78.24% complete, ETA 00:15:20
# Fork: 1 of 1
# Warmup Iteration   1: 15.329 ns/op
# Warmup Iteration   2: 14.224 ns/op
# Warmup Iteration   3: 12.605 ns/op
# Warmup Iteration   4: 12.599 ns/op
# Warmup Iteration   5: 12.616 ns/op
Iteration   1: 12.608 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12.622 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12.618 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12.624 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12.616 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  12.618 ±(99.9%) 0.024 ns/op [Average]
  (min, avg, max) = (12.608, 12.618, 12.624), stdev = 0.006
  CI (99.9%): [12.594, 12.641] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.)

# Run progress: 78.48% complete, ETA 00:15:09
# Fork: 1 of 1
# Warmup Iteration   1: 18.827 ns/op
# Warmup Iteration   2: 16.575 ns/op
# Warmup Iteration   3: 15.270 ns/op
# Warmup Iteration   4: 15.263 ns/op
# Warmup Iteration   5: 15.270 ns/op
Iteration   1: 15.258 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15.261 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.256 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.259 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.273 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  15.261 ±(99.9%) 0.026 ns/op [Average]
  (min, avg, max) = (15.256, 15.261, 15.273), stdev = 0.007
  CI (99.9%): [15.236, 15.287] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200)

# Run progress: 78.73% complete, ETA 00:14:59
# Fork: 1 of 1
# Warmup Iteration   1: 29.416 ns/op
# Warmup Iteration   2: 26.027 ns/op
# Warmup Iteration   3: 23.310 ns/op
# Warmup Iteration   4: 24.458 ns/op
# Warmup Iteration   5: 23.371 ns/op
Iteration   1: 23.379 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 23.341 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 23.300 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 23.327 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 23.308 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  23.331 ±(99.9%) 0.120 ns/op [Average]
  (min, avg, max) = (23.300, 23.331, 23.379), stdev = 0.031
  CI (99.9%): [23.211, 23.451] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.)

# Run progress: 78.97% complete, ETA 00:14:49
# Fork: 1 of 1
# Warmup Iteration   1: 32.698 ns/op
# Warmup Iteration   2: 28.812 ns/op
# Warmup Iteration   3: 27.709 ns/op
# Warmup Iteration   4: 27.748 ns/op
# Warmup Iteration   5: 27.750 ns/op
Iteration   1: 27.765 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 27.748 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 27.720 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 27.741 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 27.716 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  27.738 ±(99.9%) 0.079 ns/op [Average]
  (min, avg, max) = (27.716, 27.738, 27.765), stdev = 0.021
  CI (99.9%): [27.659, 27.817] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = a.200.200)

# Run progress: 79.22% complete, ETA 00:14:38
# Fork: 1 of 1
# Warmup Iteration   1: 3.331 ns/op
# Warmup Iteration   2: 3.055 ns/op
# Warmup Iteration   3: 2.961 ns/op
# Warmup Iteration   4: 2.982 ns/op
# Warmup Iteration   5: 2.962 ns/op
Iteration   1: 3.106 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.959 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.959 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3.099 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.958 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  3.016 ±(99.9%) 0.302 ns/op [Average]
  (min, avg, max) = (2.958, 3.016, 3.106), stdev = 0.079
  CI (99.9%): [2.714, 3.319] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.a.200)

# Run progress: 79.46% complete, ETA 00:14:28
# Fork: 1 of 1
# Warmup Iteration   1: 20.276 ns/op
# Warmup Iteration   2: 17.339 ns/op
# Warmup Iteration   3: 16.347 ns/op
# Warmup Iteration   4: 16.330 ns/op
# Warmup Iteration   5: 16.330 ns/op
Iteration   1: 16.304 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.308 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.304 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.332 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.306 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  16.311 ±(99.9%) 0.047 ns/op [Average]
  (min, avg, max) = (16.304, 16.311, 16.332), stdev = 0.012
  CI (99.9%): [16.264, 16.358] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.a)

# Run progress: 79.71% complete, ETA 00:14:18
# Fork: 1 of 1
# Warmup Iteration   1: 32.691 ns/op
# Warmup Iteration   2: 28.840 ns/op
# Warmup Iteration   3: 29.582 ns/op
# Warmup Iteration   4: 29.565 ns/op
# Warmup Iteration   5: 29.583 ns/op
Iteration   1: 29.575 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.591 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.580 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.763 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.565 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  29.615 ±(99.9%) 0.321 ns/op [Average]
  (min, avg, max) = (29.565, 29.615, 29.763), stdev = 0.083
  CI (99.9%): [29.294, 29.936] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.200.200)

# Run progress: 79.95% complete, ETA 00:14:07
# Fork: 1 of 1
# Warmup Iteration   1: 39.223 ns/op
# Warmup Iteration   2: 34.610 ns/op
# Warmup Iteration   3: 33.716 ns/op
# Warmup Iteration   4: 33.701 ns/op
# Warmup Iteration   5: 33.641 ns/op
Iteration   1: 33.719 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 33.652 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 33.633 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 34.694 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 33.885 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  33.916 ±(99.9%) 1.717 ns/op [Average]
  (min, avg, max) = (33.633, 33.916, 34.694), stdev = 0.446
  CI (99.9%): [32.200, 35.633] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.99999)

# Run progress: 80.20% complete, ETA 00:13:57
# Fork: 1 of 1
# Warmup Iteration   1: 44.363 ns/op
# Warmup Iteration   2: 39.071 ns/op
# Warmup Iteration   3: 36.422 ns/op
# Warmup Iteration   4: 36.390 ns/op
# Warmup Iteration   5: 36.388 ns/op
Iteration   1: 36.398 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 36.379 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 36.390 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 36.396 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 36.392 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  36.391 ±(99.9%) 0.029 ns/op [Average]
  (min, avg, max) = (36.379, 36.391, 36.398), stdev = 0.007
  CI (99.9%): [36.362, 36.420] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.-200)

# Run progress: 80.44% complete, ETA 00:13:47
# Fork: 1 of 1
# Warmup Iteration   1: 32.537 ns/op
# Warmup Iteration   2: 28.126 ns/op
# Warmup Iteration   3: 29.159 ns/op
# Warmup Iteration   4: 29.150 ns/op
# Warmup Iteration   5: 29.208 ns/op
Iteration   1: 29.196 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 29.203 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 29.207 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 29.191 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 29.210 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  29.201 ±(99.9%) 0.031 ns/op [Average]
  (min, avg, max) = (29.191, 29.201, 29.210), stdev = 0.008
  CI (99.9%): [29.170, 29.232] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 1.0.0)

# Run progress: 80.68% complete, ETA 00:13:36
# Fork: 1 of 1
# Warmup Iteration   1: 26.797 ns/op
# Warmup Iteration   2: 23.054 ns/op
# Warmup Iteration   3: 20.199 ns/op
# Warmup Iteration   4: 20.198 ns/op
# Warmup Iteration   5: 20.191 ns/op
Iteration   1: 20.237 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 20.227 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 20.251 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 20.213 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 20.232 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  20.232 ±(99.9%) 0.054 ns/op [Average]
  (min, avg, max) = (20.213, 20.232, 20.251), stdev = 0.014
  CI (99.9%): [20.178, 20.286] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 200.200.200)

# Run progress: 80.93% complete, ETA 00:13:26
# Fork: 1 of 1
# Warmup Iteration   1: 39.750 ns/op
# Warmup Iteration   2: 35.140 ns/op
# Warmup Iteration   3: 32.425 ns/op
# Warmup Iteration   4: 32.368 ns/op
# Warmup Iteration   5: 32.417 ns/op
Iteration   1: 32.526 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32.453 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32.429 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32.402 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32.378 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  32.438 ±(99.9%) 0.220 ns/op [Average]
  (min, avg, max) = (32.378, 32.438, 32.526), stdev = 0.057
  CI (99.9%): [32.218, 32.657] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 81.17% complete, ETA 00:13:16
# Fork: 1 of 1
# Warmup Iteration   1: 51.674 ns/op
# Warmup Iteration   2: 45.614 ns/op
# Warmup Iteration   3: 42.007 ns/op
# Warmup Iteration   4: 42.004 ns/op
# Warmup Iteration   5: 41.909 ns/op
Iteration   1: 41.906 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 42.513 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 41.920 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 41.874 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 41.911 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  42.025 ±(99.9%) 1.053 ns/op [Average]
  (min, avg, max) = (41.874, 42.025, 42.513), stdev = 0.273
  CI (99.9%): [40.972, 43.078] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 81.42% complete, ETA 00:13:05
# Fork: 1 of 1
# Warmup Iteration   1: 57.408 ns/op
# Warmup Iteration   2: 50.705 ns/op
# Warmup Iteration   3: 46.429 ns/op
# Warmup Iteration   4: 46.396 ns/op
# Warmup Iteration   5: 46.343 ns/op
Iteration   1: 46.351 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 46.327 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 46.310 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 46.334 ns/op
                 ·gc.alloc.rate:      0.011 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 46.312 ns/op
                 ·gc.alloc.rate:      0.001 MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6":
  46.327 ±(99.9%) 0.065 ns/op [Average]
  (min, avg, max) = (46.310, 46.327, 46.351), stdev = 0.017
  CI (99.9%): [46.262, 46.391] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate":
  0.003 ±(99.9%) 0.018 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.011), stdev = 0.005
  CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.optimized6:·gc.count":
  ≈ 0 counts


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = )

# Run progress: 81.66% complete, ETA 00:12:55
# Fork: 1 of 1
# Warmup Iteration   1: 66.158 ns/op
# Warmup Iteration   2: 68.289 ns/op
# Warmup Iteration   3: 65.437 ns/op
# Warmup Iteration   4: 65.449 ns/op
# Warmup Iteration   5: 67.996 ns/op
Iteration   1: 65.324 ns/op
                 ·gc.alloc.rate:      6304.169 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           32.000 counts
                 ·gc.time:            15.000 ms

Iteration   2: 65.466 ns/op
                 ·gc.alloc.rate:      6291.097 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           33.000 counts
                 ·gc.time:            18.000 ms

Iteration   3: 66.914 ns/op
                 ·gc.alloc.rate:      6155.028 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           32.000 counts
                 ·gc.time:            16.000 ms

Iteration   4: 65.300 ns/op
                 ·gc.alloc.rate:      6303.395 MB/sec
                 ·gc.alloc.rate.norm: 215.999 B/op
                 ·gc.count:           33.000 counts
                 ·gc.time:            17.000 ms

Iteration   5: 65.536 ns/op
                 ·gc.alloc.rate:      6284.611 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           33.000 counts
                 ·gc.time:            18.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  65.708 ±(99.9%) 2.624 ns/op [Average]
  (min, avg, max) = (65.300, 65.708, 66.914), stdev = 0.681
  CI (99.9%): [63.084, 68.332] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  6267.660 ±(99.9%) 244.543 MB/sec [Average]
  (min, avg, max) = (6155.028, 6267.660, 6304.169), stdev = 63.507
  CI (99.9%): [6023.118, 6512.203] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (215.999, 216.000, 216.000), stdev = 0.001
  CI (99.9%): [215.997, 216.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  163.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (32.000, 32.600, 33.000), stdev = 0.548
  CI (99.9%): [163.000, 163.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  84.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (15.000, 16.800, 18.000), stdev = 1.304
  CI (99.9%): [84.000, 84.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200)

# Run progress: 81.91% complete, ETA 00:12:45
# Fork: 1 of 1
# Warmup Iteration   1: 167.938 ns/op
# Warmup Iteration   2: 109.223 ns/op
# Warmup Iteration   3: 107.190 ns/op
# Warmup Iteration   4: 107.211 ns/op
# Warmup Iteration   5: 107.771 ns/op
Iteration   1: 110.082 ns/op
                 ·gc.alloc.rate:      3740.254 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            14.000 ms

Iteration   2: 106.527 ns/op
                 ·gc.alloc.rate:      3865.434 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 106.490 ns/op
                 ·gc.alloc.rate:      3867.321 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           27.000 counts
                 ·gc.time:            12.000 ms

Iteration   4: 106.610 ns/op
                 ·gc.alloc.rate:      3861.213 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 115.457 ns/op
                 ·gc.alloc.rate:      3567.386 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  109.033 ±(99.9%) 15.035 ns/op [Average]
  (min, avg, max) = (106.490, 109.033, 115.457), stdev = 3.905
  CI (99.9%): [93.998, 124.069] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  3780.322 ±(99.9%) 503.183 MB/sec [Average]
  (min, avg, max) = (3567.386, 3780.322, 3867.321), stdev = 130.675
  CI (99.9%): [3277.139, 4283.504] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.999, 216.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  130.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (25.000, 26.000, 27.000), stdev = 0.707
  CI (99.9%): [130.000, 130.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  60.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 12.000, 14.000), stdev = 1.225
  CI (99.9%): [60.000, 60.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.)

# Run progress: 82.15% complete, ETA 00:12:34
# Fork: 1 of 1
# Warmup Iteration   1: 416.511 ns/op
# Warmup Iteration   2: 172.529 ns/op
# Warmup Iteration   3: 163.934 ns/op
# Warmup Iteration   4: 163.930 ns/op
# Warmup Iteration   5: 164.001 ns/op
Iteration   1: 164.002 ns/op
                 ·gc.alloc.rate:      2511.149 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            8.000 ms

Iteration   2: 164.196 ns/op
                 ·gc.alloc.rate:      2508.086 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 163.683 ns/op
                 ·gc.alloc.rate:      2516.198 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            8.000 ms

Iteration   4: 164.332 ns/op
                 ·gc.alloc.rate:      2505.501 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 164.555 ns/op
                 ·gc.alloc.rate:      2502.892 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            9.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  164.153 ±(99.9%) 1.276 ns/op [Average]
  (min, avg, max) = (163.683, 164.153, 164.555), stdev = 0.331
  CI (99.9%): [162.878, 165.429] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  2508.765 ±(99.9%) 19.873 MB/sec [Average]
  (min, avg, max) = (2502.892, 2508.765, 2516.198), stdev = 5.161
  CI (99.9%): [2488.892, 2528.638] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.999, 216.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  86.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (17.000, 17.200, 18.000), stdev = 0.447
  CI (99.9%): [86.000, 86.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  42.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
  CI (99.9%): [42.000, 42.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200)

# Run progress: 82.40% complete, ETA 00:12:24
# Fork: 1 of 1
# Warmup Iteration   1: 682.939 ns/op
# Warmup Iteration   2: 229.597 ns/op
# Warmup Iteration   3: 218.217 ns/op
# Warmup Iteration   4: 217.471 ns/op
# Warmup Iteration   5: 217.264 ns/op
Iteration   1: 216.853 ns/op
                 ·gc.alloc.rate:      1899.055 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 217.014 ns/op
                 ·gc.alloc.rate:      1897.543 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   3: 217.489 ns/op
                 ·gc.alloc.rate:      1893.674 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 217.825 ns/op
                 ·gc.alloc.rate:      1889.788 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            10.000 ms

Iteration   5: 218.542 ns/op
                 ·gc.alloc.rate:      1884.267 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            7.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  217.545 ±(99.9%) 2.609 ns/op [Average]
  (min, avg, max) = (216.853, 217.545, 218.542), stdev = 0.677
  CI (99.9%): [214.936, 220.153] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1892.866 ±(99.9%) 23.124 MB/sec [Average]
  (min, avg, max) = (1884.267, 1892.866, 1899.055), stdev = 6.005
  CI (99.9%): [1869.741, 1915.990] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.998, 216.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  65.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 13.000, 14.000), stdev = 0.707
  CI (99.9%): [65.000, 65.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  39.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.800, 10.000), stdev = 1.643
  CI (99.9%): [39.000, 39.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.)

# Run progress: 82.64% complete, ETA 00:12:14
# Fork: 1 of 1
# Warmup Iteration   1: 701.162 ns/op
# Warmup Iteration   2: 260.718 ns/op
# Warmup Iteration   3: 250.601 ns/op
# Warmup Iteration   4: 250.721 ns/op
# Warmup Iteration   5: 257.491 ns/op
Iteration   1: 250.109 ns/op
                 ·gc.alloc.rate:      1646.517 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            8.000 ms

Iteration   2: 250.606 ns/op
                 ·gc.alloc.rate:      1643.182 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 250.181 ns/op
                 ·gc.alloc.rate:      1646.079 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 250.081 ns/op
                 ·gc.alloc.rate:      1646.300 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 249.462 ns/op
                 ·gc.alloc.rate:      1650.785 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  250.088 ±(99.9%) 1.575 ns/op [Average]
  (min, avg, max) = (249.462, 250.088, 250.606), stdev = 0.409
  CI (99.9%): [248.513, 251.663] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1646.572 ±(99.9%) 10.469 MB/sec [Average]
  (min, avg, max) = (1643.182, 1646.572, 1650.785), stdev = 2.719
  CI (99.9%): [1636.104, 1657.041] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.998, 216.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  57.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.400, 12.000), stdev = 0.548
  CI (99.9%): [57.000, 57.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  35.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 7.000, 8.000), stdev = 1.225
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = a.200.200)

# Run progress: 82.89% complete, ETA 00:12:03
# Fork: 1 of 1
# Warmup Iteration   1: 61.454 ns/op
# Warmup Iteration   2: 50.413 ns/op
# Warmup Iteration   3: 47.533 ns/op
# Warmup Iteration   4: 47.699 ns/op
# Warmup Iteration   5: 47.695 ns/op
Iteration   1: 47.602 ns/op
                 ·gc.alloc.rate:      5767.573 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           31.000 counts
                 ·gc.time:            14.000 ms

Iteration   2: 47.607 ns/op
                 ·gc.alloc.rate:      5766.650 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           31.000 counts
                 ·gc.time:            17.000 ms

Iteration   3: 47.619 ns/op
                 ·gc.alloc.rate:      5766.041 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           31.000 counts
                 ·gc.time:            16.000 ms

Iteration   4: 47.717 ns/op
                 ·gc.alloc.rate:      5751.753 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           32.000 counts
                 ·gc.time:            17.000 ms

Iteration   5: 49.916 ns/op
                 ·gc.alloc.rate:      5500.893 MB/sec
                 ·gc.alloc.rate.norm: 144.000 B/op
                 ·gc.count:           29.000 counts
                 ·gc.time:            14.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  48.092 ±(99.9%) 3.930 ns/op [Average]
  (min, avg, max) = (47.602, 48.092, 49.916), stdev = 1.021
  CI (99.9%): [44.162, 52.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  5710.582 ±(99.9%) 452.068 MB/sec [Average]
  (min, avg, max) = (5500.893, 5710.582, 5767.573), stdev = 117.401
  CI (99.9%): [5258.514, 6162.650] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  144.000 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (144.000, 144.000, 144.000), stdev = 0.001
  CI (99.9%): [144.000, 144.001] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  154.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (29.000, 30.800, 32.000), stdev = 1.095
  CI (99.9%): [154.000, 154.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  78.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (14.000, 15.600, 17.000), stdev = 1.517
  CI (99.9%): [78.000, 78.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.a.200)

# Run progress: 83.13% complete, ETA 00:11:53
# Fork: 1 of 1
# Warmup Iteration   1: 304.841 ns/op
# Warmup Iteration   2: 168.399 ns/op
# Warmup Iteration   3: 169.267 ns/op
# Warmup Iteration   4: 169.479 ns/op
# Warmup Iteration   5: 169.527 ns/op
Iteration   1: 169.269 ns/op
                 ·gc.alloc.rate:      2432.906 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            9.000 ms

Iteration   2: 168.926 ns/op
                 ·gc.alloc.rate:      2437.632 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 168.829 ns/op
                 ·gc.alloc.rate:      2439.265 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            8.000 ms

Iteration   4: 168.730 ns/op
                 ·gc.alloc.rate:      2439.938 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           17.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 169.025 ns/op
                 ·gc.alloc.rate:      2436.736 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           16.000 counts
                 ·gc.time:            8.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  168.956 ±(99.9%) 0.796 ns/op [Average]
  (min, avg, max) = (168.730, 168.956, 169.269), stdev = 0.207
  CI (99.9%): [168.160, 169.752] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  2437.295 ±(99.9%) 10.643 MB/sec [Average]
  (min, avg, max) = (2432.906, 2437.295, 2439.938), stdev = 2.764
  CI (99.9%): [2426.652, 2447.939] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.999, 216.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  83.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (16.000, 16.600, 17.000), stdev = 0.548
  CI (99.9%): [83.000, 83.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  40.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.a)

# Run progress: 83.37% complete, ETA 00:11:43
# Fork: 1 of 1
# Warmup Iteration   1: 379.492 ns/op
# Warmup Iteration   2: 253.796 ns/op
# Warmup Iteration   3: 247.682 ns/op
# Warmup Iteration   4: 247.440 ns/op
# Warmup Iteration   5: 247.822 ns/op
Iteration   1: 248.015 ns/op
                 ·gc.alloc.rate:      1660.486 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            8.000 ms

Iteration   2: 248.813 ns/op
                 ·gc.alloc.rate:      1654.912 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            8.000 ms

Iteration   3: 254.892 ns/op
                 ·gc.alloc.rate:      1615.819 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 247.721 ns/op
                 ·gc.alloc.rate:      1662.006 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            7.000 ms

Iteration   5: 248.256 ns/op
                 ·gc.alloc.rate:      1659.021 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  249.539 ±(99.9%) 11.624 ns/op [Average]
  (min, avg, max) = (247.721, 249.539, 254.892), stdev = 3.019
  CI (99.9%): [237.916, 261.163] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1650.449 ±(99.9%) 75.234 MB/sec [Average]
  (min, avg, max) = (1615.819, 1650.449, 1662.006), stdev = 19.538
  CI (99.9%): [1575.215, 1725.683] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.998, 216.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  56.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
  CI (99.9%): [56.000, 56.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  38.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
  CI (99.9%): [38.000, 38.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.200.200)

# Run progress: 83.62% complete, ETA 00:11:32
# Fork: 1 of 1
# Warmup Iteration   1: 752.578 ns/op
# Warmup Iteration   2: 302.462 ns/op
# Warmup Iteration   3: 295.212 ns/op
# Warmup Iteration   4: 294.531 ns/op
# Warmup Iteration   5: 294.379 ns/op
Iteration   1: 293.920 ns/op
                 ·gc.alloc.rate:      1401.261 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 293.682 ns/op
                 ·gc.alloc.rate:      1402.291 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 293.644 ns/op
                 ·gc.alloc.rate:      1402.610 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 303.752 ns/op
                 ·gc.alloc.rate:      1355.327 MB/sec
                 ·gc.alloc.rate.norm: 216.002 B/op
                 ·gc.count:           9.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 295.096 ns/op
                 ·gc.alloc.rate:      1395.596 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           10.000 counts
                 ·gc.time:            8.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  296.019 ±(99.9%) 16.801 ns/op [Average]
  (min, avg, max) = (293.644, 296.019, 303.752), stdev = 4.363
  CI (99.9%): [279.218, 312.820] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1391.417 ±(99.9%) 78.453 MB/sec [Average]
  (min, avg, max) = (1355.327, 1391.417, 1402.610), stdev = 20.374
  CI (99.9%): [1312.963, 1469.870] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.002), stdev = 0.001
  CI (99.9%): [215.998, 216.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  48.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
  CI (99.9%): [48.000, 48.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  29.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.483
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.99999)

# Run progress: 83.86% complete, ETA 00:11:22
# Fork: 1 of 1
# Warmup Iteration   1: 725.663 ns/op
# Warmup Iteration   2: 377.754 ns/op
# Warmup Iteration   3: 366.840 ns/op
# Warmup Iteration   4: 366.442 ns/op
# Warmup Iteration   5: 367.483 ns/op
Iteration   1: 366.253 ns/op
                 ·gc.alloc.rate:      1873.867 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 366.669 ns/op
                 ·gc.alloc.rate:      1871.796 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 365.435 ns/op
                 ·gc.alloc.rate:      1878.371 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 365.834 ns/op
                 ·gc.alloc.rate:      1875.533 MB/sec
                 ·gc.alloc.rate.norm: 360.002 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 367.715 ns/op
                 ·gc.alloc.rate:      1866.677 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  366.381 ±(99.9%) 3.376 ns/op [Average]
  (min, avg, max) = (365.435, 366.381, 367.715), stdev = 0.877
  CI (99.9%): [363.005, 369.757] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1873.249 ±(99.9%) 16.910 MB/sec [Average]
  (min, avg, max) = (1866.677, 1873.249, 1878.371), stdev = 4.391
  CI (99.9%): [1856.339, 1890.159] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.002), stdev = 0.001
  CI (99.9%): [359.997, 360.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  65.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (13.000, 13.000, 13.000), stdev = 0.001
  CI (99.9%): [65.000, 65.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  29.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.-200)

# Run progress: 84.11% complete, ETA 00:11:12
# Fork: 1 of 1
# Warmup Iteration   1: 384.481 ns/op
# Warmup Iteration   2: 262.230 ns/op
# Warmup Iteration   3: 256.896 ns/op
# Warmup Iteration   4: 250.462 ns/op
# Warmup Iteration   5: 250.629 ns/op
Iteration   1: 251.602 ns/op
                 ·gc.alloc.rate:      1636.912 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            7.000 ms

Iteration   2: 251.518 ns/op
                 ·gc.alloc.rate:      1637.346 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            9.000 ms

Iteration   3: 250.349 ns/op
                 ·gc.alloc.rate:      1644.963 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 250.421 ns/op
                 ·gc.alloc.rate:      1643.917 MB/sec
                 ·gc.alloc.rate.norm: 216.001 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 249.817 ns/op
                 ·gc.alloc.rate:      1648.603 MB/sec
                 ·gc.alloc.rate.norm: 216.000 B/op
                 ·gc.count:           11.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  250.741 ±(99.9%) 3.016 ns/op [Average]
  (min, avg, max) = (249.817, 250.741, 251.602), stdev = 0.783
  CI (99.9%): [247.725, 253.757] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1642.348 ±(99.9%) 19.539 MB/sec [Average]
  (min, avg, max) = (1636.912, 1642.348, 1648.603), stdev = 5.074
  CI (99.9%): [1622.809, 1661.888] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  216.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (216.000, 216.000, 216.001), stdev = 0.001
  CI (99.9%): [215.998, 216.003] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  56.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
  CI (99.9%): [56.000, 56.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  33.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 6.600, 9.000), stdev = 1.517
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 1.0.0)

# Run progress: 84.35% complete, ETA 00:11:01
# Fork: 1 of 1
# Warmup Iteration   1: 400.691 ns/op
# Warmup Iteration   2: 212.030 ns/op
# Warmup Iteration   3: 208.760 ns/op
# Warmup Iteration   4: 208.731 ns/op
# Warmup Iteration   5: 208.375 ns/op
Iteration   1: 209.428 ns/op
                 ·gc.alloc.rate:      3277.676 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 208.908 ns/op
                 ·gc.alloc.rate:      3285.059 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 208.901 ns/op
                 ·gc.alloc.rate:      3285.683 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 208.835 ns/op
                 ·gc.alloc.rate:      3285.498 MB/sec
                 ·gc.alloc.rate.norm: 360.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 209.439 ns/op
                 ·gc.alloc.rate:      3277.346 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  209.102 ±(99.9%) 1.170 ns/op [Average]
  (min, avg, max) = (208.835, 209.102, 209.439), stdev = 0.304
  CI (99.9%): [207.932, 210.272] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  3282.252 ±(99.9%) 16.695 MB/sec [Average]
  (min, avg, max) = (3277.346, 3282.252, 3285.683), stdev = 4.336
  CI (99.9%): [3265.557, 3298.948] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  360.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (360.000, 360.000, 360.001), stdev = 0.001
  CI (99.9%): [359.998, 360.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  113.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.600, 23.000), stdev = 0.548
  CI (99.9%): [113.000, 113.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  54.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.800, 11.000), stdev = 0.447
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 200.200.200)

# Run progress: 84.60% complete, ETA 00:10:51
# Fork: 1 of 1
# Warmup Iteration   1: 1182.484 ns/op
# Warmup Iteration   2: 327.793 ns/op
# Warmup Iteration   3: 321.653 ns/op
# Warmup Iteration   4: 321.798 ns/op
# Warmup Iteration   5: 320.441 ns/op
Iteration   1: 321.702 ns/op
                 ·gc.alloc.rate:      2133.702 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 321.012 ns/op
                 ·gc.alloc.rate:      2138.148 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 319.794 ns/op
                 ·gc.alloc.rate:      2146.451 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            7.000 ms

Iteration   4: 334.264 ns/op
                 ·gc.alloc.rate:      2052.732 MB/sec
                 ·gc.alloc.rate.norm: 360.002 B/op
                 ·gc.count:           15.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 321.058 ns/op
                 ·gc.alloc.rate:      2137.776 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           14.000 counts
                 ·gc.time:            8.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  323.566 ±(99.9%) 23.181 ns/op [Average]
  (min, avg, max) = (319.794, 323.566, 334.264), stdev = 6.020
  CI (99.9%): [300.385, 346.747] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  2121.762 ±(99.9%) 149.658 MB/sec [Average]
  (min, avg, max) = (2052.732, 2121.762, 2146.451), stdev = 38.866
  CI (99.9%): [1972.103, 2271.420] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.002), stdev = 0.001
  CI (99.9%): [359.997, 360.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  73.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 14.600, 15.000), stdev = 0.548
  CI (99.9%): [73.000, 73.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  48.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (7.000, 9.600, 11.000), stdev = 1.949
  CI (99.9%): [48.000, 48.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 84.84% complete, ETA 00:10:41
# Fork: 1 of 1
# Warmup Iteration   1: 797.195 ns/op
# Warmup Iteration   2: 397.273 ns/op
# Warmup Iteration   3: 384.896 ns/op
# Warmup Iteration   4: 384.816 ns/op
# Warmup Iteration   5: 386.073 ns/op
Iteration   1: 392.521 ns/op
                 ·gc.alloc.rate:      1748.803 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 382.458 ns/op
                 ·gc.alloc.rate:      1794.783 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 383.841 ns/op
                 ·gc.alloc.rate:      1788.363 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 382.542 ns/op
                 ·gc.alloc.rate:      1793.611 MB/sec
                 ·gc.alloc.rate.norm: 360.002 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 382.622 ns/op
                 ·gc.alloc.rate:      1794.026 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  384.797 ±(99.9%) 16.769 ns/op [Average]
  (min, avg, max) = (382.458, 384.797, 392.521), stdev = 4.355
  CI (99.9%): [368.027, 401.566] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1783.917 ±(99.9%) 76.215 MB/sec [Average]
  (min, avg, max) = (1748.803, 1783.917, 1794.783), stdev = 19.793
  CI (99.9%): [1707.702, 1860.132] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.002), stdev = 0.001
  CI (99.9%): [359.997, 360.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  62.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 12.400, 13.000), stdev = 0.548
  CI (99.9%): [62.000, 62.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 85.09% complete, ETA 00:10:30
# Fork: 1 of 1
# Warmup Iteration   1: 1127.397 ns/op
# Warmup Iteration   2: 377.433 ns/op
# Warmup Iteration   3: 366.539 ns/op
# Warmup Iteration   4: 388.028 ns/op
# Warmup Iteration   5: 366.330 ns/op
Iteration   1: 364.629 ns/op
                 ·gc.alloc.rate:      1882.457 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           12.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 364.933 ns/op
                 ·gc.alloc.rate:      1880.884 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 364.892 ns/op
                 ·gc.alloc.rate:      1881.065 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   4: 365.942 ns/op
                 ·gc.alloc.rate:      1874.658 MB/sec
                 ·gc.alloc.rate.norm: 360.002 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 364.647 ns/op
                 ·gc.alloc.rate:      1882.391 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           13.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex":
  365.008 ±(99.9%) 2.079 ns/op [Average]
  (min, avg, max) = (364.629, 365.008, 365.942), stdev = 0.540
  CI (99.9%): [362.930, 367.087] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate":
  1880.291 ±(99.9%) 12.446 MB/sec [Average]
  (min, avg, max) = (1874.658, 1880.291, 1882.457), stdev = 3.232
  CI (99.9%): [1867.845, 1892.737] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm":
  360.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (360.000, 360.001, 360.002), stdev = 0.001
  CI (99.9%): [359.997, 360.004] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.count":
  64.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (12.000, 12.800, 13.000), stdev = 0.447
  CI (99.9%): [64.000, 64.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.regex:·gc.time":
  30.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = )

# Run progress: 85.33% complete, ETA 00:10:20
# Fork: 1 of 1
# Warmup Iteration   1: 3695.375 ns/op
# Warmup Iteration   2: 2932.877 ns/op
# Warmup Iteration   3: 2791.417 ns/op
# Warmup Iteration   4: 2793.350 ns/op
# Warmup Iteration   5: 2771.894 ns/op
Iteration   1: 2783.810 ns/op
                 ·gc.alloc.rate:      662.945 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2775.247 ns/op
                 ·gc.alloc.rate:      665.037 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   3: 2764.305 ns/op
                 ·gc.alloc.rate:      667.612 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2932.787 ns/op
                 ·gc.alloc.rate:      629.068 MB/sec
                 ·gc.alloc.rate.norm: 968.017 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2664.032 ns/op
                 ·gc.alloc.rate:      692.854 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2784.036 ±(99.9%) 370.316 ns/op [Average]
  (min, avg, max) = (2664.032, 2784.036, 2932.787), stdev = 96.170
  CI (99.9%): [2413.720, 3154.352] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  663.503 ±(99.9%) 87.529 MB/sec [Average]
  (min, avg, max) = (629.068, 663.503, 692.854), stdev = 22.731
  CI (99.9%): [575.974, 751.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  968.004 ±(99.9%) 0.027 B/op [Average]
  (min, avg, max) = (968.001, 968.004, 968.017), stdev = 0.007
  CI (99.9%): [967.977, 968.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  23.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
  CI (99.9%): [23.000, 23.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200)

# Run progress: 85.57% complete, ETA 00:10:10
# Fork: 1 of 1
# Warmup Iteration   1: 2628.622 ns/op
# Warmup Iteration   2: 2009.747 ns/op
# Warmup Iteration   3: 1933.889 ns/op
# Warmup Iteration   4: 1917.725 ns/op
# Warmup Iteration   5: 1915.786 ns/op
Iteration   1: 1917.490 ns/op
                 ·gc.alloc.rate:      819.378 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 1997.341 ns/op
                 ·gc.alloc.rate:      786.517 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1917.134 ns/op
                 ·gc.alloc.rate:      819.350 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1914.780 ns/op
                 ·gc.alloc.rate:      820.120 MB/sec
                 ·gc.alloc.rate.norm: 824.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1794.724 ns/op
                 ·gc.alloc.rate:      875.384 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  1908.294 ±(99.9%) 279.221 ns/op [Average]
  (min, avg, max) = (1794.724, 1908.294, 1997.341), stdev = 72.513
  CI (99.9%): [1629.073, 2187.515] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  824.150 ±(99.9%) 123.328 MB/sec [Average]
  (min, avg, max) = (786.517, 824.150, 875.384), stdev = 32.028
  CI (99.9%): [700.822, 947.478] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  824.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (824.001, 824.003, 824.011), stdev = 0.005
  CI (99.9%): [823.985, 824.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.)

# Run progress: 85.82% complete, ETA 00:09:59
# Fork: 1 of 1
# Warmup Iteration   1: 2920.377 ns/op
# Warmup Iteration   2: 2137.388 ns/op
# Warmup Iteration   3: 2021.157 ns/op
# Warmup Iteration   4: 2006.329 ns/op
# Warmup Iteration   5: 2007.154 ns/op
Iteration   1: 2007.764 ns/op
                 ·gc.alloc.rate:      904.108 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 2114.483 ns/op
                 ·gc.alloc.rate:      858.483 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 2008.928 ns/op
                 ·gc.alloc.rate:      903.450 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 2007.558 ns/op
                 ·gc.alloc.rate:      903.661 MB/sec
                 ·gc.alloc.rate.norm: 952.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 1959.780 ns/op
                 ·gc.alloc.rate:      926.193 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2019.703 ±(99.9%) 219.352 ns/op [Average]
  (min, avg, max) = (1959.780, 2019.703, 2114.483), stdev = 56.965
  CI (99.9%): [1800.350, 2239.055] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  899.179 ±(99.9%) 95.271 MB/sec [Average]
  (min, avg, max) = (858.483, 899.179, 926.193), stdev = 24.742
  CI (99.9%): [803.908, 994.450] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  952.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (952.001, 952.003, 952.012), stdev = 0.005
  CI (99.9%): [951.985, 952.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200)

# Run progress: 86.06% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 3301.002 ns/op
# Warmup Iteration   2: 2171.896 ns/op
# Warmup Iteration   3: 2161.192 ns/op
# Warmup Iteration   4: 2070.106 ns/op
# Warmup Iteration   5: 2070.212 ns/op
Iteration   1: 2068.534 ns/op
                 ·gc.alloc.rate:      921.693 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2078.497 ns/op
                 ·gc.alloc.rate:      917.286 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 2077.139 ns/op
                 ·gc.alloc.rate:      917.852 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 2071.929 ns/op
                 ·gc.alloc.rate:      919.930 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 1950.827 ns/op
                 ·gc.alloc.rate:      977.311 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2049.385 ±(99.9%) 212.714 ns/op [Average]
  (min, avg, max) = (1950.827, 2049.385, 2078.497), stdev = 55.241
  CI (99.9%): [1836.672, 2262.099] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  930.815 ±(99.9%) 100.314 MB/sec [Average]
  (min, avg, max) = (917.286, 930.815, 977.311), stdev = 26.051
  CI (99.9%): [830.501, 1031.129] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.984, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  22.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.)

# Run progress: 86.31% complete, ETA 00:09:38
# Fork: 1 of 1
# Warmup Iteration   1: 2981.343 ns/op
# Warmup Iteration   2: 2167.658 ns/op
# Warmup Iteration   3: 2083.138 ns/op
# Warmup Iteration   4: 2126.177 ns/op
# Warmup Iteration   5: 2075.116 ns/op
Iteration   1: 2071.960 ns/op
                 ·gc.alloc.rate:      920.264 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2068.634 ns/op
                 ·gc.alloc.rate:      921.530 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2069.467 ns/op
                 ·gc.alloc.rate:      921.208 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2075.091 ns/op
                 ·gc.alloc.rate:      918.521 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 1953.399 ns/op
                 ·gc.alloc.rate:      976.042 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2047.710 ±(99.9%) 203.242 ns/op [Average]
  (min, avg, max) = (1953.399, 2047.710, 2075.091), stdev = 52.781
  CI (99.9%): [1844.468, 2250.952] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  931.513 ±(99.9%) 95.958 MB/sec [Average]
  (min, avg, max) = (918.521, 931.513, 976.042), stdev = 24.920
  CI (99.9%): [835.555, 1027.471] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.984, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = a.200.200)

# Run progress: 86.55% complete, ETA 00:09:28
# Fork: 1 of 1
# Warmup Iteration   1: 4471.317 ns/op
# Warmup Iteration   2: 3295.291 ns/op
# Warmup Iteration   3: 3060.682 ns/op
# Warmup Iteration   4: 3040.858 ns/op
# Warmup Iteration   5: 3036.574 ns/op
Iteration   1: 3037.083 ns/op
                 ·gc.alloc.rate:      758.447 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 3034.979 ns/op
                 ·gc.alloc.rate:      758.879 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 3050.459 ns/op
                 ·gc.alloc.rate:      754.980 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 3039.868 ns/op
                 ·gc.alloc.rate:      757.420 MB/sec
                 ·gc.alloc.rate.norm: 1208.018 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 2922.936 ns/op
                 ·gc.alloc.rate:      787.974 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  3017.065 ±(99.9%) 203.912 ns/op [Average]
  (min, avg, max) = (2922.936, 3017.065, 3050.459), stdev = 52.955
  CI (99.9%): [2813.153, 3220.977] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  763.540 ±(99.9%) 52.917 MB/sec [Average]
  (min, avg, max) = (754.980, 763.540, 787.974), stdev = 13.742
  CI (99.9%): [710.623, 816.458] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1208.005 ±(99.9%) 0.028 B/op [Average]
  (min, avg, max) = (1208.001, 1208.005, 1208.018), stdev = 0.007
  CI (99.9%): [1207.977, 1208.033] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  26.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
  CI (99.9%): [26.000, 26.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.a.200)

# Run progress: 86.80% complete, ETA 00:09:18
# Fork: 1 of 1
# Warmup Iteration   1: 4260.699 ns/op
# Warmup Iteration   2: 3125.634 ns/op
# Warmup Iteration   3: 2920.716 ns/op
# Warmup Iteration   4: 2909.064 ns/op
# Warmup Iteration   5: 2903.140 ns/op
Iteration   1: 2895.659 ns/op
                 ·gc.alloc.rate:      795.417 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 3037.390 ns/op
                 ·gc.alloc.rate:      758.315 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2893.511 ns/op
                 ·gc.alloc.rate:      795.969 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2997.436 ns/op
                 ·gc.alloc.rate:      768.126 MB/sec
                 ·gc.alloc.rate.norm: 1208.018 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2788.997 ns/op
                 ·gc.alloc.rate:      825.809 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2922.599 ±(99.9%) 376.296 ns/op [Average]
  (min, avg, max) = (2788.997, 2922.599, 3037.390), stdev = 97.723
  CI (99.9%): [2546.303, 3298.894] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  788.727 ±(99.9%) 102.270 MB/sec [Average]
  (min, avg, max) = (758.315, 788.727, 825.809), stdev = 26.559
  CI (99.9%): [686.457, 890.997] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1208.005 ±(99.9%) 0.028 B/op [Average]
  (min, avg, max) = (1208.001, 1208.005, 1208.018), stdev = 0.007
  CI (99.9%): [1207.977, 1208.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.a)

# Run progress: 87.04% complete, ETA 00:09:07
# Fork: 1 of 1
# Warmup Iteration   1: 4401.123 ns/op
# Warmup Iteration   2: 3189.709 ns/op
# Warmup Iteration   3: 3178.572 ns/op
# Warmup Iteration   4: 3171.228 ns/op
# Warmup Iteration   5: 3159.626 ns/op
Iteration   1: 3168.401 ns/op
                 ·gc.alloc.rate:      726.944 MB/sec
                 ·gc.alloc.rate.norm: 1208.002 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 3169.318 ns/op
                 ·gc.alloc.rate:      726.574 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 3165.689 ns/op
                 ·gc.alloc.rate:      727.424 MB/sec
                 ·gc.alloc.rate.norm: 1208.002 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 3162.121 ns/op
                 ·gc.alloc.rate:      728.090 MB/sec
                 ·gc.alloc.rate.norm: 1208.018 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 3102.155 ns/op
                 ·gc.alloc.rate:      742.398 MB/sec
                 ·gc.alloc.rate.norm: 1208.002 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  3153.537 ±(99.9%) 111.127 ns/op [Average]
  (min, avg, max) = (3102.155, 3153.537, 3169.318), stdev = 28.859
  CI (99.9%): [3042.409, 3264.664] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  730.286 ±(99.9%) 26.164 MB/sec [Average]
  (min, avg, max) = (726.574, 730.286, 742.398), stdev = 6.795
  CI (99.9%): [704.122, 756.450] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1208.005 ±(99.9%) 0.029 B/op [Average]
  (min, avg, max) = (1208.001, 1208.005, 1208.018), stdev = 0.008
  CI (99.9%): [1207.976, 1208.034] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  25.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.200.200)

# Run progress: 87.29% complete, ETA 00:08:57
# Fork: 1 of 1
# Warmup Iteration   1: 3191.971 ns/op
# Warmup Iteration   2: 2263.211 ns/op
# Warmup Iteration   3: 2172.121 ns/op
# Warmup Iteration   4: 2157.306 ns/op
# Warmup Iteration   5: 2159.082 ns/op
Iteration   1: 2222.924 ns/op
                 ·gc.alloc.rate:      953.770 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2156.210 ns/op
                 ·gc.alloc.rate:      983.260 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2157.132 ns/op
                 ·gc.alloc.rate:      982.782 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2156.513 ns/op
                 ·gc.alloc.rate:      982.824 MB/sec
                 ·gc.alloc.rate.norm: 1112.013 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2038.553 ns/op
                 ·gc.alloc.rate:      1040.088 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2146.266 ±(99.9%) 256.873 ns/op [Average]
  (min, avg, max) = (2038.553, 2146.266, 2222.924), stdev = 66.709
  CI (99.9%): [1889.393, 2403.140] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  988.545 ±(99.9%) 121.156 MB/sec [Average]
  (min, avg, max) = (953.770, 988.545, 1040.088), stdev = 31.464
  CI (99.9%): [867.389, 1109.700] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1112.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (1112.001, 1112.003, 1112.013), stdev = 0.005
  CI (99.9%): [1111.983, 1112.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.99999)

# Run progress: 87.53% complete, ETA 00:08:47
# Fork: 1 of 1
# Warmup Iteration   1: 3606.456 ns/op
# Warmup Iteration   2: 2336.148 ns/op
# Warmup Iteration   3: 2195.015 ns/op
# Warmup Iteration   4: 2176.977 ns/op
# Warmup Iteration   5: 2176.036 ns/op
Iteration   1: 2176.044 ns/op
                 ·gc.alloc.rate:      953.290 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 2172.988 ns/op
                 ·gc.alloc.rate:      954.681 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2176.942 ns/op
                 ·gc.alloc.rate:      952.514 MB/sec
                 ·gc.alloc.rate.norm: 1088.013 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 2054.674 ns/op
                 ·gc.alloc.rate:      1009.574 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 2053.943 ns/op
                 ·gc.alloc.rate:      1009.903 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2126.918 ±(99.9%) 255.297 ns/op [Average]
  (min, avg, max) = (2053.943, 2126.918, 2176.942), stdev = 66.300
  CI (99.9%): [1871.621, 2382.215] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  975.992 ±(99.9%) 118.661 MB/sec [Average]
  (min, avg, max) = (952.514, 975.992, 1009.903), stdev = 30.816
  CI (99.9%): [857.332, 1094.653] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1088.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (1088.001, 1088.003, 1088.013), stdev = 0.005
  CI (99.9%): [1087.983, 1088.024] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  25.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.-200)

# Run progress: 87.78% complete, ETA 00:08:36
# Fork: 1 of 1
# Warmup Iteration   1: 3382.853 ns/op
# Warmup Iteration   2: 2404.593 ns/op
# Warmup Iteration   3: 2222.843 ns/op
# Warmup Iteration   4: 2202.667 ns/op
# Warmup Iteration   5: 2197.909 ns/op
Iteration   1: 2198.577 ns/op
                 ·gc.alloc.rate:      956.638 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2197.727 ns/op
                 ·gc.alloc.rate:      957.705 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2199.619 ns/op
                 ·gc.alloc.rate:      956.873 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2190.771 ns/op
                 ·gc.alloc.rate:      960.542 MB/sec
                 ·gc.alloc.rate.norm: 1104.013 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2076.779 ns/op
                 ·gc.alloc.rate:      1013.593 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  2172.695 ±(99.9%) 206.898 ns/op [Average]
  (min, avg, max) = (2076.779, 2172.695, 2199.619), stdev = 53.731
  CI (99.9%): [1965.796, 2379.593] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  969.070 ±(99.9%) 96.026 MB/sec [Average]
  (min, avg, max) = (956.638, 969.070, 1013.593), stdev = 24.938
  CI (99.9%): [873.045, 1065.096] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  1104.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (1104.001, 1104.003, 1104.013), stdev = 0.005
  CI (99.9%): [1103.983, 1104.024] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 1.0.0)

# Run progress: 88.02% complete, ETA 00:08:26
# Fork: 1 of 1
# Warmup Iteration   1: 269.668 ns/op
# Warmup Iteration   2: 174.577 ns/op
# Warmup Iteration   3: 160.860 ns/op
# Warmup Iteration   4: 161.587 ns/op
# Warmup Iteration   5: 161.230 ns/op
Iteration   1: 160.891 ns/op
                 ·gc.alloc.rate:      4266.304 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            13.000 ms

Iteration   2: 171.254 ns/op
                 ·gc.alloc.rate:      4007.933 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            13.000 ms

Iteration   3: 162.249 ns/op
                 ·gc.alloc.rate:      4230.387 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms

Iteration   4: 165.916 ns/op
                 ·gc.alloc.rate:      4135.618 MB/sec
                 ·gc.alloc.rate.norm: 360.001 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 160.219 ns/op
                 ·gc.alloc.rate:      4283.789 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            12.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  164.106 ±(99.9%) 17.569 ns/op [Average]
  (min, avg, max) = (160.219, 164.106, 171.254), stdev = 4.563
  CI (99.9%): [146.537, 181.675] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  4184.806 ±(99.9%) 439.972 MB/sec [Average]
  (min, avg, max) = (4007.933, 4184.806, 4283.789), stdev = 114.259
  CI (99.9%): [3744.834, 4624.778] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  360.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (360.000, 360.000, 360.001), stdev = 0.001
  CI (99.9%): [359.999, 360.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  126.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (24.000, 25.200, 26.000), stdev = 0.837
  CI (99.9%): [126.000, 126.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  61.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 12.200, 13.000), stdev = 0.837
  CI (99.9%): [61.000, 61.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 200.200.200)

# Run progress: 88.26% complete, ETA 00:08:16
# Fork: 1 of 1
# Warmup Iteration   1: 330.251 ns/op
# Warmup Iteration   2: 249.087 ns/op
# Warmup Iteration   3: 186.264 ns/op
# Warmup Iteration   4: 186.409 ns/op
# Warmup Iteration   5: 186.532 ns/op
Iteration   1: 186.809 ns/op
                 ·gc.alloc.rate:      4000.771 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            12.000 ms

Iteration   2: 191.786 ns/op
                 ·gc.alloc.rate:      3896.095 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            14.000 ms

Iteration   3: 186.710 ns/op
                 ·gc.alloc.rate:      4003.071 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            13.000 ms

Iteration   4: 204.983 ns/op
                 ·gc.alloc.rate:      3645.076 MB/sec
                 ·gc.alloc.rate.norm: 392.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 187.641 ns/op
                 ·gc.alloc.rate:      3983.176 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            18.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  191.586 ±(99.9%) 29.931 ns/op [Average]
  (min, avg, max) = (186.710, 191.586, 204.983), stdev = 7.773
  CI (99.9%): [161.655, 221.517] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  3905.638 ±(99.9%) 585.688 MB/sec [Average]
  (min, avg, max) = (3645.076, 3905.638, 4003.071), stdev = 152.101
  CI (99.9%): [3319.949, 4491.326] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  392.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (392.000, 392.000, 392.001), stdev = 0.001
  CI (99.9%): [391.998, 392.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  117.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 23.400, 24.000), stdev = 0.894
  CI (99.9%): [117.000, 117.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  69.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 13.800, 18.000), stdev = 2.490
  CI (99.9%): [69.000, 69.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 88.51% complete, ETA 00:08:05
# Fork: 1 of 1
# Warmup Iteration   1: 358.733 ns/op
# Warmup Iteration   2: 224.521 ns/op
# Warmup Iteration   3: 211.872 ns/op
# Warmup Iteration   4: 224.570 ns/op
# Warmup Iteration   5: 204.660 ns/op
Iteration   1: 203.182 ns/op
                 ·gc.alloc.rate:      3678.569 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 202.974 ns/op
                 ·gc.alloc.rate:      3681.634 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 202.946 ns/op
                 ·gc.alloc.rate:      3682.159 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 203.021 ns/op
                 ·gc.alloc.rate:      3679.806 MB/sec
                 ·gc.alloc.rate.norm: 392.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            13.000 ms

Iteration   5: 202.247 ns/op
                 ·gc.alloc.rate:      3694.872 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  202.874 ±(99.9%) 1.394 ns/op [Average]
  (min, avg, max) = (202.247, 202.874, 203.182), stdev = 0.362
  CI (99.9%): [201.480, 204.268] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  3683.408 ±(99.9%) 25.289 MB/sec [Average]
  (min, avg, max) = (3678.569, 3683.408, 3694.872), stdev = 6.568
  CI (99.9%): [3658.119, 3708.697] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  392.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (392.000, 392.000, 392.001), stdev = 0.001
  CI (99.9%): [391.998, 392.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  110.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.000, 22.000), stdev = 0.001
  CI (99.9%): [110.000, 110.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  58.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 11.600, 13.000), stdev = 0.894
  CI (99.9%): [58.000, 58.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 88.75% complete, ETA 00:07:55
# Fork: 1 of 1
# Warmup Iteration   1: 358.468 ns/op
# Warmup Iteration   2: 227.299 ns/op
# Warmup Iteration   3: 208.753 ns/op
# Warmup Iteration   4: 215.389 ns/op
# Warmup Iteration   5: 209.452 ns/op
Iteration   1: 209.569 ns/op
                 ·gc.alloc.rate:      3566.387 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            17.000 ms

Iteration   2: 209.278 ns/op
                 ·gc.alloc.rate:      3571.337 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            14.000 ms

Iteration   3: 209.486 ns/op
                 ·gc.alloc.rate:      3568.107 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 209.681 ns/op
                 ·gc.alloc.rate:      3563.181 MB/sec
                 ·gc.alloc.rate.norm: 392.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            16.000 ms

Iteration   5: 220.816 ns/op
                 ·gc.alloc.rate:      3385.043 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            15.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo":
  211.766 ±(99.9%) 19.489 ns/op [Average]
  (min, avg, max) = (209.278, 211.766, 220.816), stdev = 5.061
  CI (99.9%): [192.277, 231.255] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate":
  3530.811 ±(99.9%) 313.982 MB/sec [Average]
  (min, avg, max) = (3385.043, 3530.811, 3571.337), stdev = 81.540
  CI (99.9%): [3216.829, 3844.793] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm":
  392.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (392.000, 392.000, 392.001), stdev = 0.001
  CI (99.9%): [391.998, 392.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.count":
  106.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (20.000, 21.200, 22.000), stdev = 0.837
  CI (99.9%): [106.000, 106.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yolo:·gc.time":
  73.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 14.600, 17.000), stdev = 2.302
  CI (99.9%): [73.000, 73.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = )

# Run progress: 89.00% complete, ETA 00:07:45
# Fork: 1 of 1
# Warmup Iteration   1: 3732.382 ns/op
# Warmup Iteration   2: 2798.009 ns/op
# Warmup Iteration   3: 2681.818 ns/op
# Warmup Iteration   4: 2674.647 ns/op
# Warmup Iteration   5: 2672.192 ns/op
Iteration   1: 2668.786 ns/op
                 ·gc.alloc.rate:      691.576 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2667.708 ns/op
                 ·gc.alloc.rate:      691.810 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2662.339 ns/op
                 ·gc.alloc.rate:      693.176 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           4.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2677.786 ns/op
                 ·gc.alloc.rate:      689.060 MB/sec
                 ·gc.alloc.rate.norm: 968.016 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2631.735 ns/op
                 ·gc.alloc.rate:      701.402 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2661.671 ±(99.9%) 67.889 ns/op [Average]
  (min, avg, max) = (2631.735, 2661.671, 2677.786), stdev = 17.631
  CI (99.9%): [2593.781, 2729.560] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  693.405 ±(99.9%) 18.140 MB/sec [Average]
  (min, avg, max) = (689.060, 693.405, 701.402), stdev = 4.711
  CI (99.9%): [675.265, 711.545] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  968.004 ±(99.9%) 0.025 B/op [Average]
  (min, avg, max) = (968.001, 968.004, 968.016), stdev = 0.006
  CI (99.9%): [967.979, 968.029] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  24.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  12.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200)

# Run progress: 89.24% complete, ETA 00:07:34
# Fork: 1 of 1
# Warmup Iteration   1: 2757.612 ns/op
# Warmup Iteration   2: 1992.509 ns/op
# Warmup Iteration   3: 1910.746 ns/op
# Warmup Iteration   4: 1901.358 ns/op
# Warmup Iteration   5: 1897.530 ns/op
Iteration   1: 1896.553 ns/op
                 ·gc.alloc.rate:      828.365 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 1902.104 ns/op
                 ·gc.alloc.rate:      825.983 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1898.514 ns/op
                 ·gc.alloc.rate:      827.485 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1895.968 ns/op
                 ·gc.alloc.rate:      828.236 MB/sec
                 ·gc.alloc.rate.norm: 824.011 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1774.601 ns/op
                 ·gc.alloc.rate:      885.276 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  1873.548 ±(99.9%) 213.191 ns/op [Average]
  (min, avg, max) = (1774.601, 1873.548, 1902.104), stdev = 55.365
  CI (99.9%): [1660.356, 2086.739] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  839.069 ±(99.9%) 99.530 MB/sec [Average]
  (min, avg, max) = (825.983, 839.069, 885.276), stdev = 25.848
  CI (99.9%): [739.539, 938.599] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  824.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (824.001, 824.003, 824.011), stdev = 0.005
  CI (99.9%): [823.985, 824.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.)

# Run progress: 89.49% complete, ETA 00:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 2938.969 ns/op
# Warmup Iteration   2: 2120.150 ns/op
# Warmup Iteration   3: 2030.729 ns/op
# Warmup Iteration   4: 2019.418 ns/op
# Warmup Iteration   5: 2022.226 ns/op
Iteration   1: 2015.348 ns/op
                 ·gc.alloc.rate:      900.704 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2014.153 ns/op
                 ·gc.alloc.rate:      901.051 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2014.752 ns/op
                 ·gc.alloc.rate:      900.932 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2014.924 ns/op
                 ·gc.alloc.rate:      900.529 MB/sec
                 ·gc.alloc.rate.norm: 952.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1892.730 ns/op
                 ·gc.alloc.rate:      958.895 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  1990.381 ±(99.9%) 210.208 ns/op [Average]
  (min, avg, max) = (1892.730, 1990.381, 2015.348), stdev = 54.590
  CI (99.9%): [1780.174, 2200.589] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  912.422 ±(99.9%) 100.039 MB/sec [Average]
  (min, avg, max) = (900.529, 912.422, 958.895), stdev = 25.980
  CI (99.9%): [812.383, 1012.461] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  952.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (952.001, 952.003, 952.012), stdev = 0.005
  CI (99.9%): [951.984, 952.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200)

# Run progress: 89.73% complete, ETA 00:07:14
# Fork: 1 of 1
# Warmup Iteration   1: 2849.309 ns/op
# Warmup Iteration   2: 2201.875 ns/op
# Warmup Iteration   3: 2074.339 ns/op
# Warmup Iteration   4: 2104.162 ns/op
# Warmup Iteration   5: 2057.177 ns/op
Iteration   1: 2063.424 ns/op
                 ·gc.alloc.rate:      923.995 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2060.029 ns/op
                 ·gc.alloc.rate:      925.466 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2058.946 ns/op
                 ·gc.alloc.rate:      926.037 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 2057.884 ns/op
                 ·gc.alloc.rate:      926.171 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1936.099 ns/op
                 ·gc.alloc.rate:      984.607 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2035.276 ±(99.9%) 213.637 ns/op [Average]
  (min, avg, max) = (1936.099, 2035.276, 2063.424), stdev = 55.481
  CI (99.9%): [1821.639, 2248.914] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  937.255 ±(99.9%) 101.983 MB/sec [Average]
  (min, avg, max) = (923.995, 937.255, 984.607), stdev = 26.485
  CI (99.9%): [835.272, 1039.239] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.984, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.)

# Run progress: 89.98% complete, ETA 00:07:03
# Fork: 1 of 1
# Warmup Iteration   1: 2930.584 ns/op
# Warmup Iteration   2: 2421.054 ns/op
# Warmup Iteration   3: 2082.341 ns/op
# Warmup Iteration   4: 2075.386 ns/op
# Warmup Iteration   5: 2068.704 ns/op
Iteration   1: 2072.313 ns/op
                 ·gc.alloc.rate:      920.145 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2069.030 ns/op
                 ·gc.alloc.rate:      921.356 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2069.731 ns/op
                 ·gc.alloc.rate:      921.191 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2073.093 ns/op
                 ·gc.alloc.rate:      919.394 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1955.027 ns/op
                 ·gc.alloc.rate:      975.073 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2047.839 ±(99.9%) 199.892 ns/op [Average]
  (min, avg, max) = (1955.027, 2047.839, 2073.093), stdev = 51.911
  CI (99.9%): [1847.947, 2247.731] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  931.432 ±(99.9%) 93.992 MB/sec [Average]
  (min, avg, max) = (919.394, 931.432, 975.073), stdev = 24.409
  CI (99.9%): [837.440, 1025.424] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.984, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = a.200.200)

# Run progress: 90.22% complete, ETA 00:06:53
# Fork: 1 of 1
# Warmup Iteration   1: 4268.610 ns/op
# Warmup Iteration   2: 3070.678 ns/op
# Warmup Iteration   3: 2944.191 ns/op
# Warmup Iteration   4: 2942.489 ns/op
# Warmup Iteration   5: 2928.201 ns/op
Iteration   1: 3042.641 ns/op
                 ·gc.alloc.rate:      757.015 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2936.513 ns/op
                 ·gc.alloc.rate:      784.260 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2937.149 ns/op
                 ·gc.alloc.rate:      784.108 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2936.176 ns/op
                 ·gc.alloc.rate:      784.087 MB/sec
                 ·gc.alloc.rate.norm: 1208.017 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2807.661 ns/op
                 ·gc.alloc.rate:      820.357 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2932.028 ±(99.9%) 320.819 ns/op [Average]
  (min, avg, max) = (2807.661, 2932.028, 3042.641), stdev = 83.316
  CI (99.9%): [2611.209, 3252.846] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  785.965 ±(99.9%) 86.764 MB/sec [Average]
  (min, avg, max) = (757.015, 785.965, 820.357), stdev = 22.532
  CI (99.9%): [699.201, 872.729] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1208.005 ±(99.9%) 0.027 B/op [Average]
  (min, avg, max) = (1208.001, 1208.005, 1208.017), stdev = 0.007
  CI (99.9%): [1207.977, 1208.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.a.200)

# Run progress: 90.46% complete, ETA 00:06:43
# Fork: 1 of 1
# Warmup Iteration   1: 3816.908 ns/op
# Warmup Iteration   2: 2727.902 ns/op
# Warmup Iteration   3: 2704.284 ns/op
# Warmup Iteration   4: 2702.876 ns/op
# Warmup Iteration   5: 2695.560 ns/op
Iteration   1: 2705.974 ns/op
                 ·gc.alloc.rate:      851.235 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2701.516 ns/op
                 ·gc.alloc.rate:      852.505 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 2778.603 ns/op
                 ·gc.alloc.rate:      829.040 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2687.619 ns/op
                 ·gc.alloc.rate:      856.772 MB/sec
                 ·gc.alloc.rate.norm: 1208.016 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2577.214 ns/op
                 ·gc.alloc.rate:      893.768 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2690.185 ±(99.9%) 278.769 ns/op [Average]
  (min, avg, max) = (2577.214, 2690.185, 2778.603), stdev = 72.395
  CI (99.9%): [2411.416, 2968.954] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  856.664 ±(99.9%) 90.030 MB/sec [Average]
  (min, avg, max) = (829.040, 856.664, 893.768), stdev = 23.381
  CI (99.9%): [766.634, 946.695] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.025 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.016), stdev = 0.006
  CI (99.9%): [1207.979, 1208.029] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.a)

# Run progress: 90.71% complete, ETA 00:06:32
# Fork: 1 of 1
# Warmup Iteration   1: 4199.619 ns/op
# Warmup Iteration   2: 3070.867 ns/op
# Warmup Iteration   3: 2928.953 ns/op
# Warmup Iteration   4: 2997.413 ns/op
# Warmup Iteration   5: 2907.324 ns/op
Iteration   1: 2913.906 ns/op
                 ·gc.alloc.rate:      790.386 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2916.691 ns/op
                 ·gc.alloc.rate:      789.724 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2908.762 ns/op
                 ·gc.alloc.rate:      791.813 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2918.345 ns/op
                 ·gc.alloc.rate:      788.977 MB/sec
                 ·gc.alloc.rate.norm: 1208.017 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 2816.585 ns/op
                 ·gc.alloc.rate:      817.767 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2894.858 ±(99.9%) 169.068 ns/op [Average]
  (min, avg, max) = (2816.585, 2894.858, 2918.345), stdev = 43.907
  CI (99.9%): [2725.790, 3063.926] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  795.733 ±(99.9%) 47.600 MB/sec [Average]
  (min, avg, max) = (788.977, 795.733, 817.767), stdev = 12.362
  CI (99.9%): [748.134, 843.333] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1208.005 ±(99.9%) 0.027 B/op [Average]
  (min, avg, max) = (1208.001, 1208.005, 1208.017), stdev = 0.007
  CI (99.9%): [1207.977, 1208.032] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  20.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
  CI (99.9%): [20.000, 20.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.200.200)

# Run progress: 90.95% complete, ETA 00:06:22
# Fork: 1 of 1
# Warmup Iteration   1: 3195.118 ns/op
# Warmup Iteration   2: 2270.905 ns/op
# Warmup Iteration   3: 2175.508 ns/op
# Warmup Iteration   4: 2166.011 ns/op
# Warmup Iteration   5: 2168.478 ns/op
Iteration   1: 2165.219 ns/op
                 ·gc.alloc.rate:      979.156 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2166.608 ns/op
                 ·gc.alloc.rate:      978.471 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2168.407 ns/op
                 ·gc.alloc.rate:      977.689 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2172.825 ns/op
                 ·gc.alloc.rate:      975.496 MB/sec
                 ·gc.alloc.rate.norm: 1112.013 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   5: 2044.635 ns/op
                 ·gc.alloc.rate:      1036.870 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  2143.539 ±(99.9%) 213.183 ns/op [Average]
  (min, avg, max) = (2044.635, 2143.539, 2172.825), stdev = 55.363
  CI (99.9%): [1930.356, 2356.722] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  989.536 ±(99.9%) 102.028 MB/sec [Average]
  (min, avg, max) = (975.496, 989.536, 1036.870), stdev = 26.496
  CI (99.9%): [887.509, 1091.564] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  1112.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (1112.001, 1112.003, 1112.013), stdev = 0.005
  CI (99.9%): [1111.983, 1112.024] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.99999)

# Run progress: 91.20% complete, ETA 00:06:12
# Fork: 1 of 1
# Warmup Iteration   1: 334.235 ns/op
# Warmup Iteration   2: 200.386 ns/op
# Warmup Iteration   3: 196.987 ns/op
# Warmup Iteration   4: 190.790 ns/op
# Warmup Iteration   5: 190.937 ns/op
Iteration   1: 200.898 ns/op
                 ·gc.alloc.rate:      3492.485 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            13.000 ms

Iteration   2: 190.535 ns/op
                 ·gc.alloc.rate:      3682.535 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   3: 191.089 ns/op
                 ·gc.alloc.rate:      3671.606 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            13.000 ms

Iteration   4: 190.640 ns/op
                 ·gc.alloc.rate:      3679.107 MB/sec
                 ·gc.alloc.rate.norm: 368.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   5: 190.568 ns/op
                 ·gc.alloc.rate:      3681.799 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  192.746 ±(99.9%) 17.568 ns/op [Average]
  (min, avg, max) = (190.535, 192.746, 200.898), stdev = 4.562
  CI (99.9%): [175.178, 210.314] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  3641.506 ±(99.9%) 321.212 MB/sec [Average]
  (min, avg, max) = (3492.485, 3641.506, 3682.535), stdev = 83.418
  CI (99.9%): [3320.295, 3962.718] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  368.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (368.000, 368.000, 368.001), stdev = 0.001
  CI (99.9%): [367.999, 368.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  110.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 22.000, 23.000), stdev = 0.707
  CI (99.9%): [110.000, 110.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  56.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 11.200, 13.000), stdev = 1.643
  CI (99.9%): [56.000, 56.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.-200)

# Run progress: 91.44% complete, ETA 00:06:01
# Fork: 1 of 1
# Warmup Iteration   1: 321.334 ns/op
# Warmup Iteration   2: 210.850 ns/op
# Warmup Iteration   3: 193.966 ns/op
# Warmup Iteration   4: 193.698 ns/op
# Warmup Iteration   5: 193.699 ns/op
Iteration   1: 194.032 ns/op
                 ·gc.alloc.rate:      3773.565 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            15.000 ms

Iteration   2: 194.031 ns/op
                 ·gc.alloc.rate:      3773.452 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 194.109 ns/op
                 ·gc.alloc.rate:      3771.590 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 193.913 ns/op
                 ·gc.alloc.rate:      3774.544 MB/sec
                 ·gc.alloc.rate.norm: 384.001 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 196.761 ns/op
                 ·gc.alloc.rate:      3721.197 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  194.569 ±(99.9%) 4.725 ns/op [Average]
  (min, avg, max) = (193.913, 194.569, 196.761), stdev = 1.227
  CI (99.9%): [189.844, 199.294] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  3762.870 ±(99.9%) 89.798 MB/sec [Average]
  (min, avg, max) = (3721.197, 3762.870, 3774.544), stdev = 23.320
  CI (99.9%): [3673.071, 3852.668] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  384.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (384.000, 384.000, 384.001), stdev = 0.001
  CI (99.9%): [383.999, 384.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  113.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (22.000, 22.600, 23.000), stdev = 0.548
  CI (99.9%): [113.000, 113.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  61.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 12.200, 15.000), stdev = 1.643
  CI (99.9%): [61.000, 61.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 1.0.0)

# Run progress: 91.69% complete, ETA 00:05:51
# Fork: 1 of 1
# Warmup Iteration   1: 278.109 ns/op
# Warmup Iteration   2: 174.860 ns/op
# Warmup Iteration   3: 158.478 ns/op
# Warmup Iteration   4: 159.266 ns/op
# Warmup Iteration   5: 158.935 ns/op
Iteration   1: 159.951 ns/op
                 ·gc.alloc.rate:      4290.979 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            16.000 ms

Iteration   2: 166.529 ns/op
                 ·gc.alloc.rate:      4121.965 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            14.000 ms

Iteration   3: 159.412 ns/op
                 ·gc.alloc.rate:      4305.450 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           26.000 counts
                 ·gc.time:            13.000 ms

Iteration   4: 168.082 ns/op
                 ·gc.alloc.rate:      4082.625 MB/sec
                 ·gc.alloc.rate.norm: 360.001 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 166.178 ns/op
                 ·gc.alloc.rate:      4130.612 MB/sec
                 ·gc.alloc.rate.norm: 360.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  164.030 ±(99.9%) 15.552 ns/op [Average]
  (min, avg, max) = (159.412, 164.030, 168.082), stdev = 4.039
  CI (99.9%): [148.478, 179.582] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  4186.326 ±(99.9%) 399.908 MB/sec [Average]
  (min, avg, max) = (4082.625, 4186.326, 4305.450), stdev = 103.855
  CI (99.9%): [3786.419, 4586.234] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  360.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (360.000, 360.000, 360.001), stdev = 0.001
  CI (99.9%): [359.999, 360.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  126.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (24.000, 25.200, 26.000), stdev = 0.837
  CI (99.9%): [126.000, 126.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  67.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 13.400, 16.000), stdev = 1.673
  CI (99.9%): [67.000, 67.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 200.200.200)

# Run progress: 91.93% complete, ETA 00:05:41
# Fork: 1 of 1
# Warmup Iteration   1: 312.003 ns/op
# Warmup Iteration   2: 208.227 ns/op
# Warmup Iteration   3: 186.139 ns/op
# Warmup Iteration   4: 198.910 ns/op
# Warmup Iteration   5: 187.228 ns/op
Iteration   1: 191.362 ns/op
                 ·gc.alloc.rate:      3905.694 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            15.000 ms

Iteration   2: 186.406 ns/op
                 ·gc.alloc.rate:      4009.102 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 186.334 ns/op
                 ·gc.alloc.rate:      4009.050 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            12.000 ms

Iteration   4: 186.676 ns/op
                 ·gc.alloc.rate:      4002.165 MB/sec
                 ·gc.alloc.rate.norm: 392.001 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 186.208 ns/op
                 ·gc.alloc.rate:      4013.891 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            12.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  187.397 ±(99.9%) 8.561 ns/op [Average]
  (min, avg, max) = (186.208, 187.397, 191.362), stdev = 2.223
  CI (99.9%): [178.836, 195.958] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  3987.980 ±(99.9%) 177.857 MB/sec [Average]
  (min, avg, max) = (3905.694, 3987.980, 4013.891), stdev = 46.189
  CI (99.9%): [3810.123, 4165.838] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  392.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (392.000, 392.000, 392.001), stdev = 0.001
  CI (99.9%): [391.999, 392.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  119.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (23.000, 23.800, 24.000), stdev = 0.447
  CI (99.9%): [119.000, 119.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  63.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (12.000, 12.600, 15.000), stdev = 1.342
  CI (99.9%): [63.000, 63.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 92.18% complete, ETA 00:05:30
# Fork: 1 of 1
# Warmup Iteration   1: 371.828 ns/op
# Warmup Iteration   2: 236.536 ns/op
# Warmup Iteration   3: 206.353 ns/op
# Warmup Iteration   4: 206.319 ns/op
# Warmup Iteration   5: 206.928 ns/op
Iteration   1: 206.501 ns/op
                 ·gc.alloc.rate:      3619.672 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 215.917 ns/op
                 ·gc.alloc.rate:      3461.588 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 206.503 ns/op
                 ·gc.alloc.rate:      3619.292 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 206.306 ns/op
                 ·gc.alloc.rate:      3621.262 MB/sec
                 ·gc.alloc.rate.norm: 392.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 206.925 ns/op
                 ·gc.alloc.rate:      3611.713 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  208.430 ±(99.9%) 16.139 ns/op [Average]
  (min, avg, max) = (206.306, 208.430, 215.917), stdev = 4.191
  CI (99.9%): [192.291, 224.569] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  3586.705 ±(99.9%) 269.701 MB/sec [Average]
  (min, avg, max) = (3461.588, 3586.705, 3621.262), stdev = 70.040
  CI (99.9%): [3317.004, 3856.406] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  392.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (392.000, 392.000, 392.001), stdev = 0.001
  CI (99.9%): [391.998, 392.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  108.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 21.600, 22.000), stdev = 0.548
  CI (99.9%): [108.000, 108.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  53.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
  CI (99.9%): [53.000, 53.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 92.42% complete, ETA 00:05:20
# Fork: 1 of 1
# Warmup Iteration   1: 373.262 ns/op
# Warmup Iteration   2: 233.302 ns/op
# Warmup Iteration   3: 227.429 ns/op
# Warmup Iteration   4: 210.265 ns/op
# Warmup Iteration   5: 207.220 ns/op
Iteration   1: 206.763 ns/op
                 ·gc.alloc.rate:      3614.902 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 206.696 ns/op
                 ·gc.alloc.rate:      3615.888 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   3: 206.661 ns/op
                 ·gc.alloc.rate:      3616.328 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 210.174 ns/op
                 ·gc.alloc.rate:      3554.577 MB/sec
                 ·gc.alloc.rate.norm: 392.001 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 206.740 ns/op
                 ·gc.alloc.rate:      3615.538 MB/sec
                 ·gc.alloc.rate.norm: 392.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow":
  207.407 ±(99.9%) 5.958 ns/op [Average]
  (min, avg, max) = (206.661, 207.407, 210.174), stdev = 1.547
  CI (99.9%): [201.449, 213.365] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate":
  3603.447 ±(99.9%) 105.215 MB/sec [Average]
  (min, avg, max) = (3554.577, 3603.447, 3616.328), stdev = 27.324
  CI (99.9%): [3498.232, 3708.662] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm":
  392.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (392.000, 392.000, 392.001), stdev = 0.001
  CI (99.9%): [391.998, 392.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count":
  108.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 21.600, 22.000), stdev = 0.548
  CI (99.9%): [108.000, 108.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time":
  53.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
  CI (99.9%): [53.000, 53.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = )

# Run progress: 92.67% complete, ETA 00:05:10
# Fork: 1 of 1
# Warmup Iteration   1: 3000.338 ns/op
# Warmup Iteration   2: 2357.061 ns/op
# Warmup Iteration   3: 2336.560 ns/op
# Warmup Iteration   4: 2334.471 ns/op
# Warmup Iteration   5: 2321.236 ns/op
Iteration   1: 2319.266 ns/op
                 ·gc.alloc.rate:      795.829 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   2: 2330.806 ns/op
                 ·gc.alloc.rate:      791.857 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2325.109 ns/op
                 ·gc.alloc.rate:      793.802 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2327.301 ns/op
                 ·gc.alloc.rate:      792.656 MB/sec
                 ·gc.alloc.rate.norm: 968.014 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2196.311 ns/op
                 ·gc.alloc.rate:      840.291 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  2299.758 ±(99.9%) 223.264 ns/op [Average]
  (min, avg, max) = (2196.311, 2299.758, 2330.806), stdev = 57.981
  CI (99.9%): [2076.495, 2523.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  802.887 ±(99.9%) 80.721 MB/sec [Average]
  (min, avg, max) = (791.857, 802.887, 840.291), stdev = 20.963
  CI (99.9%): [722.166, 883.608] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  968.004 ±(99.9%) 0.022 B/op [Average]
  (min, avg, max) = (968.001, 968.004, 968.014), stdev = 0.006
  CI (99.9%): [967.982, 968.025] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200)

# Run progress: 92.91% complete, ETA 00:04:59
# Fork: 1 of 1
# Warmup Iteration   1: 2273.712 ns/op
# Warmup Iteration   2: 1842.867 ns/op
# Warmup Iteration   3: 1831.992 ns/op
# Warmup Iteration   4: 1816.979 ns/op
# Warmup Iteration   5: 1817.894 ns/op
Iteration   1: 1814.179 ns/op
                 ·gc.alloc.rate:      866.024 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1813.959 ns/op
                 ·gc.alloc.rate:      866.068 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1813.502 ns/op
                 ·gc.alloc.rate:      866.308 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 1820.057 ns/op
                 ·gc.alloc.rate:      862.954 MB/sec
                 ·gc.alloc.rate.norm: 824.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1694.011 ns/op
                 ·gc.alloc.rate:      927.562 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  1791.142 ±(99.9%) 209.337 ns/op [Average]
  (min, avg, max) = (1694.011, 1791.142, 1820.057), stdev = 54.364
  CI (99.9%): [1581.805, 2000.478] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  877.783 ±(99.9%) 107.284 MB/sec [Average]
  (min, avg, max) = (862.954, 877.783, 927.562), stdev = 27.861
  CI (99.9%): [770.499, 985.067] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  824.003 ±(99.9%) 0.017 B/op [Average]
  (min, avg, max) = (824.001, 824.003, 824.011), stdev = 0.004
  CI (99.9%): [823.986, 824.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.)

# Run progress: 93.15% complete, ETA 00:04:49
# Fork: 1 of 1
# Warmup Iteration   1: 2708.903 ns/op
# Warmup Iteration   2: 1961.873 ns/op
# Warmup Iteration   3: 1932.128 ns/op
# Warmup Iteration   4: 1926.621 ns/op
# Warmup Iteration   5: 1925.692 ns/op
Iteration   1: 1924.568 ns/op
                 ·gc.alloc.rate:      943.160 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1923.446 ns/op
                 ·gc.alloc.rate:      943.679 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1924.878 ns/op
                 ·gc.alloc.rate:      942.859 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1925.687 ns/op
                 ·gc.alloc.rate:      942.226 MB/sec
                 ·gc.alloc.rate.norm: 952.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1804.132 ns/op
                 ·gc.alloc.rate:      1006.060 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  1900.542 ±(99.9%) 207.554 ns/op [Average]
  (min, avg, max) = (1804.132, 1900.542, 1925.687), stdev = 53.901
  CI (99.9%): [1692.988, 2108.097] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  955.597 ±(99.9%) 108.644 MB/sec [Average]
  (min, avg, max) = (942.226, 955.597, 1006.060), stdev = 28.214
  CI (99.9%): [846.953, 1064.241] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  952.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (952.001, 952.003, 952.011), stdev = 0.005
  CI (99.9%): [951.985, 952.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200)

# Run progress: 93.40% complete, ETA 00:04:39
# Fork: 1 of 1
# Warmup Iteration   1: 2636.628 ns/op
# Warmup Iteration   2: 2067.554 ns/op
# Warmup Iteration   3: 1971.960 ns/op
# Warmup Iteration   4: 2020.304 ns/op
# Warmup Iteration   5: 1958.566 ns/op
Iteration   1: 1954.561 ns/op
                 ·gc.alloc.rate:      975.423 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1952.632 ns/op
                 ·gc.alloc.rate:      976.481 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1954.352 ns/op
                 ·gc.alloc.rate:      975.609 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1953.343 ns/op
                 ·gc.alloc.rate:      975.704 MB/sec
                 ·gc.alloc.rate.norm: 1000.011 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1831.574 ns/op
                 ·gc.alloc.rate:      1041.028 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  1929.292 ±(99.9%) 210.368 ns/op [Average]
  (min, avg, max) = (1831.574, 1929.292, 1954.561), stdev = 54.632
  CI (99.9%): [1718.924, 2139.660] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  988.849 ±(99.9%) 112.330 MB/sec [Average]
  (min, avg, max) = (975.423, 988.849, 1041.028), stdev = 29.172
  CI (99.9%): [876.519, 1101.179] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.011), stdev = 0.005
  CI (99.9%): [999.985, 1000.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.)

# Run progress: 93.64% complete, ETA 00:04:28
# Fork: 1 of 1
# Warmup Iteration   1: 2713.147 ns/op
# Warmup Iteration   2: 2056.494 ns/op
# Warmup Iteration   3: 2000.557 ns/op
# Warmup Iteration   4: 2043.103 ns/op
# Warmup Iteration   5: 1992.919 ns/op
Iteration   1: 1992.613 ns/op
                 ·gc.alloc.rate:      956.905 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 1991.488 ns/op
                 ·gc.alloc.rate:      957.204 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1991.546 ns/op
                 ·gc.alloc.rate:      957.354 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 1998.196 ns/op
                 ·gc.alloc.rate:      953.713 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 1874.298 ns/op
                 ·gc.alloc.rate:      1017.304 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  1969.628 ±(99.9%) 205.482 ns/op [Average]
  (min, avg, max) = (1874.298, 1969.628, 1998.196), stdev = 53.363
  CI (99.9%): [1764.146, 2175.110] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  968.496 ±(99.9%) 105.221 MB/sec [Average]
  (min, avg, max) = (953.713, 968.496, 1017.304), stdev = 27.326
  CI (99.9%): [863.275, 1073.717] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.985, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  25.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
  CI (99.9%): [25.000, 25.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = a.200.200)

# Run progress: 93.89% complete, ETA 00:04:18
# Fork: 1 of 1
# Warmup Iteration   1: 3790.945 ns/op
# Warmup Iteration   2: 2802.885 ns/op
# Warmup Iteration   3: 3020.908 ns/op
# Warmup Iteration   4: 2793.376 ns/op
# Warmup Iteration   5: 2781.996 ns/op
Iteration   1: 2790.410 ns/op
                 ·gc.alloc.rate:      825.453 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2790.759 ns/op
                 ·gc.alloc.rate:      825.179 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2785.635 ns/op
                 ·gc.alloc.rate:      826.725 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2876.080 ns/op
                 ·gc.alloc.rate:      800.664 MB/sec
                 ·gc.alloc.rate.norm: 1208.017 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2667.043 ns/op
                 ·gc.alloc.rate:      863.683 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  2781.986 ±(99.9%) 287.040 ns/op [Average]
  (min, avg, max) = (2667.043, 2781.986, 2876.080), stdev = 74.543
  CI (99.9%): [2494.946, 3069.025] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  828.341 ±(99.9%) 86.874 MB/sec [Average]
  (min, avg, max) = (800.664, 828.341, 863.683), stdev = 22.561
  CI (99.9%): [741.467, 915.215] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.027 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.017), stdev = 0.007
  CI (99.9%): [1207.978, 1208.031] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.a.200)

# Run progress: 94.13% complete, ETA 00:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 4209.628 ns/op
# Warmup Iteration   2: 2883.376 ns/op
# Warmup Iteration   3: 2782.075 ns/op
# Warmup Iteration   4: 2811.263 ns/op
# Warmup Iteration   5: 2769.736 ns/op
Iteration   1: 2765.097 ns/op
                 ·gc.alloc.rate:      832.944 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2772.193 ns/op
                 ·gc.alloc.rate:      830.737 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 2770.594 ns/op
                 ·gc.alloc.rate:      831.292 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2762.024 ns/op
                 ·gc.alloc.rate:      833.610 MB/sec
                 ·gc.alloc.rate.norm: 1208.016 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2663.376 ns/op
                 ·gc.alloc.rate:      864.632 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  2746.657 ±(99.9%) 179.963 ns/op [Average]
  (min, avg, max) = (2663.376, 2746.657, 2772.193), stdev = 46.736
  CI (99.9%): [2566.693, 2926.620] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  838.643 ±(99.9%) 56.125 MB/sec [Average]
  (min, avg, max) = (830.737, 838.643, 864.632), stdev = 14.576
  CI (99.9%): [782.518, 894.768] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.026 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.016), stdev = 0.007
  CI (99.9%): [1207.979, 1208.030] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.a)

# Run progress: 94.38% complete, ETA 00:03:57
# Fork: 1 of 1
# Warmup Iteration   1: 3580.244 ns/op
# Warmup Iteration   2: 2611.486 ns/op
# Warmup Iteration   3: 2606.587 ns/op
# Warmup Iteration   4: 2585.374 ns/op
# Warmup Iteration   5: 2586.573 ns/op
Iteration   1: 2581.716 ns/op
                 ·gc.alloc.rate:      892.212 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2585.710 ns/op
                 ·gc.alloc.rate:      890.706 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2588.082 ns/op
                 ·gc.alloc.rate:      889.935 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            2.000 ms

Iteration   4: 2590.890 ns/op
                 ·gc.alloc.rate:      888.627 MB/sec
                 ·gc.alloc.rate.norm: 1208.015 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2448.467 ns/op
                 ·gc.alloc.rate:      940.694 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  2558.973 ±(99.9%) 238.225 ns/op [Average]
  (min, avg, max) = (2448.467, 2558.973, 2590.890), stdev = 61.866
  CI (99.9%): [2320.748, 2797.198] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  900.435 ±(99.9%) 86.805 MB/sec [Average]
  (min, avg, max) = (888.627, 900.435, 940.694), stdev = 22.543
  CI (99.9%): [813.630, 987.239] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.024 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.015), stdev = 0.006
  CI (99.9%): [1207.980, 1208.028] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.200.200)

# Run progress: 94.62% complete, ETA 00:03:47
# Fork: 1 of 1
# Warmup Iteration   1: 3064.580 ns/op
# Warmup Iteration   2: 2144.009 ns/op
# Warmup Iteration   3: 2114.917 ns/op
# Warmup Iteration   4: 2107.558 ns/op
# Warmup Iteration   5: 2109.083 ns/op
Iteration   1: 2108.551 ns/op
                 ·gc.alloc.rate:      1005.647 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   2: 2106.301 ns/op
                 ·gc.alloc.rate:      1006.723 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2104.799 ns/op
                 ·gc.alloc.rate:      1007.261 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2173.851 ns/op
                 ·gc.alloc.rate:      975.018 MB/sec
                 ·gc.alloc.rate.norm: 1112.013 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1965.003 ns/op
                 ·gc.alloc.rate:      1078.194 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            5.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  2091.701 ±(99.9%) 294.955 ns/op [Average]
  (min, avg, max) = (1965.003, 2091.701, 2173.851), stdev = 76.599
  CI (99.9%): [1796.746, 2386.656] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  1014.569 ±(99.9%) 146.718 MB/sec [Average]
  (min, avg, max) = (975.018, 1014.569, 1078.194), stdev = 38.102
  CI (99.9%): [867.851, 1161.286] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  1112.003 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (1112.001, 1112.003, 1112.013), stdev = 0.005
  CI (99.9%): [1111.983, 1112.024] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.99999)

# Run progress: 94.87% complete, ETA 00:03:37
# Fork: 1 of 1
# Warmup Iteration   1: 307.478 ns/op
# Warmup Iteration   2: 203.956 ns/op
# Warmup Iteration   3: 192.950 ns/op
# Warmup Iteration   4: 193.154 ns/op
# Warmup Iteration   5: 193.534 ns/op
Iteration   1: 193.229 ns/op
                 ·gc.alloc.rate:      3631.238 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms

Iteration   2: 193.401 ns/op
                 ·gc.alloc.rate:      3627.598 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 193.990 ns/op
                 ·gc.alloc.rate:      3614.582 MB/sec
                 ·gc.alloc.rate.norm: 368.001 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms

Iteration   4: 192.752 ns/op
                 ·gc.alloc.rate:      3640.123 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 192.993 ns/op
                 ·gc.alloc.rate:      3635.323 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            12.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  193.273 ±(99.9%) 1.807 ns/op [Average]
  (min, avg, max) = (192.752, 193.273, 193.990), stdev = 0.469
  CI (99.9%): [191.466, 195.080] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3629.773 ±(99.9%) 37.312 MB/sec [Average]
  (min, avg, max) = (3614.582, 3629.773, 3640.123), stdev = 9.690
  CI (99.9%): [3592.461, 3667.085] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  368.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (368.000, 368.000, 368.001), stdev = 0.001
  CI (99.9%): [367.998, 368.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  125.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (25.000, 25.000, 25.000), stdev = 0.001
  CI (99.9%): [125.000, 125.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  58.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
  CI (99.9%): [58.000, 58.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.-200)

# Run progress: 95.11% complete, ETA 00:03:26
# Fork: 1 of 1
# Warmup Iteration   1: 294.811 ns/op
# Warmup Iteration   2: 203.172 ns/op
# Warmup Iteration   3: 197.292 ns/op
# Warmup Iteration   4: 196.301 ns/op
# Warmup Iteration   5: 196.618 ns/op
Iteration   1: 197.168 ns/op
                 ·gc.alloc.rate:      3713.971 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   2: 202.464 ns/op
                 ·gc.alloc.rate:      3616.098 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   3: 203.122 ns/op
                 ·gc.alloc.rate:      3604.848 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 196.745 ns/op
                 ·gc.alloc.rate:      3720.780 MB/sec
                 ·gc.alloc.rate.norm: 384.001 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 193.703 ns/op
                 ·gc.alloc.rate:      3779.818 MB/sec
                 ·gc.alloc.rate.norm: 384.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  198.641 ±(99.9%) 15.504 ns/op [Average]
  (min, avg, max) = (193.703, 198.641, 203.122), stdev = 4.026
  CI (99.9%): [183.137, 214.145] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3687.103 ±(99.9%) 287.252 MB/sec [Average]
  (min, avg, max) = (3604.848, 3687.103, 3779.818), stdev = 74.598
  CI (99.9%): [3399.851, 3974.355] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  384.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (384.000, 384.000, 384.001), stdev = 0.001
  CI (99.9%): [383.998, 384.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  111.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 22.200, 23.000), stdev = 0.837
  CI (99.9%): [111.000, 111.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  54.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.800, 12.000), stdev = 1.095
  CI (99.9%): [54.000, 54.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 1.0.0)

# Run progress: 95.35% complete, ETA 00:03:16
# Fork: 1 of 1
# Warmup Iteration   1: 290.229 ns/op
# Warmup Iteration   2: 165.179 ns/op
# Warmup Iteration   3: 156.875 ns/op
# Warmup Iteration   4: 156.762 ns/op
# Warmup Iteration   5: 160.528 ns/op
Iteration   1: 156.248 ns/op
                 ·gc.alloc.rate:      4100.486 MB/sec
                 ·gc.alloc.rate.norm: 336.000 B/op
                 ·gc.count:           25.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 156.420 ns/op
                 ·gc.alloc.rate:      4095.505 MB/sec
                 ·gc.alloc.rate.norm: 336.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 156.535 ns/op
                 ·gc.alloc.rate:      4092.844 MB/sec
                 ·gc.alloc.rate.norm: 336.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 161.449 ns/op
                 ·gc.alloc.rate:      3966.333 MB/sec
                 ·gc.alloc.rate.norm: 336.001 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            17.000 ms

Iteration   5: 158.128 ns/op
                 ·gc.alloc.rate:      4051.524 MB/sec
                 ·gc.alloc.rate.norm: 336.000 B/op
                 ·gc.count:           24.000 counts
                 ·gc.time:            18.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  157.756 ±(99.9%) 8.463 ns/op [Average]
  (min, avg, max) = (156.248, 157.756, 161.449), stdev = 2.198
  CI (99.9%): [149.293, 166.219] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  4061.339 ±(99.9%) 217.952 MB/sec [Average]
  (min, avg, max) = (3966.333, 4061.339, 4100.486), stdev = 56.601
  CI (99.9%): [3843.386, 4279.291] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  336.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (336.000, 336.000, 336.001), stdev = 0.001
  CI (99.9%): [335.999, 336.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  121.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (24.000, 24.200, 25.000), stdev = 0.447
  CI (99.9%): [121.000, 121.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  68.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 13.600, 18.000), stdev = 3.578
  CI (99.9%): [68.000, 68.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 200.200.200)

# Run progress: 95.60% complete, ETA 00:03:06
# Fork: 1 of 1
# Warmup Iteration   1: 298.612 ns/op
# Warmup Iteration   2: 189.365 ns/op
# Warmup Iteration   3: 183.977 ns/op
# Warmup Iteration   4: 194.670 ns/op
# Warmup Iteration   5: 183.394 ns/op
Iteration   1: 183.363 ns/op
                 ·gc.alloc.rate:      3826.637 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 183.685 ns/op
                 ·gc.alloc.rate:      3819.409 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 183.409 ns/op
                 ·gc.alloc.rate:      3825.769 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 183.440 ns/op
                 ·gc.alloc.rate:      3823.940 MB/sec
                 ·gc.alloc.rate.norm: 368.001 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 183.530 ns/op
                 ·gc.alloc.rate:      3823.141 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  183.485 ±(99.9%) 0.491 ns/op [Average]
  (min, avg, max) = (183.363, 183.485, 183.685), stdev = 0.127
  CI (99.9%): [182.995, 183.976] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3823.779 ±(99.9%) 10.833 MB/sec [Average]
  (min, avg, max) = (3819.409, 3823.779, 3826.637), stdev = 2.813
  CI (99.9%): [3812.946, 3834.612] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  368.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (368.000, 368.000, 368.001), stdev = 0.001
  CI (99.9%): [367.999, 368.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  115.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (23.000, 23.000, 23.000), stdev = 0.001
  CI (99.9%): [115.000, 115.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  52.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
  CI (99.9%): [52.000, 52.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 95.84% complete, ETA 00:02:55
# Fork: 1 of 1
# Warmup Iteration   1: 311.667 ns/op
# Warmup Iteration   2: 213.887 ns/op
# Warmup Iteration   3: 209.515 ns/op
# Warmup Iteration   4: 210.074 ns/op
# Warmup Iteration   5: 213.259 ns/op
Iteration   1: 209.584 ns/op
                 ·gc.alloc.rate:      3348.009 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 209.517 ns/op
                 ·gc.alloc.rate:      3348.792 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 209.614 ns/op
                 ·gc.alloc.rate:      3347.198 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 209.674 ns/op
                 ·gc.alloc.rate:      3345.132 MB/sec
                 ·gc.alloc.rate.norm: 368.001 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 209.348 ns/op
                 ·gc.alloc.rate:      3351.701 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  209.547 ±(99.9%) 0.481 ns/op [Average]
  (min, avg, max) = (209.348, 209.547, 209.674), stdev = 0.125
  CI (99.9%): [209.067, 210.028] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3348.167 ±(99.9%) 9.245 MB/sec [Average]
  (min, avg, max) = (3345.132, 3348.167, 3351.701), stdev = 2.401
  CI (99.9%): [3338.921, 3357.412] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  368.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (368.000, 368.000, 368.001), stdev = 0.001
  CI (99.9%): [367.998, 368.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  115.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (23.000, 23.000, 23.000), stdev = 0.001
  CI (99.9%): [115.000, 115.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  57.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 11.400, 12.000), stdev = 0.548
  CI (99.9%): [57.000, 57.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 96.09% complete, ETA 00:02:45
# Fork: 1 of 1
# Warmup Iteration   1: 297.663 ns/op
# Warmup Iteration   2: 216.824 ns/op
# Warmup Iteration   3: 210.388 ns/op
# Warmup Iteration   4: 210.120 ns/op
# Warmup Iteration   5: 210.382 ns/op
Iteration   1: 209.595 ns/op
                 ·gc.alloc.rate:      3347.524 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   2: 209.419 ns/op
                 ·gc.alloc.rate:      3350.278 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   3: 209.605 ns/op
                 ·gc.alloc.rate:      3346.796 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 209.607 ns/op
                 ·gc.alloc.rate:      3346.216 MB/sec
                 ·gc.alloc.rate.norm: 368.001 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            12.000 ms

Iteration   5: 210.460 ns/op
                 ·gc.alloc.rate:      3333.467 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            13.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry":
  209.737 ±(99.9%) 1.586 ns/op [Average]
  (min, avg, max) = (209.419, 209.737, 210.460), stdev = 0.412
  CI (99.9%): [208.151, 211.324] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate":
  3344.856 ±(99.9%) 25.238 MB/sec [Average]
  (min, avg, max) = (3333.467, 3344.856, 3350.278), stdev = 6.554
  CI (99.9%): [3319.619, 3370.094] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm":
  368.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (368.000, 368.000, 368.001), stdev = 0.001
  CI (99.9%): [367.998, 368.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count":
  115.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (23.000, 23.000, 23.000), stdev = 0.001
  CI (99.9%): [115.000, 115.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time":
  59.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (11.000, 11.800, 13.000), stdev = 0.837
  CI (99.9%): [59.000, 59.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = )

# Run progress: 96.33% complete, ETA 00:02:35
# Fork: 1 of 1
# Warmup Iteration   1: 2986.942 ns/op
# Warmup Iteration   2: 2449.085 ns/op
# Warmup Iteration   3: 2435.657 ns/op
# Warmup Iteration   4: 2405.036 ns/op
# Warmup Iteration   5: 2404.869 ns/op
Iteration   1: 2396.129 ns/op
                 ·gc.alloc.rate:      770.247 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2392.013 ns/op
                 ·gc.alloc.rate:      771.563 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2381.860 ns/op
                 ·gc.alloc.rate:      774.889 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2387.432 ns/op
                 ·gc.alloc.rate:      772.654 MB/sec
                 ·gc.alloc.rate.norm: 968.014 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            2.000 ms

Iteration   5: 2280.085 ns/op
                 ·gc.alloc.rate:      809.359 MB/sec
                 ·gc.alloc.rate.norm: 968.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2367.504 ±(99.9%) 189.284 ns/op [Average]
  (min, avg, max) = (2280.085, 2367.504, 2396.129), stdev = 49.156
  CI (99.9%): [2178.220, 2556.788] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  779.742 ±(99.9%) 64.088 MB/sec [Average]
  (min, avg, max) = (770.247, 779.742, 809.359), stdev = 16.644
  CI (99.9%): [715.654, 843.831] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  968.004 ±(99.9%) 0.022 B/op [Average]
  (min, avg, max) = (968.001, 968.004, 968.014), stdev = 0.006
  CI (99.9%): [967.982, 968.026] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  27.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200)

# Run progress: 96.58% complete, ETA 00:02:24
# Fork: 1 of 1
# Warmup Iteration   1: 2294.422 ns/op
# Warmup Iteration   2: 1825.293 ns/op
# Warmup Iteration   3: 1815.666 ns/op
# Warmup Iteration   4: 1809.985 ns/op
# Warmup Iteration   5: 1808.707 ns/op
Iteration   1: 1807.222 ns/op
                 ·gc.alloc.rate:      869.394 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 1805.193 ns/op
                 ·gc.alloc.rate:      870.213 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 1811.834 ns/op
                 ·gc.alloc.rate:      867.095 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 1865.867 ns/op
                 ·gc.alloc.rate:      841.747 MB/sec
                 ·gc.alloc.rate.norm: 824.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1689.871 ns/op
                 ·gc.alloc.rate:      929.766 MB/sec
                 ·gc.alloc.rate.norm: 824.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1795.998 ±(99.9%) 248.105 ns/op [Average]
  (min, avg, max) = (1689.871, 1795.998, 1865.867), stdev = 64.432
  CI (99.9%): [1547.892, 2044.103] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  875.643 ±(99.9%) 125.070 MB/sec [Average]
  (min, avg, max) = (841.747, 875.643, 929.766), stdev = 32.480
  CI (99.9%): [750.573, 1000.713] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  824.003 ±(99.9%) 0.017 B/op [Average]
  (min, avg, max) = (824.001, 824.003, 824.011), stdev = 0.005
  CI (99.9%): [823.985, 824.020] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.)

# Run progress: 96.82% complete, ETA 00:02:14
# Fork: 1 of 1
# Warmup Iteration   1: 2683.128 ns/op
# Warmup Iteration   2: 1958.913 ns/op
# Warmup Iteration   3: 1932.415 ns/op
# Warmup Iteration   4: 1924.344 ns/op
# Warmup Iteration   5: 1967.115 ns/op
Iteration   1: 1924.094 ns/op
                 ·gc.alloc.rate:      943.337 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1922.216 ns/op
                 ·gc.alloc.rate:      944.073 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2003.588 ns/op
                 ·gc.alloc.rate:      905.834 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1919.082 ns/op
                 ·gc.alloc.rate:      945.555 MB/sec
                 ·gc.alloc.rate.norm: 952.011 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1799.506 ns/op
                 ·gc.alloc.rate:      1008.709 MB/sec
                 ·gc.alloc.rate.norm: 952.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1913.697 ±(99.9%) 281.187 ns/op [Average]
  (min, avg, max) = (1799.506, 1913.697, 2003.588), stdev = 73.023
  CI (99.9%): [1632.510, 2194.884] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  949.502 ±(99.9%) 142.727 MB/sec [Average]
  (min, avg, max) = (905.834, 949.502, 1008.709), stdev = 37.066
  CI (99.9%): [806.775, 1092.229] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  952.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (952.001, 952.003, 952.011), stdev = 0.005
  CI (99.9%): [951.985, 952.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200)

# Run progress: 97.07% complete, ETA 00:02:04
# Fork: 1 of 1
# Warmup Iteration   1: 2627.964 ns/op
# Warmup Iteration   2: 1988.197 ns/op
# Warmup Iteration   3: 1974.265 ns/op
# Warmup Iteration   4: 1964.898 ns/op
# Warmup Iteration   5: 1961.961 ns/op
Iteration   1: 1958.933 ns/op
                 ·gc.alloc.rate:      973.389 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 1958.935 ns/op
                 ·gc.alloc.rate:      973.294 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 1957.377 ns/op
                 ·gc.alloc.rate:      973.372 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 1959.167 ns/op
                 ·gc.alloc.rate:      972.822 MB/sec
                 ·gc.alloc.rate.norm: 1000.011 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1833.128 ns/op
                 ·gc.alloc.rate:      1040.082 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1933.508 ±(99.9%) 216.093 ns/op [Average]
  (min, avg, max) = (1833.128, 1933.508, 1959.167), stdev = 56.119
  CI (99.9%): [1717.415, 2149.601] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  986.592 ±(99.9%) 115.145 MB/sec [Average]
  (min, avg, max) = (972.822, 986.592, 1040.082), stdev = 29.903
  CI (99.9%): [871.447, 1101.736] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.011), stdev = 0.005
  CI (99.9%): [999.985, 1000.021] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.)

# Run progress: 97.31% complete, ETA 00:01:53
# Fork: 1 of 1
# Warmup Iteration   1: 2741.938 ns/op
# Warmup Iteration   2: 2021.212 ns/op
# Warmup Iteration   3: 2004.410 ns/op
# Warmup Iteration   4: 1987.074 ns/op
# Warmup Iteration   5: 1992.459 ns/op
Iteration   1: 1990.876 ns/op
                 ·gc.alloc.rate:      957.720 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 1991.383 ns/op
                 ·gc.alloc.rate:      957.342 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   3: 1988.305 ns/op
                 ·gc.alloc.rate:      958.986 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 1989.145 ns/op
                 ·gc.alloc.rate:      958.209 MB/sec
                 ·gc.alloc.rate.norm: 1000.012 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 1865.812 ns/op
                 ·gc.alloc.rate:      1021.930 MB/sec
                 ·gc.alloc.rate.norm: 1000.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  1965.104 ±(99.9%) 213.788 ns/op [Average]
  (min, avg, max) = (1865.812, 1965.104, 1991.383), stdev = 55.520
  CI (99.9%): [1751.316, 2178.892] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  970.837 ±(99.9%) 110.006 MB/sec [Average]
  (min, avg, max) = (957.342, 970.837, 1021.930), stdev = 28.568
  CI (99.9%): [860.832, 1080.843] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1000.003 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (1000.001, 1000.003, 1000.012), stdev = 0.005
  CI (99.9%): [999.985, 1000.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  33.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
  CI (99.9%): [33.000, 33.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  22.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = a.200.200)

# Run progress: 97.56% complete, ETA 00:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 3458.824 ns/op
# Warmup Iteration   2: 2567.203 ns/op
# Warmup Iteration   3: 2580.588 ns/op
# Warmup Iteration   4: 2561.874 ns/op
# Warmup Iteration   5: 2559.399 ns/op
Iteration   1: 2555.534 ns/op
                 ·gc.alloc.rate:      901.345 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2632.515 ns/op
                 ·gc.alloc.rate:      874.895 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2548.652 ns/op
                 ·gc.alloc.rate:      903.599 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 2551.647 ns/op
                 ·gc.alloc.rate:      902.312 MB/sec
                 ·gc.alloc.rate.norm: 1208.015 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2444.570 ns/op
                 ·gc.alloc.rate:      942.147 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2546.583 ±(99.9%) 257.598 ns/op [Average]
  (min, avg, max) = (2444.570, 2546.583, 2632.515), stdev = 66.897
  CI (99.9%): [2288.985, 2804.181] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  904.859 ±(99.9%) 92.508 MB/sec [Average]
  (min, avg, max) = (874.895, 904.859, 942.147), stdev = 24.024
  CI (99.9%): [812.351, 997.368] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.024 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.015), stdev = 0.006
  CI (99.9%): [1207.980, 1208.027] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.a.200)

# Run progress: 97.80% complete, ETA 00:01:33
# Fork: 1 of 1
# Warmup Iteration   1: 3817.350 ns/op
# Warmup Iteration   2: 2867.195 ns/op
# Warmup Iteration   3: 2956.993 ns/op
# Warmup Iteration   4: 2854.901 ns/op
# Warmup Iteration   5: 2840.502 ns/op
Iteration   1: 2849.828 ns/op
                 ·gc.alloc.rate:      808.176 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2846.438 ns/op
                 ·gc.alloc.rate:      808.964 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2843.587 ns/op
                 ·gc.alloc.rate:      809.876 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2844.559 ns/op
                 ·gc.alloc.rate:      809.446 MB/sec
                 ·gc.alloc.rate.norm: 1208.017 B/op
                 ·gc.count:           5.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 2729.201 ns/op
                 ·gc.alloc.rate:      843.844 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2822.723 ±(99.9%) 201.522 ns/op [Average]
  (min, avg, max) = (2729.201, 2822.723, 2849.828), stdev = 52.335
  CI (99.9%): [2621.200, 3024.245] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  816.061 ±(99.9%) 59.854 MB/sec [Average]
  (min, avg, max) = (808.176, 816.061, 843.844), stdev = 15.544
  CI (99.9%): [756.207, 875.915] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.026 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.017), stdev = 0.007
  CI (99.9%): [1207.978, 1208.031] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  28.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.a)

# Run progress: 98.04% complete, ETA 00:01:22
# Fork: 1 of 1
# Warmup Iteration   1: 3938.813 ns/op
# Warmup Iteration   2: 2650.213 ns/op
# Warmup Iteration   3: 2636.422 ns/op
# Warmup Iteration   4: 2619.036 ns/op
# Warmup Iteration   5: 2611.086 ns/op
Iteration   1: 2614.213 ns/op
                 ·gc.alloc.rate:      881.067 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2618.768 ns/op
                 ·gc.alloc.rate:      879.510 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2611.296 ns/op
                 ·gc.alloc.rate:      882.046 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2616.824 ns/op
                 ·gc.alloc.rate:      879.973 MB/sec
                 ·gc.alloc.rate.norm: 1208.015 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms

Iteration   5: 2494.133 ns/op
                 ·gc.alloc.rate:      923.451 MB/sec
                 ·gc.alloc.rate.norm: 1208.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            3.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2591.047 ±(99.9%) 208.895 ns/op [Average]
  (min, avg, max) = (2494.133, 2591.047, 2618.768), stdev = 54.249
  CI (99.9%): [2382.153, 2799.942] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  889.210 ±(99.9%) 73.806 MB/sec [Average]
  (min, avg, max) = (879.510, 889.210, 923.451), stdev = 19.167
  CI (99.9%): [815.404, 963.015] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1208.004 ±(99.9%) 0.024 B/op [Average]
  (min, avg, max) = (1208.001, 1208.004, 1208.015), stdev = 0.006
  CI (99.9%): [1207.980, 1208.028] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.200.200)

# Run progress: 98.29% complete, ETA 00:01:12
# Fork: 1 of 1
# Warmup Iteration   1: 3078.200 ns/op
# Warmup Iteration   2: 2089.748 ns/op
# Warmup Iteration   3: 2075.700 ns/op
# Warmup Iteration   4: 2067.802 ns/op
# Warmup Iteration   5: 2063.218 ns/op
Iteration   1: 2062.965 ns/op
                 ·gc.alloc.rate:      1027.730 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   2: 2062.870 ns/op
                 ·gc.alloc.rate:      1027.836 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   3: 2064.263 ns/op
                 ·gc.alloc.rate:      1027.118 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   4: 2063.500 ns/op
                 ·gc.alloc.rate:      1027.108 MB/sec
                 ·gc.alloc.rate.norm: 1112.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1945.369 ns/op
                 ·gc.alloc.rate:      1089.967 MB/sec
                 ·gc.alloc.rate.norm: 1112.001 B/op
                 ·gc.count:           8.000 counts
                 ·gc.time:            6.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2039.793 ±(99.9%) 203.268 ns/op [Average]
  (min, avg, max) = (1945.369, 2039.793, 2064.263), stdev = 52.788
  CI (99.9%): [1836.526, 2243.061] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  1039.952 ±(99.9%) 107.670 MB/sec [Average]
  (min, avg, max) = (1027.108, 1039.952, 1089.967), stdev = 27.962
  CI (99.9%): [932.282, 1147.622] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1112.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1112.001, 1112.003, 1112.012), stdev = 0.005
  CI (99.9%): [1111.984, 1112.022] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  36.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
  CI (99.9%): [36.000, 36.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  20.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
  CI (99.9%): [20.000, 20.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.99999)

# Run progress: 98.53% complete, ETA 00:01:02
# Fork: 1 of 1
# Warmup Iteration   1: 3160.109 ns/op
# Warmup Iteration   2: 2123.967 ns/op
# Warmup Iteration   3: 2103.296 ns/op
# Warmup Iteration   4: 2094.086 ns/op
# Warmup Iteration   5: 2093.031 ns/op
Iteration   1: 2090.420 ns/op
                 ·gc.alloc.rate:      992.388 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   2: 2096.526 ns/op
                 ·gc.alloc.rate:      989.407 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            5.000 ms

Iteration   3: 2091.448 ns/op
                 ·gc.alloc.rate:      991.841 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           6.000 counts
                 ·gc.time:            5.000 ms

Iteration   4: 2092.660 ns/op
                 ·gc.alloc.rate:      990.832 MB/sec
                 ·gc.alloc.rate.norm: 1088.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            6.000 ms

Iteration   5: 1974.764 ns/op
                 ·gc.alloc.rate:      1050.510 MB/sec
                 ·gc.alloc.rate.norm: 1088.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2069.164 ±(99.9%) 203.397 ns/op [Average]
  (min, avg, max) = (1974.764, 2069.164, 2096.526), stdev = 52.821
  CI (99.9%): [1865.767, 2272.561] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  1002.996 ±(99.9%) 102.372 MB/sec [Average]
  (min, avg, max) = (989.407, 1002.996, 1050.510), stdev = 26.586
  CI (99.9%): [900.624, 1105.368] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1088.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1088.001, 1088.003, 1088.012), stdev = 0.005
  CI (99.9%): [1087.984, 1088.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  34.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  26.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
  CI (99.9%): [26.000, 26.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.-200)

# Run progress: 98.78% complete, ETA 00:00:51
# Fork: 1 of 1
# Warmup Iteration   1: 2908.207 ns/op
# Warmup Iteration   2: 2141.398 ns/op
# Warmup Iteration   3: 2110.165 ns/op
# Warmup Iteration   4: 2100.779 ns/op
# Warmup Iteration   5: 2104.877 ns/op
Iteration   1: 2100.679 ns/op
                 ·gc.alloc.rate:      1002.064 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   2: 2100.975 ns/op
                 ·gc.alloc.rate:      1001.915 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            3.000 ms

Iteration   3: 2103.145 ns/op
                 ·gc.alloc.rate:      1000.862 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   4: 2101.565 ns/op
                 ·gc.alloc.rate:      1001.167 MB/sec
                 ·gc.alloc.rate.norm: 1104.012 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms

Iteration   5: 1984.383 ns/op
                 ·gc.alloc.rate:      1060.710 MB/sec
                 ·gc.alloc.rate.norm: 1104.001 B/op
                 ·gc.count:           7.000 counts
                 ·gc.time:            4.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  2078.150 ±(99.9%) 201.873 ns/op [Average]
  (min, avg, max) = (1984.383, 2078.150, 2103.145), stdev = 52.426
  CI (99.9%): [1876.276, 2280.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  1013.343 ±(99.9%) 101.977 MB/sec [Average]
  (min, avg, max) = (1000.862, 1013.343, 1060.710), stdev = 26.483
  CI (99.9%): [911.366, 1115.321] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  1104.003 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (1104.001, 1104.003, 1104.012), stdev = 0.005
  CI (99.9%): [1103.984, 1104.023] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  35.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
  CI (99.9%): [35.000, 35.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 1.0.0)

# Run progress: 99.02% complete, ETA 00:00:41
# Fork: 1 of 1
# Warmup Iteration   1: 267.699 ns/op
# Warmup Iteration   2: 173.598 ns/op
# Warmup Iteration   3: 171.313 ns/op
# Warmup Iteration   4: 171.407 ns/op
# Warmup Iteration   5: 175.743 ns/op
Iteration   1: 170.914 ns/op
                 ·gc.alloc.rate:      3748.568 MB/sec
                 ·gc.alloc.rate.norm: 336.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 182.075 ns/op
                 ·gc.alloc.rate:      3518.699 MB/sec
                 ·gc.alloc.rate.norm: 336.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            10.000 ms

Iteration   3: 170.981 ns/op
                 ·gc.alloc.rate:      3746.750 MB/sec
                 ·gc.alloc.rate.norm: 336.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 176.001 ns/op
                 ·gc.alloc.rate:      3638.687 MB/sec
                 ·gc.alloc.rate.norm: 336.001 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 171.045 ns/op
                 ·gc.alloc.rate:      3745.317 MB/sec
                 ·gc.alloc.rate.norm: 336.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            10.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  174.203 ±(99.9%) 18.900 ns/op [Average]
  (min, avg, max) = (170.914, 174.203, 182.075), stdev = 4.908
  CI (99.9%): [155.303, 193.103] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  3679.604 ±(99.9%) 390.548 MB/sec [Average]
  (min, avg, max) = (3518.699, 3679.604, 3748.568), stdev = 101.424
  CI (99.9%): [3289.056, 4070.152] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  336.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (336.000, 336.000, 336.001), stdev = 0.001
  CI (99.9%): [335.999, 336.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  99.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (19.000, 19.800, 20.000), stdev = 0.447
  CI (99.9%): [99.000, 99.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  52.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
  CI (99.9%): [52.000, 52.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 200.200.200)

# Run progress: 99.27% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 310.544 ns/op
# Warmup Iteration   2: 191.686 ns/op
# Warmup Iteration   3: 186.118 ns/op
# Warmup Iteration   4: 186.416 ns/op
# Warmup Iteration   5: 185.918 ns/op
Iteration   1: 186.021 ns/op
                 ·gc.alloc.rate:      3771.823 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            10.000 ms

Iteration   2: 186.333 ns/op
                 ·gc.alloc.rate:      3765.205 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            11.000 ms

Iteration   3: 196.136 ns/op
                 ·gc.alloc.rate:      3576.893 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            11.000 ms

Iteration   4: 187.112 ns/op
                 ·gc.alloc.rate:      3748.144 MB/sec
                 ·gc.alloc.rate.norm: 368.001 B/op
                 ·gc.count:           23.000 counts
                 ·gc.time:            13.000 ms

Iteration   5: 186.751 ns/op
                 ·gc.alloc.rate:      3756.873 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           22.000 counts
                 ·gc.time:            11.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  188.471 ±(99.9%) 16.577 ns/op [Average]
  (min, avg, max) = (186.021, 188.471, 196.136), stdev = 4.305
  CI (99.9%): [171.894, 205.047] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  3723.787 ±(99.9%) 318.050 MB/sec [Average]
  (min, avg, max) = (3576.893, 3723.787, 3771.823), stdev = 82.597
  CI (99.9%): [3405.738, 4041.837] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  368.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (368.000, 368.000, 368.001), stdev = 0.001
  CI (99.9%): [367.999, 368.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  111.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (21.000, 22.200, 23.000), stdev = 0.837
  CI (99.9%): [111.000, 111.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  56.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (10.000, 11.200, 13.000), stdev = 1.095
  CI (99.9%): [56.000, 56.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 10000.9876.5432)

# Run progress: 99.51% complete, ETA 00:00:20
# Fork: 1 of 1
# Warmup Iteration   1: 329.754 ns/op
# Warmup Iteration   2: 207.852 ns/op
# Warmup Iteration   3: 204.381 ns/op
# Warmup Iteration   4: 212.276 ns/op
# Warmup Iteration   5: 204.421 ns/op
Iteration   1: 237.180 ns/op
                 ·gc.alloc.rate:      2958.380 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           18.000 counts
                 ·gc.time:            15.000 ms

Iteration   2: 219.549 ns/op
                 ·gc.alloc.rate:      3195.858 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            14.000 ms

Iteration   3: 203.559 ns/op
                 ·gc.alloc.rate:      3446.533 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            10.000 ms

Iteration   4: 203.414 ns/op
                 ·gc.alloc.rate:      3448.139 MB/sec
                 ·gc.alloc.rate.norm: 368.001 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   5: 208.254 ns/op
                 ·gc.alloc.rate:      3369.005 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           21.000 counts
                 ·gc.time:            9.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  214.391 ±(99.9%) 55.180 ns/op [Average]
  (min, avg, max) = (203.414, 214.391, 237.180), stdev = 14.330
  CI (99.9%): [159.211, 269.571] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  3283.583 ±(99.9%) 803.994 MB/sec [Average]
  (min, avg, max) = (2958.380, 3283.583, 3448.139), stdev = 208.795
  CI (99.9%): [2479.589, 4087.577] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  368.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (368.000, 368.000, 368.001), stdev = 0.001
  CI (99.9%): [367.998, 368.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  99.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (18.000, 19.800, 21.000), stdev = 1.304
  CI (99.9%): [99.000, 99.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  57.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (9.000, 11.400, 15.000), stdev = 2.881
  CI (99.9%): [57.000, 57.000] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 17.0.8.1, OpenJDK 64-Bit Server VM, 17.0.8.1+1-Ubuntu-0ubuntu122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx1G
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 5 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry
# Parameters: (encoded = 10000.10000.10000)

# Run progress: 99.76% complete, ETA 00:00:10
# Fork: 1 of 1
# Warmup Iteration   1: 341.127 ns/op
# Warmup Iteration   2: 220.962 ns/op
# Warmup Iteration   3: 213.164 ns/op
# Warmup Iteration   4: 213.208 ns/op
# Warmup Iteration   5: 214.446 ns/op
Iteration   1: 213.725 ns/op
                 ·gc.alloc.rate:      3283.174 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            8.000 ms

Iteration   2: 213.928 ns/op
                 ·gc.alloc.rate:      3279.940 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            10.000 ms

Iteration   3: 214.242 ns/op
                 ·gc.alloc.rate:      3274.993 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            9.000 ms

Iteration   4: 214.505 ns/op
                 ·gc.alloc.rate:      3269.681 MB/sec
                 ·gc.alloc.rate.norm: 368.001 B/op
                 ·gc.count:           19.000 counts
                 ·gc.time:            11.000 ms

Iteration   5: 215.010 ns/op
                 ·gc.alloc.rate:      3263.461 MB/sec
                 ·gc.alloc.rate.norm: 368.000 B/op
                 ·gc.count:           20.000 counts
                 ·gc.time:            12.000 ms



Result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry":
  214.282 ±(99.9%) 1.941 ns/op [Average]
  (min, avg, max) = (213.725, 214.282, 215.010), stdev = 0.504
  CI (99.9%): [212.341, 216.223] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate":
  3274.250 ±(99.9%) 30.432 MB/sec [Average]
  (min, avg, max) = (3263.461, 3274.250, 3283.174), stdev = 7.903
  CI (99.9%): [3243.817, 3304.682] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm":
  368.000 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (368.000, 368.000, 368.001), stdev = 0.001
  CI (99.9%): [367.998, 368.002] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.count":
  98.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (19.000, 19.600, 20.000), stdev = 0.548
  CI (99.9%): [98.000, 98.000] (assumes normal distribution)

Secondary result "com.komanov.ver.jmh.VersionParseNoAllocBenchmark.yoloNoTry:·gc.time":
  50.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 10.000, 12.000), stdev = 1.581
  CI (99.9%): [50.000, 50.000] (assumes normal distribution)


# Run complete. Total time: 01:10:28

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                                                        (encoded)  Mode  Cnt     Score      Error   Units
IsNumberBenchmark.isNumber                                                           1.0.0  avgt    5    17.833 ±    0.804   ns/op
IsNumberBenchmark.isNumber:·gc.alloc.rate                                            1.0.0  avgt    5     0.003 ±    0.018  MB/sec
IsNumberBenchmark.isNumber:·gc.alloc.rate.norm                                       1.0.0  avgt    5    ≈ 10⁻⁵               B/op
IsNumberBenchmark.isNumber:·gc.count                                                 1.0.0  avgt    5       ≈ 0             counts
IsNumberBenchmark.isNumber                                                     200.200.200  avgt    5    26.206 ±    0.463   ns/op
IsNumberBenchmark.isNumber:·gc.alloc.rate                                      200.200.200  avgt    5     0.003 ±    0.018  MB/sec
IsNumberBenchmark.isNumber:·gc.alloc.rate.norm                                 200.200.200  avgt    5    ≈ 10⁻⁴               B/op
IsNumberBenchmark.isNumber:·gc.count                                           200.200.200  avgt    5       ≈ 0             counts
IsNumberBenchmark.isNumber                                               10000.10000.10000  avgt    5    29.716 ±    0.062   ns/op
IsNumberBenchmark.isNumber:·gc.alloc.rate                                10000.10000.10000  avgt    5     0.003 ±    0.018  MB/sec
IsNumberBenchmark.isNumber:·gc.alloc.rate.norm                           10000.10000.10000  avgt    5    ≈ 10⁻⁴               B/op
IsNumberBenchmark.isNumber:·gc.count                                     10000.10000.10000  avgt    5       ≈ 0             counts
IsNumberBenchmark.isNumber2                                                          1.0.0  avgt    5    17.942 ±    1.011   ns/op
IsNumberBenchmark.isNumber2:·gc.alloc.rate                                           1.0.0  avgt    5     0.003 ±    0.018  MB/sec
IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm                                      1.0.0  avgt    5    ≈ 10⁻⁵               B/op
IsNumberBenchmark.isNumber2:·gc.count                                                1.0.0  avgt    5       ≈ 0             counts
IsNumberBenchmark.isNumber2                                                    200.200.200  avgt    5    26.153 ±    0.071   ns/op
IsNumberBenchmark.isNumber2:·gc.alloc.rate                                     200.200.200  avgt    5     0.003 ±    0.018  MB/sec
IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm                                200.200.200  avgt    5    ≈ 10⁻⁴               B/op
IsNumberBenchmark.isNumber2:·gc.count                                          200.200.200  avgt    5       ≈ 0             counts
IsNumberBenchmark.isNumber2                                              10000.10000.10000  avgt    5    29.866 ±    0.216   ns/op
IsNumberBenchmark.isNumber2:·gc.alloc.rate                               10000.10000.10000  avgt    5     0.003 ±    0.018  MB/sec
IsNumberBenchmark.isNumber2:·gc.alloc.rate.norm                          10000.10000.10000  avgt    5    ≈ 10⁻⁴               B/op
IsNumberBenchmark.isNumber2:·gc.count                                    10000.10000.10000  avgt    5       ≈ 0             counts
IsNumberBenchmark.isNumber3                                                          1.0.0  avgt    5    16.741 ±    0.362   ns/op
IsNumberBenchmark.isNumber3:·gc.alloc.rate                                           1.0.0  avgt    5     0.003 ±    0.018  MB/sec
IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm                                      1.0.0  avgt    5    ≈ 10⁻⁵               B/op
IsNumberBenchmark.isNumber3:·gc.count                                                1.0.0  avgt    5       ≈ 0             counts
IsNumberBenchmark.isNumber3                                                    200.200.200  avgt    5    24.182 ±    0.898   ns/op
IsNumberBenchmark.isNumber3:·gc.alloc.rate                                     200.200.200  avgt    5     0.003 ±    0.018  MB/sec
IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm                                200.200.200  avgt    5    ≈ 10⁻⁴               B/op
IsNumberBenchmark.isNumber3:·gc.count                                          200.200.200  avgt    5       ≈ 0             counts
IsNumberBenchmark.isNumber3                                              10000.10000.10000  avgt    5    27.623 ±    2.138   ns/op
IsNumberBenchmark.isNumber3:·gc.alloc.rate                               10000.10000.10000  avgt    5     0.003 ±    0.018  MB/sec
IsNumberBenchmark.isNumber3:·gc.alloc.rate.norm                          10000.10000.10000  avgt    5    ≈ 10⁻⁴               B/op
IsNumberBenchmark.isNumber3:·gc.count                                    10000.10000.10000  avgt    5       ≈ 0             counts
VersionNoAllocConvertBenchmark.generic                                                      avgt    5     1.185 ±    0.011   ns/op
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate                                       avgt    5     0.003 ±    0.018  MB/sec
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm                                  avgt    5    ≈ 10⁻⁶               B/op
VersionNoAllocConvertBenchmark.generic:·gc.count                                            avgt    5       ≈ 0             counts
VersionNoAllocConvertBenchmark.generic                                               0.0.0  avgt    5     9.680 ±    1.561   ns/op
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate                                0.0.0  avgt    5  7888.932 ± 1255.535  MB/sec
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm                           0.0.0  avgt    5    40.000 ±    0.001    B/op
VersionNoAllocConvertBenchmark.generic:·gc.count                                     0.0.0  avgt    5   184.000             counts
VersionNoAllocConvertBenchmark.generic:·gc.time                                      0.0.0  avgt    5   103.000                 ms
VersionNoAllocConvertBenchmark.generic                                               1.0.0  avgt    5     9.553 ±    0.663   ns/op
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate                                1.0.0  avgt    5  7984.353 ±  559.639  MB/sec
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm                           1.0.0  avgt    5    40.000 ±    0.001    B/op
VersionNoAllocConvertBenchmark.generic:·gc.count                                     1.0.0  avgt    5   186.000             counts
VersionNoAllocConvertBenchmark.generic:·gc.time                                      1.0.0  avgt    5    98.000                 ms
VersionNoAllocConvertBenchmark.generic                                         200.200.200  avgt    5     9.518 ±    1.484   ns/op
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate                          200.200.200  avgt    5  8033.103 ± 1099.181  MB/sec
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm                     200.200.200  avgt    5    40.000 ±    0.001    B/op
VersionNoAllocConvertBenchmark.generic:·gc.count                               200.200.200  avgt    5   177.000             counts
VersionNoAllocConvertBenchmark.generic:·gc.time                                200.200.200  avgt    5   101.000                 ms
VersionNoAllocConvertBenchmark.generic                                   10000.10000.10000  avgt    5     9.464 ±    1.175   ns/op
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate                    10000.10000.10000  avgt    5  8062.569 ±  972.745  MB/sec
VersionNoAllocConvertBenchmark.generic:·gc.alloc.rate.norm               10000.10000.10000  avgt    5    40.000 ±    0.001    B/op
VersionNoAllocConvertBenchmark.generic:·gc.count                         10000.10000.10000  avgt    5   185.000             counts
VersionNoAllocConvertBenchmark.generic:·gc.time                          10000.10000.10000  avgt    5   102.000                 ms
VersionNoAllocConvertBenchmark.inlined                                                      avgt    5     1.184 ±    0.007   ns/op
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate                                       avgt    5     0.003 ±    0.018  MB/sec
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm                                  avgt    5    ≈ 10⁻⁶               B/op
VersionNoAllocConvertBenchmark.inlined:·gc.count                                            avgt    5       ≈ 0             counts
VersionNoAllocConvertBenchmark.inlined                                               0.0.0  avgt    5     9.422 ±    0.908   ns/op
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate                                0.0.0  avgt    5  8097.275 ±  762.730  MB/sec
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm                           0.0.0  avgt    5    40.000 ±    0.001    B/op
VersionNoAllocConvertBenchmark.inlined:·gc.count                                     0.0.0  avgt    5   191.000             counts
VersionNoAllocConvertBenchmark.inlined:·gc.time                                      0.0.0  avgt    5   102.000                 ms
VersionNoAllocConvertBenchmark.inlined                                               1.0.0  avgt    5     9.465 ±    0.516   ns/op
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate                                1.0.0  avgt    5  8056.660 ±  439.698  MB/sec
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm                           1.0.0  avgt    5    40.000 ±    0.001    B/op
VersionNoAllocConvertBenchmark.inlined:·gc.count                                     1.0.0  avgt    5   181.000             counts
VersionNoAllocConvertBenchmark.inlined:·gc.time                                      1.0.0  avgt    5   102.000                 ms
VersionNoAllocConvertBenchmark.inlined                                         200.200.200  avgt    5     9.478 ±    1.095   ns/op
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate                          200.200.200  avgt    5  8051.818 ±  893.401  MB/sec
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm                     200.200.200  avgt    5    40.000 ±    0.001    B/op
VersionNoAllocConvertBenchmark.inlined:·gc.count                               200.200.200  avgt    5   180.000             counts
VersionNoAllocConvertBenchmark.inlined:·gc.time                                200.200.200  avgt    5    98.000                 ms
VersionNoAllocConvertBenchmark.inlined                                   10000.10000.10000  avgt    5     9.637 ±    2.172   ns/op
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate                    10000.10000.10000  avgt    5  7934.092 ± 1669.421  MB/sec
VersionNoAllocConvertBenchmark.inlined:·gc.alloc.rate.norm               10000.10000.10000  avgt    5    40.000 ±    0.001    B/op
VersionNoAllocConvertBenchmark.inlined:·gc.count                         10000.10000.10000  avgt    5   179.000             counts
VersionNoAllocConvertBenchmark.inlined:·gc.time                          10000.10000.10000  avgt    5    96.000                 ms
VersionParseBenchmark.optimized1                                                            avgt    5     2.071 ±    0.010   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                             avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized1:·gc.count                                                  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized1                                                       200  avgt    5     5.475 ±    0.136   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                        200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized1:·gc.count                                             200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized1                                                      200.  avgt    5     6.465 ±    0.061   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                       200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized1:·gc.count                                            200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized1                                                   200.200  avgt    5    13.368 ±    0.161   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                    200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized1:·gc.count                                         200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized1                                                  200.200.  avgt    5    26.965 ±    0.632   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                   200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized1:·gc.count                                        200.200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized1                                                 a.200.200  avgt    5    20.654 ±    1.261   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                  a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized1:·gc.count                                       a.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized1                                                 200.a.200  avgt    5    32.104 ±    0.245   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                  200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized1:·gc.count                                       200.a.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized1                                                 200.200.a  avgt    5    34.619 ±    0.116   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                  200.200.a  avgt    5     0.003 ±    0.017  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized1:·gc.count                                       200.200.a  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized1                                           200.200.200.200  avgt    5    21.557 ±    2.067   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                            200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized1:·gc.count                                 200.200.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized1                                             200.200.99999  avgt    5   126.285 ±   11.317   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                              200.200.99999  avgt    5  2174.831 ±  189.462  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                         200.200.99999  avgt    5   144.000 ±    0.001    B/op
VersionParseBenchmark.optimized1:·gc.count                                   200.200.99999  avgt    5    74.000             counts
VersionParseBenchmark.optimized1:·gc.time                                    200.200.99999  avgt    5    33.000                 ms
VersionParseBenchmark.optimized1                                              200.200.-200  avgt    5    38.772 ±    0.429   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                               200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized1:·gc.count                                    200.200.-200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized1                                                     1.0.0  avgt    5   100.512 ±    4.974   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                      1.0.0  avgt    5  3490.476 ±  170.516  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                                 1.0.0  avgt    5   184.000 ±    0.001    B/op
VersionParseBenchmark.optimized1:·gc.count                                           1.0.0  avgt    5   120.000             counts
VersionParseBenchmark.optimized1:·gc.time                                            1.0.0  avgt    5    62.000                 ms
VersionParseBenchmark.optimized1                                               200.200.200  avgt    5   126.358 ±    0.273   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                                200.200.200  avgt    5  2776.019 ±    6.507  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                           200.200.200  avgt    5   184.000 ±    0.001    B/op
VersionParseBenchmark.optimized1:·gc.count                                     200.200.200  avgt    5    95.000             counts
VersionParseBenchmark.optimized1:·gc.time                                      200.200.200  avgt    5    49.000                 ms
VersionParseBenchmark.optimized1                                           10000.9876.5432  avgt    5   141.785 ±    5.391   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                            10000.9876.5432  avgt    5  2474.327 ±   93.223  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5   184.000 ±    0.001    B/op
VersionParseBenchmark.optimized1:·gc.count                                 10000.9876.5432  avgt    5    85.000             counts
VersionParseBenchmark.optimized1:·gc.time                                  10000.9876.5432  avgt    5    44.000                 ms
VersionParseBenchmark.optimized1                                         10000.10000.10000  avgt    5   156.005 ±    5.058   ns/op
VersionParseBenchmark.optimized1:·gc.alloc.rate                          10000.10000.10000  avgt    5  2248.645 ±   70.672  MB/sec
VersionParseBenchmark.optimized1:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5   184.000 ±    0.001    B/op
VersionParseBenchmark.optimized1:·gc.count                               10000.10000.10000  avgt    5    77.000             counts
VersionParseBenchmark.optimized1:·gc.time                                10000.10000.10000  avgt    5    40.000                 ms
VersionParseBenchmark.optimized2                                                            avgt    5     2.070 ±    0.002   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                             avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized2:·gc.count                                                  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                                       200  avgt    5     5.348 ±    0.178   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                        200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized2:·gc.count                                             200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                                      200.  avgt    5     6.511 ±    0.067   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                       200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized2:·gc.count                                            200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                                   200.200  avgt    5    13.464 ±    0.169   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                    200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized2:·gc.count                                         200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                                  200.200.  avgt    5    28.034 ±    2.882   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                   200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized2:·gc.count                                        200.200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                                 a.200.200  avgt    5    19.200 ±    0.783   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                  a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized2:·gc.count                                       a.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                                 200.a.200  avgt    5    26.722 ±    0.148   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                  200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized2:·gc.count                                       200.a.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                                 200.200.a  avgt    5    35.341 ±    0.199   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                  200.200.a  avgt    5     0.003 ±    0.017  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized2:·gc.count                                       200.200.a  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                           200.200.200.200  avgt    5    21.354 ±    0.076   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                            200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized2:·gc.count                                 200.200.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                             200.200.99999  avgt    5    89.174 ±    0.125   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                              200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                         200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized2:·gc.count                                   200.200.99999  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                              200.200.-200  avgt    5    37.935 ±    0.361   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                               200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized2:·gc.count                                    200.200.-200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized2                                                     1.0.0  avgt    5    63.764 ±    4.887   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                      1.0.0  avgt    5  1196.403 ±   89.548  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                                 1.0.0  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized2:·gc.count                                           1.0.0  avgt    5    41.000             counts
VersionParseBenchmark.optimized2:·gc.time                                            1.0.0  avgt    5    27.000                 ms
VersionParseBenchmark.optimized2                                               200.200.200  avgt    5    89.338 ±    0.200   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                                200.200.200  avgt    5   853.567 ±    2.153  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                           200.200.200  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized2:·gc.count                                     200.200.200  avgt    5    30.000             counts
VersionParseBenchmark.optimized2:·gc.time                                      200.200.200  avgt    5    16.000                 ms
VersionParseBenchmark.optimized2                                           10000.9876.5432  avgt    5   104.107 ±    0.199   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                            10000.9876.5432  avgt    5   732.570 ±    1.461  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized2:·gc.count                                 10000.9876.5432  avgt    5    25.000             counts
VersionParseBenchmark.optimized2:·gc.time                                  10000.9876.5432  avgt    5    11.000                 ms
VersionParseBenchmark.optimized2                                         10000.10000.10000  avgt    5   115.824 ±    5.485   ns/op
VersionParseBenchmark.optimized2:·gc.alloc.rate                          10000.10000.10000  avgt    5   658.564 ±   29.777  MB/sec
VersionParseBenchmark.optimized2:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized2:·gc.count                               10000.10000.10000  avgt    5    23.000             counts
VersionParseBenchmark.optimized2:·gc.time                                10000.10000.10000  avgt    5    11.000                 ms
VersionParseBenchmark.optimized3                                                            avgt    5     2.071 ±    0.005   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                             avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized3:·gc.count                                                  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                                       200  avgt    5    11.343 ±    0.020   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                        200  avgt    5     0.003 ±    0.017  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized3:·gc.count                                             200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                                      200.  avgt    5    26.376 ±    2.378   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                       200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3:·gc.count                                            200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                                   200.200  avgt    5    31.644 ±    0.089   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                    200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3:·gc.count                                         200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                                  200.200.  avgt    5    50.803 ±    1.549   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                   200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3:·gc.count                                        200.200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                                 a.200.200  avgt    5     2.365 ±    0.002   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                  a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized3:·gc.count                                       a.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                                 200.a.200  avgt    5    27.786 ±    0.059   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                  200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3:·gc.count                                       200.a.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                                 200.200.a  avgt    5    67.093 ±    0.163   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                  200.200.a  avgt    5     0.003 ±    0.017  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3:·gc.count                                       200.200.a  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                           200.200.200.200  avgt    5    56.248 ±    0.182   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                            200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3:·gc.count                                 200.200.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                             200.200.99999  avgt    5    74.855 ±    0.197   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                              200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                         200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3:·gc.count                                   200.200.99999  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                              200.200.-200  avgt    5    57.894 ±    1.833   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                               200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3:·gc.count                                    200.200.-200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3                                                     1.0.0  avgt    5    48.946 ±    1.607   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                      1.0.0  avgt    5  1558.046 ±   52.377  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                                 1.0.0  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3:·gc.count                                           1.0.0  avgt    5    54.000             counts
VersionParseBenchmark.optimized3:·gc.time                                            1.0.0  avgt    5    37.000                 ms
VersionParseBenchmark.optimized3                                               200.200.200  avgt    5    81.379 ±    0.105   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                                200.200.200  avgt    5   937.011 ±    1.321  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                           200.200.200  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3:·gc.count                                     200.200.200  avgt    5    32.000             counts
VersionParseBenchmark.optimized3:·gc.time                                      200.200.200  avgt    5    17.000                 ms
VersionParseBenchmark.optimized3                                           10000.9876.5432  avgt    5   108.024 ±    0.397   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                            10000.9876.5432  avgt    5   705.953 ±    2.711  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3:·gc.count                                 10000.9876.5432  avgt    5    25.000             counts
VersionParseBenchmark.optimized3:·gc.time                                  10000.9876.5432  avgt    5    19.000                 ms
VersionParseBenchmark.optimized3                                         10000.10000.10000  avgt    5   120.257 ±    0.252   ns/op
VersionParseBenchmark.optimized3:·gc.alloc.rate                          10000.10000.10000  avgt    5   634.136 ±    1.681  MB/sec
VersionParseBenchmark.optimized3:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3:·gc.count                               10000.10000.10000  avgt    5    22.000             counts
VersionParseBenchmark.optimized3:·gc.time                                10000.10000.10000  avgt    5    12.000                 ms
VersionParseBenchmark.optimized3Java                                                        avgt    5     2.072 ±    0.002   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                                         avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                                    avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized3Java:·gc.count                                              avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                                   200  avgt    5    11.466 ±    0.828   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                                    200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                               200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized3Java:·gc.count                                         200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                                  200.  avgt    5    22.010 ±    0.016   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                                   200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                              200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3Java:·gc.count                                        200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                               200.200  avgt    5    28.138 ±    0.215   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                                200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                           200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3Java:·gc.count                                     200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                              200.200.  avgt    5    50.150 ±    4.229   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                               200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                          200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3Java:·gc.count                                    200.200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                             a.200.200  avgt    5     2.367 ±    0.003   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                              a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                         a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized3Java:·gc.count                                   a.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                             200.a.200  avgt    5    23.785 ±    0.094   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                              200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                         200.a.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3Java:·gc.count                                   200.a.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                             200.200.a  avgt    5    58.824 ±    3.188   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                              200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                         200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3Java:·gc.count                                   200.200.a  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                       200.200.200.200  avgt    5    56.381 ±    0.056   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                        200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                   200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3Java:·gc.count                             200.200.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                         200.200.99999  avgt    5    71.824 ±    0.111   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                          200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                     200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3Java:·gc.count                               200.200.99999  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                          200.200.-200  avgt    5    59.065 ±    3.060   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                           200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                      200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3Java:·gc.count                                200.200.-200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3Java                                                 1.0.0  avgt    5    45.064 ±    6.610   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                                  1.0.0  avgt    5  1694.083 ±  241.916  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                             1.0.0  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3Java:·gc.count                                       1.0.0  avgt    5    58.000             counts
VersionParseBenchmark.optimized3Java:·gc.time                                        1.0.0  avgt    5    31.000                 ms
VersionParseBenchmark.optimized3Java                                           200.200.200  avgt    5    76.592 ±    5.190   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                            200.200.200  avgt    5   995.827 ±   66.749  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                       200.200.200  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3Java:·gc.count                                 200.200.200  avgt    5    34.000             counts
VersionParseBenchmark.optimized3Java:·gc.time                                  200.200.200  avgt    5    21.000                 ms
VersionParseBenchmark.optimized3Java                                       10000.9876.5432  avgt    5    92.112 ±    0.592   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                        10000.9876.5432  avgt    5   827.892 ±    5.642  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                   10000.9876.5432  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3Java:·gc.count                             10000.9876.5432  avgt    5    29.000             counts
VersionParseBenchmark.optimized3Java:·gc.time                              10000.9876.5432  avgt    5    17.000                 ms
VersionParseBenchmark.optimized3Java                                     10000.10000.10000  avgt    5   107.327 ±    3.675   ns/op
VersionParseBenchmark.optimized3Java:·gc.alloc.rate                      10000.10000.10000  avgt    5   710.585 ±   24.346  MB/sec
VersionParseBenchmark.optimized3Java:·gc.alloc.rate.norm                 10000.10000.10000  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3Java:·gc.count                           10000.10000.10000  avgt    5    24.000             counts
VersionParseBenchmark.optimized3Java:·gc.time                            10000.10000.10000  avgt    5    12.000                 ms
VersionParseBenchmark.optimized3JavaNoSwitch                                                avgt    5     2.071 ±    0.014   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                                 avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                            avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                                      avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                                           200  avgt    5    11.287 ±    0.023   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                            200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                       200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                                 200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                                          200.  avgt    5    21.967 ±    0.141   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                           200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                      200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                                200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                                       200.200  avgt    5    27.022 ±    2.066   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                        200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                   200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                             200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                                      200.200.  avgt    5    49.605 ±    4.143   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                       200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                  200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                            200.200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                                     a.200.200  avgt    5     2.955 ±    0.004   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                      a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                 a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                           a.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                                     200.a.200  avgt    5    23.027 ±    0.022   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                      200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                 200.a.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                           200.a.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                                     200.200.a  avgt    5    52.975 ±    0.266   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                      200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                 200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                           200.200.a  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                               200.200.200.200  avgt    5    53.635 ±    0.563   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm           200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                     200.200.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                                 200.200.99999  avgt    5    77.098 ±    3.053   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                  200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm             200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                       200.200.99999  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                                  200.200.-200  avgt    5    51.724 ±    0.137   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                   200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm              200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                        200.200.-200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized3JavaNoSwitch                                         1.0.0  avgt    5    44.735 ±    0.415   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                          1.0.0  avgt    5  1704.649 ±   16.027  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                     1.0.0  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                               1.0.0  avgt    5    59.000             counts
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time                                1.0.0  avgt    5    39.000                 ms
VersionParseBenchmark.optimized3JavaNoSwitch                                   200.200.200  avgt    5    74.762 ±    0.397   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                    200.200.200  avgt    5  1020.036 ±    5.151  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm               200.200.200  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                         200.200.200  avgt    5    35.000             counts
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time                          200.200.200  avgt    5    21.000                 ms
VersionParseBenchmark.optimized3JavaNoSwitch                               10000.9876.5432  avgt    5    87.180 ±    0.633   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                10000.9876.5432  avgt    5   874.718 ±    6.063  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm           10000.9876.5432  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                     10000.9876.5432  avgt    5    30.000             counts
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time                      10000.9876.5432  avgt    5    18.000                 ms
VersionParseBenchmark.optimized3JavaNoSwitch                             10000.10000.10000  avgt    5    97.115 ±    4.890   ns/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate              10000.10000.10000  avgt    5   785.267 ±   39.204  MB/sec
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm         10000.10000.10000  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.count                   10000.10000.10000  avgt    5    27.000             counts
VersionParseBenchmark.optimized3JavaNoSwitch:·gc.time                    10000.10000.10000  avgt    5    15.000                 ms
VersionParseBenchmark.optimized4                                                            avgt    5     2.077 ±    0.057   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                             avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized4:·gc.count                                                  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                                       200  avgt    5    15.907 ±    0.023   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                        200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized4:·gc.count                                             200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                                      200.  avgt    5    19.479 ±    0.114   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                       200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized4:·gc.count                                            200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                                   200.200  avgt    5    29.231 ±    0.526   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                    200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized4:·gc.count                                         200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                                  200.200.  avgt    5    31.280 ±    1.477   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                   200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized4:·gc.count                                        200.200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                                 a.200.200  avgt    5     2.367 ±    0.007   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                  a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized4:·gc.count                                       a.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                                 200.a.200  avgt    5    19.451 ±    0.019   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                  200.a.200  avgt    5     0.003 ±    0.017  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized4:·gc.count                                       200.a.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                                 200.200.a  avgt    5    29.772 ±    0.044   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                  200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized4:·gc.count                                       200.200.a  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                           200.200.200.200  avgt    5    41.765 ±    0.417   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                            200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized4:·gc.count                                 200.200.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                             200.200.99999  avgt    5    44.693 ±    2.328   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                              200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                         200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized4:·gc.count                                   200.200.99999  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                              200.200.-200  avgt    5    29.783 ±    0.028   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                               200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized4:·gc.count                                    200.200.-200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized4                                                     1.0.0  avgt    5    24.777 ±    3.074   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                      1.0.0  avgt    5  3080.317 ±  380.433  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                                 1.0.0  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized4:·gc.count                                           1.0.0  avgt    5    92.000             counts
VersionParseBenchmark.optimized4:·gc.time                                            1.0.0  avgt    5    51.000                 ms
VersionParseBenchmark.optimized4                                               200.200.200  avgt    5    41.939 ±    0.180   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                                200.200.200  avgt    5  1818.296 ±    8.200  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                           200.200.200  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized4:·gc.count                                     200.200.200  avgt    5    62.000             counts
VersionParseBenchmark.optimized4:·gc.time                                      200.200.200  avgt    5    38.000                 ms
VersionParseBenchmark.optimized4                                           10000.9876.5432  avgt    5    53.144 ±    0.239   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                            10000.9876.5432  avgt    5  1434.850 ±    6.116  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized4:·gc.count                                 10000.9876.5432  avgt    5    49.000             counts
VersionParseBenchmark.optimized4:·gc.time                                  10000.9876.5432  avgt    5    25.000                 ms
VersionParseBenchmark.optimized4                                         10000.10000.10000  avgt    5    60.060 ±    0.659   ns/op
VersionParseBenchmark.optimized4:·gc.alloc.rate                          10000.10000.10000  avgt    5  1269.685 ±   14.159  MB/sec
VersionParseBenchmark.optimized4:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized4:·gc.count                               10000.10000.10000  avgt    5    44.000             counts
VersionParseBenchmark.optimized4:·gc.time                                10000.10000.10000  avgt    5    22.000                 ms
VersionParseBenchmark.optimized5                                                            avgt    5     2.086 ±    0.016   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                             avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized5:·gc.count                                                  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                                       200  avgt    5    15.617 ±    0.018   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                        200  avgt    5     0.003 ±    0.017  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized5:·gc.count                                             200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                                      200.  avgt    5    14.762 ±    0.040   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                       200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized5:·gc.count                                            200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                                   200.200  avgt    5    32.438 ±    0.021   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                    200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized5:·gc.count                                         200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                                  200.200.  avgt    5    28.348 ±    0.603   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                   200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized5:·gc.count                                        200.200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                                 a.200.200  avgt    5     3.279 ±    0.031   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                  a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized5:·gc.count                                       a.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                                 200.a.200  avgt    5    18.443 ±    0.040   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                  200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized5:·gc.count                                       200.a.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                                 200.200.a  avgt    5    33.028 ±    0.084   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                  200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized5:·gc.count                                       200.200.a  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                           200.200.200.200  avgt    5    45.129 ±    0.819   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                            200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized5:·gc.count                                 200.200.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                             200.200.99999  avgt    5    50.081 ±    0.097   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                              200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                         200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized5:·gc.count                                   200.200.99999  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                              200.200.-200  avgt    5    33.155 ±    0.846   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                               200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized5:·gc.count                                    200.200.-200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized5                                                     1.0.0  avgt    5    29.535 ±    0.347   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                      1.0.0  avgt    5  2582.116 ±   31.138  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                                 1.0.0  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized5:·gc.count                                           1.0.0  avgt    5    89.000             counts
VersionParseBenchmark.optimized5:·gc.time                                            1.0.0  avgt    5    44.000                 ms
VersionParseBenchmark.optimized5                                               200.200.200  avgt    5    56.508 ±    0.759   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                                200.200.200  avgt    5  1349.527 ±   18.294  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                           200.200.200  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized5:·gc.count                                     200.200.200  avgt    5    46.000             counts
VersionParseBenchmark.optimized5:·gc.time                                      200.200.200  avgt    5    31.000                 ms
VersionParseBenchmark.optimized5                                           10000.9876.5432  avgt    5    70.007 ±    0.215   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                            10000.9876.5432  avgt    5  1089.387 ±    3.241  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized5:·gc.count                                 10000.9876.5432  avgt    5    38.000             counts
VersionParseBenchmark.optimized5:·gc.time                                  10000.9876.5432  avgt    5    30.000                 ms
VersionParseBenchmark.optimized5                                         10000.10000.10000  avgt    5    76.329 ±    1.042   ns/op
VersionParseBenchmark.optimized5:·gc.alloc.rate                          10000.10000.10000  avgt    5   999.074 ±   13.332  MB/sec
VersionParseBenchmark.optimized5:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized5:·gc.count                               10000.10000.10000  avgt    5    35.000             counts
VersionParseBenchmark.optimized5:·gc.time                                10000.10000.10000  avgt    5    18.000                 ms
VersionParseBenchmark.optimized6                                                            avgt    5     2.070 ±    0.005   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                             avgt    5     0.003 ±    0.017  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                                        avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized6:·gc.count                                                  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                                       200  avgt    5    12.750 ±    1.336   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                        200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                                   200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized6:·gc.count                                             200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                                      200.  avgt    5    15.388 ±    0.493   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                       200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                                  200.  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized6:·gc.count                                            200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                                   200.200  avgt    5    23.277 ±    0.041   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                    200.200  avgt    5     0.003 ±    0.017  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                               200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized6:·gc.count                                         200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                                  200.200.  avgt    5    27.986 ±    1.126   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                   200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                              200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized6:·gc.count                                        200.200.  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                                 a.200.200  avgt    5     2.960 ±    0.014   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                  a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                             a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized6:·gc.count                                       a.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                                 200.a.200  avgt    5    16.329 ±    0.077   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                  200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                             200.a.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseBenchmark.optimized6:·gc.count                                       200.a.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                                 200.200.a  avgt    5    29.524 ±    0.052   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                  200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                             200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized6:·gc.count                                       200.200.a  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                           200.200.200.200  avgt    5    33.956 ±    1.489   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                            200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                       200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized6:·gc.count                                 200.200.200.200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                             200.200.99999  avgt    5    36.787 ±    0.183   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                              200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                         200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized6:·gc.count                                   200.200.99999  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                              200.200.-200  avgt    5    28.695 ±    0.085   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                               200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                          200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseBenchmark.optimized6:·gc.count                                    200.200.-200  avgt    5       ≈ 0             counts
VersionParseBenchmark.optimized6                                                     1.0.0  avgt    5    22.198 ±    0.051   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                      1.0.0  avgt    5  3435.703 ±    6.851  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                                 1.0.0  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized6:·gc.count                                           1.0.0  avgt    5   102.000             counts
VersionParseBenchmark.optimized6:·gc.time                                            1.0.0  avgt    5    47.000                 ms
VersionParseBenchmark.optimized6                                               200.200.200  avgt    5    37.409 ±    1.147   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                                200.200.200  avgt    5  2038.530 ±   61.084  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                           200.200.200  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized6:·gc.count                                     200.200.200  avgt    5    70.000             counts
VersionParseBenchmark.optimized6:·gc.time                                      200.200.200  avgt    5    35.000                 ms
VersionParseBenchmark.optimized6                                           10000.9876.5432  avgt    5    51.149 ±    0.341   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                            10000.9876.5432  avgt    5  1490.956 ±    9.401  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                       10000.9876.5432  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized6:·gc.count                                 10000.9876.5432  avgt    5    52.000             counts
VersionParseBenchmark.optimized6:·gc.time                                  10000.9876.5432  avgt    5    29.000                 ms
VersionParseBenchmark.optimized6                                         10000.10000.10000  avgt    5    57.729 ±    1.709   ns/op
VersionParseBenchmark.optimized6:·gc.alloc.rate                          10000.10000.10000  avgt    5  1320.945 ±   39.008  MB/sec
VersionParseBenchmark.optimized6:·gc.alloc.rate.norm                     10000.10000.10000  avgt    5    40.000 ±    0.001    B/op
VersionParseBenchmark.optimized6:·gc.count                               10000.10000.10000  avgt    5    46.000             counts
VersionParseBenchmark.optimized6:·gc.time                                10000.10000.10000  avgt    5    24.000                 ms
VersionParseBenchmark.regex                                                                 avgt    5    67.718 ±   10.388   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                                  avgt    5  6088.088 ±  900.007  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                             avgt    5   216.000 ±    0.001    B/op
VersionParseBenchmark.regex:·gc.count                                                       avgt    5   157.000             counts
VersionParseBenchmark.regex:·gc.time                                                        avgt    5    83.000                 ms
VersionParseBenchmark.regex                                                            200  avgt    5   119.994 ±   14.811   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                             200  avgt    5  3434.360 ±  405.483  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                        200  avgt    5   216.000 ±    0.001    B/op
VersionParseBenchmark.regex:·gc.count                                                  200  avgt    5   118.000             counts
VersionParseBenchmark.regex:·gc.time                                                   200  avgt    5    72.000                 ms
VersionParseBenchmark.regex                                                           200.  avgt    5   158.710 ±   15.244   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                            200.  avgt    5  2596.068 ±  241.307  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                       200.  avgt    5   216.000 ±    0.001    B/op
VersionParseBenchmark.regex:·gc.count                                                 200.  avgt    5    89.000             counts
VersionParseBenchmark.regex:·gc.time                                                  200.  avgt    5    51.000                 ms
VersionParseBenchmark.regex                                                        200.200  avgt    5   213.821 ±    1.304   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                         200.200  avgt    5  1925.945 ±   12.251  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                    200.200  avgt    5   216.000 ±    0.002    B/op
VersionParseBenchmark.regex:·gc.count                                              200.200  avgt    5    66.000             counts
VersionParseBenchmark.regex:·gc.time                                               200.200  avgt    5    36.000                 ms
VersionParseBenchmark.regex                                                       200.200.  avgt    5   251.297 ±   17.063   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                        200.200.  avgt    5  1638.986 ±  110.673  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                   200.200.  avgt    5   216.000 ±    0.002    B/op
VersionParseBenchmark.regex:·gc.count                                             200.200.  avgt    5    56.000             counts
VersionParseBenchmark.regex:·gc.time                                              200.200.  avgt    5    29.000                 ms
VersionParseBenchmark.regex                                                      a.200.200  avgt    5    47.806 ±    0.281   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                       a.200.200  avgt    5  5742.682 ±   33.414  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                  a.200.200  avgt    5   144.000 ±    0.001    B/op
VersionParseBenchmark.regex:·gc.count                                            a.200.200  avgt    5   151.000             counts
VersionParseBenchmark.regex:·gc.time                                             a.200.200  avgt    5    74.000                 ms
VersionParseBenchmark.regex                                                      200.a.200  avgt    5   164.804 ±    2.106   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                       200.a.200  avgt    5  2498.539 ±   30.776  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                  200.a.200  avgt    5   216.000 ±    0.002    B/op
VersionParseBenchmark.regex:·gc.count                                            200.a.200  avgt    5    86.000             counts
VersionParseBenchmark.regex:·gc.time                                             200.a.200  avgt    5    57.000                 ms
VersionParseBenchmark.regex                                                      200.200.a  avgt    5   251.237 ±   13.064   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                       200.200.a  avgt    5  1639.436 ±   83.319  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                  200.200.a  avgt    5   216.000 ±    0.002    B/op
VersionParseBenchmark.regex:·gc.count                                            200.200.a  avgt    5    56.000             counts
VersionParseBenchmark.regex:·gc.time                                             200.200.a  avgt    5    29.000                 ms
VersionParseBenchmark.regex                                                200.200.200.200  avgt    5   309.310 ±   18.008   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                 200.200.200.200  avgt    5  1331.585 ±   76.856  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                            200.200.200.200  avgt    5   216.000 ±    0.003    B/op
VersionParseBenchmark.regex:·gc.count                                      200.200.200.200  avgt    5    46.000             counts
VersionParseBenchmark.regex:·gc.time                                       200.200.200.200  avgt    5    27.000                 ms
VersionParseBenchmark.regex                                                  200.200.99999  avgt    5   370.641 ±    1.860   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                   200.200.99999  avgt    5  1851.784 ±    8.882  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                              200.200.99999  avgt    5   360.001 ±    0.003    B/op
VersionParseBenchmark.regex:·gc.count                                        200.200.99999  avgt    5    63.000             counts
VersionParseBenchmark.regex:·gc.time                                         200.200.99999  avgt    5    32.000                 ms
VersionParseBenchmark.regex                                                   200.200.-200  avgt    5   259.873 ±    2.360   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                    200.200.-200  avgt    5  1584.601 ±   14.025  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                               200.200.-200  avgt    5   216.000 ±    0.002    B/op
VersionParseBenchmark.regex:·gc.count                                         200.200.-200  avgt    5    55.000             counts
VersionParseBenchmark.regex:·gc.time                                          200.200.-200  avgt    5    30.000                 ms
VersionParseBenchmark.regex                                                          1.0.0  avgt    5   216.829 ±    0.991   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                           1.0.0  avgt    5  3516.822 ±   17.813  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                      1.0.0  avgt    5   400.000 ±    0.002    B/op
VersionParseBenchmark.regex:·gc.count                                                1.0.0  avgt    5   121.000             counts
VersionParseBenchmark.regex:·gc.time                                                 1.0.0  avgt    5    78.000                 ms
VersionParseBenchmark.regex                                                    200.200.200  avgt    5   333.045 ±    3.117   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                     200.200.200  avgt    5  2289.711 ±   20.746  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                                200.200.200  avgt    5   400.001 ±    0.003    B/op
VersionParseBenchmark.regex:·gc.count                                          200.200.200  avgt    5    79.000             counts
VersionParseBenchmark.regex:·gc.time                                           200.200.200  avgt    5    44.000                 ms
VersionParseBenchmark.regex                                                10000.9876.5432  avgt    5   385.560 ±    0.924   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                                 10000.9876.5432  avgt    5  1977.899 ±    5.074  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                            10000.9876.5432  avgt    5   400.001 ±    0.004    B/op
VersionParseBenchmark.regex:·gc.count                                      10000.9876.5432  avgt    5    68.000             counts
VersionParseBenchmark.regex:·gc.time                                       10000.9876.5432  avgt    5    33.000                 ms
VersionParseBenchmark.regex                                              10000.10000.10000  avgt    5   384.005 ±    1.439   ns/op
VersionParseBenchmark.regex:·gc.alloc.rate                               10000.10000.10000  avgt    5  1985.913 ±    8.401  MB/sec
VersionParseBenchmark.regex:·gc.alloc.rate.norm                          10000.10000.10000  avgt    5   400.001 ±    0.004    B/op
VersionParseBenchmark.regex:·gc.count                                    10000.10000.10000  avgt    5    68.000             counts
VersionParseBenchmark.regex:·gc.time                                     10000.10000.10000  avgt    5    29.000                 ms
VersionParseBenchmark.yolo                                                                  avgt    5  2617.555 ±  188.037   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                                   avgt    5   705.272 ±   52.088  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                              avgt    5   968.004 ±    0.024    B/op
VersionParseBenchmark.yolo:·gc.count                                                        avgt    5    24.000             counts
VersionParseBenchmark.yolo:·gc.time                                                         avgt    5    14.000                 ms
VersionParseBenchmark.yolo                                                             200  avgt    5  1863.354 ±  258.834   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                              200  avgt    5   844.004 ±  121.044  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                         200  avgt    5   824.003 ±    0.017    B/op
VersionParseBenchmark.yolo:·gc.count                                                   200  avgt    5    29.000             counts
VersionParseBenchmark.yolo:·gc.time                                                    200  avgt    5    20.000                 ms
VersionParseBenchmark.yolo                                                            200.  avgt    5  1959.393 ±  195.330   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                             200.  avgt    5   926.803 ±   96.053  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                        200.  avgt    5   952.003 ±    0.018    B/op
VersionParseBenchmark.yolo:·gc.count                                                  200.  avgt    5    32.000             counts
VersionParseBenchmark.yolo:·gc.time                                                   200.  avgt    5    27.000                 ms
VersionParseBenchmark.yolo                                                         200.200  avgt    5  2010.600 ±  212.610   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                          200.200  avgt    5   948.794 ±  104.457  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                     200.200  avgt    5  1000.003 ±    0.019    B/op
VersionParseBenchmark.yolo:·gc.count                                               200.200  avgt    5    33.000             counts
VersionParseBenchmark.yolo:·gc.time                                                200.200  avgt    5    19.000                 ms
VersionParseBenchmark.yolo                                                        200.200.  avgt    5  2040.423 ±  256.024   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                         200.200.  avgt    5   935.180 ±  119.919  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                    200.200.  avgt    5  1000.003 ±    0.020    B/op
VersionParseBenchmark.yolo:·gc.count                                              200.200.  avgt    5    32.000             counts
VersionParseBenchmark.yolo:·gc.time                                               200.200.  avgt    5    16.000                 ms
VersionParseBenchmark.yolo                                                       a.200.200  avgt    5  3023.813 ±  166.541   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                        a.200.200  avgt    5   761.731 ±   43.088  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                   a.200.200  avgt    5  1208.005 ±    0.028    B/op
VersionParseBenchmark.yolo:·gc.count                                             a.200.200  avgt    5    26.000             counts
VersionParseBenchmark.yolo:·gc.time                                              a.200.200  avgt    5    18.000                 ms
VersionParseBenchmark.yolo                                                       200.a.200  avgt    5  2947.524 ±  213.664   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                        200.a.200  avgt    5   781.519 ±   58.172  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                   200.a.200  avgt    5  1208.005 ±    0.027    B/op
VersionParseBenchmark.yolo:·gc.count                                             200.a.200  avgt    5    26.000             counts
VersionParseBenchmark.yolo:·gc.time                                              200.a.200  avgt    5    14.000                 ms
VersionParseBenchmark.yolo                                                       200.200.a  avgt    5  2829.977 ±  279.243   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                        200.200.a  avgt    5   814.290 ±   81.145  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                   200.200.a  avgt    5  1208.004 ±    0.027    B/op
VersionParseBenchmark.yolo:·gc.count                                             200.200.a  avgt    5    28.000             counts
VersionParseBenchmark.yolo:·gc.time                                              200.200.a  avgt    5    16.000                 ms
VersionParseBenchmark.yolo                                                 200.200.200.200  avgt    5  2117.827 ±  203.813   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                  200.200.200.200  avgt    5  1001.620 ±   99.881  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                             200.200.200.200  avgt    5  1112.003 ±    0.020    B/op
VersionParseBenchmark.yolo:·gc.count                                       200.200.200.200  avgt    5    35.000             counts
VersionParseBenchmark.yolo:·gc.time                                        200.200.200.200  avgt    5    17.000                 ms
VersionParseBenchmark.yolo                                                   200.200.99999  avgt    5  2133.263 ±  218.761   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                    200.200.99999  avgt    5   972.888 ±  103.589  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                               200.200.99999  avgt    5  1088.003 ±    0.020    B/op
VersionParseBenchmark.yolo:·gc.count                                         200.200.99999  avgt    5    33.000             counts
VersionParseBenchmark.yolo:·gc.time                                          200.200.99999  avgt    5    25.000                 ms
VersionParseBenchmark.yolo                                                    200.200.-200  avgt    5  2140.690 ±  213.933   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                     200.200.-200  avgt    5   983.778 ±  102.172  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                200.200.-200  avgt    5  1104.003 ±    0.020    B/op
VersionParseBenchmark.yolo:·gc.count                                          200.200.-200  avgt    5    33.000             counts
VersionParseBenchmark.yolo:·gc.time                                           200.200.-200  avgt    5    15.000                 ms
VersionParseBenchmark.yolo                                                           1.0.0  avgt    5   163.856 ±   12.370   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                            1.0.0  avgt    5  4376.177 ±  320.780  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                       1.0.0  avgt    5   376.000 ±    0.001    B/op
VersionParseBenchmark.yolo:·gc.count                                                 1.0.0  avgt    5   131.000             counts
VersionParseBenchmark.yolo:·gc.time                                                  1.0.0  avgt    5    67.000                 ms
VersionParseBenchmark.yolo                                                     200.200.200  avgt    5   187.846 ±    8.626   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                      200.200.200  avgt    5  4141.384 ±  186.709  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                                 200.200.200  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yolo:·gc.count                                           200.200.200  avgt    5   124.000             counts
VersionParseBenchmark.yolo:·gc.time                                            200.200.200  avgt    5    58.000                 ms
VersionParseBenchmark.yolo                                                 10000.9876.5432  avgt    5   206.321 ±   10.128   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                  10000.9876.5432  avgt    5  3770.504 ±  182.124  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                             10000.9876.5432  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yolo:·gc.count                                       10000.9876.5432  avgt    5   113.000             counts
VersionParseBenchmark.yolo:·gc.time                                        10000.9876.5432  avgt    5    63.000                 ms
VersionParseBenchmark.yolo                                               10000.10000.10000  avgt    5   218.728 ±    2.026   ns/op
VersionParseBenchmark.yolo:·gc.alloc.rate                                10000.10000.10000  avgt    5  3556.082 ±   31.614  MB/sec
VersionParseBenchmark.yolo:·gc.alloc.rate.norm                           10000.10000.10000  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yolo:·gc.count                                     10000.10000.10000  avgt    5   107.000             counts
VersionParseBenchmark.yolo:·gc.time                                      10000.10000.10000  avgt    5    77.000                 ms
VersionParseBenchmark.yoloNoThrow                                                           avgt    5  2612.913 ±  160.674   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                            avgt    5   706.422 ±   44.403  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                                       avgt    5   968.004 ±    0.024    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                                 avgt    5    24.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                                  avgt    5    16.000                 ms
VersionParseBenchmark.yoloNoThrow                                                      200  avgt    5  1831.416 ±  227.361   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                       200  avgt    5   858.443 ±  111.597  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                                  200  avgt    5   824.003 ±    0.017    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                            200  avgt    5    29.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                             200  avgt    5    22.000                 ms
VersionParseBenchmark.yoloNoThrow                                                     200.  avgt    5  1968.034 ±  212.895   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                      200.  avgt    5   922.804 ±  104.138  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                                 200.  avgt    5   952.003 ±    0.018    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                           200.  avgt    5    32.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                            200.  avgt    5    17.000                 ms
VersionParseBenchmark.yoloNoThrow                                                  200.200  avgt    5  2015.140 ±  235.209   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                   200.200  avgt    5   946.813 ±  115.147  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                              200.200  avgt    5  1000.003 ±    0.019    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                        200.200  avgt    5    32.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                         200.200  avgt    5    16.000                 ms
VersionParseBenchmark.yoloNoThrow                                                 200.200.  avgt    5  2033.030 ±  206.809   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                  200.200.  avgt    5   938.312 ±   99.180  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                             200.200.  avgt    5  1000.003 ±    0.019    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                       200.200.  avgt    5    33.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                        200.200.  avgt    5    19.000                 ms
VersionParseBenchmark.yoloNoThrow                                                a.200.200  avgt    5  2913.601 ±  172.254   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                 a.200.200  avgt    5   790.532 ±   47.914  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                            a.200.200  avgt    5  1208.005 ±    0.027    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                      a.200.200  avgt    5    27.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                       a.200.200  avgt    5    13.000                 ms
VersionParseBenchmark.yoloNoThrow                                                200.a.200  avgt    5  3037.264 ±  242.542   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                 200.a.200  avgt    5   758.500 ±   61.053  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                            200.a.200  avgt    5  1208.005 ±    0.028    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                      200.a.200  avgt    5    26.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                       200.a.200  avgt    5    13.000                 ms
VersionParseBenchmark.yoloNoThrow                                                200.200.a  avgt    5  3156.323 ±  219.461   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                 200.200.a  avgt    5   729.837 ±   50.417  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                            200.200.a  avgt    5  1208.005 ±    0.029    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                      200.200.a  avgt    5    25.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                       200.200.a  avgt    5    13.000                 ms
VersionParseBenchmark.yoloNoThrow                                          200.200.200.200  avgt    5  2123.962 ±  215.598   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                           200.200.200.200  avgt    5   998.706 ±  105.342  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                      200.200.200.200  avgt    5  1112.003 ±    0.020    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                200.200.200.200  avgt    5    35.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                 200.200.200.200  avgt    5    19.000                 ms
VersionParseBenchmark.yoloNoThrow                                            200.200.99999  avgt    5   192.138 ±    1.144   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                             200.200.99999  avgt    5  3651.749 ±   22.508  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                        200.200.99999  avgt    5   368.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                  200.200.99999  avgt    5   110.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                   200.200.99999  avgt    5    55.000                 ms
VersionParseBenchmark.yoloNoThrow                                             200.200.-200  avgt    5   195.716 ±    2.138   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                              200.200.-200  avgt    5  3740.615 ±   43.009  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                         200.200.-200  avgt    5   384.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                   200.200.-200  avgt    5   112.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                    200.200.-200  avgt    5    58.000                 ms
VersionParseBenchmark.yoloNoThrow                                                    1.0.0  avgt    5   163.308 ±   10.761   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                                     1.0.0  avgt    5  4390.305 ±  286.708  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                                1.0.0  avgt    5   376.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                          1.0.0  avgt    5   132.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                           1.0.0  avgt    5    66.000                 ms
VersionParseBenchmark.yoloNoThrow                                              200.200.200  avgt    5   204.445 ±   13.913   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                               200.200.200  avgt    5  3805.221 ±  259.695  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                          200.200.200  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                    200.200.200  avgt    5   114.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                     200.200.200  avgt    5    65.000                 ms
VersionParseBenchmark.yoloNoThrow                                          10000.9876.5432  avgt    5   205.980 ±    1.730   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                           10000.9876.5432  avgt    5  3775.989 ±   30.446  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                      10000.9876.5432  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                                10000.9876.5432  avgt    5   114.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                                 10000.9876.5432  avgt    5    67.000                 ms
VersionParseBenchmark.yoloNoThrow                                        10000.10000.10000  avgt    5   209.066 ±    1.968   ns/op
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate                         10000.10000.10000  avgt    5  3720.561 ±   34.853  MB/sec
VersionParseBenchmark.yoloNoThrow:·gc.alloc.rate.norm                    10000.10000.10000  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrow:·gc.count                              10000.10000.10000  avgt    5   112.000             counts
VersionParseBenchmark.yoloNoThrow:·gc.time                               10000.10000.10000  avgt    5    54.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                                      avgt    5  2634.084 ±  100.189   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                                       avgt    5   700.682 ±   27.150  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                                  avgt    5   968.004 ±    0.025    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                            avgt    5    24.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                             avgt    5    13.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                                 200  avgt    5  1771.878 ±  225.386   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                                  200  avgt    5   887.417 ±  118.159  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                             200  avgt    5   824.003 ±    0.017    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                       200  avgt    5    30.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                        200  avgt    5    22.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                                200.  avgt    5  1912.557 ±  225.952   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                                 200.  avgt    5   949.722 ±  117.131  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                            200.  avgt    5   952.003 ±    0.018    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                      200.  avgt    5    32.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                       200.  avgt    5    20.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                             200.200  avgt    5  1907.980 ±  238.438   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                              200.200  avgt    5  1000.010 ±  126.883  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                         200.200  avgt    5  1000.003 ±    0.018    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                   200.200  avgt    5    35.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                    200.200  avgt    5    17.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                            200.200.  avgt    5  2001.499 ±   26.746   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                             200.200.  avgt    5   952.562 ±   12.947  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                        200.200.  avgt    5  1000.003 ±    0.019    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                  200.200.  avgt    5    33.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                   200.200.  avgt    5    18.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                           a.200.200  avgt    5  2808.985 ±  253.231   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                            a.200.200  avgt    5   820.248 ±   74.536  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                       a.200.200  avgt    5  1208.004 ±    0.026    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                 a.200.200  avgt    5    28.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                  a.200.200  avgt    5    20.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                           200.a.200  avgt    5  2812.029 ±  322.468   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                            200.a.200  avgt    5   819.621 ±   95.325  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                       200.a.200  avgt    5  1208.004 ±    0.026    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                 200.a.200  avgt    5    28.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                  200.a.200  avgt    5    15.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                           200.200.a  avgt    5  2810.153 ±  177.336   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                            200.200.a  avgt    5   819.749 ±   52.976  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                       200.200.a  avgt    5  1208.004 ±    0.026    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                 200.200.a  avgt    5    28.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                  200.200.a  avgt    5    21.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                     200.200.200.200  avgt    5  2037.505 ±  191.070   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                      200.200.200.200  avgt    5  1040.921 ±  101.240  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                 200.200.200.200  avgt    5  1112.003 ±    0.019    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                           200.200.200.200  avgt    5    36.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                            200.200.200.200  avgt    5    19.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                       200.200.99999  avgt    5   193.666 ±    1.154   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                        200.200.99999  avgt    5  3622.635 ±   22.046  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                   200.200.99999  avgt    5   368.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                             200.200.99999  avgt    5   109.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                              200.200.99999  avgt    5    68.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                        200.200.-200  avgt    5   194.691 ±    1.052   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                         200.200.-200  avgt    5  3760.131 ±   19.483  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                    200.200.-200  avgt    5   384.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                              200.200.-200  avgt    5   113.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                               200.200.-200  avgt    5    64.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                               1.0.0  avgt    5   166.721 ±    1.802   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                                1.0.0  avgt    5  4299.910 ±   45.259  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                           1.0.0  avgt    5   376.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                                     1.0.0  avgt    5   129.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                      1.0.0  avgt    5    67.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                         200.200.200  avgt    5   195.509 ±   10.275   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                          200.200.200  avgt    5  3979.274 ±  211.439  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                     200.200.200  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                               200.200.200  avgt    5   120.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                                200.200.200  avgt    5    70.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                     10000.9876.5432  avgt    5   212.145 ±   32.412   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                      10000.9876.5432  avgt    5  3671.075 ±  555.422  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                 10000.9876.5432  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                           10000.9876.5432  avgt    5   110.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                            10000.9876.5432  avgt    5    54.000                 ms
VersionParseBenchmark.yoloNoThrowNoTry                                   10000.10000.10000  avgt    5   223.956 ±    0.996   ns/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                    10000.10000.10000  avgt    5  3473.136 ±   15.322  MB/sec
VersionParseBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm               10000.10000.10000  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoThrowNoTry:·gc.count                         10000.10000.10000  avgt    5   104.000             counts
VersionParseBenchmark.yoloNoThrowNoTry:·gc.time                          10000.10000.10000  avgt    5    53.000                 ms
VersionParseBenchmark.yoloNoTry                                                             avgt    5  2677.322 ±  275.570   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                              avgt    5   689.714 ±   71.705  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                                         avgt    5   968.004 ±    0.025    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                                   avgt    5    24.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                                    avgt    5    19.000                 ms
VersionParseBenchmark.yoloNoTry                                                        200  avgt    5  1773.514 ±  241.421   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                         200  avgt    5   886.648 ±  125.042  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                                    200  avgt    5   824.003 ±    0.017    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                              200  avgt    5    30.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                               200  avgt    5    17.000                 ms
VersionParseBenchmark.yoloNoTry                                                       200.  avgt    5  2132.151 ±  171.367   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                        200.  avgt    5   851.548 ±   70.523  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                                   200.  avgt    5   952.003 ±    0.020    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                             200.  avgt    5    29.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                              200.  avgt    5    23.000                 ms
VersionParseBenchmark.yoloNoTry                                                    200.200  avgt    5  1941.839 ±  210.070   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                     200.200  avgt    5   982.328 ±  109.131  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                                200.200  avgt    5  1000.003 ±    0.018    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                          200.200  avgt    5    34.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                           200.200  avgt    5    19.000                 ms
VersionParseBenchmark.yoloNoTry                                                   200.200.  avgt    5  1995.466 ±  218.482   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                    200.200.  avgt    5   955.974 ±  108.846  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                               200.200.  avgt    5  1000.003 ±    0.019    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                         200.200.  avgt    5    33.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                          200.200.  avgt    5    26.000                 ms
VersionParseBenchmark.yoloNoTry                                                  a.200.200  avgt    5  2773.175 ±  278.194   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                   a.200.200  avgt    5   830.911 ±   85.036  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                              a.200.200  avgt    5  1208.004 ±    0.026    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                        a.200.200  avgt    5    28.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                         a.200.200  avgt    5    15.000                 ms
VersionParseBenchmark.yoloNoTry                                                  200.a.200  avgt    5  2536.385 ±  175.330   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                   200.a.200  avgt    5   908.234 ±   64.160  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                              200.a.200  avgt    5  1208.004 ±    0.024    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                        200.a.200  avgt    5    31.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                         200.a.200  avgt    5    17.000                 ms
VersionParseBenchmark.yoloNoTry                                                  200.200.a  avgt    5  2866.893 ±  184.957   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                   200.200.a  avgt    5   803.446 ±   53.245  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                              200.200.a  avgt    5  1208.004 ±    0.027    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                        200.200.a  avgt    5    27.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                         200.200.a  avgt    5    15.000                 ms
VersionParseBenchmark.yoloNoTry                                            200.200.200.200  avgt    5  2044.639 ±  193.233   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                             200.200.200.200  avgt    5  1037.415 ±  101.625  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                        200.200.200.200  avgt    5  1112.003 ±    0.019    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                  200.200.200.200  avgt    5    36.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                   200.200.200.200  avgt    5    17.000                 ms
VersionParseBenchmark.yoloNoTry                                              200.200.99999  avgt    5  2090.509 ±   55.529   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                               200.200.99999  avgt    5   992.239 ±   26.668  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                          200.200.99999  avgt    5  1088.003 ±    0.019    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                    200.200.99999  avgt    5    34.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                     200.200.99999  avgt    5    22.000                 ms
VersionParseBenchmark.yoloNoTry                                               200.200.-200  avgt    5  2073.857 ±  204.163   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                200.200.-200  avgt    5  1015.379 ±  103.713  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                           200.200.-200  avgt    5  1104.003 ±    0.019    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                     200.200.-200  avgt    5    35.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                      200.200.-200  avgt    5    20.000                 ms
VersionParseBenchmark.yoloNoTry                                                      1.0.0  avgt    5   164.512 ±    5.407   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                       1.0.0  avgt    5  4357.848 ±  142.592  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                                  1.0.0  avgt    5   376.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                            1.0.0  avgt    5   130.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                             1.0.0  avgt    5    73.000                 ms
VersionParseBenchmark.yoloNoTry                                                200.200.200  avgt    5   188.999 ±    1.607   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                                 200.200.200  avgt    5  4115.570 ±   35.061  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                            200.200.200  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                      200.200.200  avgt    5   124.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                       200.200.200  avgt    5    61.000                 ms
VersionParseBenchmark.yoloNoTry                                            10000.9876.5432  avgt    5   213.424 ±   21.607   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                             10000.9876.5432  avgt    5  3646.632 ±  356.070  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                        10000.9876.5432  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                  10000.9876.5432  avgt    5   109.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                   10000.9876.5432  avgt    5    52.000                 ms
VersionParseBenchmark.yoloNoTry                                          10000.10000.10000  avgt    5   223.826 ±   25.393   ns/op
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate                           10000.10000.10000  avgt    5  3477.752 ±  387.160  MB/sec
VersionParseBenchmark.yoloNoTry:·gc.alloc.rate.norm                      10000.10000.10000  avgt    5   408.000 ±    0.002    B/op
VersionParseBenchmark.yoloNoTry:·gc.count                                10000.10000.10000  avgt    5   105.000             counts
VersionParseBenchmark.yoloNoTry:·gc.time                                 10000.10000.10000  avgt    5    58.000                 ms
VersionParseNoAllocBenchmark.optimized1                                                     avgt    5     2.078 ±    0.053   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                                      avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                           avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized1                                                200  avgt    5     5.507 ±    0.182   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                                 200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                      200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized1                                               200.  avgt    5     6.454 ±    0.038   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                                200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                     200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized1                                            200.200  avgt    5    13.522 ±    0.102   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                             200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                  200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized1                                           200.200.  avgt    5    26.869 ±    0.082   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                            200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                 200.200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized1                                          a.200.200  avgt    5    20.538 ±    0.624   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                           a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                a.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized1                                          200.a.200  avgt    5    30.787 ±    0.027   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                           200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                200.a.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized1                                          200.200.a  avgt    5    34.647 ±    0.262   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                           200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                200.200.a  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized1                                    200.200.200.200  avgt    5    21.235 ±    0.275   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                     200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                          200.200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized1                                      200.200.99999  avgt    5   125.531 ±    5.213   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                       200.200.99999  avgt    5  2187.105 ±   88.747  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                  200.200.99999  avgt    5   144.000 ±    0.001    B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                            200.200.99999  avgt    5    75.000             counts
VersionParseNoAllocBenchmark.optimized1:·gc.time                             200.200.99999  avgt    5    34.000                 ms
VersionParseNoAllocBenchmark.optimized1                                       200.200.-200  avgt    5    40.374 ±    3.848   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                        200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                             200.200.-200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized1                                              1.0.0  avgt    5    91.981 ±    3.188   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                               1.0.0  avgt    5  2984.888 ±  102.296  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                          1.0.0  avgt    5   144.000 ±    0.001    B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                                    1.0.0  avgt    5    89.000             counts
VersionParseNoAllocBenchmark.optimized1:·gc.time                                     1.0.0  avgt    5    42.000                 ms
VersionParseNoAllocBenchmark.optimized1                                        200.200.200  avgt    5   121.839 ±    0.384   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                         200.200.200  avgt    5  2252.957 ±    5.508  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                    200.200.200  avgt    5   144.000 ±    0.001    B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                              200.200.200  avgt    5    77.000             counts
VersionParseNoAllocBenchmark.optimized1:·gc.time                               200.200.200  avgt    5    38.000                 ms
VersionParseNoAllocBenchmark.optimized1                                    10000.9876.5432  avgt    5   133.951 ±    1.647   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                     10000.9876.5432  avgt    5  2049.434 ±   24.656  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm                10000.9876.5432  avgt    5   144.000 ±    0.001    B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                          10000.9876.5432  avgt    5    70.000             counts
VersionParseNoAllocBenchmark.optimized1:·gc.time                           10000.9876.5432  avgt    5    42.000                 ms
VersionParseNoAllocBenchmark.optimized1                                  10000.10000.10000  avgt    5   146.182 ±    0.199   ns/op
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate                   10000.10000.10000  avgt    5  1877.914 ±    1.686  MB/sec
VersionParseNoAllocBenchmark.optimized1:·gc.alloc.rate.norm              10000.10000.10000  avgt    5   144.000 ±    0.001    B/op
VersionParseNoAllocBenchmark.optimized1:·gc.count                        10000.10000.10000  avgt    5    65.000             counts
VersionParseNoAllocBenchmark.optimized1:·gc.time                         10000.10000.10000  avgt    5    33.000                 ms
VersionParseNoAllocBenchmark.optimized2                                                     avgt    5     2.069 ±    0.002   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                                      avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                           avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                                200  avgt    5     5.515 ±    0.051   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                                 200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                      200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                               200.  avgt    5     6.466 ±    0.054   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                                200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                     200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                            200.200  avgt    5    13.799 ±    1.198   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                             200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                  200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                           200.200.  avgt    5    27.184 ±    1.267   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                            200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                 200.200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                          a.200.200  avgt    5    18.995 ±    0.130   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                           a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                a.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                          200.a.200  avgt    5    26.591 ±    0.089   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                           200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                200.a.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                          200.200.a  avgt    5    35.210 ±    0.226   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                           200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                200.200.a  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                    200.200.200.200  avgt    5    21.291 ±    0.182   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                     200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                          200.200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                      200.200.99999  avgt    5    91.141 ±    0.252   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                       200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                  200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                            200.200.99999  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                       200.200.-200  avgt    5    37.873 ±    1.391   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                        200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                             200.200.-200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                              1.0.0  avgt    5    56.888 ±    0.280   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                               1.0.0  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                          1.0.0  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                                    1.0.0  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                        200.200.200  avgt    5    85.155 ±    0.099   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                         200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                    200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                              200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                    10000.9876.5432  avgt    5    99.134 ±    0.485   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                     10000.9876.5432  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm                10000.9876.5432  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                          10000.9876.5432  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized2                                  10000.10000.10000  avgt    5   112.207 ±    1.715   ns/op
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate                   10000.10000.10000  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized2:·gc.alloc.rate.norm              10000.10000.10000  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized2:·gc.count                        10000.10000.10000  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                                     avgt    5     2.102 ±    0.279   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                                      avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                           avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                                200  avgt    5    11.352 ±    0.081   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                                 200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                      200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                               200.  avgt    5    26.152 ±    0.056   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                                200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                     200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                            200.200  avgt    5    32.111 ±    4.262   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                             200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                  200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                           200.200.  avgt    5    48.097 ±    1.229   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                            200.200.  avgt    5     0.003 ±    0.017  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                 200.200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                          a.200.200  avgt    5     2.367 ±    0.004   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                           a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                a.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                          200.a.200  avgt    5    27.972 ±    0.060   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                           200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                200.a.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                          200.200.a  avgt    5    67.198 ±    0.120   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                           200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                200.200.a  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                    200.200.200.200  avgt    5    58.917 ±    0.220   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                     200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                          200.200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                      200.200.99999  avgt    5    80.319 ±    0.423   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                       200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                  200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                            200.200.99999  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                       200.200.-200  avgt    5    57.910 ±    1.677   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                        200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                             200.200.-200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                              1.0.0  avgt    5    41.423 ±    0.408   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                               1.0.0  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                          1.0.0  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                                    1.0.0  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                        200.200.200  avgt    5    67.851 ±    0.110   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                         200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                    200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                              200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                    10000.9876.5432  avgt    5    85.230 ±    0.297   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                     10000.9876.5432  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm                10000.9876.5432  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                          10000.9876.5432  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3                                  10000.10000.10000  avgt    5    99.666 ±    0.201   ns/op
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate                   10000.10000.10000  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3:·gc.alloc.rate.norm              10000.10000.10000  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3:·gc.count                        10000.10000.10000  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                                 avgt    5     2.070 ±    0.002   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                                  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                             avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                                       avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                            200  avgt    5    11.375 ±    0.081   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                             200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                        200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                                  200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                           200.  avgt    5    22.721 ±    0.129   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                            200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                       200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                                 200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                        200.200  avgt    5    26.879 ±    0.783   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                         200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                    200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                              200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                       200.200.  avgt    5    47.747 ±    0.176   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                        200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                   200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                             200.200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                      a.200.200  avgt    5     2.367 ±    0.012   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                       a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                  a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                            a.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                      200.a.200  avgt    5    23.787 ±    0.018   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                       200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                  200.a.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                            200.a.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                      200.200.a  avgt    5    58.838 ±    1.986   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                       200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                  200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                            200.200.a  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                200.200.200.200  avgt    5    55.017 ±    0.025   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                 200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm            200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                      200.200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                  200.200.99999  avgt    5    74.471 ±    6.674   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                   200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm              200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                        200.200.99999  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                   200.200.-200  avgt    5    57.940 ±    0.141   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                    200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm               200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                         200.200.-200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                          1.0.0  avgt    5    43.781 ±    0.188   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                           1.0.0  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                      1.0.0  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                                1.0.0  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                    200.200.200  avgt    5    71.642 ±    1.876   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                     200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm                200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                          200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                                10000.9876.5432  avgt    5    89.196 ±   15.139   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate                 10000.9876.5432  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm            10000.9876.5432  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                      10000.9876.5432  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3Java                              10000.10000.10000  avgt    5    94.458 ±    0.260   ns/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate               10000.10000.10000  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3Java:·gc.alloc.rate.norm          10000.10000.10000  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3Java:·gc.count                    10000.10000.10000  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                                         avgt    5     2.072 ±    0.002   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                          avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                     avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                               avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                                    200  avgt    5    11.479 ±    1.379   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                     200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm                200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                          200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                                   200.  avgt    5    21.906 ±    0.023   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                    200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm               200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                         200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                                200.200  avgt    5    26.652 ±    0.847   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                 200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm            200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                      200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                               200.200.  avgt    5    48.597 ±    0.115   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm           200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                     200.200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                              a.200.200  avgt    5     2.957 ±    0.004   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate               a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm          a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                    a.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                              200.a.200  avgt    5    22.914 ±    0.100   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate               200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm          200.a.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                    200.a.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                              200.200.a  avgt    5    53.121 ±    0.072   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate               200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm          200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                    200.200.a  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                        200.200.200.200  avgt    5    53.133 ±    0.086   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate         200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm    200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count              200.200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                          200.200.99999  avgt    5    79.154 ±    1.886   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate           200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm      200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                200.200.99999  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                           200.200.-200  avgt    5    48.918 ±    0.365   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate            200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm       200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                 200.200.-200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                                  1.0.0  avgt    5    39.695 ±    0.232   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate                   1.0.0  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm              1.0.0  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                        1.0.0  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                            200.200.200  avgt    5    67.558 ±    0.084   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate             200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm        200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count                  200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                        10000.9876.5432  avgt    5    88.800 ±    0.203   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate         10000.9876.5432  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm    10000.9876.5432  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count              10000.9876.5432  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch                      10000.10000.10000  avgt    5    99.079 ±    0.200   ns/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate       10000.10000.10000  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.alloc.rate.norm  10000.10000.10000  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized3JavaNoSwitch:·gc.count            10000.10000.10000  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                                     avgt    5     2.071 ±    0.008   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                                      avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                           avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                                200  avgt    5    15.916 ±    0.027   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                                 200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                      200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                               200.  avgt    5    19.596 ±    0.491   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                                200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                     200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                            200.200  avgt    5    29.198 ±    0.324   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                             200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                  200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                           200.200.  avgt    5    31.221 ±    0.047   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                            200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                 200.200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                          a.200.200  avgt    5     2.366 ±    0.007   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                           a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                a.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                          200.a.200  avgt    5    19.188 ±    0.029   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                           200.a.200  avgt    5     0.003 ±    0.017  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                200.a.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                          200.200.a  avgt    5    29.814 ±    0.107   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                           200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                200.200.a  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                    200.200.200.200  avgt    5    40.875 ±    1.643   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                     200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                          200.200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                      200.200.99999  avgt    5    44.294 ±    0.192   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                       200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                  200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                            200.200.99999  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                       200.200.-200  avgt    5    29.743 ±    0.087   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                        200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                             200.200.-200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                              1.0.0  avgt    5    21.942 ±    0.095   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                               1.0.0  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                          1.0.0  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                                    1.0.0  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                        200.200.200  avgt    5    40.734 ±    0.177   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                         200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                    200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                              200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                    10000.9876.5432  avgt    5    53.119 ±    2.166   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                     10000.9876.5432  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm                10000.9876.5432  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                          10000.9876.5432  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized4                                  10000.10000.10000  avgt    5    58.463 ±    0.969   ns/op
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate                   10000.10000.10000  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized4:·gc.alloc.rate.norm              10000.10000.10000  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized4:·gc.count                        10000.10000.10000  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                                     avgt    5     2.085 ±    0.010   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                                      avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                           avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                                200  avgt    5    15.723 ±    0.104   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                                 200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                      200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                               200.  avgt    5    14.918 ±    0.475   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                                200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                     200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                            200.200  avgt    5    32.588 ±    0.069   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                             200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                  200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                           200.200.  avgt    5    27.855 ±    0.074   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                            200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                 200.200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                          a.200.200  avgt    5     3.286 ±    0.022   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                           a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                a.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                          200.a.200  avgt    5    18.425 ±    0.024   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                           200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                200.a.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                          200.200.a  avgt    5    33.086 ±    0.036   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                           200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                200.200.a  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                    200.200.200.200  avgt    5    45.831 ±    2.280   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                     200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                          200.200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                      200.200.99999  avgt    5    49.636 ±    0.289   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                       200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                  200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                            200.200.99999  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                       200.200.-200  avgt    5    32.154 ±    0.033   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                        200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                             200.200.-200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                              1.0.0  avgt    5    26.865 ±    0.033   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                               1.0.0  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                          1.0.0  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                                    1.0.0  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                        200.200.200  avgt    5    53.686 ±    0.064   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                         200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                    200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                              200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                    10000.9876.5432  avgt    5    69.791 ±    0.121   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                     10000.9876.5432  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm                10000.9876.5432  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                          10000.9876.5432  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized5                                  10000.10000.10000  avgt    5    76.314 ±    5.884   ns/op
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate                   10000.10000.10000  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized5:·gc.alloc.rate.norm              10000.10000.10000  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized5:·gc.count                        10000.10000.10000  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                                     avgt    5     2.073 ±    0.012   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                                      avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                                 avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                           avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                                200  avgt    5    12.618 ±    0.024   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                                 200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                            200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                      200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                               200.  avgt    5    15.261 ±    0.026   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                                200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                           200.  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                     200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                            200.200  avgt    5    23.331 ±    0.120   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                             200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                        200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                  200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                           200.200.  avgt    5    27.738 ±    0.079   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                            200.200.  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                       200.200.  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                 200.200.  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                          a.200.200  avgt    5     3.016 ±    0.302   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                           a.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                      a.200.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                a.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                          200.a.200  avgt    5    16.311 ±    0.047   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                           200.a.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                      200.a.200  avgt    5    ≈ 10⁻⁵               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                200.a.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                          200.200.a  avgt    5    29.615 ±    0.321   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                           200.200.a  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                      200.200.a  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                200.200.a  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                    200.200.200.200  avgt    5    33.916 ±    1.717   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                     200.200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                200.200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                          200.200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                      200.200.99999  avgt    5    36.391 ±    0.029   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                       200.200.99999  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                  200.200.99999  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                            200.200.99999  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                       200.200.-200  avgt    5    29.201 ±    0.031   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                        200.200.-200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                   200.200.-200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                             200.200.-200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                              1.0.0  avgt    5    20.232 ±    0.054   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                               1.0.0  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                          1.0.0  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                                    1.0.0  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                        200.200.200  avgt    5    32.438 ±    0.220   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                         200.200.200  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                    200.200.200  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                              200.200.200  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                    10000.9876.5432  avgt    5    42.025 ±    1.053   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                     10000.9876.5432  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm                10000.9876.5432  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                          10000.9876.5432  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.optimized6                                  10000.10000.10000  avgt    5    46.327 ±    0.065   ns/op
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate                   10000.10000.10000  avgt    5     0.003 ±    0.018  MB/sec
VersionParseNoAllocBenchmark.optimized6:·gc.alloc.rate.norm              10000.10000.10000  avgt    5    ≈ 10⁻⁴               B/op
VersionParseNoAllocBenchmark.optimized6:·gc.count                        10000.10000.10000  avgt    5       ≈ 0             counts
VersionParseNoAllocBenchmark.regex                                                          avgt    5    65.708 ±    2.624   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                           avgt    5  6267.660 ±  244.543  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                                      avgt    5   216.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                                avgt    5   163.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                                 avgt    5    84.000                 ms
VersionParseNoAllocBenchmark.regex                                                     200  avgt    5   109.033 ±   15.035   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                      200  avgt    5  3780.322 ±  503.183  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                                 200  avgt    5   216.000 ±    0.001    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                           200  avgt    5   130.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                            200  avgt    5    60.000                 ms
VersionParseNoAllocBenchmark.regex                                                    200.  avgt    5   164.153 ±    1.276   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                     200.  avgt    5  2508.765 ±   19.873  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                                200.  avgt    5   216.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                          200.  avgt    5    86.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                           200.  avgt    5    42.000                 ms
VersionParseNoAllocBenchmark.regex                                                 200.200  avgt    5   217.545 ±    2.609   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                  200.200  avgt    5  1892.866 ±   23.124  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                             200.200  avgt    5   216.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                       200.200  avgt    5    65.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                        200.200  avgt    5    39.000                 ms
VersionParseNoAllocBenchmark.regex                                                200.200.  avgt    5   250.088 ±    1.575   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                 200.200.  avgt    5  1646.572 ±   10.469  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                            200.200.  avgt    5   216.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                      200.200.  avgt    5    57.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                       200.200.  avgt    5    35.000                 ms
VersionParseNoAllocBenchmark.regex                                               a.200.200  avgt    5    48.092 ±    3.930   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                a.200.200  avgt    5  5710.582 ±  452.068  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                           a.200.200  avgt    5   144.000 ±    0.001    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                     a.200.200  avgt    5   154.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                      a.200.200  avgt    5    78.000                 ms
VersionParseNoAllocBenchmark.regex                                               200.a.200  avgt    5   168.956 ±    0.796   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                200.a.200  avgt    5  2437.295 ±   10.643  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                           200.a.200  avgt    5   216.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                     200.a.200  avgt    5    83.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                      200.a.200  avgt    5    40.000                 ms
VersionParseNoAllocBenchmark.regex                                               200.200.a  avgt    5   249.539 ±   11.624   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                200.200.a  avgt    5  1650.449 ±   75.234  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                           200.200.a  avgt    5   216.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                     200.200.a  avgt    5    56.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                      200.200.a  avgt    5    38.000                 ms
VersionParseNoAllocBenchmark.regex                                         200.200.200.200  avgt    5   296.019 ±   16.801   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                          200.200.200.200  avgt    5  1391.417 ±   78.453  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                     200.200.200.200  avgt    5   216.000 ±    0.003    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                               200.200.200.200  avgt    5    48.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                200.200.200.200  avgt    5    29.000                 ms
VersionParseNoAllocBenchmark.regex                                           200.200.99999  avgt    5   366.381 ±    3.376   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                            200.200.99999  avgt    5  1873.249 ±   16.910  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                       200.200.99999  avgt    5   360.001 ±    0.003    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                 200.200.99999  avgt    5    65.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                  200.200.99999  avgt    5    29.000                 ms
VersionParseNoAllocBenchmark.regex                                            200.200.-200  avgt    5   250.741 ±    3.016   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                             200.200.-200  avgt    5  1642.348 ±   19.539  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                        200.200.-200  avgt    5   216.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                  200.200.-200  avgt    5    56.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                   200.200.-200  avgt    5    33.000                 ms
VersionParseNoAllocBenchmark.regex                                                   1.0.0  avgt    5   209.102 ±    1.170   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                                    1.0.0  avgt    5  3282.252 ±   16.695  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                               1.0.0  avgt    5   360.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                         1.0.0  avgt    5   113.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                          1.0.0  avgt    5    54.000                 ms
VersionParseNoAllocBenchmark.regex                                             200.200.200  avgt    5   323.566 ±   23.181   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                              200.200.200  avgt    5  2121.762 ±  149.658  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                         200.200.200  avgt    5   360.001 ±    0.003    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                                   200.200.200  avgt    5    73.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                    200.200.200  avgt    5    48.000                 ms
VersionParseNoAllocBenchmark.regex                                         10000.9876.5432  avgt    5   384.797 ±   16.769   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                          10000.9876.5432  avgt    5  1783.917 ±   76.215  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                     10000.9876.5432  avgt    5   360.001 ±    0.004    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                               10000.9876.5432  avgt    5    62.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                                10000.9876.5432  avgt    5    27.000                 ms
VersionParseNoAllocBenchmark.regex                                       10000.10000.10000  avgt    5   365.008 ±    2.079   ns/op
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate                        10000.10000.10000  avgt    5  1880.291 ±   12.446  MB/sec
VersionParseNoAllocBenchmark.regex:·gc.alloc.rate.norm                   10000.10000.10000  avgt    5   360.001 ±    0.003    B/op
VersionParseNoAllocBenchmark.regex:·gc.count                             10000.10000.10000  avgt    5    64.000             counts
VersionParseNoAllocBenchmark.regex:·gc.time                              10000.10000.10000  avgt    5    30.000                 ms
VersionParseNoAllocBenchmark.yolo                                                           avgt    5  2784.036 ±  370.316   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                            avgt    5   663.503 ±   87.529  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                                       avgt    5   968.004 ±    0.027    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                                 avgt    5    23.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                                  avgt    5    13.000                 ms
VersionParseNoAllocBenchmark.yolo                                                      200  avgt    5  1908.294 ±  279.221   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                       200  avgt    5   824.150 ±  123.328  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                                  200  avgt    5   824.003 ±    0.018    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                            200  avgt    5    29.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                             200  avgt    5    19.000                 ms
VersionParseNoAllocBenchmark.yolo                                                     200.  avgt    5  2019.703 ±  219.352   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                      200.  avgt    5   899.179 ±   95.271  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                                 200.  avgt    5   952.003 ±    0.019    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                           200.  avgt    5    31.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                            200.  avgt    5    27.000                 ms
VersionParseNoAllocBenchmark.yolo                                                  200.200  avgt    5  2049.385 ±  212.714   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                   200.200  avgt    5   930.815 ±  100.314  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                              200.200  avgt    5  1000.003 ±    0.019    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                        200.200  avgt    5    32.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                         200.200  avgt    5    22.000                 ms
VersionParseNoAllocBenchmark.yolo                                                 200.200.  avgt    5  2047.710 ±  203.242   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                  200.200.  avgt    5   931.513 ±   95.958  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                             200.200.  avgt    5  1000.003 ±    0.019    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                       200.200.  avgt    5    32.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                        200.200.  avgt    5    19.000                 ms
VersionParseNoAllocBenchmark.yolo                                                a.200.200  avgt    5  3017.065 ±  203.912   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                 a.200.200  avgt    5   763.540 ±   52.917  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                            a.200.200  avgt    5  1208.005 ±    0.028    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                      a.200.200  avgt    5    26.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                       a.200.200  avgt    5    21.000                 ms
VersionParseNoAllocBenchmark.yolo                                                200.a.200  avgt    5  2922.599 ±  376.296   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                 200.a.200  avgt    5   788.727 ±  102.270  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                            200.a.200  avgt    5  1208.005 ±    0.028    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                      200.a.200  avgt    5    27.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                       200.a.200  avgt    5    14.000                 ms
VersionParseNoAllocBenchmark.yolo                                                200.200.a  avgt    5  3153.537 ±  111.127   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                 200.200.a  avgt    5   730.286 ±   26.164  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                            200.200.a  avgt    5  1208.005 ±    0.029    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                      200.200.a  avgt    5    25.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                       200.200.a  avgt    5    21.000                 ms
VersionParseNoAllocBenchmark.yolo                                          200.200.200.200  avgt    5  2146.266 ±  256.873   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                           200.200.200.200  avgt    5   988.545 ±  121.156  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                      200.200.200.200  avgt    5  1112.003 ±    0.020    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                200.200.200.200  avgt    5    34.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                 200.200.200.200  avgt    5    17.000                 ms
VersionParseNoAllocBenchmark.yolo                                            200.200.99999  avgt    5  2126.918 ±  255.297   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                             200.200.99999  avgt    5   975.992 ±  118.661  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                        200.200.99999  avgt    5  1088.003 ±    0.020    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                  200.200.99999  avgt    5    34.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                   200.200.99999  avgt    5    25.000                 ms
VersionParseNoAllocBenchmark.yolo                                             200.200.-200  avgt    5  2172.695 ±  206.898   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                              200.200.-200  avgt    5   969.070 ±   96.026  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                         200.200.-200  avgt    5  1104.003 ±    0.020    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                   200.200.-200  avgt    5    33.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                    200.200.-200  avgt    5    17.000                 ms
VersionParseNoAllocBenchmark.yolo                                                    1.0.0  avgt    5   164.106 ±   17.569   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                                     1.0.0  avgt    5  4184.806 ±  439.972  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                                1.0.0  avgt    5   360.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                          1.0.0  avgt    5   126.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                           1.0.0  avgt    5    61.000                 ms
VersionParseNoAllocBenchmark.yolo                                              200.200.200  avgt    5   191.586 ±   29.931   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                               200.200.200  avgt    5  3905.638 ±  585.688  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                          200.200.200  avgt    5   392.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                    200.200.200  avgt    5   117.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                     200.200.200  avgt    5    69.000                 ms
VersionParseNoAllocBenchmark.yolo                                          10000.9876.5432  avgt    5   202.874 ±    1.394   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                           10000.9876.5432  avgt    5  3683.408 ±   25.289  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                      10000.9876.5432  avgt    5   392.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                                10000.9876.5432  avgt    5   110.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                                 10000.9876.5432  avgt    5    58.000                 ms
VersionParseNoAllocBenchmark.yolo                                        10000.10000.10000  avgt    5   211.766 ±   19.489   ns/op
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate                         10000.10000.10000  avgt    5  3530.811 ±  313.982  MB/sec
VersionParseNoAllocBenchmark.yolo:·gc.alloc.rate.norm                    10000.10000.10000  avgt    5   392.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yolo:·gc.count                              10000.10000.10000  avgt    5   106.000             counts
VersionParseNoAllocBenchmark.yolo:·gc.time                               10000.10000.10000  avgt    5    73.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                                    avgt    5  2661.671 ±   67.889   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                                     avgt    5   693.405 ±   18.140  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                                avgt    5   968.004 ±    0.025    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                          avgt    5    24.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                           avgt    5    12.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                               200  avgt    5  1873.548 ±  213.191   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                                200  avgt    5   839.069 ±   99.530  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                           200  avgt    5   824.003 ±    0.018    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                     200  avgt    5    29.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                      200  avgt    5    15.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                              200.  avgt    5  1990.381 ±  210.208   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                               200.  avgt    5   912.422 ±  100.039  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                          200.  avgt    5   952.003 ±    0.019    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                    200.  avgt    5    31.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                     200.  avgt    5    16.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                           200.200  avgt    5  2035.276 ±  213.637   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                            200.200  avgt    5   937.255 ±  101.983  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                       200.200  avgt    5  1000.003 ±    0.019    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                 200.200  avgt    5    33.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                  200.200  avgt    5    21.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                          200.200.  avgt    5  2047.839 ±  199.892   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                           200.200.  avgt    5   931.432 ±   93.992  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                      200.200.  avgt    5  1000.003 ±    0.019    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                200.200.  avgt    5    32.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                 200.200.  avgt    5    19.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                         a.200.200  avgt    5  2932.028 ±  320.819   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                          a.200.200  avgt    5   785.965 ±   86.764  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                     a.200.200  avgt    5  1208.005 ±    0.027    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                               a.200.200  avgt    5    27.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                a.200.200  avgt    5    14.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                         200.a.200  avgt    5  2690.185 ±  278.769   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                          200.a.200  avgt    5   856.664 ±   90.030  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                     200.a.200  avgt    5  1208.004 ±    0.025    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                               200.a.200  avgt    5    29.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                200.a.200  avgt    5    18.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                         200.200.a  avgt    5  2894.858 ±  169.068   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                          200.200.a  avgt    5   795.733 ±   47.600  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                     200.200.a  avgt    5  1208.005 ±    0.027    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                               200.200.a  avgt    5    27.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                200.200.a  avgt    5    20.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                   200.200.200.200  avgt    5  2143.539 ±  213.183   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                    200.200.200.200  avgt    5   989.536 ±  102.028  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm               200.200.200.200  avgt    5  1112.003 ±    0.020    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                         200.200.200.200  avgt    5    34.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                          200.200.200.200  avgt    5    18.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                     200.200.99999  avgt    5   192.746 ±   17.568   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                      200.200.99999  avgt    5  3641.506 ±  321.212  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                 200.200.99999  avgt    5   368.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                           200.200.99999  avgt    5   110.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                            200.200.99999  avgt    5    56.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                      200.200.-200  avgt    5   194.569 ±    4.725   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                       200.200.-200  avgt    5  3762.870 ±   89.798  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                  200.200.-200  avgt    5   384.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                            200.200.-200  avgt    5   113.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                             200.200.-200  avgt    5    61.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                             1.0.0  avgt    5   164.030 ±   15.552   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                              1.0.0  avgt    5  4186.326 ±  399.908  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                         1.0.0  avgt    5   360.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                                   1.0.0  avgt    5   126.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                                    1.0.0  avgt    5    67.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                       200.200.200  avgt    5   187.397 ±    8.561   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                        200.200.200  avgt    5  3987.980 ±  177.857  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm                   200.200.200  avgt    5   392.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                             200.200.200  avgt    5   119.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                              200.200.200  avgt    5    63.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                   10000.9876.5432  avgt    5   208.430 ±   16.139   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                    10000.9876.5432  avgt    5  3586.705 ±  269.701  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm               10000.9876.5432  avgt    5   392.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                         10000.9876.5432  avgt    5   108.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                          10000.9876.5432  avgt    5    53.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrow                                 10000.10000.10000  avgt    5   207.407 ±    5.958   ns/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate                  10000.10000.10000  avgt    5  3603.447 ±  105.215  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.alloc.rate.norm             10000.10000.10000  avgt    5   392.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.count                       10000.10000.10000  avgt    5   108.000             counts
VersionParseNoAllocBenchmark.yoloNoThrow:·gc.time                        10000.10000.10000  avgt    5    53.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                               avgt    5  2299.758 ±  223.264   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                                avgt    5   802.887 ±   80.721  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                           avgt    5   968.004 ±    0.022    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                                     avgt    5    27.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                                      avgt    5    14.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                          200  avgt    5  1791.142 ±  209.337   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                           200  avgt    5   877.783 ±  107.284  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                      200  avgt    5   824.003 ±    0.017    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                                200  avgt    5    30.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                                 200  avgt    5    14.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                         200.  avgt    5  1900.542 ±  207.554   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                          200.  avgt    5   955.597 ±  108.644  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                     200.  avgt    5   952.003 ±    0.018    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                               200.  avgt    5    33.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                                200.  avgt    5    17.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                      200.200  avgt    5  1929.292 ±  210.368   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                       200.200  avgt    5   988.849 ±  112.330  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                  200.200  avgt    5  1000.003 ±    0.018    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                            200.200  avgt    5    34.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                             200.200  avgt    5    16.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                     200.200.  avgt    5  1969.628 ±  205.482   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                      200.200.  avgt    5   968.496 ±  105.221  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                 200.200.  avgt    5  1000.003 ±    0.018    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                           200.200.  avgt    5    33.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                            200.200.  avgt    5    25.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                    a.200.200  avgt    5  2781.986 ±  287.040   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                     a.200.200  avgt    5   828.341 ±   86.874  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                a.200.200  avgt    5  1208.004 ±    0.027    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                          a.200.200  avgt    5    29.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                           a.200.200  avgt    5    15.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                    200.a.200  avgt    5  2746.657 ±  179.963   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                     200.a.200  avgt    5   838.643 ±   56.125  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                200.a.200  avgt    5  1208.004 ±    0.026    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                          200.a.200  avgt    5    28.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                           200.a.200  avgt    5    19.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                    200.200.a  avgt    5  2558.973 ±  238.225   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                     200.200.a  avgt    5   900.435 ±   86.805  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                200.200.a  avgt    5  1208.004 ±    0.024    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                          200.200.a  avgt    5    31.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                           200.200.a  avgt    5    14.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                              200.200.200.200  avgt    5  2091.701 ±  294.955   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate               200.200.200.200  avgt    5  1014.569 ±  146.718  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm          200.200.200.200  avgt    5  1112.003 ±    0.020    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                    200.200.200.200  avgt    5    35.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                     200.200.200.200  avgt    5    21.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                200.200.99999  avgt    5   193.273 ±    1.807   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                 200.200.99999  avgt    5  3629.773 ±   37.312  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm            200.200.99999  avgt    5   368.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                      200.200.99999  avgt    5   125.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                       200.200.99999  avgt    5    58.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                 200.200.-200  avgt    5   198.641 ±   15.504   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                  200.200.-200  avgt    5  3687.103 ±  287.252  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm             200.200.-200  avgt    5   384.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                       200.200.-200  avgt    5   111.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                        200.200.-200  avgt    5    54.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                        1.0.0  avgt    5   157.756 ±    8.463   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                         1.0.0  avgt    5  4061.339 ±  217.952  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm                    1.0.0  avgt    5   336.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                              1.0.0  avgt    5   121.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                               1.0.0  avgt    5    68.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                                  200.200.200  avgt    5   183.485 ±    0.491   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate                   200.200.200  avgt    5  3823.779 ±   10.833  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm              200.200.200  avgt    5   368.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                        200.200.200  avgt    5   115.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                         200.200.200  avgt    5    52.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                              10000.9876.5432  avgt    5   209.547 ±    0.481   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate               10000.9876.5432  avgt    5  3348.167 ±    9.245  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm          10000.9876.5432  avgt    5   368.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                    10000.9876.5432  avgt    5   115.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                     10000.9876.5432  avgt    5    57.000                 ms
VersionParseNoAllocBenchmark.yoloNoThrowNoTry                            10000.10000.10000  avgt    5   209.737 ±    1.586   ns/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate             10000.10000.10000  avgt    5  3344.856 ±   25.238  MB/sec
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.alloc.rate.norm        10000.10000.10000  avgt    5   368.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.count                  10000.10000.10000  avgt    5   115.000             counts
VersionParseNoAllocBenchmark.yoloNoThrowNoTry:·gc.time                   10000.10000.10000  avgt    5    59.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                                      avgt    5  2367.504 ±  189.284   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                                       avgt    5   779.742 ±   64.088  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                                  avgt    5   968.004 ±    0.022    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                            avgt    5    27.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                             avgt    5    16.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                                 200  avgt    5  1795.998 ±  248.105   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                                  200  avgt    5   875.643 ±  125.070  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                             200  avgt    5   824.003 ±    0.017    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                       200  avgt    5    31.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                        200  avgt    5    18.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                                200.  avgt    5  1913.697 ±  281.187   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                                 200.  avgt    5   949.502 ±  142.727  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                            200.  avgt    5   952.003 ±    0.018    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                      200.  avgt    5    33.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                       200.  avgt    5    17.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                             200.200  avgt    5  1933.508 ±  216.093   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                              200.200  avgt    5   986.592 ±  115.145  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                         200.200  avgt    5  1000.003 ±    0.018    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                   200.200  avgt    5    34.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                    200.200  avgt    5    18.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                            200.200.  avgt    5  1965.104 ±  213.788   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                             200.200.  avgt    5   970.837 ±  110.006  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                        200.200.  avgt    5  1000.003 ±    0.018    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                  200.200.  avgt    5    33.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                   200.200.  avgt    5    22.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                           a.200.200  avgt    5  2546.583 ±  257.598   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                            a.200.200  avgt    5   904.859 ±   92.508  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                       a.200.200  avgt    5  1208.004 ±    0.024    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                 a.200.200  avgt    5    31.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                  a.200.200  avgt    5    17.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                           200.a.200  avgt    5  2822.723 ±  201.522   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                            200.a.200  avgt    5   816.061 ±   59.854  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                       200.a.200  avgt    5  1208.004 ±    0.026    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                 200.a.200  avgt    5    28.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                  200.a.200  avgt    5    19.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                           200.200.a  avgt    5  2591.047 ±  208.895   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                            200.200.a  avgt    5   889.210 ±   73.806  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                       200.200.a  avgt    5  1208.004 ±    0.024    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                 200.200.a  avgt    5    31.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                  200.200.a  avgt    5    15.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                     200.200.200.200  avgt    5  2039.793 ±  203.268   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                      200.200.200.200  avgt    5  1039.952 ±  107.670  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                 200.200.200.200  avgt    5  1112.003 ±    0.019    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                           200.200.200.200  avgt    5    36.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                            200.200.200.200  avgt    5    20.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                       200.200.99999  avgt    5  2069.164 ±  203.397   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                        200.200.99999  avgt    5  1002.996 ±  102.372  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                   200.200.99999  avgt    5  1088.003 ±    0.019    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                             200.200.99999  avgt    5    34.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                              200.200.99999  avgt    5    26.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                        200.200.-200  avgt    5  2078.150 ±  201.873   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                         200.200.-200  avgt    5  1013.343 ±  101.977  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                    200.200.-200  avgt    5  1104.003 ±    0.019    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                              200.200.-200  avgt    5    35.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                               200.200.-200  avgt    5    19.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                               1.0.0  avgt    5   174.203 ±   18.900   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                                1.0.0  avgt    5  3679.604 ±  390.548  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                           1.0.0  avgt    5   336.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                                     1.0.0  avgt    5    99.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                      1.0.0  avgt    5    52.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                         200.200.200  avgt    5   188.471 ±   16.577   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                          200.200.200  avgt    5  3723.787 ±  318.050  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                     200.200.200  avgt    5   368.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                               200.200.200  avgt    5   111.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                                200.200.200  avgt    5    56.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                     10000.9876.5432  avgt    5   214.391 ±   55.180   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                      10000.9876.5432  avgt    5  3283.583 ±  803.994  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm                 10000.9876.5432  avgt    5   368.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                           10000.9876.5432  avgt    5    99.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                            10000.9876.5432  avgt    5    57.000                 ms
VersionParseNoAllocBenchmark.yoloNoTry                                   10000.10000.10000  avgt    5   214.282 ±    1.941   ns/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate                    10000.10000.10000  avgt    5  3274.250 ±   30.432  MB/sec
VersionParseNoAllocBenchmark.yoloNoTry:·gc.alloc.rate.norm               10000.10000.10000  avgt    5   368.000 ±    0.002    B/op
VersionParseNoAllocBenchmark.yoloNoTry:·gc.count                         10000.10000.10000  avgt    5    98.000             counts
VersionParseNoAllocBenchmark.yoloNoTry:·gc.time                          10000.10000.10000  avgt    5    50.000                 ms

Benchmark result is saved to /static/data/charts/version-parsing/jdk17.json
