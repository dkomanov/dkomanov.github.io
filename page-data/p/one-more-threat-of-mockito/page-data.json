{"componentChunkName":"component---src-templates-blog-post-js","path":"/p/one-more-threat-of-mockito/","webpackCompilationHash":"9ce77ac5d7300494cd70","result":{"data":{"markdownRemark":{"id":"c21689cc-32c8-5255-b226-62c36b839794","excerpt":"Mockito is a great tool. It helps a lot. But nothing\nis perfect. Recently I’ve encountered the one scary thing and I want to share it. Usually, with Mockito…","html":"<p><a href=\"http://mockito.org/\">Mockito</a> is a great tool. It helps a lot. But nothing\nis perfect. Recently I’ve encountered the one scary thing and I want to share it.</p>\n<p>Usually, with Mockito, the test structure looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token string\">\"a thing\"</span> should <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"do something\"</span> in <span class=\"token keyword\">new</span> Scope <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// setup data</span>\n    <span class=\"token comment\">// setup mocks (returns/throws)</span>\n    thing<span class=\"token punctuation\">.</span>doSomething<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> must beCorrect\n    got <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// check calls to mocks</span>\n      noMoreCallsTo<span class=\"token punctuation\">(</span>mocks<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By default mock will return a default value (zero, <em>null</em> or empty collection).\nIf the return type is <em>Unit</em> it won’t do anything.</p>\n<p>Ok, where is the issue? I have a mutable structure (yes, yes, this is an issue too),\nsome code modifies it’s state and stores to the database. I want to write a Unit\ntest which will check, that the stored data is correct.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token string\">\"manager\"</span> should <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"change and store state\"</span> in <span class=\"token keyword\">new</span> Scope <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> MutableContainer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// original state</span>\n    <span class=\"token keyword\">val</span> dao <span class=\"token operator\">=</span> mock<span class=\"token punctuation\">[</span>Dao<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">val</span> manager <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Manager<span class=\"token punctuation\">(</span>dao<span class=\"token punctuation\">)</span>\n    manager<span class=\"token punctuation\">.</span>changeAndStore<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    got <span class=\"token punctuation\">{</span>\n      dao<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>beMutableContainer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// final expected state</span>\n      noMoreCallsTo<span class=\"token punctuation\">(</span>dao<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Eventually, I refactored the code inside <em>changeAndStore</em> method.\nEverything is green. By chance one of the E2E tests failed and I started\nto figure out how the unit test passed before.</p>\n<p>At this point, I need to mention what I’ve actually changed. Previously\nthe mutable class was totally mutable — all fields are mutable and contain\nreferences to mutable classes. I started to rewrite gradually from mutable\nstructures to immutable (change it at once is too much job). So for a transition\nperiod, I have a mutable container which contains some immutable data.\nSimplified version is:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> MutableContainer<span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> list<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">object</span> MutableMutator <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> mutate<span class=\"token punctuation\">(</span>c<span class=\"token operator\">:</span> MutableContainer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pf<span class=\"token operator\">:</span> PartialFunction<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    c<span class=\"token punctuation\">.</span>list <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>s <span class=\"token keyword\">=></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pf<span class=\"token punctuation\">.</span>isDefinedAt<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> pf<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> s<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <em>MutableContainer</em> class contain a mutable field with an immutable content.\nAnd the <em>MutableMutator</em> performs a mutation of this field with a new immutable\nobject, <em>PartialFunction</em> is used to do it.</p>\n<p>In the <em>changeAndStore</em> method I made a stupid mistake:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">MutableMutator<span class=\"token punctuation\">.</span>mutate<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> s@<span class=\"token string\">\"a\"</span> <span class=\"token keyword\">=></span>\n    <span class=\"token keyword\">val</span> newValue <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"b\"</span>\n    dao<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n    newValue\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, here I performed a call to a dao before the actual\nmutation in <em>MutableContainer</em> was performed. At the end, the <em>MutableContainer</em>\nwill contain all necessary changes but it won’t be stored in a database.\nAnd I cannot catch with the default Mockito setup.</p>\n<p>In other words, the problem is I’m checking expectations on mock <em>after</em> mutation\nwas performed. On the call to mock Mockito just stores a reference to all\narguments passed to the method, because an argument is a mutable class, it could\nbe changed after a call and you will match this argument with another state.</p>\n<h2 id=\"ok-what-to-do\"><a href=\"#ok-what-to-do\" aria-label=\"ok what to do permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ok, what to do?</h2>\n<p>Besides avoiding of mutable data structures…</p>\n<p>By its nature, dao don’t return anything (it throws an exception on errors) and\nwe don’t need to rely on its return value (so it’s <em>Unit</em>). Which means that\nMockito framework doesn’t force us to specify an expectation for a method before a call.</p>\n<p>We may turn Mockito to <a href=\"http://www.jmock.org/\">JMock</a> :)</p>\n<p>To do this, we need to make extra setup to our mock:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> dao <span class=\"token operator\">=</span> mock<span class=\"token punctuation\">[</span>ContainerDao<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span>defaultAnswer<span class=\"token punctuation\">(</span>i <span class=\"token keyword\">=></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> Ex<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"Unexpected call: $i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ndoAnswer<span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>when<span class=\"token punctuation\">(</span>dao<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// final expected state</span></code></pre></div>\n<p>The first expression creates a mock which will throw an exception by default.\nThe second expression specifies a concrete expectation. Now, an expectation will\nbe checked at the same time when the method is calling. If an expectation\nmatched not successfully, the <em>defaultAnswer</em> will be used and will throw an exception.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>I don’t know enough about JMock to make a decision to switch from Mockito to JMock.\nBut at least, it’s worth to think about use throwing default answer with Mockito.\nAnd don’t use mutable data structures :)</p>\n<p>Originally posted on <a href=\"https://medium.com/@dkomanov/one-more-threat-of-mockito-d36d7df1c068\">Medium</a>.</p>","fields":{"slug":"/p/one-more-threat-of-mockito/"},"frontmatter":{"rawDate":"2016-02-02T00:00:00.000Z","date":"February 02, 2016","title":"One more threat of Mockito","description":"Discovery during testing of a mutable code with Mockito...","tags":["scala","design","testing"],"canonicalUrl":"https://medium.com/@dkomanov/one-more-threat-of-mockito-d36d7df1c068","cover":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/p/one-more-threat-of-mockito/","previous":{"fields":{"slug":"/p/scala-how-to-return-a-result-code-in-a-concise-way/"}},"next":{"fields":{"slug":"/p/scala-serialization/"}}}}}