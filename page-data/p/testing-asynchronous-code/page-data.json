{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/p/testing-asynchronous-code/",
    "result": {"data":{"markdownRemark":{"id":"2fcff4cc-6ba0-5b79-b504-50374c20f4c1","excerpt":"Recently I’ve fixed a flaky test and I want to share some thoughts (very trivial)\nabout how to make no mistakes. So, we have a simple class Throttler for…","html":"<p>Recently I’ve fixed a flaky test and I want to share some thoughts (very trivial)\nabout how to make no mistakes. So, we have a simple class Throttler for dealing\nhigh load on a some part of code (basically it’s a wrapper around\n<a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Semaphore.html\">Semaphore</a>):</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> ThrottledException <span class=\"token keyword\">extends</span> RuntimeException<span class=\"token punctuation\">(</span><span class=\"token string\">\"Throttled!\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> Throttler<span class=\"token punctuation\">(</span>count<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> semaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Semaphore<span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>semaphore<span class=\"token punctuation\">.</span>tryAcquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> ThrottledException\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      f\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n      semaphore<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I use <a href=\"https://etorreborre.github.io/specs2/\">specs2</a> for a testing. The first test will be sequential\n(very simple):</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> ThrottlerTest <span class=\"token keyword\">extends</span> Specification <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"Throttler\"</span> should <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"execute sequential\"</span> in <span class=\"token keyword\">new</span> ctx <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> invocationCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> to <span class=\"token namespace\">maxCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        throttler <span class=\"token punctuation\">{</span>\n          invocationCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      invocationCount must be_<span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>maxCount <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">trait</span> ctx <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> maxCount <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n    <span class=\"token keyword\">val</span> throttler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Throttler<span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ok. Now we need to test that our Throttler works well in a multithreaded environment.\nLet’s prepare for an async test and add some support code to ctx trait:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> e <span class=\"token operator\">=</span> Executors<span class=\"token punctuation\">.</span>newCachedThreadPool<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">implicit</span> <span class=\"token keyword\">val</span> ec<span class=\"token operator\">:</span> ExecutionContext<span class=\"token operator\">=</span>ExecutionContext<span class=\"token punctuation\">.</span>fromExecutor<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> waitForeverLatch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CountDownLatch<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> after<span class=\"token operator\">:</span> <span class=\"token builtin\">Any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  waitForeverLatch<span class=\"token punctuation\">.</span>countDown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  e<span class=\"token punctuation\">.</span>shutdownNow<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">def</span> waitForever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  waitForeverLatch<span class=\"token punctuation\">.</span>await<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> _<span class=\"token operator\">:</span> InterruptedException <span class=\"token keyword\">=></span>\n  <span class=\"token keyword\">case</span> ex<span class=\"token operator\">:</span> Throwable <span class=\"token keyword\">=></span> <span class=\"token keyword\">throw</span> ex\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ExecutionContext is for Future construction, waitForever method is to sleep to the\nend of test. In the after function we shutdown an executor service.</p>\n<p>A naive way to test multithreaded behavior of the Throttler will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token string\">\"throw exception once reached the limit [naive,flaky]\"</span> in <span class=\"token keyword\">new</span> ctx <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token namespace\">maxCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Future <span class=\"token punctuation\">{</span>\n      throttler<span class=\"token punctuation\">(</span>waitForever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  throttler <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> must throwA<span class=\"token punctuation\">[</span>ThrottledException<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We’re creating maxCount Futures that calls function waitForever which is waiting\nuntil the end of test. Of course this naive way almost doesn’t work. Plenty of\ntimes we will be exception expectation error: the last call for a throttler\n(with expectation) may occur before one of futures start (and exception will\nbe thrown in this future).</p>\n<p>To fix it we need to wait somehow until all futures starts. Here is an approach\nthat is familiar to many of us:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token string\">\"throw exception once reached the limit [naive, bad]\"</span> in <span class=\"token keyword\">new</span> ctx <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token namespace\">maxCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Future <span class=\"token punctuation\">{</span>\n      throttler<span class=\"token punctuation\">(</span>waitForever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  Thread<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  throttler <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> must throwA<span class=\"token punctuation\">[</span>ThrottledException<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Yes, just add a sleep method call with some reasonable duration. Ok, now our test\nwill pass almost always, but… This approach is wrong at least by two reasons:</p>\n<ul>\n<li>A duration of test will be as long as “reasonable duration”</li>\n<li>Sometimes (in very rare situations like machine is under high load) it</li>\n</ul>\n<p>won’t work — this reasonable duration won’t be enough.</p>\n<p>If you’re still doubt about it — ask <a href=\"https://www.google.com/?q=why+thread+sleep+is+a+bad+practice+java\">Google</a> for more\nreasoning. Now we will try to synchronize start of futures and our expectation.\nLet use CountDownLatch class from java.util.concurrent:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token string\">\"throw exception once reached the limit [working]\"</span> in <span class=\"token keyword\">new</span> ctx <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> barrier <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> CountDownLatch<span class=\"token punctuation\">(</span>maxCount<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to <span class=\"token namespace\">maxCount</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Future <span class=\"token punctuation\">{</span>\n      throttler <span class=\"token punctuation\">{</span>\n        barrier<span class=\"token punctuation\">.</span>countDown<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        waitForever<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  barrier<span class=\"token punctuation\">.</span>await<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span> must beTrue\n\n  throttler <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> must throwA<span class=\"token punctuation\">[</span>ThrottledException<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We use CountDownLatch for a <a href=\"https://en.wikipedia.org/wiki/Barrier_%28computer_science%29\">barrier synchronization</a>.\nAwait method will wait until latch count won’t reach zero. And just to mention,\nwe use a little bit higher timeout for waiting. It’s just to avoid failing in\nrare cases, it won’t affect on test duration (it will be much less than a second).</p>\n<p>Instead of a conclusion I want to share with my own rule about Thread.sleep.\nI use it only to check a hypothesis (in case when I’m not sure) — it takes a bit\nless time to insert sleep on a certain place. And in general when I’m thinking\nabout sleeping I use CountDownLatch. Even for a trivial waiting (like waitForever\nfunction, I could use something like <code class=\"language-text\">Thread.sleep(Long.MAX_VALUE)</code>) because it’s\nalways better not to use fragile approach at all.</p>\n<p>Related links:</p>\n<ul>\n<li><a href=\"https://github.com/dkomanov/scala-junk/blob/master/src/test/scala/com/komanov/examples/ThrottlerTest.scala\">Code</a> related to the post.</li>\n<li>Reworked version in <a href=\"http://engineering.wix.com/2015/10/07/testing-asynchronous-code/\">Wix Blog</a>.</li>\n<li>Republished version on <a href=\"http://www.javacodegeeks.com/2015/10/testing-asynchronous-code.html\">javacodegeeks</a>.</li>\n<li><a href=\"https://pixabay.com/en/ancient-art-background-cosmos-dark-764930/\">Cover image</a></li>\n</ul>","fields":{"slug":"/p/testing-asynchronous-code/"},"frontmatter":{"rawDate":"2015-09-13T00:00:00.000Z","date":"September 13, 2015","title":"Testing Asynchronous Code","description":"Some tricks how to reliably test multithreaded code in Java/Scala...","tags":["scala","specs2","async","testing"],"canonicalUrl":null,"cover":{"publicURL":"/static/272d2b284acc8b44f18aee5d86d4070b/cover.jpg"}}}},"pageContext":{"slug":"/p/testing-asynchronous-code/","previous":{"fields":{"slug":"/p/small-design-issues/"}},"next":{"fields":{"slug":"/p/first-time-on-wix-engineering-blog/"}}}},
    "staticQueryHashes": ["1092343521","1428769721","2792650193","3369465568"]}