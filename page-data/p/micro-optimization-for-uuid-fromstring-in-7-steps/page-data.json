{"componentChunkName":"component---src-templates-blog-post-js","path":"/p/micro-optimization-for-uuid-fromstring-in-7-steps/","result":{"data":{"markdownRemark":{"id":"e29558ec-d16f-519a-83a6-a74139005a95","excerpt":"I spent some time on optimizing UUID.fromString\nfunction and I want to share my experience about it. TL;DR — we will improve\nit’s performance 4+ times in…","html":"<p>I spent some time on optimizing <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#fromString-java.lang.String-\">UUID.<em>fromString</em></a>\nfunction and I want to share my experience about it. TL;DR — we will improve\nit’s performance 4+ times in 7 steps.</p>\n<p>First of all: such optimizations (micro-level) are not worth (most of the time)\nof doing it. <a href=\"https://en.wikipedia.org/wiki/Program_optimization\">Wiki article</a> about\noptimization is quite good. The first rule of optimization — don’t do it.\nNevertheless, sometimes it could be fascinating.</p>\n<p>So, we have an <a href=\"http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/default/src/share/classes/java/util/UUID.java\">implementation</a> of\nUUID.<em>fromString</em> (parses from string values like this:\n“01234567–89ab-cdef-abcd-ef1234567890” it’s a 128-bit blob) in JDK:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">UUID</span> <span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> components <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid UUID string: \"</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        components<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0x\"</span><span class=\"token operator\">+</span>components<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">long</span> mostSigBits <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">longValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>The first thing is striking — they use the String.<em>split</em> method to divide a string\ninto components. Of course, it’s not the most efficient way to parse a string:</p>\n<ul>\n<li>It uses regular expressions;</li>\n<li>It creates an array and new strings (for our case it’s 1 allocation for an\narray and 5 allocations for components).</li>\n</ul>\n<h2 id=\"0-replace-stringsplit-with-a-compiled-pattern\" style=\"position:relative;\"><a href=\"#0-replace-stringsplit-with-a-compiled-pattern\" aria-label=\"0 replace stringsplit with a compiled pattern permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/dkomanov/scala-junk/blob/master/src/main/scala/com/komanov/uuid/UuidJava0Utils.java\">0</a>. Replace String.split with a compiled pattern</h2>\n<p>OK, let’s try to deal with a regular expression by using at least a compiled\nregular expression:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Pattern</span> SPLIT_PATTERN <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">UUID</span> <span class=\"token function\">fromStringFast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> components <span class=\"token operator\">=</span> SPLIT_PATTERN<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>… and this didn’t help. On the contrary, it made it worse: 473 ns against 353 ns\n(this is average among 20m repetitions). I looked up to a String.<em>split</em> source\nand found out that JDK was written by good developers: they’ve done an\noptimization for 1 and 2-symbol regular expressions so they don’t actually\nuse a regular expressions. Good.</p>\n<h2 id=\"1-use-indexofsubstring-instead-of-split\" style=\"position:relative;\"><a href=\"#1-use-indexofsubstring-instead-of-split\" aria-label=\"1 use indexofsubstring instead of split permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/dkomanov/scala-junk/blob/master/src/main/scala/com/komanov/uuid/UuidJava1Utils.java\">1</a>. Use indexOf/substring instead of split</h2>\n<p>So, we need to deal with redundant memory allocations by using <em>indexOf</em>\nmethod without creating an array (code is simplified, all the check are\nomitted, but in performance tests it presents).</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> component1EndIndex <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> component2EndIndex <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">,</span> component1EndIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> component3EndIndex <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">,</span> component2EndIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> component4EndIndex <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">,</span> component3EndIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> mostSigBits <span class=\"token operator\">=</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> component1EndIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmostSigBits <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\nmostSigBits <span class=\"token operator\">|=</span>\n    <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> component1EndIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> component2EndIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Instead of creating an array with 5 strings, we’re looking for 4 hyphens\nand making substrings. Now we have a gain 340 ns against 353 ns (4%).\nThe gain is not really good, obviously, JIT done something there.\nBut still, we removed not only because of an array allocation — before an array\ncreation in split method the ArrayList is created and then it’s content\nis copying to the new array (so, this is at least 2 allocations: one for\nthe default ArrayList size (10 elements) and one for the result (5 elements)).</p>\n<h2 id=\"2-dont-use-concatenation\" style=\"position:relative;\"><a href=\"#2-dont-use-concatenation\" aria-label=\"2 dont use concatenation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/dkomanov/scala-junk/blob/master/src/main/scala/com/komanov/uuid/UuidJava2Utils.java\">2</a>. Don’t use concatenation</h2>\n<p>The next strange thing is concatenation. In the original <em>fromString</em> function\ncomponents are “normalizing” by prepending with the “0x” string to say\nto Long.<em>decode</em> function that the number is hexadecimal. I don’t really\nunderstand the author’s thought — why don’t just use Long.<em>parseLong</em> method\nwith the specified radix? So, this is what we will try to do:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> mostSigBits <span class=\"token operator\">=</span> <span class=\"token function\">substringAndParseLong</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> component1EndIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmostSigBits <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\nmostSigBits <span class=\"token operator\">|=</span> <span class=\"token function\">substringAndParseLong</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> component1EndIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> component2EndIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">substringAndParseLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Much simpler. And faster — 171 ns against 340 ns (50%).</p>\n<h2 id=\"3-dont-use-substring\" style=\"position:relative;\"><a href=\"#3-dont-use-substring\" aria-label=\"3 dont use substring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/dkomanov/scala-junk/blob/master/src/main/scala/com/komanov/uuid/UuidJava3Utils.java\">3</a>. Don’t use substring</h2>\n<p>The only allocations (which are slow operations) left in our implementation\nare calls to a <em>substring</em> method. The <em>substring</em> creates a new String\nobject and copies an internal character array.</p>\n<p>Unfortunately, JDK doesn’t provide <em>parseLong</em> without using the whole String.\nIf we want to avoid allocations, we need to implement parseLong by ourselves\n(of course, I took the <a href=\"http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/default/src/share/classes/java/lang/Long.java#l548\">JDK’s one</a>).</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> <span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Instead of using String indicies from 0 to <em>length</em>, we’re using indicies from\n<em>from</em> to <em>to</em>.</p>\n<p>And now we don’t have any allocations within UUID parsing! The final average time\nfor the method is 145 nanoseconds, which is almost 3 times faster that the\noriginal implementation.</p>\n<p>But maybe we can improve it more?</p>\n<h2 id=\"4-specific-replacement-for-the-characterdigit\" style=\"position:relative;\"><a href=\"#4-specific-replacement-for-the-characterdigit\" aria-label=\"4 specific replacement for the characterdigit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/dkomanov/scala-junk/blob/master/src/main/scala/com/komanov/uuid/UuidJava4Utils.java\">4</a>. Specific replacement for the Character.digit</h2>\n<p>In the original <em>parseLong</em> method there is this line:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">digit <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">digit</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> radix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The function digit returns the actual number for the specified character and\nradix (5 for ‘5’, 11 for ‘b’ or ‘B’ etc) . Because of a generic nature,\nthere are many unnecessary checks, because in this case\nwe’re using fixed radix — 16. After custom implementation of a digit function\nwe got more gain — 111 ns against 171 ns.</p>\n<h2 id=\"5-remove-redundant-checks-for-parselong\" style=\"position:relative;\"><a href=\"#5-remove-redundant-checks-for-parselong\" aria-label=\"5 remove redundant checks for parselong permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/dkomanov/scala-junk/blob/master/src/main/scala/com/komanov/uuid/UuidJava5Utils.java\">5</a>. Remove redundant checks for parseLong</h2>\n<p>And the last thing. We used a generic version of a <em>parseLong</em> function. But.\nWe know (for sure) that this is a special use-case: radix is fixed (16),\nnumbers should be positive (minus sign is used as a separator) and there\ncouldn’t be overflow (we simple check the string’s length for it). Code became\nmuch simpler and faster: 112 nanoseconds against 171 ns from the Step 3.</p>\n<h2 id=\"final-combine-steps-4-and-5\" style=\"position:relative;\"><a href=\"#final-combine-steps-4-and-5\" aria-label=\"final combine steps 4 and 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/dkomanov/scala-junk/blob/master/src/main/scala/com/komanov/uuid/UuidJavaFinalUtils.java\">Final</a>. Combine Steps 4 and 5</h2>\n<p>And now let’s combine Steps 4 and 5: use optimized version of the <em>parseLong</em>\nfunction and an own implementation of the <em>digit</em> function. And we get the final\nresult: 82 ns against original’s 353 ns (more than 4 times faster).</p>\n<p>What I really don’t like here is the specific implementation of the <em>digit</em>\nfunction. It consumes additional memory for a cache (not much, but still) and\nlooks really weird.</p>\n<p>Personally, I like the Step 5 — use optimized version of a <em>parseLong</em> and\nJDK’s Character.<em>digit</em>.</p>\n<h2 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<p>Shortly about our steps:</p>\n<ul>\n<li>Step 0 (unsuccessful): replace String.<em>split</em>(“-”) with</li>\n</ul>\n<p>Pattern.<em>compile</em>(“-”).<em>split</em> (String.<em>split</em> is optimized for it);</p>\n<ul>\n<li>Step 1: replace String.<em>split</em> with <em>indexOf</em>/<em>substring</em></li>\n</ul>\n<p>(-2 allocations for the ArrayList and the Array of Strings);</p>\n<ul>\n<li>Step 2: remove concatenation (additional allocations) and using <em>parseLong</em></li>\n</ul>\n<p>instead of heavy decode;</p>\n<ul>\n<li>Step 3: don’t use <em>substring</em> at all (no more allocations) — create own</li>\n</ul>\n<p><em>parseLong</em> implementation;</p>\n<ul>\n<li>Step 4: replace Character.<em>digit</em> with the specific only hex implementation;</li>\n<li>Step 5: remove all generic code from our <em>parseLong</em> implementation;</li>\n<li>Final: combine Step 4 and Step 5.</li>\n</ul>\n<p>Final time table:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Version    | Avg time, ns | Gain to previous | Gain to original\nOriginal   |   353        | 0                | 0\nStep 0     |   473        | -120 (-34%)      | -120 (-34%)\nStep 1     |   340        |                  | 13 (4%)\nStep 2     |   171        | 169 (50%)        | 182 (~2 times)\nStep 3     |   145        | 26 (15%)         | 208 (~2.5 times)\nStep 4     |   111        | 34 (23%)         | 242 (~3 times)\nStep 5     |   112        | -1 (-1%)         | 241 (~3 times)\nFinal      |    81        | 0                | 272 (~4.5 times)</code></pre></div>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>I think that developers of the JDK were a bit lazy when they implemented\nUUID.<em>fromString</em>. Maybe they decided that it’s not really important part of\nthe JDK, so no need to spend a more time on it. But at least the step 2 should\nbe done. A strange usage of <em>decode</em> function is really surprising.</p>\n<p>I know that the premature optimization is the root of the evil. Nevertheless,\nI believe that in such important frameworks (like JDK) everything should be\noptimized. When such code is present from version to version it’s sad\n(and this is why C++ developers laugh on us).</p>\n<p>You can find the full code <a href=\"https://github.com/dkomanov/scala-junk/\">here</a>.</p>\n<p>Originally posted on <a href=\"https://medium.com/@dkomanov/micro-optimization-for-uuid-fromstring-in-7-steps-277c9c72e982\">Medium</a>.</p>","fields":{"slug":"/p/micro-optimization-for-uuid-fromstring-in-7-steps/"},"frontmatter":{"rawDate":"2015-11-05T00:00:00.000Z","date":"November 05, 2015","title":"Micro-optimization for UUID.fromString in 7 steps","description":"A sequence of 7 micro-optimizations for parsing UUID from String to make it really fast!","tags":["java","jdk8","performance"],"canonicalUrl":"https://medium.com/@dkomanov/micro-optimization-for-uuid-fromstring-in-7-steps-277c9c72e982","cover":null}}},"pageContext":{"slug":"/p/micro-optimization-for-uuid-fromstring-in-7-steps/","previous":{"fields":{"slug":"/p/first-time-on-wix-engineering-blog/"}},"next":{"fields":{"slug":"/p/lets-continue-with-uuid-fromstring/"}}}},"staticQueryHashes":["3675711862"]}