{"componentChunkName":"component---src-templates-blog-post-js","path":"/p/writing-async-app-in-scala/","result":{"data":{"markdownRemark":{"id":"6e8b1463-360d-5cdb-8bc0-0be70e5798ad","excerpt":"retries\ntimeout Today asynchronous programming gets some traction. Some may argue even some hype. However, there are cases when it’s really necessary (or, let’s…","html":"<p><a href=\"https://medium.com/@john.m.murray786/exponential-back-off-with-scala-futures-7426340d0069\">retries</a>\n<a href=\"http://justinhj.github.io/2017/07/16/future-with-timeout.html\">timeout</a></p>\n<p>Today asynchronous programming gets some traction. Some may argue even some hype. However, there are cases when it’s really necessary (or, let’s put it mildly, favorably). In this blog post I’d like to put aside reasons behind writing an application in an async fashion, it’s a separate topic. Here I want to focus on the practical side of this topic - how it looks like, what we have to do in order to make it simpler, and what problems we may encounter. Everything here is based on my personal experience, so I hope it won’t be too academic.</p>\n<p>Another thing, I’m not going to explore different approaches of achieving asynchronicity (actor model, functional approaches, etc.) I’ve chosen approach with <a href=\"https://docs.scala-lang.org/overviews/core/futures.html\">Future model</a> of Scala because of the least additional cost of learning. This concept is easier understandable both for me and for people around me: leap from sync jala (java style on Scala) programming to Futures is just shorter.</p>\n<p>This post is written under the assumption that the reader is familiar with the concept of Future/Promise model and familiar with its implementation in Scala. If not, I would advise to read these articles first: <a href=\"https://alexn.org/blog/2017/01/30/asynchronous-programming-scala.html\">Asynchronous Programming and Scala</a> by <a href=\"https://alexn.org/\">Alexandru Nedelcu</a> and <a href=\"https://danielwestheide.com/blog/the-neophytes-guide-to-scala-part-8-welcome-to-the-future/\">The Neophyte’s Guide to Scala Part 8: Welcome to the Future\n</a> by <a href=\"https://danielwestheide.com/\">Daniel Westheide</a> (entire Neophyte’s Guide is awesome!).</p>\n<p>After such a long disclaimer, I have one more thing to say. A kind of application that I’m having in mind is simple: a backend for DB (not really important which one) with some REST/RPC exposure to the world (or internal world), which may also communicate via the network with other applications. Regular “web” application.</p>\n<p>TBD - make kind of TOC, disclaimer about skipping some parts.</p>\n<h2 id=\"regular-web-application\" style=\"position:relative;\"><a href=\"#regular-web-application\" aria-label=\"regular web application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Regular web application</h2>\n<p>In our synchronous world, the application may look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> validateRequest<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  require<span class=\"token punctuation\">(</span>request <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> regularRpcEndpoint<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  validateRequest<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isPermittedViaRpc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> PermissionDeniedException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">val</span> fromDb <span class=\"token operator\">=</span> retrieveFromDatabase<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> payload <span class=\"token operator\">=</span> convertPayloadFromDb<span class=\"token punctuation\">(</span>fromDb<span class=\"token punctuation\">)</span>\n  Response<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By the end of this post I hope it will be clear, how to rewrite application in asynchronous way and avoid some dangers of async approach.</p>\n<h2 id=\"writing-in-async-fashion\" style=\"position:relative;\"><a href=\"#writing-in-async-fashion\" aria-label=\"writing in async fashion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Writing in async fashion</h2>\n<p>NB: For simplicity let’s not think about <code class=\"language-text\">implicit ec: ExecutionContext</code> argument for Future operations yet. I will cover this topic a bit further.</p>\n<p>A straight-forward rewrite would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> regularRpcEndpoint<span class=\"token punctuation\">(</span>request<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Response<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  validateRequest<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n\n  isPermittedViaRpc<span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">{</span> isPermitted <span class=\"token keyword\">=></span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isPermitted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Future<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> PermissionDeniedException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      retrieveFromDatabase<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>convertPayloadFromDb<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>Response<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the following examples, I’ll show how to write a bit prettier…</p>\n<h3 id=\"if-statement-replacement\" style=\"position:relative;\"><a href=\"#if-statement-replacement\" aria-label=\"if statement replacement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>if-statement replacement</h3>\n<p>Suppose we have old-school future-less code:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> condition<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">def</span> action1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> action2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  action1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  action2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>How it would look like with futures? Suppose, all methods use some kind of IO inside, so:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> condition<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">def</span> action1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> action2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Unit</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\ncondition<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span>\n    action1<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">else</span>\n    action2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pretty straight-forward, right?</p>\n<h3 id=\"boolean-operations\" style=\"position:relative;\"><a href=\"#boolean-operations\" aria-label=\"boolean operations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Boolean operations</h3>\n<p>What if there are multiple conditions?</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> condition1<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition2<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition3<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>condition2 <span class=\"token operator\">||</span> condition3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>There aren’t much help from scala-library itself here, so let’s extend it a bit:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> FutureOfBooleanExtensions<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> future<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">AnyVal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    future<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>value <span class=\"token keyword\">=></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> other<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    future<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>value <span class=\"token keyword\">=></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> other<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now, with these extension methods we will get this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> condition1<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition2<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition3<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">val</span> condition <span class=\"token operator\">=</span> condition1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>condition2 <span class=\"token operator\">||</span> condition3<span class=\"token punctuation\">)</span>\ncondition<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Nice, right?</p>\n<p>We can go further, for example, if some of conditions aren’t IO-bound, or already calculated, we can just\nextend it a little bit more:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">implicit class BooleanToFutureExtensions(val v: Boolean) extends AnyVal {\n  def &amp;&amp;(other: =&gt; Future[Boolean]): Future[Boolean] =\n    if (v) other else Future.successful(false)\n\n  def ||(other: =&gt; Future[Boolean]): Future[Boolean] =\n    if (v) Future.successful(true) else other\n}</code></pre></div>\n<p>And use it:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> condition1<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition2<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> condition3<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">val</span> condition <span class=\"token operator\">=</span> condition1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>condition2 <span class=\"token operator\">||</span> condition3<span class=\"token punctuation\">)</span>\ncondition<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Same code, but now we can mix <code class=\"language-text\">Future[Boolean]</code> and <code class=\"language-text\">Boolean</code>. Well, almost… We also need to add corresponding extension methods to <code class=\"language-text\">Future[Boolean]</code> for commutativity, which is a bit more complex, because we can’t overload method with arguments <code class=\"language-text\">=&gt; Boolean</code> and <code class=\"language-text\">=&gt; Future[Boolean]</code>, so we need to use some implicit magic:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> FutureOfBooleanExtensions<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> future<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">AnyVal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> BooleanOrFutureOfBoolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    v<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span>\n        other <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> Bool<span class=\"token punctuation\">(</span>otherValue<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span>otherValue<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">case</span> Fut<span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> future\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span>\n        Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@implicitNotFound</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This method supports only arguments of type Boolean OR Future[Boolean]\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">sealed</span> <span class=\"token keyword\">trait</span> BooleanOrFutureOfBoolean\n\n<span class=\"token keyword\">object</span> BooleanOrFutureOfBoolean <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Bool<span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> BooleanOrFutureOfBoolean\n  <span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Fut<span class=\"token punctuation\">(</span>future<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> BooleanOrFutureOfBoolean\n\n  <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">def</span> `<span class=\"token builtin\">Boolean</span> to BooleanOrFutureOfBoolean`<span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BooleanOrFutureOfBoolean <span class=\"token operator\">=</span> Bool<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">def</span> `Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> to BooleanOrFutureOfBoolean`<span class=\"token punctuation\">(</span>v<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BooleanOrFutureOfBoolean <span class=\"token operator\">=</span> Fut<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"for-comprehensions-for-the-rescue\" style=\"position:relative;\"><a href=\"#for-comprehensions-for-the-rescue\" aria-label=\"for comprehensions for the rescue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for-comprehensions for the rescue</h3>\n<p>Another way of making code look like future-less code is using for-comprehensions. This topic is covered quite a lot (<a href=\"https://docs.scala-lang.org/overviews/core/futures.html#functional-composition-and-for-comprehensions\">1</a>, <a href=\"https://contributors.scala-lang.org/t/sequencing-in-for-comprehensions/779\">2</a>, <a href=\"https://stackoverflow.com/a/19046133/426397\">3</a>). In short, it looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> getMovie<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Movie<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> getActors<span class=\"token punctuation\">(</span>movie<span class=\"token operator\">:</span> Movie<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Seq<span class=\"token punctuation\">[</span>Actor<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">def</span> getPlot<span class=\"token punctuation\">(</span>movie<span class=\"token operator\">:</span> Movie<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>MoviePlot<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  movie <span class=\"token keyword\">&lt;-</span> getMovie\n  actors <span class=\"token keyword\">&lt;-</span> getActors<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n  plot <span class=\"token keyword\">&lt;-</span> getPlot<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> MovieDescription<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">,</span> plot<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"dealing-with-filter\" style=\"position:relative;\"><a href=\"#dealing-with-filter\" aria-label=\"dealing with filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dealing with filter</h4>\n<p>Looks very familiar. But in real life, it’s more complicated:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> hasPermissions<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  isPermitted <span class=\"token keyword\">&lt;-</span> hasPermissions\n  <span class=\"token keyword\">if</span> isPermitted\n  movie <span class=\"token keyword\">&lt;-</span> getMovie\n  <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>movie<span class=\"token punctuation\">.</span>hidden\n  actors <span class=\"token keyword\">&lt;-</span> getActors<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n  plot <span class=\"token keyword\">&lt;-</span> getPlot<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> MovieDescription<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">,</span> plot<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">if</code> construct is supported (via <code class=\"language-text\">withFilter</code> method of <code class=\"language-text\">Future</code>), of course, but <code class=\"language-text\">Future</code> will be resolved with <code class=\"language-text\">NoSuchElementException</code>, without ability to understand what’s really happened there.</p>\n<p>I came up with this solution (yes, another extension method):</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> BooleanFutureExtensions<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> future<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">AnyVal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> orFail<span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    future<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">(</span>t <span class=\"token keyword\">=></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>isSuccess <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>t<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span> Failure<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now we can rewrite it in this form:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  __ <span class=\"token keyword\">&lt;-</span> hasPermissions orFail <span class=\"token keyword\">new</span> PermissionDeniedException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n  movie <span class=\"token keyword\">&lt;-</span> getMovie\n  <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>movie<span class=\"token punctuation\">.</span>hidden\n  actors <span class=\"token keyword\">&lt;-</span> getActors<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n  plot <span class=\"token keyword\">&lt;-</span> getPlot<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> MovieDescription<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">,</span> plot<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now there will be <code class=\"language-text\">PermissionDeniedException</code> if user doesn’t have permissions, but still <code class=\"language-text\">NoSuchElementException</code> if movie is hidden. One of solutions might be this: instead of just comprehending <code class=\"language-text\">getMovie</code>, we may make it slightly more complex:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">movie <span class=\"token keyword\">&lt;-</span> getMovie<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_<span class=\"token punctuation\">.</span>hidden<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>recoverWith <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> _<span class=\"token operator\">:</span> NoSuchElementException <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> HiddenMovieException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As always, we can simplify it with simple extension method:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> FutureExtensions<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> future<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">AnyVal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> filterOrFail<span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> T <span class=\"token keyword\">=></span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    future<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>value <span class=\"token keyword\">=></span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> Future<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Much better now:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  _ <span class=\"token keyword\">&lt;-</span> hasPermissions orFail <span class=\"token keyword\">new</span> PermissionDeniedException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n  movie <span class=\"token keyword\">&lt;-</span> getMovie<span class=\"token punctuation\">.</span>filterOrFail<span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_<span class=\"token punctuation\">.</span>hidden<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> HiddenMovieException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  actors <span class=\"token keyword\">&lt;-</span> getActors<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n  plot <span class=\"token keyword\">&lt;-</span> getPlot<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> MovieDescription<span class=\"token punctuation\">(</span>movie<span class=\"token punctuation\">,</span> actors<span class=\"token punctuation\">,</span> plot<span class=\"token punctuation\">)</span></code></pre></div>\n<h4 id=\"dealing-with-option\" style=\"position:relative;\"><a href=\"#dealing-with-option\" aria-label=\"dealing with option permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dealing with Option</h4>\n<p>Another problem with for-comprehensions is that you can’t mix different monads (like <code class=\"language-text\">Option</code>). Because in real life it’s quite common to expose methods like:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> findMovie<span class=\"token punctuation\">(</span>title<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span>Movie<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>In this case, in for-comprehensions in this expression <code class=\"language-text\">movie &lt;- findMovie(&quot;Dark Waters&quot;)</code> the type of <code class=\"language-text\">movie</code> will be <code class=\"language-text\">Option[Movie]</code>, not <code class=\"language-text\">Movie</code>. Which is understandable, but we need to find out how to deal with it. One way is to expose Option-less version which resolves <code class=\"language-text\">Future</code> with some <code class=\"language-text\">Exception</code>. Another approach is, as you may already’ve guessed, to create a convenient extension method:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">implicit</span> <span class=\"token keyword\">class</span> FutureOfOptionExtensions<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> v<span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">AnyVal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> orFail<span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Throwable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">[</span>Future<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Future<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  movie <span class=\"token keyword\">&lt;-</span> findMovie<span class=\"token punctuation\">(</span><span class=\"token string\">\"Dark Waters\"</span><span class=\"token punctuation\">)</span> orFail <span class=\"token keyword\">new</span> MovieNotFoundException<span class=\"token punctuation\">(</span><span class=\"token string\">\"...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> movie</code></pre></div>\n<h2 id=\"exception-handling\" style=\"position:relative;\"><a href=\"#exception-handling\" aria-label=\"exception handling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exception Handling</h2>\n<p>I deliberately named this section as “Exception Handling” there are different error handling models: exceptions,\nerror codes, returning <a href=\"https://www.adtran.com/index.php/blog/technology-blog/255-asynchronous-functional-error-handling-in-scala\">Either</a> of business result or some kind of error etc. Here I want to research a bit how to deal with Future in JVM, because JVM does support exceptions, you can’t turn it off, so what are the caveats around Future and exceptions.</p>\n<p>Future is like <a href=\"https://www.scala-lang.org/api/2.12.10/scala/util/Try.html\">Try</a> in terms of exception handling: all methods of Future do catch exceptions and transforms Future into <a href=\"https://www.scala-lang.org/api/2.12.10/scala/concurrent/Future$.html#failed%5BT%5D(exception:Throwable):scala.concurrent.Future%5BT%5D\">failed</a> Future. Except for the <code class=\"language-text\">onComplete</code> method, exception from your callback will return in propagation to the <a href=\"https://www.scala-lang.org/api/2.12.10/scala/concurrent/ExecutionContext.html#reportFailure(cause:Throwable):Unit\">reportFailure</a> of your <a href=\"https://www.scala-lang.org/api/2.12.10/scala/concurrent/ExecutionContext.html\">ExecutionContext</a>. So, it’s safe to throw an exception in all functions that you pass to Future (map, flatMap etc.).</p>\n<p>However, there’s a caveat. Whenever it’s declared that a function returns <code class=\"language-text\">Future</code>, there is an assumption, that function can’t throw an exception — it returns a Future that eventually will be successful or failed. In most of the application code it doesn’t matter whether a function actually throws an exception or returns a failed Future, but not always.</p>\n<p>When you’re in an Future’s execution lifecycle, meaning calling methods of existing Future object like <code class=\"language-text\">map</code>, <code class=\"language-text\">flatMap</code> and <code class=\"language-text\">transform</code>, you’re safe in terms of exceptions:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">Future<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">=></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalArgumentException<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">=></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalStateException<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Effectively: Future.failed(new IllegalArgumentException)</span></code></pre></div>\n<p>But outside of this lifecycle there may be a problem:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> innocentFunction<span class=\"token punctuation\">(</span>param<span class=\"token operator\">:</span> <span class=\"token builtin\">AnyRef</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  require<span class=\"token punctuation\">(</span>param <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ninnocentFunction<span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">=></span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalStateException<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// an IllegalArgumentException will be thrown before map call</span></code></pre></div>\n<p>It’s very important to be cautious in, let’s call it, entry points. Whenever you’re outside of Future’s execution lifecycle. Usually, a web framework covers most of your application code — it provides and entry point like this for you:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def rpcFunction(param: AnyRef)(implicit ec: ExecutionContext): Future[AnyRef]</code></pre></div>\n<p>And inside such function it’s safe to throw exceptions, because the framework does <code class=\"language-text\">try..catch</code> for you (usually). But sometimes you need to escape from this lifecycle. I’ll give you an example. Suppose, we have a HttpRequest and we have caching layers (memcached and CDN) and a fallback to a Hadoop calculation (which takes a long time):</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> HttpRequest<span class=\"token punctuation\">(</span>uri<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> handleFromMemcached<span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> HttpRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  require<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>uri <span class=\"token operator\">!=</span> <span class=\"token string\">\"/memcached-boom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Memcached Boom!\"</span><span class=\"token punctuation\">)</span>\n  Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>uri <span class=\"token operator\">==</span> <span class=\"token string\">\"/memcached\"</span><span class=\"token punctuation\">)</span> Some<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> None<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> handleFromCdn<span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> HttpRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  require<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>uri <span class=\"token operator\">!=</span> <span class=\"token string\">\"/cnd-boom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CDN Boom!\"</span><span class=\"token punctuation\">)</span>\n  Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>uri <span class=\"token operator\">==</span> <span class=\"token string\">\"/cdn\"</span><span class=\"token punctuation\">)</span> Some<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> None<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> handleFromHadoop<span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> HttpRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n  Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> handle<span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> HttpRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// suppose here we're inside Future's execution lifecycle, so it's safe to throw exceptions.</span>\n  handleFromMemcached<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">{</span> memcachedResult <span class=\"token keyword\">=></span>\n      memcachedResult<span class=\"token punctuation\">.</span>fold <span class=\"token punctuation\">{</span>\n        handleFromCdn<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMap <span class=\"token punctuation\">{</span> cdnResult <span class=\"token keyword\">=></span>\n          cdnResult<span class=\"token punctuation\">.</span>fold <span class=\"token punctuation\">{</span>\n            handleFromHadoop<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">handle<span class=\"token punctuation\">(</span>HttpRequest<span class=\"token punctuation\">(</span><span class=\"token string\">\"/memcached-boom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// will throw new IllegalArgumentException(\"Memcached Boom!\")</span></code></pre></div>\n<p>The call itself will throw an exception, but the “framework” code usually wraps it in <code class=\"language-text\">try..catch</code>, so it will be handled correctly. Ok, this code works, but the implementation of the <code class=\"language-text\">handle</code> method is eye-bleeding: imagine we have 10 caching layers (or just intermediate calculations that we would like to reuse), it would be a nesting hell. Instead it would be nice to have something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> handlers<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>HttpRequest <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span>\n  handleFromMemcached<span class=\"token punctuation\">,</span>\n  handleFromCdn<span class=\"token punctuation\">,</span>\n  r <span class=\"token keyword\">=></span> handleFromHadoop<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>Some<span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> handle<span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> HttpRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  executeLazily<span class=\"token punctuation\">(</span>handlers<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>handler <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> handler<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>getOrElse<span class=\"token punctuation\">(</span><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> IllegalStateException<span class=\"token punctuation\">(</span><span class=\"token string\">\"Hadoop should always return Some!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> executeLazily<span class=\"token punctuation\">(</span>list<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Let’s implement this <code class=\"language-text\">executeLazily</code> function in a generic manner:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> executeLazily<span class=\"token punctuation\">[</span>Argument<span class=\"token punctuation\">,</span> Return<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>argument<span class=\"token operator\">:</span> Argument<span class=\"token punctuation\">,</span>\n                                    list<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>Argument <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span>Return<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                                   <span class=\"token punctuation\">(</span><span class=\"token keyword\">implicit</span> ec<span class=\"token operator\">:</span> ExecutionContext<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span>Return<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> promise <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span>Return<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> iterator <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>iterator\n\n  <span class=\"token keyword\">def</span> completeWith<span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> Try<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span>Return<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> t <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Success<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>isDefined <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>iterator<span class=\"token punctuation\">.</span>hasNext<span class=\"token punctuation\">)</span>\n        promise<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">else</span>\n        <span class=\"token comment\">//             ↓ DANGER IS HERE</span>\n        iterator<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onComplete<span class=\"token punctuation\">(</span>completeWith<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">case</span> Failure<span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n      promise<span class=\"token punctuation\">.</span>failure<span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  completeWith<span class=\"token punctuation\">(</span>Success<span class=\"token punctuation\">(</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  promise<span class=\"token punctuation\">.</span>future\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we create a Promise and resolve it once we encounter an exception or the Some result. But the problem here is that we use <code class=\"language-text\">onComplete</code> method, which means that we escape the boundaries of the execution lifecycle, and exception in a callback of the <code class=\"language-text\">onComplete</code> method will be propagated to ExecutionContext, not to the instance of Future. And this is something that we should keep in mind. So, with this implementation this will lead to a biiig problem:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">handle<span class=\"token punctuation\">(</span>HttpRequest<span class=\"token punctuation\">(</span><span class=\"token string\">\"/cdn-boom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And it’s quite severe, because the framework will get the Future from our <code class=\"language-text\">handle</code> method, but this Future won’t be resolved ever. And this, depending on defined timeouts, throttling and load could lead to something really bad (OutOfMemory, elevated response times etc.)</p>\n<h3 id=\"how-to-safely-create-futures\" style=\"position:relative;\"><a href=\"#how-to-safely-create-futures\" aria-label=\"how to safely create futures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to safely create futures?</h3>\n<p>There are couple solutions.</p>\n<p>One is to pay extra attention to places in your code, when execution is going outside of the Future’s execution context: whenever you’re using the <code class=\"language-text\">onComplete</code> method or creating a Promise that will be completed asynchronously, etc.</p>\n<p>In our case, fix this line:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">iterator<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onComplete<span class=\"token punctuation\">(</span>completeWith<span class=\"token punctuation\">)</span></code></pre></div>\n<p>To something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  iterator<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onComplete<span class=\"token punctuation\">(</span>completeWith<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> NonFatal<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> promise<span class=\"token punctuation\">.</span>failure<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another angle to handle this problem is a kind of defensive programming: minimize possibility of raising an exception. By using an utility function we may wrap all functions that produces Future:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> safeFuture<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    f\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> NonFatal<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> Future<span class=\"token punctuation\">.</span>failed<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> handleFromMemcached<span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> HttpRequest<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Future<span class=\"token punctuation\">[</span>Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> safeFuture <span class=\"token punctuation\">{</span>\n  require<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>uri <span class=\"token operator\">!=</span> <span class=\"token string\">\"/memcached-boom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Memcached Boom!\"</span><span class=\"token punctuation\">)</span>\n  Future<span class=\"token punctuation\">.</span>successful<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>uri <span class=\"token operator\">==</span> <span class=\"token string\">\"/memcached\"</span><span class=\"token punctuation\">)</span> Some<span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> None<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And now, this function will never throw an exception, but return a failed Future instead.</p>\n<p>As you may see, none of these approaches is error-prone, it’s very easy to forget to use <code class=\"language-text\">safeFuture</code> or miss an <code class=\"language-text\">onComplete</code> call somewhere in a codebase. In general, exceptions aren’t good (to say the least) for async programming as stack trace is mostly useless (I will back to this point soon). And there’s no way of turning it off as exceptions are deeply embedded in JVM.</p>\n<p>For me, personally, I prefer to stick to exceptions, just because we still need to take care of failed futures and adding another error handling model seems redundant.</p>\n<h2 id=\"threading-model\" style=\"position:relative;\"><a href=\"#threading-model\" aria-label=\"threading model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Threading Model</h2>\n<p>direct executor\npool for blocking\nseparate IO pool vs single pool</p>\n<h2 id=\"rewrite-a-real-service\" style=\"position:relative;\"><a href=\"#rewrite-a-real-service\" aria-label=\"rewrite a real service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rewrite a Real Service</h2>\n<p>make sure that old service has more or less good design and coverage\ncycle:</p>\n<ul>\n<li>write async implementation</li>\n<li>use it in sync version and run all tests</li>\n<li>delete sync version, rewrite tests, rewire sync code</li>\n<li>commit it all in order to preserve history</li>\n</ul>\n<h2 id=\"other-caveats\" style=\"position:relative;\"><a href=\"#other-caveats\" aria-label=\"other caveats permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Caveats</h2>\n<ul>\n<li>Don’t use Await. Never.</li>\n<li>Careful about Promises - don’t forget to resolve it by all means.</li>\n<li>Use Timer in order to make sure that you don’t have stale promises.</li>\n</ul>\n<h2 id=\"recap\" style=\"position:relative;\"><a href=\"#recap\" aria-label=\"recap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recap</h2>\n<p>Let’s recap the main points:</p>\n<ul>\n<li><code class=\"language-text\">Future</code> functionality is very limited out of the box, so extend it to make the life easier and the code more readable.</li>\n<li>Be careful outside of the Future’s execution lifecycle, specifically with the <code class=\"language-text\">onComplete</code> method and usage of <code class=\"language-text\">Promise</code>.</li>\n</ul>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Despite the fact that resource management is a well-known subject, there are still many mistakes around it. Especially in languages not mature enough (I believe, Scala is one of that kind). Don’t get me wrong, there are libraries in Scala world that handle resource management properly, i.e. <a href=\"https://github.com/pathikrit/better-files/\">better-files</a> or <a href=\"https://github.com/jsuereth/scala-arm/\">scala-arm</a>. But I believe that it should be a part of the language. Either as a language construct or as a part of a scala-library. It’s too important to not have it.</p>\n<p>All code is available on <a href=\"https://github.com/dkomanov/stuff/tree/master/src/com/komanov/future\">GitHub</a>. Originally posted on <a href=\"https://medium.com/@dkomanov/scala-try-with-resources-735baad0fd7d\">Medium</a>.</p>","fields":{"slug":"/p/writing-async-app-in-scala/"},"frontmatter":{"rawDate":"2020-05-02T00:00:00.000Z","date":"May 02, 2020","title":"Writing Async App in Scala with Futures","description":"TBD","tags":["scala","async","exception","error"],"canonicalUrl":"TBD","cover":null}}},"pageContext":{"slug":"/p/writing-async-app-in-scala/","previous":{"fields":{"slug":"/p/scala-try-with-resources/"}},"next":null}}}