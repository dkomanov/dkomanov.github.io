# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 0.00% complete, ETA 01:16:30
# Fork: 1 of 1
# Warmup Iteration   1: 77124.756 ns/op
# Warmup Iteration   2: 27698.952 ns/op
# Warmup Iteration   3: 25637.855 ns/op
# Warmup Iteration   4: 25832.453 ns/op
Iteration   1: 25994.169 ns/op
Iteration   2: 26735.187 ns/op
Iteration   3: 26590.455 ns/op
Iteration   4: 25697.688 ns/op
Iteration   5: 25877.743 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  26179.048 ±(99.9%) 1759.558 ns/op [Average]
  (min, avg, max) = (25697.688, 26179.048, 26735.187), stdev = 456.952
  CI (99.9%): [24419.490, 27938.607] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 0.20% complete, ETA 01:42:15
# Fork: 1 of 1
# Warmup Iteration   1: 125830.089 ns/op
# Warmup Iteration   2: 49948.321 ns/op
# Warmup Iteration   3: 50561.320 ns/op
# Warmup Iteration   4: 49180.301 ns/op
Iteration   1: 47672.407 ns/op
Iteration   2: 47707.572 ns/op
Iteration   3: 47312.943 ns/op
Iteration   4: 47434.512 ns/op
Iteration   5: 47315.370 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  47488.561 ±(99.9%) 734.462 ns/op [Average]
  (min, avg, max) = (47312.943, 47488.561, 47707.572), stdev = 190.738
  CI (99.9%): [46754.099, 48223.023] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 0.39% complete, ETA 01:42:09
# Fork: 1 of 1
# Warmup Iteration   1: 245958.204 ns/op
# Warmup Iteration   2: 106190.823 ns/op
# Warmup Iteration   3: 101089.303 ns/op
# Warmup Iteration   4: 98584.216 ns/op
Iteration   1: 97670.179 ns/op
Iteration   2: 95771.378 ns/op
Iteration   3: 102499.760 ns/op
Iteration   4: 98031.985 ns/op
Iteration   5: 97649.777 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  98324.616 ±(99.9%) 9611.229 ns/op [Average]
  (min, avg, max) = (95771.378, 98324.616, 102499.760), stdev = 2496.006
  CI (99.9%): [88713.387, 107935.845] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 0.59% complete, ETA 01:41:39
# Fork: 1 of 1
# Warmup Iteration   1: 912080.098 ns/op
# Warmup Iteration   2: 291318.758 ns/op
# Warmup Iteration   3: 254096.589 ns/op
# Warmup Iteration   4: 248217.449 ns/op
Iteration   1: 244331.551 ns/op
Iteration   2: 252927.944 ns/op
Iteration   3: 243985.839 ns/op
Iteration   4: 243678.690 ns/op
Iteration   5: 251369.271 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  247258.659 ±(99.9%) 17342.161 ns/op [Average]
  (min, avg, max) = (243678.690, 247258.659, 252927.944), stdev = 4503.704
  CI (99.9%): [229916.498, 264600.820] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 0.78% complete, ETA 01:41:21
# Fork: 1 of 1
# Warmup Iteration   1: 8292953.422 ns/op
# Warmup Iteration   2: 2244019.401 ns/op
# Warmup Iteration   3: 2091241.215 ns/op
# Warmup Iteration   4: 2063767.744 ns/op
Iteration   1: 2040840.591 ns/op
Iteration   2: 2044733.779 ns/op
Iteration   3: 2037118.466 ns/op
Iteration   4: 2018621.287 ns/op
Iteration   5: 2088163.563 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  2045895.537 ±(99.9%) 98820.043 ns/op [Average]
  (min, avg, max) = (2018621.287, 2045895.537, 2088163.563), stdev = 25663.251
  CI (99.9%): [1947075.495, 2144715.580] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 0.98% complete, ETA 01:41:28
# Fork: 1 of 1
# Warmup Iteration   1: 53211.989 ns/op
# Warmup Iteration   2: 24154.838 ns/op
# Warmup Iteration   3: 23354.370 ns/op
# Warmup Iteration   4: 22958.290 ns/op
Iteration   1: 22852.978 ns/op
Iteration   2: 23137.824 ns/op
Iteration   3: 22623.226 ns/op
Iteration   4: 23514.974 ns/op
Iteration   5: 22547.186 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  22935.238 ±(99.9%) 1530.405 ns/op [Average]
  (min, avg, max) = (22547.186, 22935.238, 23514.974), stdev = 397.441
  CI (99.9%): [21404.833, 24465.642] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 1.18% complete, ETA 01:41:12
# Fork: 1 of 1
# Warmup Iteration   1: 200732.924 ns/op
# Warmup Iteration   2: 49512.512 ns/op
# Warmup Iteration   3: 48788.898 ns/op
# Warmup Iteration   4: 47937.196 ns/op
Iteration   1: 49308.046 ns/op
Iteration   2: 46914.601 ns/op
Iteration   3: 46725.883 ns/op
Iteration   4: 46757.076 ns/op
Iteration   5: 47107.840 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  47362.689 ±(99.9%) 4228.015 ns/op [Average]
  (min, avg, max) = (46725.883, 47362.689, 49308.046), stdev = 1098.002
  CI (99.9%): [43134.674, 51590.704] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 1.37% complete, ETA 01:41:02
# Fork: 1 of 1
# Warmup Iteration   1: 161721.780 ns/op
# Warmup Iteration   2: 86465.661 ns/op
# Warmup Iteration   3: 82652.652 ns/op
# Warmup Iteration   4: 80342.108 ns/op
Iteration   1: 80309.728 ns/op
Iteration   2: 79728.768 ns/op
Iteration   3: 80160.984 ns/op
Iteration   4: 79711.135 ns/op
Iteration   5: 80002.418 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  79982.607 ±(99.9%) 1013.952 ns/op [Average]
  (min, avg, max) = (79711.135, 79982.607, 80309.728), stdev = 263.320
  CI (99.9%): [78968.654, 80996.559] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 1.57% complete, ETA 01:40:51
# Fork: 1 of 1
# Warmup Iteration   1: 423472.313 ns/op
# Warmup Iteration   2: 185737.220 ns/op
# Warmup Iteration   3: 179189.529 ns/op
# Warmup Iteration   4: 176577.237 ns/op
Iteration   1: 175613.096 ns/op
Iteration   2: 173821.178 ns/op
Iteration   3: 173798.092 ns/op
Iteration   4: 171862.241 ns/op
Iteration   5: 171470.125 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  173312.946 ±(99.9%) 6467.732 ns/op [Average]
  (min, avg, max) = (171470.125, 173312.946, 175613.096), stdev = 1679.649
  CI (99.9%): [166845.215, 179780.678] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 1.76% complete, ETA 01:40:39
# Fork: 1 of 1
# Warmup Iteration   1: 6242848.012 ns/op
# Warmup Iteration   2: 2009699.236 ns/op
# Warmup Iteration   3: 1941454.206 ns/op
# Warmup Iteration   4: 1898753.472 ns/op
Iteration   1: 1882308.956 ns/op
Iteration   2: 1850669.342 ns/op
Iteration   3: 1839908.994 ns/op
Iteration   4: 1853040.980 ns/op
Iteration   5: 1826046.043 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1850394.863 ±(99.9%) 80043.511 ns/op [Average]
  (min, avg, max) = (1826046.043, 1850394.863, 1882308.956), stdev = 20787.046
  CI (99.9%): [1770351.352, 1930438.374] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 1.96% complete, ETA 01:40:26
# Fork: 1 of 1
# Warmup Iteration   1: 66610.243 ns/op
# Warmup Iteration   2: 27416.137 ns/op
# Warmup Iteration   3: 24030.409 ns/op
# Warmup Iteration   4: 23629.437 ns/op
Iteration   1: 23247.858 ns/op
Iteration   2: 23377.684 ns/op
Iteration   3: 24000.061 ns/op
Iteration   4: 23232.916 ns/op
Iteration   5: 23261.415 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  23423.987 ±(99.9%) 1259.525 ns/op [Average]
  (min, avg, max) = (23232.916, 23423.987, 24000.061), stdev = 327.095
  CI (99.9%): [22164.461, 24683.512] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 2.16% complete, ETA 01:40:09
# Fork: 1 of 1
# Warmup Iteration   1: 116660.220 ns/op
# Warmup Iteration   2: 47024.958 ns/op
# Warmup Iteration   3: 45583.072 ns/op
# Warmup Iteration   4: 45466.970 ns/op
Iteration   1: 43388.533 ns/op
Iteration   2: 43087.143 ns/op
Iteration   3: 42902.202 ns/op
Iteration   4: 43356.154 ns/op
Iteration   5: 42899.647 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  43126.736 ±(99.9%) 912.698 ns/op [Average]
  (min, avg, max) = (42899.647, 43126.736, 43388.533), stdev = 237.025
  CI (99.9%): [42214.038, 44039.433] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 2.35% complete, ETA 01:39:56
# Fork: 1 of 1
# Warmup Iteration   1: 365268.527 ns/op
# Warmup Iteration   2: 111058.956 ns/op
# Warmup Iteration   3: 103193.910 ns/op
# Warmup Iteration   4: 100982.841 ns/op
Iteration   1: 98187.590 ns/op
Iteration   2: 99329.428 ns/op
Iteration   3: 97983.220 ns/op
Iteration   4: 97734.359 ns/op
Iteration   5: 100117.915 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  98670.502 ±(99.9%) 3903.759 ns/op [Average]
  (min, avg, max) = (97734.359, 98670.502, 100117.915), stdev = 1013.794
  CI (99.9%): [94766.743, 102574.261] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 2.55% complete, ETA 01:39:43
# Fork: 1 of 1
# Warmup Iteration   1: 685602.723 ns/op
# Warmup Iteration   2: 230873.613 ns/op
# Warmup Iteration   3: 215400.972 ns/op
# Warmup Iteration   4: 225949.037 ns/op
Iteration   1: 225738.574 ns/op
Iteration   2: 222940.799 ns/op
Iteration   3: 221543.020 ns/op
Iteration   4: 219856.511 ns/op
Iteration   5: 219602.381 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  221936.257 ±(99.9%) 9702.108 ns/op [Average]
  (min, avg, max) = (219602.381, 221936.257, 225738.574), stdev = 2519.607
  CI (99.9%): [212234.149, 231638.365] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 2.75% complete, ETA 01:39:29
# Fork: 1 of 1
# Warmup Iteration   1: 5012271.896 ns/op
# Warmup Iteration   2: 1867416.645 ns/op
# Warmup Iteration   3: 1854857.266 ns/op
# Warmup Iteration   4: 1850450.593 ns/op
Iteration   1: 1919179.897 ns/op
Iteration   2: 1851408.723 ns/op
Iteration   3: 1805173.698 ns/op
Iteration   4: 1801342.170 ns/op
Iteration   5: 1833875.107 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1842195.919 ±(99.9%) 183868.936 ns/op [Average]
  (min, avg, max) = (1801342.170, 1842195.919, 1919179.897), stdev = 47750.179
  CI (99.9%): [1658326.983, 2026064.855] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 2.94% complete, ETA 01:39:19
# Fork: 1 of 1
# Warmup Iteration   1: 21952.114 ns/op
# Warmup Iteration   2: 9694.429 ns/op
# Warmup Iteration   3: 9485.360 ns/op
# Warmup Iteration   4: 9329.526 ns/op
Iteration   1: 9285.559 ns/op
Iteration   2: 9480.198 ns/op
Iteration   3: 9283.338 ns/op
Iteration   4: 9221.791 ns/op
Iteration   5: 9181.795 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  9290.536 ±(99.9%) 441.561 ns/op [Average]
  (min, avg, max) = (9181.795, 9290.536, 9480.198), stdev = 114.672
  CI (99.9%): [8848.975, 9732.098] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 3.14% complete, ETA 01:39:04
# Fork: 1 of 1
# Warmup Iteration   1: 38418.629 ns/op
# Warmup Iteration   2: 18826.750 ns/op
# Warmup Iteration   3: 18965.920 ns/op
# Warmup Iteration   4: 18167.467 ns/op
Iteration   1: 18283.998 ns/op
Iteration   2: 17903.274 ns/op
Iteration   3: 18190.499 ns/op
Iteration   4: 18097.694 ns/op
Iteration   5: 17986.919 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  18092.477 ±(99.9%) 587.953 ns/op [Average]
  (min, avg, max) = (17903.274, 18092.477, 18283.998), stdev = 152.690
  CI (99.9%): [17504.524, 18680.430] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 3.33% complete, ETA 01:38:51
# Fork: 1 of 1
# Warmup Iteration   1: 81990.283 ns/op
# Warmup Iteration   2: 35346.529 ns/op
# Warmup Iteration   3: 34076.478 ns/op
# Warmup Iteration   4: 34414.895 ns/op
Iteration   1: 34385.095 ns/op
Iteration   2: 34436.764 ns/op
Iteration   3: 32980.348 ns/op
Iteration   4: 34060.533 ns/op
Iteration   5: 32943.982 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  33761.344 ±(99.9%) 2864.015 ns/op [Average]
  (min, avg, max) = (32943.982, 33761.344, 34436.764), stdev = 743.776
  CI (99.9%): [30897.329, 36625.359] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 3.53% complete, ETA 01:38:38
# Fork: 1 of 1
# Warmup Iteration   1: 161919.673 ns/op
# Warmup Iteration   2: 73823.914 ns/op
# Warmup Iteration   3: 71100.975 ns/op
# Warmup Iteration   4: 69119.687 ns/op
Iteration   1: 70253.561 ns/op
Iteration   2: 69183.569 ns/op
Iteration   3: 68881.459 ns/op
Iteration   4: 69580.198 ns/op
Iteration   5: 68414.725 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  69262.702 ±(99.9%) 2690.826 ns/op [Average]
  (min, avg, max) = (68414.725, 69262.702, 70253.561), stdev = 698.799
  CI (99.9%): [66571.877, 71953.528] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 3.73% complete, ETA 01:38:24
# Fork: 1 of 1
# Warmup Iteration   1: 1753630.637 ns/op
# Warmup Iteration   2: 797808.091 ns/op
# Warmup Iteration   3: 770390.537 ns/op
# Warmup Iteration   4: 776985.307 ns/op
Iteration   1: 760563.241 ns/op
Iteration   2: 751016.595 ns/op
Iteration   3: 741728.856 ns/op
Iteration   4: 738564.233 ns/op
Iteration   5: 739663.885 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  746307.362 ±(99.9%) 36043.216 ns/op [Average]
  (min, avg, max) = (738564.233, 746307.362, 760563.241), stdev = 9360.309
  CI (99.9%): [710264.146, 782350.578] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 3.92% complete, ETA 01:38:09
# Fork: 1 of 1
# Warmup Iteration   1: 29679.312 ns/op
# Warmup Iteration   2: 10566.874 ns/op
# Warmup Iteration   3: 9954.759 ns/op
# Warmup Iteration   4: 9906.805 ns/op
Iteration   1: 9765.954 ns/op
Iteration   2: 9964.101 ns/op
Iteration   3: 9606.504 ns/op
Iteration   4: 9876.673 ns/op
Iteration   5: 9823.048 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  9807.256 ±(99.9%) 515.453 ns/op [Average]
  (min, avg, max) = (9606.504, 9807.256, 9964.101), stdev = 133.862
  CI (99.9%): [9291.803, 10322.709] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 4.12% complete, ETA 01:37:55
# Fork: 1 of 1
# Warmup Iteration   1: 72640.943 ns/op
# Warmup Iteration   2: 21429.703 ns/op
# Warmup Iteration   3: 20650.407 ns/op
# Warmup Iteration   4: 19869.690 ns/op
Iteration   1: 19331.838 ns/op
Iteration   2: 19274.116 ns/op
Iteration   3: 19162.500 ns/op
Iteration   4: 19214.455 ns/op
Iteration   5: 19244.000 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  19245.382 ±(99.9%) 244.509 ns/op [Average]
  (min, avg, max) = (19162.500, 19245.382, 19331.838), stdev = 63.498
  CI (99.9%): [19000.873, 19489.891] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 4.31% complete, ETA 01:37:44
# Fork: 1 of 1
# Warmup Iteration   1: 129112.638 ns/op
# Warmup Iteration   2: 43115.187 ns/op
# Warmup Iteration   3: 39114.831 ns/op
# Warmup Iteration   4: 37511.879 ns/op
Iteration   1: 38581.568 ns/op
Iteration   2: 36497.199 ns/op
Iteration   3: 36203.940 ns/op
Iteration   4: 36564.644 ns/op
Iteration   5: 36244.436 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  36818.358 ±(99.9%) 3842.607 ns/op [Average]
  (min, avg, max) = (36203.940, 36818.358, 38581.568), stdev = 997.913
  CI (99.9%): [32975.751, 40660.964] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 4.51% complete, ETA 01:37:30
# Fork: 1 of 1
# Warmup Iteration   1: 227294.403 ns/op
# Warmup Iteration   2: 83679.104 ns/op
# Warmup Iteration   3: 79571.982 ns/op
# Warmup Iteration   4: 76105.866 ns/op
Iteration   1: 74415.354 ns/op
Iteration   2: 73756.942 ns/op
Iteration   3: 73742.764 ns/op
Iteration   4: 73742.327 ns/op
Iteration   5: 73605.582 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  73852.594 ±(99.9%) 1234.437 ns/op [Average]
  (min, avg, max) = (73605.582, 73852.594, 74415.354), stdev = 320.579
  CI (99.9%): [72618.156, 75087.031] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 4.71% complete, ETA 01:37:18
# Fork: 1 of 1
# Warmup Iteration   1: 1883873.980 ns/op
# Warmup Iteration   2: 904642.029 ns/op
# Warmup Iteration   3: 891289.928 ns/op
# Warmup Iteration   4: 860760.675 ns/op
Iteration   1: 800499.515 ns/op
Iteration   2: 805245.073 ns/op
Iteration   3: 800959.709 ns/op
Iteration   4: 804943.450 ns/op
Iteration   5: 808068.904 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  803943.330 ±(99.9%) 12249.193 ns/op [Average]
  (min, avg, max) = (800499.515, 803943.330, 808068.904), stdev = 3181.077
  CI (99.9%): [791694.136, 816192.523] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 4.90% complete, ETA 01:37:05
# Fork: 1 of 1
# Warmup Iteration   1: 25110.247 ns/op
# Warmup Iteration   2: 12885.834 ns/op
# Warmup Iteration   3: 11378.914 ns/op
# Warmup Iteration   4: 11137.192 ns/op
Iteration   1: 11129.919 ns/op
Iteration   2: 11139.599 ns/op
Iteration   3: 11134.448 ns/op
Iteration   4: 11134.709 ns/op
Iteration   5: 11146.236 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  11136.982 ±(99.9%) 23.889 ns/op [Average]
  (min, avg, max) = (11129.919, 11136.982, 11146.236), stdev = 6.204
  CI (99.9%): [11113.093, 11160.871] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 5.10% complete, ETA 01:36:54
# Fork: 1 of 1
# Warmup Iteration   1: 77983.179 ns/op
# Warmup Iteration   2: 24717.708 ns/op
# Warmup Iteration   3: 21171.198 ns/op
# Warmup Iteration   4: 21074.650 ns/op
Iteration   1: 21107.997 ns/op
Iteration   2: 21152.714 ns/op
Iteration   3: 21663.168 ns/op
Iteration   4: 21097.481 ns/op
Iteration   5: 21047.097 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  21213.691 ±(99.9%) 978.278 ns/op [Average]
  (min, avg, max) = (21047.097, 21213.691, 21663.168), stdev = 254.056
  CI (99.9%): [20235.413, 22191.969] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 5.29% complete, ETA 01:36:40
# Fork: 1 of 1
# Warmup Iteration   1: 174265.383 ns/op
# Warmup Iteration   2: 50926.011 ns/op
# Warmup Iteration   3: 43778.280 ns/op
# Warmup Iteration   4: 42530.486 ns/op
Iteration   1: 42249.837 ns/op
Iteration   2: 42244.443 ns/op
Iteration   3: 42374.760 ns/op
Iteration   4: 42276.164 ns/op
Iteration   5: 42484.552 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  42325.951 ±(99.9%) 396.693 ns/op [Average]
  (min, avg, max) = (42244.443, 42325.951, 42484.552), stdev = 103.020
  CI (99.9%): [41929.258, 42722.644] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 5.49% complete, ETA 01:36:27
# Fork: 1 of 1
# Warmup Iteration   1: 310450.702 ns/op
# Warmup Iteration   2: 115336.459 ns/op
# Warmup Iteration   3: 94715.920 ns/op
# Warmup Iteration   4: 91637.630 ns/op
Iteration   1: 92234.249 ns/op
Iteration   2: 91721.854 ns/op
Iteration   3: 91328.687 ns/op
Iteration   4: 94293.627 ns/op
Iteration   5: 91450.082 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  92205.700 ±(99.9%) 4690.233 ns/op [Average]
  (min, avg, max) = (91328.687, 92205.700, 94293.627), stdev = 1218.039
  CI (99.9%): [87515.467, 96895.933] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 5.69% complete, ETA 01:36:15
# Fork: 1 of 1
# Warmup Iteration   1: 2577649.249 ns/op
# Warmup Iteration   2: 1189302.695 ns/op
# Warmup Iteration   3: 1044666.198 ns/op
# Warmup Iteration   4: 1036157.244 ns/op
Iteration   1: 1012500.170 ns/op
Iteration   2: 1028770.017 ns/op
Iteration   3: 999823.615 ns/op
Iteration   4: 997366.536 ns/op
Iteration   5: 995463.705 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1006784.809 ±(99.9%) 53817.629 ns/op [Average]
  (min, avg, max) = (995463.705, 1006784.809, 1028770.017), stdev = 13976.267
  CI (99.9%): [952967.180, 1060602.438] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 5.88% complete, ETA 01:36:02
# Fork: 1 of 1
# Warmup Iteration   1: 512337.542 ns/op
# Warmup Iteration   2: 184358.376 ns/op
# Warmup Iteration   3: 151870.683 ns/op
# Warmup Iteration   4: 146740.262 ns/op
Iteration   1: 151995.543 ns/op
Iteration   2: 147091.523 ns/op
Iteration   3: 145752.197 ns/op
Iteration   4: 146946.513 ns/op
Iteration   5: 146513.311 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  147659.817 ±(99.9%) 9546.135 ns/op [Average]
  (min, avg, max) = (145752.197, 147659.817, 151995.543), stdev = 2479.101
  CI (99.9%): [138113.682, 157205.953] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 6.08% complete, ETA 01:35:49
# Fork: 1 of 1
# Warmup Iteration   1: 887458.954 ns/op
# Warmup Iteration   2: 313563.046 ns/op
# Warmup Iteration   3: 271159.895 ns/op
# Warmup Iteration   4: 272654.067 ns/op
Iteration   1: 268738.104 ns/op
Iteration   2: 263860.826 ns/op
Iteration   3: 266330.669 ns/op
Iteration   4: 263992.941 ns/op
Iteration   5: 266268.617 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  265838.231 ±(99.9%) 7737.835 ns/op [Average]
  (min, avg, max) = (263860.826, 265838.231, 268738.104), stdev = 2009.491
  CI (99.9%): [258100.397, 273576.066] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 6.27% complete, ETA 01:35:35
# Fork: 1 of 1
# Warmup Iteration   1: 2043158.680 ns/op
# Warmup Iteration   2: 736461.788 ns/op
# Warmup Iteration   3: 636194.112 ns/op
# Warmup Iteration   4: 627339.047 ns/op
Iteration   1: 624432.092 ns/op
Iteration   2: 624058.409 ns/op
Iteration   3: 618916.675 ns/op
Iteration   4: 619892.336 ns/op
Iteration   5: 620154.012 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  621490.705 ±(99.9%) 9857.201 ns/op [Average]
  (min, avg, max) = (618916.675, 621490.705, 624432.092), stdev = 2559.884
  CI (99.9%): [611633.503, 631347.906] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 6.47% complete, ETA 01:35:24
# Fork: 1 of 1
# Warmup Iteration   1: 4348445.789 ns/op
# Warmup Iteration   2: 1808277.975 ns/op
# Warmup Iteration   3: 1605142.611 ns/op
# Warmup Iteration   4: 1566884.094 ns/op
Iteration   1: 1546584.303 ns/op
Iteration   2: 1551710.483 ns/op
Iteration   3: 1535449.789 ns/op
Iteration   4: 1562004.031 ns/op
Iteration   5: 1534757.929 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1546101.307 ±(99.9%) 44186.866 ns/op [Average]
  (min, avg, max) = (1534757.929, 1546101.307, 1562004.031), stdev = 11475.189
  CI (99.9%): [1501914.441, 1590288.173] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 6.67% complete, ETA 01:35:12
# Fork: 1 of 1
# Warmup Iteration   1: 35542318.212 ns/op
# Warmup Iteration   2: 18022614.584 ns/op
# Warmup Iteration   3: 13229059.686 ns/op
# Warmup Iteration   4: 13015330.045 ns/op
Iteration   1: 12993091.188 ns/op
Iteration   2: 12836319.251 ns/op
Iteration   3: 12930500.266 ns/op
Iteration   4: 12851761.384 ns/op
Iteration   5: 13693580.740 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  13061050.566 ±(99.9%) 1383102.849 ns/op [Average]
  (min, avg, max) = (12836319.251, 13061050.566, 13693580.740), stdev = 359187.418
  CI (99.9%): [11677947.716, 14444153.415] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 6.86% complete, ETA 01:35:01
# Fork: 1 of 1
# Warmup Iteration   1: 14953.650 ns/op
# Warmup Iteration   2: 7994.618 ns/op
# Warmup Iteration   3: 7199.511 ns/op
# Warmup Iteration   4: 7120.948 ns/op
Iteration   1: 7176.357 ns/op
Iteration   2: 7429.336 ns/op
Iteration   3: 7183.126 ns/op
Iteration   4: 7145.263 ns/op
Iteration   5: 7172.336 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  7221.284 ±(99.9%) 451.262 ns/op [Average]
  (min, avg, max) = (7145.263, 7221.284, 7429.336), stdev = 117.191
  CI (99.9%): [6770.022, 7672.546] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 7.06% complete, ETA 01:34:47
# Fork: 1 of 1
# Warmup Iteration   1: 32865.306 ns/op
# Warmup Iteration   2: 15110.414 ns/op
# Warmup Iteration   3: 14080.322 ns/op
# Warmup Iteration   4: 13768.852 ns/op
Iteration   1: 13437.426 ns/op
Iteration   2: 13449.765 ns/op
Iteration   3: 13400.508 ns/op
Iteration   4: 13474.666 ns/op
Iteration   5: 13499.424 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  13452.358 ±(99.9%) 144.475 ns/op [Average]
  (min, avg, max) = (13400.508, 13452.358, 13499.424), stdev = 37.520
  CI (99.9%): [13307.883, 13596.833] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 7.25% complete, ETA 01:34:34
# Fork: 1 of 1
# Warmup Iteration   1: 65180.546 ns/op
# Warmup Iteration   2: 27790.946 ns/op
# Warmup Iteration   3: 25425.689 ns/op
# Warmup Iteration   4: 24949.488 ns/op
Iteration   1: 25054.145 ns/op
Iteration   2: 25044.399 ns/op
Iteration   3: 25013.173 ns/op
Iteration   4: 25114.920 ns/op
Iteration   5: 24874.859 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  25020.299 ±(99.9%) 343.782 ns/op [Average]
  (min, avg, max) = (24874.859, 25020.299, 25114.920), stdev = 89.279
  CI (99.9%): [24676.518, 25364.081] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 7.45% complete, ETA 01:34:21
# Fork: 1 of 1
# Warmup Iteration   1: 110606.020 ns/op
# Warmup Iteration   2: 53157.069 ns/op
# Warmup Iteration   3: 49523.680 ns/op
# Warmup Iteration   4: 49460.735 ns/op
Iteration   1: 47449.561 ns/op
Iteration   2: 47235.325 ns/op
Iteration   3: 47394.730 ns/op
Iteration   4: 47294.479 ns/op
Iteration   5: 48300.240 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  47534.867 ±(99.9%) 1678.704 ns/op [Average]
  (min, avg, max) = (47235.325, 47534.867, 48300.240), stdev = 435.954
  CI (99.9%): [45856.164, 49213.571] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 7.65% complete, ETA 01:34:08
# Fork: 1 of 1
# Warmup Iteration   1: 896103.406 ns/op
# Warmup Iteration   2: 555441.050 ns/op
# Warmup Iteration   3: 486802.318 ns/op
# Warmup Iteration   4: 486591.746 ns/op
Iteration   1: 485026.437 ns/op
Iteration   2: 485253.355 ns/op
Iteration   3: 481738.270 ns/op
Iteration   4: 518431.932 ns/op
Iteration   5: 483798.259 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  490849.650 ±(99.9%) 59615.068 ns/op [Average]
  (min, avg, max) = (481738.270, 490849.650, 518431.932), stdev = 15481.844
  CI (99.9%): [431234.583, 550464.718] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 7.84% complete, ETA 01:33:56
# Fork: 1 of 1
# Warmup Iteration   1: 70218.177 ns/op
# Warmup Iteration   2: 63386.059 ns/op
# Warmup Iteration   3: 63904.246 ns/op
# Warmup Iteration   4: 64540.441 ns/op
Iteration   1: 64672.004 ns/op
Iteration   2: 65441.958 ns/op
Iteration   3: 66273.839 ns/op
Iteration   4: 65239.202 ns/op
Iteration   5: 67289.823 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  65783.365 ±(99.9%) 3925.852 ns/op [Average]
  (min, avg, max) = (64672.004, 65783.365, 67289.823), stdev = 1019.531
  CI (99.9%): [61857.514, 69709.217] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 8.04% complete, ETA 01:33:43
# Fork: 1 of 1
# Warmup Iteration   1: 104011.217 ns/op
# Warmup Iteration   2: 124553.852 ns/op
# Warmup Iteration   3: 143398.383 ns/op
# Warmup Iteration   4: 127354.209 ns/op
Iteration   1: 128428.031 ns/op
Iteration   2: 140948.102 ns/op
Iteration   3: 125956.304 ns/op
Iteration   4: 127685.214 ns/op
Iteration   5: 132192.625 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  131042.055 ±(99.9%) 23057.284 ns/op [Average]
  (min, avg, max) = (125956.304, 131042.055, 140948.102), stdev = 5987.903
  CI (99.9%): [107984.771, 154099.339] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 8.24% complete, ETA 01:33:31
# Fork: 1 of 1
# Warmup Iteration   1: 290855.240 ns/op
# Warmup Iteration   2: 250582.662 ns/op
# Warmup Iteration   3: 267252.858 ns/op
# Warmup Iteration   4: 248846.496 ns/op
Iteration   1: 242528.872 ns/op
Iteration   2: 221626.680 ns/op
Iteration   3: 243062.724 ns/op
Iteration   4: 242936.997 ns/op
Iteration   5: 250843.516 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  240199.758 ±(99.9%) 42153.677 ns/op [Average]
  (min, avg, max) = (221626.680, 240199.758, 250843.516), stdev = 10947.176
  CI (99.9%): [198046.081, 282353.435] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 8.43% complete, ETA 01:33:19
# Fork: 1 of 1
# Warmup Iteration   1: 559647.059 ns/op
# Warmup Iteration   2: 601966.408 ns/op
# Warmup Iteration   3: 577555.359 ns/op
# Warmup Iteration   4: 461109.093 ns/op
Iteration   1: 628674.208 ns/op
Iteration   2: 551543.707 ns/op
Iteration   3: 555741.919 ns/op
Iteration   4: 589559.486 ns/op
Iteration   5: 601971.413 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  585498.147 ±(99.9%) 124632.030 ns/op [Average]
  (min, avg, max) = (551543.707, 585498.147, 628674.208), stdev = 32366.542
  CI (99.9%): [460866.117, 710130.176] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 8.63% complete, ETA 01:33:08
# Fork: 1 of 1
# Warmup Iteration   1: 4646413.886 ns/op
# Warmup Iteration   2: 5461354.200 ns/op
# Warmup Iteration   3: 5218138.172 ns/op
# Warmup Iteration   4: 5178570.260 ns/op
Iteration   1: 5023393.906 ns/op
Iteration   2: 4987084.044 ns/op
Iteration   3: 5554214.443 ns/op
Iteration   4: 5854604.953 ns/op
Iteration   5: 5210898.074 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  5326039.084 ±(99.9%) 1429398.169 ns/op [Average]
  (min, avg, max) = (4987084.044, 5326039.084, 5854604.953), stdev = 371210.165
  CI (99.9%): [3896640.915, 6755437.254] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 8.82% complete, ETA 01:32:57
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 9.02% complete, ETA 01:31:13
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 9.22% complete, ETA 01:29:34
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 9.41% complete, ETA 01:27:58
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 9.61% complete, ETA 01:26:27
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 9.80% complete, ETA 01:24:59
# Fork: 1 of 1
# Warmup Iteration   1: 351038.365 ns/op
# Warmup Iteration   2: 214855.435 ns/op
# Warmup Iteration   3: 190892.512 ns/op
# Warmup Iteration   4: 189524.871 ns/op
Iteration   1: 188653.066 ns/op
Iteration   2: 187674.530 ns/op
Iteration   3: 187875.527 ns/op
Iteration   4: 189914.258 ns/op
Iteration   5: 190830.064 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  188989.489 ±(99.9%) 5211.233 ns/op [Average]
  (min, avg, max) = (187674.530, 188989.489, 190830.064), stdev = 1353.341
  CI (99.9%): [183778.256, 194200.723] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 10.00% complete, ETA 01:24:58
# Fork: 1 of 1
# Warmup Iteration   1: 557810.020 ns/op
# Warmup Iteration   2: 351636.365 ns/op
# Warmup Iteration   3: 295382.969 ns/op
# Warmup Iteration   4: 293859.597 ns/op
Iteration   1: 289545.570 ns/op
Iteration   2: 288395.992 ns/op
Iteration   3: 287754.158 ns/op
Iteration   4: 289349.257 ns/op
Iteration   5: 284906.910 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  287990.378 ±(99.9%) 7202.164 ns/op [Average]
  (min, avg, max) = (284906.910, 287990.378, 289545.570), stdev = 1870.379
  CI (99.9%): [280788.214, 295192.541] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 10.20% complete, ETA 01:24:59
# Fork: 1 of 1
# Warmup Iteration   1: 1285224.554 ns/op
# Warmup Iteration   2: 661464.707 ns/op
# Warmup Iteration   3: 635848.775 ns/op
# Warmup Iteration   4: 593573.581 ns/op
Iteration   1: 590841.488 ns/op
Iteration   2: 584536.173 ns/op
Iteration   3: 580376.038 ns/op
Iteration   4: 579825.274 ns/op
Iteration   5: 577186.014 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  582552.997 ±(99.9%) 20522.179 ns/op [Average]
  (min, avg, max) = (577186.014, 582552.997, 590841.488), stdev = 5329.545
  CI (99.9%): [562030.818, 603075.177] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 10.39% complete, ETA 01:24:58
# Fork: 1 of 1
# Warmup Iteration   1: 2904875.724 ns/op
# Warmup Iteration   2: 1515269.371 ns/op
# Warmup Iteration   3: 1420068.556 ns/op
# Warmup Iteration   4: 1426122.911 ns/op
Iteration   1: 1402337.647 ns/op
Iteration   2: 1414289.545 ns/op
Iteration   3: 1436243.470 ns/op
Iteration   4: 1359948.555 ns/op
Iteration   5: 1361383.260 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1394840.495 ±(99.9%) 128946.463 ns/op [Average]
  (min, avg, max) = (1359948.555, 1394840.495, 1436243.470), stdev = 33486.987
  CI (99.9%): [1265894.032, 1523786.959] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 10.59% complete, ETA 01:24:57
# Fork: 1 of 1
# Warmup Iteration   1: 26670672.985 ns/op
# Warmup Iteration   2: 14352749.529 ns/op
# Warmup Iteration   3: 13496774.372 ns/op
# Warmup Iteration   4: 12997490.802 ns/op
Iteration   1: 12934948.831 ns/op
Iteration   2: 13171801.428 ns/op
Iteration   3: 12881241.627 ns/op
Iteration   4: 12978079.984 ns/op
Iteration   5: 12871918.853 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  12967598.144 ±(99.9%) 469584.418 ns/op [Average]
  (min, avg, max) = (12871918.853, 12967598.144, 13171801.428), stdev = 121949.582
  CI (99.9%): [12498013.726, 13437182.563] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 10.78% complete, ETA 01:24:57
# Fork: 1 of 1
# Warmup Iteration   1: 148210.334 ns/op
# Warmup Iteration   2: 53925.938 ns/op
# Warmup Iteration   3: 51724.213 ns/op
# Warmup Iteration   4: 51387.458 ns/op
Iteration   1: 51028.888 ns/op
Iteration   2: 53206.592 ns/op
Iteration   3: 49903.869 ns/op
Iteration   4: 50882.035 ns/op
Iteration   5: 50135.210 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  51031.319 ±(99.9%) 5031.047 ns/op [Average]
  (min, avg, max) = (49903.869, 51031.319, 53206.592), stdev = 1306.547
  CI (99.9%): [46000.272, 56062.366] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 10.98% complete, ETA 01:24:51
# Fork: 1 of 1
# Warmup Iteration   1: 277067.664 ns/op
# Warmup Iteration   2: 106898.621 ns/op
# Warmup Iteration   3: 97561.025 ns/op
# Warmup Iteration   4: 95352.650 ns/op
Iteration   1: 96296.472 ns/op
Iteration   2: 97388.051 ns/op
Iteration   3: 98709.054 ns/op
Iteration   4: 94139.892 ns/op
Iteration   5: 94383.861 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  96183.466 ±(99.9%) 7520.388 ns/op [Average]
  (min, avg, max) = (94139.892, 96183.466, 98709.054), stdev = 1953.021
  CI (99.9%): [88663.078, 103703.854] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 11.18% complete, ETA 01:24:46
# Fork: 1 of 1
# Warmup Iteration   1: 614608.147 ns/op
# Warmup Iteration   2: 255403.976 ns/op
# Warmup Iteration   3: 226967.129 ns/op
# Warmup Iteration   4: 225098.829 ns/op
Iteration   1: 221445.294 ns/op
Iteration   2: 222465.217 ns/op
Iteration   3: 223391.842 ns/op
Iteration   4: 220933.226 ns/op
Iteration   5: 224125.541 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  222472.224 ±(99.9%) 5094.760 ns/op [Average]
  (min, avg, max) = (220933.226, 222472.224, 224125.541), stdev = 1323.093
  CI (99.9%): [217377.464, 227566.984] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 11.37% complete, ETA 01:24:41
# Fork: 1 of 1
# Warmup Iteration   1: 1069388.138 ns/op
# Warmup Iteration   2: 588650.748 ns/op
# Warmup Iteration   3: 548483.110 ns/op
# Warmup Iteration   4: 529028.865 ns/op
Iteration   1: 532195.036 ns/op
Iteration   2: 523583.876 ns/op
Iteration   3: 521248.434 ns/op
Iteration   4: 526321.337 ns/op
Iteration   5: 520111.696 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  524692.076 ±(99.9%) 18568.686 ns/op [Average]
  (min, avg, max) = (520111.696, 524692.076, 532195.036), stdev = 4822.229
  CI (99.9%): [506123.390, 543260.761] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 11.57% complete, ETA 01:24:36
# Fork: 1 of 1
# Warmup Iteration   1: 11410329.904 ns/op
# Warmup Iteration   2: 5496904.646 ns/op
# Warmup Iteration   3: 5168214.870 ns/op
# Warmup Iteration   4: 5263837.653 ns/op
Iteration   1: 5118870.603 ns/op
Iteration   2: 5121559.258 ns/op
Iteration   3: 5137067.046 ns/op
Iteration   4: 5202579.380 ns/op
Iteration   5: 5137853.478 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  5143585.953 ±(99.9%) 131312.119 ns/op [Average]
  (min, avg, max) = (5118870.603, 5143585.953, 5202579.380), stdev = 34101.340
  CI (99.9%): [5012273.834, 5274898.072] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _1_K)

# Run progress: 11.76% complete, ETA 01:24:31
# Fork: 1 of 1
# Warmup Iteration   1: 111412.416 ns/op
# Warmup Iteration   2: 47298.682 ns/op
# Warmup Iteration   3: 47083.197 ns/op
# Warmup Iteration   4: 46259.731 ns/op
Iteration   1: 45208.335 ns/op
Iteration   2: 45269.323 ns/op
Iteration   3: 44828.454 ns/op
Iteration   4: 45387.424 ns/op
Iteration   5: 44863.094 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  45111.326 ±(99.9%) 966.964 ns/op [Average]
  (min, avg, max) = (44828.454, 45111.326, 45387.424), stdev = 251.117
  CI (99.9%): [44144.362, 46078.290] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _2_K)

# Run progress: 11.96% complete, ETA 01:24:25
# Fork: 1 of 1
# Warmup Iteration   1: 301911.624 ns/op
# Warmup Iteration   2: 99629.345 ns/op
# Warmup Iteration   3: 92264.629 ns/op
# Warmup Iteration   4: 91180.558 ns/op
Iteration   1: 89916.842 ns/op
Iteration   2: 90516.775 ns/op
Iteration   3: 89043.641 ns/op
Iteration   4: 89302.195 ns/op
Iteration   5: 89023.008 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  89560.492 ±(99.9%) 2483.743 ns/op [Average]
  (min, avg, max) = (89023.008, 89560.492, 90516.775), stdev = 645.020
  CI (99.9%): [87076.749, 92044.235] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _4_K)

# Run progress: 12.16% complete, ETA 01:24:19
# Fork: 1 of 1
# Warmup Iteration   1: 486066.115 ns/op
# Warmup Iteration   2: 229874.590 ns/op
# Warmup Iteration   3: 220012.885 ns/op
# Warmup Iteration   4: 209164.539 ns/op
Iteration   1: 207692.272 ns/op
Iteration   2: 210082.728 ns/op
Iteration   3: 209546.314 ns/op
Iteration   4: 206807.325 ns/op
Iteration   5: 207872.251 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  208400.178 ±(99.9%) 5259.202 ns/op [Average]
  (min, avg, max) = (206807.325, 208400.178, 210082.728), stdev = 1365.798
  CI (99.9%): [203140.976, 213659.380] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _8_K)

# Run progress: 12.35% complete, ETA 01:24:12
# Fork: 1 of 1
# Warmup Iteration   1: 1124547.803 ns/op
# Warmup Iteration   2: 560156.368 ns/op
# Warmup Iteration   3: 539371.937 ns/op
# Warmup Iteration   4: 530390.436 ns/op
Iteration   1: 513155.394 ns/op
Iteration   2: 532894.301 ns/op
Iteration   3: 513648.512 ns/op
Iteration   4: 507603.559 ns/op
Iteration   5: 512159.787 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  515892.310 ±(99.9%) 37739.658 ns/op [Average]
  (min, avg, max) = (507603.559, 515892.310, 532894.301), stdev = 9800.869
  CI (99.9%): [478152.653, 553631.968] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _64_K)

# Run progress: 12.55% complete, ETA 01:24:06
# Fork: 1 of 1
# Warmup Iteration   1: 10412563.957 ns/op
# Warmup Iteration   2: 5192493.814 ns/op
# Warmup Iteration   3: 4968893.357 ns/op
# Warmup Iteration   4: 4874095.771 ns/op
Iteration   1: 4808555.356 ns/op
Iteration   2: 4772209.955 ns/op
Iteration   3: 4798484.133 ns/op
Iteration   4: 4772841.865 ns/op
Iteration   5: 4841911.156 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  4798800.493 ±(99.9%) 111181.197 ns/op [Average]
  (min, avg, max) = (4772209.955, 4798800.493, 4841911.156), stdev = 28873.404
  CI (99.9%): [4687619.296, 4909981.690] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 12.75% complete, ETA 01:23:59
# Fork: 1 of 1
# Warmup Iteration   1: 162939.655 ns/op
# Warmup Iteration   2: 42920.068 ns/op
# Warmup Iteration   3: 40612.832 ns/op
# Warmup Iteration   4: 39452.430 ns/op
Iteration   1: 38642.245 ns/op
Iteration   2: 38707.149 ns/op
Iteration   3: 38355.851 ns/op
Iteration   4: 38437.686 ns/op
Iteration   5: 38423.436 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  38513.273 ±(99.9%) 586.472 ns/op [Average]
  (min, avg, max) = (38355.851, 38513.273, 38707.149), stdev = 152.305
  CI (99.9%): [37926.801, 39099.746] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 12.94% complete, ETA 01:23:52
# Fork: 1 of 1
# Warmup Iteration   1: 289931.920 ns/op
# Warmup Iteration   2: 84660.448 ns/op
# Warmup Iteration   3: 77495.050 ns/op
# Warmup Iteration   4: 76146.399 ns/op
Iteration   1: 75630.259 ns/op
Iteration   2: 78095.819 ns/op
Iteration   3: 74219.588 ns/op
Iteration   4: 73604.926 ns/op
Iteration   5: 75080.860 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  75326.290 ±(99.9%) 6672.513 ns/op [Average]
  (min, avg, max) = (73604.926, 75326.290, 78095.819), stdev = 1732.830
  CI (99.9%): [68653.778, 81998.803] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 13.14% complete, ETA 01:23:46
# Fork: 1 of 1
# Warmup Iteration   1: 462566.091 ns/op
# Warmup Iteration   2: 215556.553 ns/op
# Warmup Iteration   3: 181371.439 ns/op
# Warmup Iteration   4: 183370.916 ns/op
Iteration   1: 179148.774 ns/op
Iteration   2: 179701.082 ns/op
Iteration   3: 176358.778 ns/op
Iteration   4: 176169.264 ns/op
Iteration   5: 175708.042 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  177417.188 ±(99.9%) 7155.695 ns/op [Average]
  (min, avg, max) = (175708.042, 177417.188, 179701.082), stdev = 1858.311
  CI (99.9%): [170261.493, 184572.883] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 13.33% complete, ETA 01:23:39
# Fork: 1 of 1
# Warmup Iteration   1: 1440644.049 ns/op
# Warmup Iteration   2: 493661.384 ns/op
# Warmup Iteration   3: 456855.887 ns/op
# Warmup Iteration   4: 446116.146 ns/op
Iteration   1: 457730.598 ns/op
Iteration   2: 433750.233 ns/op
Iteration   3: 433987.343 ns/op
Iteration   4: 431256.949 ns/op
Iteration   5: 430883.488 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  437521.722 ±(99.9%) 43837.690 ns/op [Average]
  (min, avg, max) = (430883.488, 437521.722, 457730.598), stdev = 11384.509
  CI (99.9%): [393684.033, 481359.412] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 13.53% complete, ETA 01:23:31
# Fork: 1 of 1
# Warmup Iteration   1: 7248418.692 ns/op
# Warmup Iteration   2: 4193752.059 ns/op
# Warmup Iteration   3: 3946049.846 ns/op
# Warmup Iteration   4: 3863056.860 ns/op
Iteration   1: 3761186.481 ns/op
Iteration   2: 3777517.957 ns/op
Iteration   3: 3752733.338 ns/op
Iteration   4: 3743819.224 ns/op
Iteration   5: 3755333.123 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  3758118.025 ±(99.9%) 48209.195 ns/op [Average]
  (min, avg, max) = (3743819.224, 3758118.025, 3777517.957), stdev = 12519.775
  CI (99.9%): [3709908.829, 3806327.220] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CAP_N_PROTO, inputType = _1_K)

# Run progress: 13.73% complete, ETA 01:23:25
# Fork: 1 of 1
# Warmup Iteration   1: 444934.194 ns/op
# Warmup Iteration   2: 75661.928 ns/op
# Warmup Iteration   3: 62128.100 ns/op
# Warmup Iteration   4: 65280.761 ns/op
Iteration   1: 61635.071 ns/op
Iteration   2: 63299.016 ns/op
Iteration   3: 62283.752 ns/op
Iteration   4: 61838.695 ns/op
Iteration   5: 63250.559 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  62461.419 ±(99.9%) 2999.125 ns/op [Average]
  (min, avg, max) = (61635.071, 62461.419, 63299.016), stdev = 778.863
  CI (99.9%): [59462.294, 65460.544] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CAP_N_PROTO, inputType = _2_K)

# Run progress: 13.92% complete, ETA 01:23:17
# Fork: 1 of 1
# Warmup Iteration   1: 468443.353 ns/op
# Warmup Iteration   2: 128214.344 ns/op
# Warmup Iteration   3: 118745.815 ns/op
# Warmup Iteration   4: 113447.530 ns/op
Iteration   1: 116773.888 ns/op
Iteration   2: 114856.605 ns/op
Iteration   3: 117254.592 ns/op
Iteration   4: 114083.798 ns/op
Iteration   5: 112957.098 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  115185.196 ±(99.9%) 6966.317 ns/op [Average]
  (min, avg, max) = (112957.098, 115185.196, 117254.592), stdev = 1809.130
  CI (99.9%): [108218.879, 122151.513] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CAP_N_PROTO, inputType = _4_K)

# Run progress: 14.12% complete, ETA 01:23:09
# Fork: 1 of 1
# Warmup Iteration   1: 1049225.593 ns/op
# Warmup Iteration   2: 279373.567 ns/op
# Warmup Iteration   3: 230933.937 ns/op
# Warmup Iteration   4: 230468.281 ns/op
Iteration   1: 255057.987 ns/op
Iteration   2: 229417.491 ns/op
Iteration   3: 233876.135 ns/op
Iteration   4: 236306.334 ns/op
Iteration   5: 233524.995 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  237636.589 ±(99.9%) 38692.480 ns/op [Average]
  (min, avg, max) = (229417.491, 237636.589, 255057.987), stdev = 10048.314
  CI (99.9%): [198944.108, 276329.069] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CAP_N_PROTO, inputType = _8_K)

# Run progress: 14.31% complete, ETA 01:23:01
# Fork: 1 of 1
# Warmup Iteration   1: 2769802.284 ns/op
# Warmup Iteration   2: 595037.124 ns/op
# Warmup Iteration   3: 544537.958 ns/op
# Warmup Iteration   4: 532814.367 ns/op
Iteration   1: 540580.255 ns/op
Iteration   2: 528665.960 ns/op
Iteration   3: 559204.459 ns/op
Iteration   4: 565288.918 ns/op
Iteration   5: 546859.686 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  548119.856 ±(99.9%) 56281.768 ns/op [Average]
  (min, avg, max) = (528665.960, 548119.856, 565288.918), stdev = 14616.196
  CI (99.9%): [491838.088, 604401.624] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CAP_N_PROTO, inputType = _64_K)

# Run progress: 14.51% complete, ETA 01:22:53
# Fork: 1 of 1
# Warmup Iteration   1: 14841558.702 ns/op
# Warmup Iteration   2: 5156591.488 ns/op
# Warmup Iteration   3: 5101398.059 ns/op
# Warmup Iteration   4: 5077011.441 ns/op
Iteration   1: 5216513.481 ns/op
Iteration   2: 5283204.050 ns/op
Iteration   3: 5077568.565 ns/op
Iteration   4: 5116734.720 ns/op
Iteration   5: 5083793.907 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  5155562.945 ±(99.9%) 348418.217 ns/op [Average]
  (min, avg, max) = (5077568.565, 5155562.945, 5283204.050), stdev = 90483.104
  CI (99.9%): [4807144.728, 5503981.162] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _1_K)

# Run progress: 14.71% complete, ETA 01:22:45
# Fork: 1 of 1
# Warmup Iteration   1: 288605.378 ns/op
# Warmup Iteration   2: 66435.008 ns/op
# Warmup Iteration   3: 61414.898 ns/op
# Warmup Iteration   4: 61232.554 ns/op
Iteration   1: 60827.924 ns/op
Iteration   2: 60699.368 ns/op
Iteration   3: 61574.536 ns/op
Iteration   4: 61346.619 ns/op
Iteration   5: 60354.578 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  60960.605 ±(99.9%) 1905.034 ns/op [Average]
  (min, avg, max) = (60354.578, 60960.605, 61574.536), stdev = 494.731
  CI (99.9%): [59055.571, 62865.639] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _2_K)

# Run progress: 14.90% complete, ETA 01:22:37
# Fork: 1 of 1
# Warmup Iteration   1: 722149.998 ns/op
# Warmup Iteration   2: 143456.337 ns/op
# Warmup Iteration   3: 115518.702 ns/op
# Warmup Iteration   4: 115683.063 ns/op
Iteration   1: 111452.088 ns/op
Iteration   2: 113913.120 ns/op
Iteration   3: 111824.645 ns/op
Iteration   4: 112248.096 ns/op
Iteration   5: 115928.260 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  113073.242 ±(99.9%) 7132.668 ns/op [Average]
  (min, avg, max) = (111452.088, 113073.242, 115928.260), stdev = 1852.331
  CI (99.9%): [105940.573, 120205.910] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _4_K)

# Run progress: 15.10% complete, ETA 01:22:28
# Fork: 1 of 1
# Warmup Iteration   1: 1620980.692 ns/op
# Warmup Iteration   2: 286313.205 ns/op
# Warmup Iteration   3: 236768.276 ns/op
# Warmup Iteration   4: 227156.079 ns/op
Iteration   1: 225930.333 ns/op
Iteration   2: 225717.733 ns/op
Iteration   3: 242618.469 ns/op
Iteration   4: 231445.912 ns/op
Iteration   5: 239102.999 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  232963.089 ±(99.9%) 29526.024 ns/op [Average]
  (min, avg, max) = (225717.733, 232963.089, 242618.469), stdev = 7667.815
  CI (99.9%): [203437.065, 262489.113] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _8_K)

# Run progress: 15.29% complete, ETA 01:22:19
# Fork: 1 of 1
# Warmup Iteration   1: 2388851.683 ns/op
# Warmup Iteration   2: 575767.015 ns/op
# Warmup Iteration   3: 519506.000 ns/op
# Warmup Iteration   4: 518457.424 ns/op
Iteration   1: 522068.335 ns/op
Iteration   2: 522896.764 ns/op
Iteration   3: 505005.719 ns/op
Iteration   4: 506083.993 ns/op
Iteration   5: 505336.191 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  512278.200 ±(99.9%) 35918.960 ns/op [Average]
  (min, avg, max) = (505005.719, 512278.200, 522896.764), stdev = 9328.040
  CI (99.9%): [476359.240, 548197.160] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _64_K)

# Run progress: 15.49% complete, ETA 01:22:11
# Fork: 1 of 1
# Warmup Iteration   1: 15772786.575 ns/op
# Warmup Iteration   2: 5563007.920 ns/op
# Warmup Iteration   3: 5299093.551 ns/op
# Warmup Iteration   4: 5192408.757 ns/op
Iteration   1: 5050750.658 ns/op
Iteration   2: 5257132.182 ns/op
Iteration   3: 5183176.550 ns/op
Iteration   4: 5061241.738 ns/op
Iteration   5: 5130691.101 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  5136598.445 ±(99.9%) 332257.660 ns/op [Average]
  (min, avg, max) = (5050750.658, 5136598.445, 5257132.182), stdev = 86286.259
  CI (99.9%): [4804340.785, 5468856.106] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 15.69% complete, ETA 01:22:03
# Fork: 1 of 1
# Warmup Iteration   1: 26634.090 ns/op
# Warmup Iteration   2: 14438.491 ns/op
# Warmup Iteration   3: 13648.141 ns/op
# Warmup Iteration   4: 13483.562 ns/op
Iteration   1: 13332.036 ns/op
Iteration   2: 13241.552 ns/op
Iteration   3: 13107.162 ns/op
Iteration   4: 13193.713 ns/op
Iteration   5: 13656.504 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  13306.193 ±(99.9%) 816.457 ns/op [Average]
  (min, avg, max) = (13107.162, 13306.193, 13656.504), stdev = 212.031
  CI (99.9%): [12489.736, 14122.651] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 15.88% complete, ETA 01:21:54
# Fork: 1 of 1
# Warmup Iteration   1: 63312.277 ns/op
# Warmup Iteration   2: 28819.991 ns/op
# Warmup Iteration   3: 28731.243 ns/op
# Warmup Iteration   4: 27120.281 ns/op
Iteration   1: 25742.929 ns/op
Iteration   2: 26379.880 ns/op
Iteration   3: 25770.051 ns/op
Iteration   4: 25642.130 ns/op
Iteration   5: 25714.267 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  25849.851 ±(99.9%) 1155.613 ns/op [Average]
  (min, avg, max) = (25642.130, 25849.851, 26379.880), stdev = 300.109
  CI (99.9%): [24694.238, 27005.465] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 16.08% complete, ETA 01:21:45
# Fork: 1 of 1
# Warmup Iteration   1: 102501.358 ns/op
# Warmup Iteration   2: 56622.597 ns/op
# Warmup Iteration   3: 55081.833 ns/op
# Warmup Iteration   4: 54081.283 ns/op
Iteration   1: 54341.516 ns/op
Iteration   2: 54296.644 ns/op
Iteration   3: 53178.283 ns/op
Iteration   4: 53749.027 ns/op
Iteration   5: 52955.230 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  53704.140 ±(99.9%) 2432.860 ns/op [Average]
  (min, avg, max) = (52955.230, 53704.140, 54341.516), stdev = 631.806
  CI (99.9%): [51271.280, 56137.000] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 16.27% complete, ETA 01:21:36
# Fork: 1 of 1
# Warmup Iteration   1: 255856.494 ns/op
# Warmup Iteration   2: 130815.736 ns/op
# Warmup Iteration   3: 124881.149 ns/op
# Warmup Iteration   4: 124075.786 ns/op
Iteration   1: 122703.255 ns/op
Iteration   2: 123231.197 ns/op
Iteration   3: 123025.730 ns/op
Iteration   4: 122473.001 ns/op
Iteration   5: 121799.912 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  122646.619 ±(99.9%) 2140.244 ns/op [Average]
  (min, avg, max) = (121799.912, 122646.619, 123231.197), stdev = 555.815
  CI (99.9%): [120506.374, 124786.863] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 16.47% complete, ETA 01:21:27
# Fork: 1 of 1
# Warmup Iteration   1: 2102336.910 ns/op
# Warmup Iteration   2: 1144078.931 ns/op
# Warmup Iteration   3: 1104746.727 ns/op
# Warmup Iteration   4: 1089403.063 ns/op
Iteration   1: 1085636.079 ns/op
Iteration   2: 1058890.308 ns/op
Iteration   3: 1062633.994 ns/op
Iteration   4: 1079249.353 ns/op
Iteration   5: 1059714.811 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1069224.909 ±(99.9%) 47571.510 ns/op [Average]
  (min, avg, max) = (1058890.308, 1069224.909, 1085636.079), stdev = 12354.170
  CI (99.9%): [1021653.399, 1116796.419] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 16.67% complete, ETA 01:21:19
# Fork: 1 of 1
# Warmup Iteration   1: 21814.557 ns/op
# Warmup Iteration   2: 14426.475 ns/op
# Warmup Iteration   3: 13821.431 ns/op
# Warmup Iteration   4: 14147.068 ns/op
Iteration   1: 13801.655 ns/op
Iteration   2: 13723.753 ns/op
Iteration   3: 13550.009 ns/op
Iteration   4: 13545.962 ns/op
Iteration   5: 13669.155 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  13658.107 ±(99.9%) 427.487 ns/op [Average]
  (min, avg, max) = (13545.962, 13658.107, 13801.655), stdev = 111.017
  CI (99.9%): [13230.620, 14085.594] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 16.86% complete, ETA 01:21:10
# Fork: 1 of 1
# Warmup Iteration   1: 64793.676 ns/op
# Warmup Iteration   2: 29179.186 ns/op
# Warmup Iteration   3: 28217.797 ns/op
# Warmup Iteration   4: 27399.256 ns/op
Iteration   1: 27600.166 ns/op
Iteration   2: 27025.873 ns/op
Iteration   3: 26969.022 ns/op
Iteration   4: 27127.839 ns/op
Iteration   5: 27149.360 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  27174.452 ±(99.9%) 959.404 ns/op [Average]
  (min, avg, max) = (26969.022, 27174.452, 27600.166), stdev = 249.154
  CI (99.9%): [26215.048, 28133.857] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 17.06% complete, ETA 01:21:02
# Fork: 1 of 1
# Warmup Iteration   1: 119957.031 ns/op
# Warmup Iteration   2: 55062.501 ns/op
# Warmup Iteration   3: 53869.075 ns/op
# Warmup Iteration   4: 54205.095 ns/op
Iteration   1: 54093.439 ns/op
Iteration   2: 54261.858 ns/op
Iteration   3: 54627.528 ns/op
Iteration   4: 53911.951 ns/op
Iteration   5: 53608.598 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  54100.675 ±(99.9%) 1468.004 ns/op [Average]
  (min, avg, max) = (53608.598, 54100.675, 54627.528), stdev = 381.236
  CI (99.9%): [52632.671, 55568.678] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 17.25% complete, ETA 01:20:52
# Fork: 1 of 1
# Warmup Iteration   1: 202668.485 ns/op
# Warmup Iteration   2: 117774.693 ns/op
# Warmup Iteration   3: 119121.629 ns/op
# Warmup Iteration   4: 118032.106 ns/op
Iteration   1: 113336.491 ns/op
Iteration   2: 115362.527 ns/op
Iteration   3: 112275.076 ns/op
Iteration   4: 112088.791 ns/op
Iteration   5: 110895.666 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  112791.710 ±(99.9%) 6461.134 ns/op [Average]
  (min, avg, max) = (110895.666, 112791.710, 115362.527), stdev = 1677.936
  CI (99.9%): [106330.577, 119252.844] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 17.45% complete, ETA 01:20:43
# Fork: 1 of 1
# Warmup Iteration   1: 1750395.400 ns/op
# Warmup Iteration   2: 1207283.486 ns/op
# Warmup Iteration   3: 1173727.863 ns/op
# Warmup Iteration   4: 1141938.752 ns/op
Iteration   1: 1142081.741 ns/op
Iteration   2: 1106760.434 ns/op
Iteration   3: 1109239.206 ns/op
Iteration   4: 1109375.734 ns/op
Iteration   5: 1129005.273 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1119292.477 ±(99.9%) 59968.483 ns/op [Average]
  (min, avg, max) = (1106760.434, 1119292.477, 1142081.741), stdev = 15573.625
  CI (99.9%): [1059323.995, 1179260.960] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 17.65% complete, ETA 01:20:34
# Fork: 1 of 1
# Warmup Iteration   1: 26084.243 ns/op
# Warmup Iteration   2: 14722.743 ns/op
# Warmup Iteration   3: 13791.969 ns/op
# Warmup Iteration   4: 13132.501 ns/op
Iteration   1: 13280.439 ns/op
Iteration   2: 13113.011 ns/op
Iteration   3: 13841.577 ns/op
Iteration   4: 13134.631 ns/op
Iteration   5: 12978.598 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  13269.651 ±(99.9%) 1298.265 ns/op [Average]
  (min, avg, max) = (12978.598, 13269.651, 13841.577), stdev = 337.155
  CI (99.9%): [11971.387, 14567.916] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 17.84% complete, ETA 01:20:25
# Fork: 1 of 1
# Warmup Iteration   1: 46896.472 ns/op
# Warmup Iteration   2: 25839.058 ns/op
# Warmup Iteration   3: 26316.803 ns/op
# Warmup Iteration   4: 25745.194 ns/op
Iteration   1: 25871.299 ns/op
Iteration   2: 25814.169 ns/op
Iteration   3: 25613.535 ns/op
Iteration   4: 25346.312 ns/op
Iteration   5: 25557.428 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  25640.548 ±(99.9%) 811.390 ns/op [Average]
  (min, avg, max) = (25346.312, 25640.548, 25871.299), stdev = 210.715
  CI (99.9%): [24829.159, 26451.938] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 18.04% complete, ETA 01:20:15
# Fork: 1 of 1
# Warmup Iteration   1: 86176.865 ns/op
# Warmup Iteration   2: 52683.625 ns/op
# Warmup Iteration   3: 53981.741 ns/op
# Warmup Iteration   4: 51797.768 ns/op
Iteration   1: 50658.886 ns/op
Iteration   2: 50606.505 ns/op
Iteration   3: 51034.113 ns/op
Iteration   4: 50107.958 ns/op
Iteration   5: 50421.202 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  50565.733 ±(99.9%) 1306.054 ns/op [Average]
  (min, avg, max) = (50107.958, 50565.733, 51034.113), stdev = 339.178
  CI (99.9%): [49259.678, 51871.787] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 18.24% complete, ETA 01:20:06
# Fork: 1 of 1
# Warmup Iteration   1: 243391.332 ns/op
# Warmup Iteration   2: 125404.461 ns/op
# Warmup Iteration   3: 119809.440 ns/op
# Warmup Iteration   4: 116981.160 ns/op
Iteration   1: 119116.626 ns/op
Iteration   2: 118094.114 ns/op
Iteration   3: 117655.051 ns/op
Iteration   4: 117716.075 ns/op
Iteration   5: 117037.515 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  117923.876 ±(99.9%) 2953.169 ns/op [Average]
  (min, avg, max) = (117037.515, 117923.876, 119116.626), stdev = 766.929
  CI (99.9%): [114970.707, 120877.045] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 18.43% complete, ETA 01:19:57
# Fork: 1 of 1
# Warmup Iteration   1: 1904623.743 ns/op
# Warmup Iteration   2: 1079501.522 ns/op
# Warmup Iteration   3: 1119770.750 ns/op
# Warmup Iteration   4: 1134368.914 ns/op
Iteration   1: 1127734.842 ns/op
Iteration   2: 1104787.457 ns/op
Iteration   3: 1107066.055 ns/op
Iteration   4: 1105862.637 ns/op
Iteration   5: 1116079.643 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1112306.127 ±(99.9%) 37422.236 ns/op [Average]
  (min, avg, max) = (1104787.457, 1112306.127, 1127734.842), stdev = 9718.436
  CI (99.9%): [1074883.891, 1149728.363] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 18.63% complete, ETA 01:19:48
# Fork: 1 of 1
# Warmup Iteration   1: 9765.971 ns/op
# Warmup Iteration   2: 6389.201 ns/op
# Warmup Iteration   3: 6037.047 ns/op
# Warmup Iteration   4: 6018.166 ns/op
Iteration   1: 5918.448 ns/op
Iteration   2: 6112.202 ns/op
Iteration   3: 5935.455 ns/op
Iteration   4: 5933.638 ns/op
Iteration   5: 5929.876 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  5965.924 ±(99.9%) 315.902 ns/op [Average]
  (min, avg, max) = (5918.448, 5965.924, 6112.202), stdev = 82.039
  CI (99.9%): [5650.022, 6281.826] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 18.82% complete, ETA 01:19:38
# Fork: 1 of 1
# Warmup Iteration   1: 18246.608 ns/op
# Warmup Iteration   2: 11594.709 ns/op
# Warmup Iteration   3: 11361.185 ns/op
# Warmup Iteration   4: 11202.772 ns/op
Iteration   1: 11183.516 ns/op
Iteration   2: 11202.857 ns/op
Iteration   3: 11110.922 ns/op
Iteration   4: 11012.494 ns/op
Iteration   5: 11180.673 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  11138.092 ±(99.9%) 301.877 ns/op [Average]
  (min, avg, max) = (11012.494, 11138.092, 11202.857), stdev = 78.397
  CI (99.9%): [10836.215, 11439.969] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 19.02% complete, ETA 01:19:28
# Fork: 1 of 1
# Warmup Iteration   1: 41734.848 ns/op
# Warmup Iteration   2: 22088.753 ns/op
# Warmup Iteration   3: 21691.541 ns/op
# Warmup Iteration   4: 21201.420 ns/op
Iteration   1: 21123.858 ns/op
Iteration   2: 20838.481 ns/op
Iteration   3: 21429.337 ns/op
Iteration   4: 21123.430 ns/op
Iteration   5: 20865.640 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  21076.149 ±(99.9%) 923.459 ns/op [Average]
  (min, avg, max) = (20838.481, 21076.149, 21429.337), stdev = 239.819
  CI (99.9%): [20152.690, 21999.609] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 19.22% complete, ETA 01:19:18
# Fork: 1 of 1
# Warmup Iteration   1: 84789.914 ns/op
# Warmup Iteration   2: 46394.511 ns/op
# Warmup Iteration   3: 45987.262 ns/op
# Warmup Iteration   4: 45382.175 ns/op
Iteration   1: 44891.005 ns/op
Iteration   2: 44878.185 ns/op
Iteration   3: 44630.600 ns/op
Iteration   4: 44896.215 ns/op
Iteration   5: 44355.805 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  44730.362 ±(99.9%) 914.093 ns/op [Average]
  (min, avg, max) = (44355.805, 44730.362, 44896.215), stdev = 237.387
  CI (99.9%): [43816.269, 45644.455] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 19.41% complete, ETA 01:19:08
# Fork: 1 of 1
# Warmup Iteration   1: 843336.527 ns/op
# Warmup Iteration   2: 487006.277 ns/op
# Warmup Iteration   3: 469791.630 ns/op
# Warmup Iteration   4: 457921.503 ns/op
Iteration   1: 452190.605 ns/op
Iteration   2: 452261.920 ns/op
Iteration   3: 449452.077 ns/op
Iteration   4: 448097.073 ns/op
Iteration   5: 455728.694 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  451546.074 ±(99.9%) 11341.861 ns/op [Average]
  (min, avg, max) = (448097.073, 451546.074, 455728.694), stdev = 2945.445
  CI (99.9%): [440204.212, 462887.935] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 19.61% complete, ETA 01:18:58
# Fork: 1 of 1
# Warmup Iteration   1: 9175.987 ns/op
# Warmup Iteration   2: 5051.959 ns/op
# Warmup Iteration   3: 4573.425 ns/op
# Warmup Iteration   4: 4485.351 ns/op
Iteration   1: 4373.437 ns/op
Iteration   2: 4322.453 ns/op
Iteration   3: 4320.158 ns/op
Iteration   4: 4322.375 ns/op
Iteration   5: 4321.495 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  4331.983 ±(99.9%) 89.302 ns/op [Average]
  (min, avg, max) = (4320.158, 4331.983, 4373.437), stdev = 23.191
  CI (99.9%): [4242.681, 4421.285] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 19.80% complete, ETA 01:18:48
# Fork: 1 of 1
# Warmup Iteration   1: 17348.466 ns/op
# Warmup Iteration   2: 9972.447 ns/op
# Warmup Iteration   3: 9766.138 ns/op
# Warmup Iteration   4: 9464.734 ns/op
Iteration   1: 9603.256 ns/op
Iteration   2: 9359.950 ns/op
Iteration   3: 9945.301 ns/op
Iteration   4: 9383.578 ns/op
Iteration   5: 9316.875 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  9521.792 ±(99.9%) 1006.491 ns/op [Average]
  (min, avg, max) = (9316.875, 9521.792, 9945.301), stdev = 261.383
  CI (99.9%): [8515.301, 10528.283] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 20.00% complete, ETA 01:18:38
# Fork: 1 of 1
# Warmup Iteration   1: 31012.475 ns/op
# Warmup Iteration   2: 17223.423 ns/op
# Warmup Iteration   3: 16270.302 ns/op
# Warmup Iteration   4: 16111.763 ns/op
Iteration   1: 16016.145 ns/op
Iteration   2: 15752.080 ns/op
Iteration   3: 15974.379 ns/op
Iteration   4: 15759.828 ns/op
Iteration   5: 15702.573 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  15841.001 ±(99.9%) 551.743 ns/op [Average]
  (min, avg, max) = (15702.573, 15841.001, 16016.145), stdev = 143.286
  CI (99.9%): [15289.259, 16392.744] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 20.20% complete, ETA 01:18:28
# Fork: 1 of 1
# Warmup Iteration   1: 70627.878 ns/op
# Warmup Iteration   2: 37692.620 ns/op
# Warmup Iteration   3: 36037.966 ns/op
# Warmup Iteration   4: 34558.856 ns/op
Iteration   1: 34394.684 ns/op
Iteration   2: 34458.960 ns/op
Iteration   3: 35523.998 ns/op
Iteration   4: 34376.533 ns/op
Iteration   5: 34372.573 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  34625.350 ±(99.9%) 1939.008 ns/op [Average]
  (min, avg, max) = (34372.573, 34625.350, 35523.998), stdev = 503.554
  CI (99.9%): [32686.341, 36564.358] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 20.39% complete, ETA 01:18:18
# Fork: 1 of 1
# Warmup Iteration   1: 706635.697 ns/op
# Warmup Iteration   2: 434190.730 ns/op
# Warmup Iteration   3: 377012.679 ns/op
# Warmup Iteration   4: 370251.930 ns/op
Iteration   1: 364702.392 ns/op
Iteration   2: 371694.535 ns/op
Iteration   3: 358996.736 ns/op
Iteration   4: 362094.262 ns/op
Iteration   5: 365945.183 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  364686.622 ±(99.9%) 18243.907 ns/op [Average]
  (min, avg, max) = (358996.736, 364686.622, 371694.535), stdev = 4737.885
  CI (99.9%): [346442.715, 382930.528] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 20.59% complete, ETA 01:18:07
# Fork: 1 of 1
# Warmup Iteration   1: 8882.761 ns/op
# Warmup Iteration   2: 5473.773 ns/op
# Warmup Iteration   3: 4506.791 ns/op
# Warmup Iteration   4: 4521.172 ns/op
Iteration   1: 4634.474 ns/op
Iteration   2: 4521.242 ns/op
Iteration   3: 4524.532 ns/op
Iteration   4: 4627.375 ns/op
Iteration   5: 4712.355 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  4603.996 ±(99.9%) 312.709 ns/op [Average]
  (min, avg, max) = (4521.242, 4603.996, 4712.355), stdev = 81.210
  CI (99.9%): [4291.286, 4916.705] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 20.78% complete, ETA 01:17:57
# Fork: 1 of 1
# Warmup Iteration   1: 17029.659 ns/op
# Warmup Iteration   2: 9654.682 ns/op
# Warmup Iteration   3: 8817.827 ns/op
# Warmup Iteration   4: 8810.485 ns/op
Iteration   1: 8842.261 ns/op
Iteration   2: 8784.540 ns/op
Iteration   3: 9082.195 ns/op
Iteration   4: 8800.441 ns/op
Iteration   5: 8833.000 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  8868.487 ±(99.9%) 468.828 ns/op [Average]
  (min, avg, max) = (8784.540, 8868.487, 9082.195), stdev = 121.753
  CI (99.9%): [8399.659, 9337.316] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 20.98% complete, ETA 01:17:47
# Fork: 1 of 1
# Warmup Iteration   1: 39519.240 ns/op
# Warmup Iteration   2: 18764.681 ns/op
# Warmup Iteration   3: 16864.398 ns/op
# Warmup Iteration   4: 16553.441 ns/op
Iteration   1: 16592.486 ns/op
Iteration   2: 16541.869 ns/op
Iteration   3: 16506.129 ns/op
Iteration   4: 16552.469 ns/op
Iteration   5: 16632.676 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  16565.126 ±(99.9%) 187.591 ns/op [Average]
  (min, avg, max) = (16506.129, 16565.126, 16632.676), stdev = 48.717
  CI (99.9%): [16377.535, 16752.716] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 21.18% complete, ETA 01:17:37
# Fork: 1 of 1
# Warmup Iteration   1: 81564.116 ns/op
# Warmup Iteration   2: 39550.948 ns/op
# Warmup Iteration   3: 37305.910 ns/op
# Warmup Iteration   4: 40944.952 ns/op
Iteration   1: 35428.879 ns/op
Iteration   2: 35955.356 ns/op
Iteration   3: 35290.810 ns/op
Iteration   4: 35466.880 ns/op
Iteration   5: 35326.153 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  35493.616 ±(99.9%) 1031.950 ns/op [Average]
  (min, avg, max) = (35290.810, 35493.616, 35955.356), stdev = 267.994
  CI (99.9%): [34461.666, 36525.565] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 21.37% complete, ETA 01:17:27
# Fork: 1 of 1
# Warmup Iteration   1: 735384.037 ns/op
# Warmup Iteration   2: 405720.807 ns/op
# Warmup Iteration   3: 356881.234 ns/op
# Warmup Iteration   4: 345355.015 ns/op
Iteration   1: 355403.540 ns/op
Iteration   2: 346354.504 ns/op
Iteration   3: 347387.060 ns/op
Iteration   4: 346195.098 ns/op
Iteration   5: 347534.067 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  348574.854 ±(99.9%) 14878.422 ns/op [Average]
  (min, avg, max) = (346195.098, 348574.854, 355403.540), stdev = 3863.879
  CI (99.9%): [333696.432, 363453.276] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 21.57% complete, ETA 01:17:17
# Fork: 1 of 1
# Warmup Iteration   1: 255911.273 ns/op
# Warmup Iteration   2: 128384.388 ns/op
# Warmup Iteration   3: 117369.329 ns/op
# Warmup Iteration   4: 115930.322 ns/op
Iteration   1: 116452.549 ns/op
Iteration   2: 115229.735 ns/op
Iteration   3: 117102.383 ns/op
Iteration   4: 119775.331 ns/op
Iteration   5: 115062.899 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  116724.579 ±(99.9%) 7336.352 ns/op [Average]
  (min, avg, max) = (115062.899, 116724.579, 119775.331), stdev = 1905.227
  CI (99.9%): [109388.227, 124060.932] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 21.76% complete, ETA 01:17:06
# Fork: 1 of 1
# Warmup Iteration   1: 482185.040 ns/op
# Warmup Iteration   2: 229055.319 ns/op
# Warmup Iteration   3: 219644.942 ns/op
# Warmup Iteration   4: 209051.946 ns/op
Iteration   1: 206162.053 ns/op
Iteration   2: 205845.266 ns/op
Iteration   3: 207474.025 ns/op
Iteration   4: 207977.631 ns/op
Iteration   5: 204935.834 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  206478.962 ±(99.9%) 4762.753 ns/op [Average]
  (min, avg, max) = (204935.834, 206478.962, 207977.631), stdev = 1236.872
  CI (99.9%): [201716.209, 211241.715] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 21.96% complete, ETA 01:16:55
# Fork: 1 of 1
# Warmup Iteration   1: 1088959.382 ns/op
# Warmup Iteration   2: 550469.961 ns/op
# Warmup Iteration   3: 515957.481 ns/op
# Warmup Iteration   4: 503932.800 ns/op
Iteration   1: 507879.718 ns/op
Iteration   2: 502560.798 ns/op
Iteration   3: 502754.924 ns/op
Iteration   4: 500037.403 ns/op
Iteration   5: 532022.549 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  509051.078 ±(99.9%) 50649.955 ns/op [Average]
  (min, avg, max) = (500037.403, 509051.078, 532022.549), stdev = 13153.632
  CI (99.9%): [458401.123, 559701.033] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 22.16% complete, ETA 01:16:45
# Fork: 1 of 1
# Warmup Iteration   1: 2196370.475 ns/op
# Warmup Iteration   2: 1353447.598 ns/op
# Warmup Iteration   3: 1274018.398 ns/op
# Warmup Iteration   4: 1282813.193 ns/op
Iteration   1: 1265708.179 ns/op
Iteration   2: 1252341.626 ns/op
Iteration   3: 1245935.132 ns/op
Iteration   4: 1242356.320 ns/op
Iteration   5: 1254203.497 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1252108.951 ±(99.9%) 34581.383 ns/op [Average]
  (min, avg, max) = (1242356.320, 1252108.951, 1265708.179), stdev = 8980.675
  CI (99.9%): [1217527.568, 1286690.333] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 22.35% complete, ETA 01:16:34
# Fork: 1 of 1
# Warmup Iteration   1: 17085640.583 ns/op
# Warmup Iteration   2: 10712141.140 ns/op
# Warmup Iteration   3: 10904596.227 ns/op
# Warmup Iteration   4: 10276968.345 ns/op
Iteration   1: 10344594.700 ns/op
Iteration   2: 10297534.402 ns/op
Iteration   3: 10209534.827 ns/op
Iteration   4: 10243421.722 ns/op
Iteration   5: 10212474.281 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  10261511.986 ±(99.9%) 224809.113 ns/op [Average]
  (min, avg, max) = (10209534.827, 10261511.986, 10344594.700), stdev = 58382.213
  CI (99.9%): [10036702.873, 10486321.099] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 22.55% complete, ETA 01:16:24
# Fork: 1 of 1
# Warmup Iteration   1: 4978.449 ns/op
# Warmup Iteration   2: 2859.028 ns/op
# Warmup Iteration   3: 2662.857 ns/op
# Warmup Iteration   4: 2582.923 ns/op
Iteration   1: 2591.820 ns/op
Iteration   2: 2590.753 ns/op
Iteration   3: 2706.730 ns/op
Iteration   4: 2649.352 ns/op
Iteration   5: 2594.993 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2626.730 ±(99.9%) 196.647 ns/op [Average]
  (min, avg, max) = (2590.753, 2626.730, 2706.730), stdev = 51.069
  CI (99.9%): [2430.083, 2823.377] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 22.75% complete, ETA 01:16:14
# Fork: 1 of 1
# Warmup Iteration   1: 9581.449 ns/op
# Warmup Iteration   2: 5815.066 ns/op
# Warmup Iteration   3: 5494.288 ns/op
# Warmup Iteration   4: 5468.625 ns/op
Iteration   1: 5277.278 ns/op
Iteration   2: 5268.536 ns/op
Iteration   3: 5283.689 ns/op
Iteration   4: 5326.985 ns/op
Iteration   5: 5302.681 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  5291.834 ±(99.9%) 89.775 ns/op [Average]
  (min, avg, max) = (5268.536, 5291.834, 5326.985), stdev = 23.314
  CI (99.9%): [5202.058, 5381.609] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 22.94% complete, ETA 01:16:03
# Fork: 1 of 1
# Warmup Iteration   1: 18070.175 ns/op
# Warmup Iteration   2: 10745.146 ns/op
# Warmup Iteration   3: 10732.604 ns/op
# Warmup Iteration   4: 9890.199 ns/op
Iteration   1: 9855.997 ns/op
Iteration   2: 9932.742 ns/op
Iteration   3: 9860.888 ns/op
Iteration   4: 9866.847 ns/op
Iteration   5: 10237.318 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  9950.758 ±(99.9%) 628.430 ns/op [Average]
  (min, avg, max) = (9855.997, 9950.758, 10237.318), stdev = 163.201
  CI (99.9%): [9322.328, 10579.188] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 23.14% complete, ETA 01:15:52
# Fork: 1 of 1
# Warmup Iteration   1: 38070.214 ns/op
# Warmup Iteration   2: 22358.181 ns/op
# Warmup Iteration   3: 22366.156 ns/op
# Warmup Iteration   4: 20399.515 ns/op
Iteration   1: 20434.557 ns/op
Iteration   2: 20448.139 ns/op
Iteration   3: 21668.212 ns/op
Iteration   4: 20376.229 ns/op
Iteration   5: 20451.263 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  20675.680 ±(99.9%) 2139.680 ns/op [Average]
  (min, avg, max) = (20376.229, 20675.680, 21668.212), stdev = 555.668
  CI (99.9%): [18536.000, 22815.360] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 23.33% complete, ETA 01:15:42
# Fork: 1 of 1
# Warmup Iteration   1: 344349.408 ns/op
# Warmup Iteration   2: 251348.138 ns/op
# Warmup Iteration   3: 237742.728 ns/op
# Warmup Iteration   4: 232691.342 ns/op
Iteration   1: 233601.662 ns/op
Iteration   2: 233343.050 ns/op
Iteration   3: 232849.662 ns/op
Iteration   4: 232862.246 ns/op
Iteration   5: 233511.104 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  233233.545 ±(99.9%) 1374.644 ns/op [Average]
  (min, avg, max) = (232849.662, 233233.545, 233601.662), stdev = 356.991
  CI (99.9%): [231858.901, 234608.189] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 23.53% complete, ETA 01:15:31
# Fork: 1 of 1
# Warmup Iteration   1: 26332.989 ns/op
# Warmup Iteration   2: 32896.752 ns/op
# Warmup Iteration   3: 34861.269 ns/op
# Warmup Iteration   4: 30300.157 ns/op
Iteration   1: 33055.141 ns/op
Iteration   2: 36465.449 ns/op
Iteration   3: 33170.300 ns/op
Iteration   4: 33790.329 ns/op
Iteration   5: 34853.441 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  34266.932 ±(99.9%) 5471.324 ns/op [Average]
  (min, avg, max) = (33055.141, 34266.932, 36465.449), stdev = 1420.885
  CI (99.9%): [28795.609, 39738.256] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 23.73% complete, ETA 01:15:21
# Fork: 1 of 1
# Warmup Iteration   1: 69726.545 ns/op
# Warmup Iteration   2: 67718.992 ns/op
# Warmup Iteration   3: 70179.574 ns/op
# Warmup Iteration   4: 59780.873 ns/op
Iteration   1: 64702.895 ns/op
Iteration   2: 66183.376 ns/op
Iteration   3: 63445.449 ns/op
Iteration   4: 61870.135 ns/op
Iteration   5: 58815.658 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  63003.503 ±(99.9%) 10894.228 ns/op [Average]
  (min, avg, max) = (58815.658, 63003.503, 66183.376), stdev = 2829.196
  CI (99.9%): [52109.275, 73897.730] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 23.92% complete, ETA 01:15:11
# Fork: 1 of 1
# Warmup Iteration   1: 121619.690 ns/op
# Warmup Iteration   2: 122327.959 ns/op
# Warmup Iteration   3: 138752.304 ns/op
# Warmup Iteration   4: 139581.610 ns/op
Iteration   1: 128475.382 ns/op
Iteration   2: 111381.047 ns/op
Iteration   3: 130412.114 ns/op
Iteration   4: 123764.113 ns/op
Iteration   5: 133821.093 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  125570.750 ±(99.9%) 33599.789 ns/op [Average]
  (min, avg, max) = (111381.047, 125570.750, 133821.093), stdev = 8725.758
  CI (99.9%): [91970.961, 159170.538] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 24.12% complete, ETA 01:15:00
# Fork: 1 of 1
# Warmup Iteration   1: 362155.021 ns/op
# Warmup Iteration   2: 248733.134 ns/op
# Warmup Iteration   3: 282529.206 ns/op
# Warmup Iteration   4: 289215.156 ns/op
Iteration   1: 272962.653 ns/op
Iteration   2: 275324.850 ns/op
Iteration   3: 295952.101 ns/op
Iteration   4: 303779.732 ns/op
Iteration   5: 291966.818 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  287997.231 ±(99.9%) 51473.211 ns/op [Average]
  (min, avg, max) = (272962.653, 287997.231, 303779.732), stdev = 13367.429
  CI (99.9%): [236524.020, 339470.442] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 24.31% complete, ETA 01:14:49
# Fork: 1 of 1
# Warmup Iteration   1: 2575576.610 ns/op
# Warmup Iteration   2: 2835079.977 ns/op
# Warmup Iteration   3: 2726779.912 ns/op
# Warmup Iteration   4: 2694019.468 ns/op
Iteration   1: 2526848.571 ns/op
Iteration   2: 2851654.065 ns/op
Iteration   3: 2715284.308 ns/op
Iteration   4: 2386872.507 ns/op
Iteration   5: 2458010.550 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2587734.000 ±(99.9%) 737685.873 ns/op [Average]
  (min, avg, max) = (2386872.507, 2587734.000, 2851654.065), stdev = 191574.679
  CI (99.9%): [1850048.127, 3325419.873] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 24.51% complete, ETA 01:14:39
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 24.71% complete, ETA 01:14:01
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 24.90% complete, ETA 01:13:23
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 25.10% complete, ETA 01:12:46
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 25.29% complete, ETA 01:12:10
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 25.49% complete, ETA 01:11:34
# Fork: 1 of 1
# Warmup Iteration   1: 213999.645 ns/op
# Warmup Iteration   2: 152463.727 ns/op
# Warmup Iteration   3: 148112.185 ns/op
# Warmup Iteration   4: 148923.754 ns/op
Iteration   1: 149741.115 ns/op
Iteration   2: 147379.203 ns/op
Iteration   3: 146289.260 ns/op
Iteration   4: 143411.369 ns/op
Iteration   5: 142299.276 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  145824.045 ±(99.9%) 11587.717 ns/op [Average]
  (min, avg, max) = (142299.276, 145824.045, 149741.115), stdev = 3009.293
  CI (99.9%): [134236.328, 157411.762] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 25.69% complete, ETA 01:11:25
# Fork: 1 of 1
# Warmup Iteration   1: 353390.303 ns/op
# Warmup Iteration   2: 247895.446 ns/op
# Warmup Iteration   3: 227652.704 ns/op
# Warmup Iteration   4: 228195.300 ns/op
Iteration   1: 232775.192 ns/op
Iteration   2: 224457.955 ns/op
Iteration   3: 222978.488 ns/op
Iteration   4: 224865.279 ns/op
Iteration   5: 222277.298 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  225470.843 ±(99.9%) 16240.947 ns/op [Average]
  (min, avg, max) = (222277.298, 225470.843, 232775.192), stdev = 4217.722
  CI (99.9%): [209229.895, 241711.790] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 25.88% complete, ETA 01:11:16
# Fork: 1 of 1
# Warmup Iteration   1: 666883.446 ns/op
# Warmup Iteration   2: 443152.813 ns/op
# Warmup Iteration   3: 423691.915 ns/op
# Warmup Iteration   4: 415900.693 ns/op
Iteration   1: 412251.558 ns/op
Iteration   2: 418964.773 ns/op
Iteration   3: 415302.809 ns/op
Iteration   4: 414219.373 ns/op
Iteration   5: 407222.722 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  413592.247 ±(99.9%) 16623.865 ns/op [Average]
  (min, avg, max) = (407222.722, 413592.247, 418964.773), stdev = 4317.165
  CI (99.9%): [396968.382, 430216.112] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 26.08% complete, ETA 01:11:08
# Fork: 1 of 1
# Warmup Iteration   1: 1432569.436 ns/op
# Warmup Iteration   2: 1023843.635 ns/op
# Warmup Iteration   3: 1031797.668 ns/op
# Warmup Iteration   4: 1026266.514 ns/op
Iteration   1: 998238.318 ns/op
Iteration   2: 980397.744 ns/op
Iteration   3: 1017778.897 ns/op
Iteration   4: 970984.308 ns/op
Iteration   5: 979227.534 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  989325.360 ±(99.9%) 72221.576 ns/op [Average]
  (min, avg, max) = (970984.308, 989325.360, 1017778.897), stdev = 18755.714
  CI (99.9%): [917103.784, 1061546.936] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 26.27% complete, ETA 01:10:59
# Fork: 1 of 1
# Warmup Iteration   1: 13738463.564 ns/op
# Warmup Iteration   2: 9498745.085 ns/op
# Warmup Iteration   3: 9386457.830 ns/op
# Warmup Iteration   4: 9273113.646 ns/op
Iteration   1: 9221521.188 ns/op
Iteration   2: 9167907.930 ns/op
Iteration   3: 9232365.457 ns/op
Iteration   4: 9146698.512 ns/op
Iteration   5: 9149585.781 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  9183615.774 ±(99.9%) 156188.747 ns/op [Average]
  (min, avg, max) = (9146698.512, 9183615.774, 9232365.457), stdev = 40561.722
  CI (99.9%): [9027427.027, 9339804.521] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 26.47% complete, ETA 01:10:51
# Fork: 1 of 1
# Warmup Iteration   1: 72778.633 ns/op
# Warmup Iteration   2: 27542.037 ns/op
# Warmup Iteration   3: 25912.181 ns/op
# Warmup Iteration   4: 25696.413 ns/op
Iteration   1: 25274.941 ns/op
Iteration   2: 25403.249 ns/op
Iteration   3: 25244.400 ns/op
Iteration   4: 25360.611 ns/op
Iteration   5: 25116.213 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  25279.883 ±(99.9%) 429.686 ns/op [Average]
  (min, avg, max) = (25116.213, 25279.883, 25403.249), stdev = 111.588
  CI (99.9%): [24850.197, 25709.568] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 26.67% complete, ETA 01:10:42
# Fork: 1 of 1
# Warmup Iteration   1: 167008.241 ns/op
# Warmup Iteration   2: 52440.348 ns/op
# Warmup Iteration   3: 51012.560 ns/op
# Warmup Iteration   4: 51326.010 ns/op
Iteration   1: 49428.125 ns/op
Iteration   2: 49709.898 ns/op
Iteration   3: 49408.961 ns/op
Iteration   4: 49068.242 ns/op
Iteration   5: 49495.496 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  49422.144 ±(99.9%) 889.906 ns/op [Average]
  (min, avg, max) = (49068.242, 49422.144, 49709.898), stdev = 231.106
  CI (99.9%): [48532.238, 50312.051] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 26.86% complete, ETA 01:10:32
# Fork: 1 of 1
# Warmup Iteration   1: 226153.734 ns/op
# Warmup Iteration   2: 118092.034 ns/op
# Warmup Iteration   3: 114717.552 ns/op
# Warmup Iteration   4: 115051.974 ns/op
Iteration   1: 113251.809 ns/op
Iteration   2: 113961.795 ns/op
Iteration   3: 115973.124 ns/op
Iteration   4: 111941.357 ns/op
Iteration   5: 112008.510 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  113427.319 ±(99.9%) 6390.995 ns/op [Average]
  (min, avg, max) = (111941.357, 113427.319, 115973.124), stdev = 1659.721
  CI (99.9%): [107036.325, 119818.314] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 27.06% complete, ETA 01:10:22
# Fork: 1 of 1
# Warmup Iteration   1: 604808.605 ns/op
# Warmup Iteration   2: 299138.366 ns/op
# Warmup Iteration   3: 284662.567 ns/op
# Warmup Iteration   4: 299775.699 ns/op
Iteration   1: 276050.488 ns/op
Iteration   2: 280886.337 ns/op
Iteration   3: 274780.254 ns/op
Iteration   4: 283534.568 ns/op
Iteration   5: 274302.727 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  277910.875 ±(99.9%) 15731.171 ns/op [Average]
  (min, avg, max) = (274302.727, 277910.875, 283534.568), stdev = 4085.335
  CI (99.9%): [262179.704, 293642.046] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 27.25% complete, ETA 01:10:13
# Fork: 1 of 1
# Warmup Iteration   1: 5394054.453 ns/op
# Warmup Iteration   2: 3055410.819 ns/op
# Warmup Iteration   3: 2971910.063 ns/op
# Warmup Iteration   4: 2979082.453 ns/op
Iteration   1: 2974644.966 ns/op
Iteration   2: 2946105.782 ns/op
Iteration   3: 2955001.496 ns/op
Iteration   4: 2939775.289 ns/op
Iteration   5: 2982103.465 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2959526.200 ±(99.9%) 70188.192 ns/op [Average]
  (min, avg, max) = (2939775.289, 2959526.200, 2982103.465), stdev = 18227.651
  CI (99.9%): [2889338.008, 3029714.392] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _1_K)

# Run progress: 27.45% complete, ETA 01:10:03
# Fork: 1 of 1
# Warmup Iteration   1: 68208.326 ns/op
# Warmup Iteration   2: 27289.290 ns/op
# Warmup Iteration   3: 26233.123 ns/op
# Warmup Iteration   4: 25863.510 ns/op
Iteration   1: 25576.109 ns/op
Iteration   2: 25701.329 ns/op
Iteration   3: 25319.938 ns/op
Iteration   4: 25409.435 ns/op
Iteration   5: 25206.071 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  25442.576 ±(99.9%) 762.527 ns/op [Average]
  (min, avg, max) = (25206.071, 25442.576, 25701.329), stdev = 198.026
  CI (99.9%): [24680.049, 26205.104] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _2_K)

# Run progress: 27.65% complete, ETA 01:09:53
# Fork: 1 of 1
# Warmup Iteration   1: 90443.445 ns/op
# Warmup Iteration   2: 53320.758 ns/op
# Warmup Iteration   3: 51089.207 ns/op
# Warmup Iteration   4: 50772.950 ns/op
Iteration   1: 49927.166 ns/op
Iteration   2: 49503.964 ns/op
Iteration   3: 49411.287 ns/op
Iteration   4: 49336.227 ns/op
Iteration   5: 51862.778 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  50008.284 ±(99.9%) 4087.913 ns/op [Average]
  (min, avg, max) = (49336.227, 50008.284, 51862.778), stdev = 1061.618
  CI (99.9%): [45920.371, 54096.198] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _4_K)

# Run progress: 27.84% complete, ETA 01:09:44
# Fork: 1 of 1
# Warmup Iteration   1: 313235.710 ns/op
# Warmup Iteration   2: 127555.129 ns/op
# Warmup Iteration   3: 122785.440 ns/op
# Warmup Iteration   4: 119581.308 ns/op
Iteration   1: 120859.842 ns/op
Iteration   2: 116237.104 ns/op
Iteration   3: 117225.848 ns/op
Iteration   4: 116500.229 ns/op
Iteration   5: 115477.394 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  117260.083 ±(99.9%) 8114.104 ns/op [Average]
  (min, avg, max) = (115477.394, 117260.083, 120859.842), stdev = 2107.207
  CI (99.9%): [109145.980, 125374.187] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _8_K)

# Run progress: 28.04% complete, ETA 01:09:34
# Fork: 1 of 1
# Warmup Iteration   1: 627492.058 ns/op
# Warmup Iteration   2: 290631.798 ns/op
# Warmup Iteration   3: 282203.827 ns/op
# Warmup Iteration   4: 281371.754 ns/op
Iteration   1: 275483.862 ns/op
Iteration   2: 287018.266 ns/op
Iteration   3: 276161.243 ns/op
Iteration   4: 274690.678 ns/op
Iteration   5: 275145.681 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  277699.946 ±(99.9%) 20164.444 ns/op [Average]
  (min, avg, max) = (274690.678, 277699.946, 287018.266), stdev = 5236.642
  CI (99.9%): [257535.502, 297864.390] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _64_K)

# Run progress: 28.24% complete, ETA 01:09:24
# Fork: 1 of 1
# Warmup Iteration   1: 3913883.882 ns/op
# Warmup Iteration   2: 2721092.489 ns/op
# Warmup Iteration   3: 2661015.056 ns/op
# Warmup Iteration   4: 2603451.074 ns/op
Iteration   1: 2615385.589 ns/op
Iteration   2: 2583772.153 ns/op
Iteration   3: 2599361.614 ns/op
Iteration   4: 2564904.973 ns/op
Iteration   5: 2571729.143 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2587030.694 ±(99.9%) 79157.542 ns/op [Average]
  (min, avg, max) = (2564904.973, 2587030.694, 2615385.589), stdev = 20556.962
  CI (99.9%): [2507873.153, 2666188.236] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 28.43% complete, ETA 01:09:14
# Fork: 1 of 1
# Warmup Iteration   1: 30485.707 ns/op
# Warmup Iteration   2: 19233.782 ns/op
# Warmup Iteration   3: 16607.566 ns/op
# Warmup Iteration   4: 16573.283 ns/op
Iteration   1: 16481.183 ns/op
Iteration   2: 16290.006 ns/op
Iteration   3: 16390.825 ns/op
Iteration   4: 16240.780 ns/op
Iteration   5: 16298.324 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  16340.224 ±(99.9%) 368.317 ns/op [Average]
  (min, avg, max) = (16240.780, 16340.224, 16481.183), stdev = 95.651
  CI (99.9%): [15971.906, 16708.541] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 28.63% complete, ETA 01:09:05
# Fork: 1 of 1
# Warmup Iteration   1: 60024.903 ns/op
# Warmup Iteration   2: 33429.506 ns/op
# Warmup Iteration   3: 33837.873 ns/op
# Warmup Iteration   4: 33304.346 ns/op
Iteration   1: 32476.213 ns/op
Iteration   2: 32169.312 ns/op
Iteration   3: 32055.266 ns/op
Iteration   4: 32407.050 ns/op
Iteration   5: 32023.904 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  32226.349 ±(99.9%) 790.535 ns/op [Average]
  (min, avg, max) = (32023.904, 32226.349, 32476.213), stdev = 205.299
  CI (99.9%): [31435.814, 33016.884] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 28.82% complete, ETA 01:08:55
# Fork: 1 of 1
# Warmup Iteration   1: 146833.455 ns/op
# Warmup Iteration   2: 85125.478 ns/op
# Warmup Iteration   3: 83290.717 ns/op
# Warmup Iteration   4: 82443.924 ns/op
Iteration   1: 92795.139 ns/op
Iteration   2: 80736.999 ns/op
Iteration   3: 81555.975 ns/op
Iteration   4: 80706.803 ns/op
Iteration   5: 80562.210 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  83271.425 ±(99.9%) 20555.402 ns/op [Average]
  (min, avg, max) = (80562.210, 83271.425, 92795.139), stdev = 5338.173
  CI (99.9%): [62716.023, 103826.827] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 29.02% complete, ETA 01:08:45
# Fork: 1 of 1
# Warmup Iteration   1: 348874.571 ns/op
# Warmup Iteration   2: 220493.291 ns/op
# Warmup Iteration   3: 210420.226 ns/op
# Warmup Iteration   4: 208471.796 ns/op
Iteration   1: 206353.337 ns/op
Iteration   2: 209249.851 ns/op
Iteration   3: 205337.797 ns/op
Iteration   4: 206280.945 ns/op
Iteration   5: 207854.027 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  207015.191 ±(99.9%) 5930.546 ns/op [Average]
  (min, avg, max) = (205337.797, 207015.191, 209249.851), stdev = 1540.144
  CI (99.9%): [201084.646, 212945.737] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 29.22% complete, ETA 01:08:35
# Fork: 1 of 1
# Warmup Iteration   1: 3544726.133 ns/op
# Warmup Iteration   2: 2070936.270 ns/op
# Warmup Iteration   3: 1981096.671 ns/op
# Warmup Iteration   4: 1992142.930 ns/op
Iteration   1: 1982716.676 ns/op
Iteration   2: 2038416.620 ns/op
Iteration   3: 1967101.801 ns/op
Iteration   4: 1967592.016 ns/op
Iteration   5: 1961478.799 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1983461.182 ±(99.9%) 122122.786 ns/op [Average]
  (min, avg, max) = (1961478.799, 1983461.182, 2038416.620), stdev = 31714.900
  CI (99.9%): [1861338.396, 2105583.968] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _1_K)

# Run progress: 29.41% complete, ETA 01:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 59573.948 ns/op
# Warmup Iteration   2: 23400.808 ns/op
# Warmup Iteration   3: 23189.295 ns/op
# Warmup Iteration   4: 23200.277 ns/op
Iteration   1: 24316.847 ns/op
Iteration   2: 22882.748 ns/op
Iteration   3: 24577.608 ns/op
Iteration   4: 22812.342 ns/op
Iteration   5: 22736.483 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  23465.205 ±(99.9%) 3475.864 ns/op [Average]
  (min, avg, max) = (22736.483, 23465.205, 24577.608), stdev = 902.671
  CI (99.9%): [19989.342, 26941.069] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _2_K)

# Run progress: 29.61% complete, ETA 01:08:15
# Fork: 1 of 1
# Warmup Iteration   1: 105261.735 ns/op
# Warmup Iteration   2: 44022.981 ns/op
# Warmup Iteration   3: 45776.503 ns/op
# Warmup Iteration   4: 43952.543 ns/op
Iteration   1: 43600.800 ns/op
Iteration   2: 42931.378 ns/op
Iteration   3: 44750.224 ns/op
Iteration   4: 45870.640 ns/op
Iteration   5: 43662.688 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  44163.146 ±(99.9%) 4450.844 ns/op [Average]
  (min, avg, max) = (42931.378, 44163.146, 45870.640), stdev = 1155.870
  CI (99.9%): [39712.302, 48613.990] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _4_K)

# Run progress: 29.80% complete, ETA 01:08:05
# Fork: 1 of 1
# Warmup Iteration   1: 194752.835 ns/op
# Warmup Iteration   2: 90022.383 ns/op
# Warmup Iteration   3: 87065.260 ns/op
# Warmup Iteration   4: 87059.620 ns/op
Iteration   1: 87225.735 ns/op
Iteration   2: 87349.150 ns/op
Iteration   3: 86482.162 ns/op
Iteration   4: 86865.795 ns/op
Iteration   5: 86489.234 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  86882.415 ±(99.9%) 1553.175 ns/op [Average]
  (min, avg, max) = (86482.162, 86882.415, 87349.150), stdev = 403.355
  CI (99.9%): [85329.241, 88435.590] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _8_K)

# Run progress: 30.00% complete, ETA 01:07:55
# Fork: 1 of 1
# Warmup Iteration   1: 392112.072 ns/op
# Warmup Iteration   2: 202443.241 ns/op
# Warmup Iteration   3: 195388.420 ns/op
# Warmup Iteration   4: 205336.789 ns/op
Iteration   1: 210484.242 ns/op
Iteration   2: 195116.316 ns/op
Iteration   3: 197610.737 ns/op
Iteration   4: 198604.564 ns/op
Iteration   5: 192912.201 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  198945.612 ±(99.9%) 26265.212 ns/op [Average]
  (min, avg, max) = (192912.201, 198945.612, 210484.242), stdev = 6820.992
  CI (99.9%): [172680.400, 225210.824] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _64_K)

# Run progress: 30.20% complete, ETA 01:07:44
# Fork: 1 of 1
# Warmup Iteration   1: 4603669.844 ns/op
# Warmup Iteration   2: 2003095.518 ns/op
# Warmup Iteration   3: 1996567.903 ns/op
# Warmup Iteration   4: 2025667.343 ns/op
Iteration   1: 2056439.019 ns/op
Iteration   2: 2000948.648 ns/op
Iteration   3: 2097036.115 ns/op
Iteration   4: 1976969.629 ns/op
Iteration   5: 1980045.239 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2022287.730 ±(99.9%) 202361.747 ns/op [Average]
  (min, avg, max) = (1976969.629, 2022287.730, 2097036.115), stdev = 52552.703
  CI (99.9%): [1819925.983, 2224649.477] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _1_K)

# Run progress: 30.39% complete, ETA 01:07:35
# Fork: 1 of 1
# Warmup Iteration   1: 65327.905 ns/op
# Warmup Iteration   2: 23649.130 ns/op
# Warmup Iteration   3: 23850.018 ns/op
# Warmup Iteration   4: 23903.478 ns/op
Iteration   1: 22966.700 ns/op
Iteration   2: 22961.889 ns/op
Iteration   3: 22954.367 ns/op
Iteration   4: 22925.555 ns/op
Iteration   5: 22984.477 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  22958.598 ±(99.9%) 82.944 ns/op [Average]
  (min, avg, max) = (22925.555, 22958.598, 22984.477), stdev = 21.540
  CI (99.9%): [22875.654, 23041.542] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _2_K)

# Run progress: 30.59% complete, ETA 01:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 106727.684 ns/op
# Warmup Iteration   2: 43381.903 ns/op
# Warmup Iteration   3: 43436.012 ns/op
# Warmup Iteration   4: 42957.356 ns/op
Iteration   1: 43653.314 ns/op
Iteration   2: 42571.675 ns/op
Iteration   3: 42618.208 ns/op
Iteration   4: 42674.787 ns/op
Iteration   5: 42821.162 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  42867.829 ±(99.9%) 1728.986 ns/op [Average]
  (min, avg, max) = (42571.675, 42867.829, 43653.314), stdev = 449.012
  CI (99.9%): [41138.843, 44596.815] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _4_K)

# Run progress: 30.78% complete, ETA 01:07:14
# Fork: 1 of 1
# Warmup Iteration   1: 193421.064 ns/op
# Warmup Iteration   2: 85979.678 ns/op
# Warmup Iteration   3: 85759.397 ns/op
# Warmup Iteration   4: 90385.675 ns/op
Iteration   1: 85453.432 ns/op
Iteration   2: 85255.064 ns/op
Iteration   3: 85092.600 ns/op
Iteration   4: 88166.584 ns/op
Iteration   5: 85342.193 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  85861.975 ±(99.9%) 4986.764 ns/op [Average]
  (min, avg, max) = (85092.600, 85861.975, 88166.584), stdev = 1295.047
  CI (99.9%): [80875.210, 90848.739] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _8_K)

# Run progress: 30.98% complete, ETA 01:07:04
# Fork: 1 of 1
# Warmup Iteration   1: 465315.317 ns/op
# Warmup Iteration   2: 202930.161 ns/op
# Warmup Iteration   3: 193597.615 ns/op
# Warmup Iteration   4: 193019.768 ns/op
Iteration   1: 192714.799 ns/op
Iteration   2: 193576.724 ns/op
Iteration   3: 195140.220 ns/op
Iteration   4: 194377.074 ns/op
Iteration   5: 203291.918 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  195820.147 ±(99.9%) 16455.394 ns/op [Average]
  (min, avg, max) = (192714.799, 195820.147, 203291.918), stdev = 4273.414
  CI (99.9%): [179364.753, 212275.541] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _64_K)

# Run progress: 31.18% complete, ETA 01:06:53
# Fork: 1 of 1
# Warmup Iteration   1: 4388686.055 ns/op
# Warmup Iteration   2: 2036076.480 ns/op
# Warmup Iteration   3: 1983414.107 ns/op
# Warmup Iteration   4: 1987718.587 ns/op
Iteration   1: 1972766.858 ns/op
Iteration   2: 1991672.118 ns/op
Iteration   3: 1977226.699 ns/op
Iteration   4: 2094196.353 ns/op
Iteration   5: 1986062.760 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2004384.958 ±(99.9%) 195405.300 ns/op [Average]
  (min, avg, max) = (1972766.858, 2004384.958, 2094196.353), stdev = 50746.136
  CI (99.9%): [1808979.658, 2199790.258] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 31.37% complete, ETA 01:06:43
# Fork: 1 of 1
# Warmup Iteration   1: 20825.685 ns/op
# Warmup Iteration   2: 10603.539 ns/op
# Warmup Iteration   3: 10011.937 ns/op
# Warmup Iteration   4: 9995.132 ns/op
Iteration   1: 9815.502 ns/op
Iteration   2: 9848.829 ns/op
Iteration   3: 9801.075 ns/op
Iteration   4: 9776.138 ns/op
Iteration   5: 9832.640 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  9814.837 ±(99.9%) 108.227 ns/op [Average]
  (min, avg, max) = (9776.138, 9814.837, 9848.829), stdev = 28.106
  CI (99.9%): [9706.609, 9923.064] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 31.57% complete, ETA 01:06:33
# Fork: 1 of 1
# Warmup Iteration   1: 34730.975 ns/op
# Warmup Iteration   2: 20370.428 ns/op
# Warmup Iteration   3: 19667.550 ns/op
# Warmup Iteration   4: 19508.956 ns/op
Iteration   1: 19598.699 ns/op
Iteration   2: 19910.239 ns/op
Iteration   3: 19222.246 ns/op
Iteration   4: 19093.487 ns/op
Iteration   5: 19096.652 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  19384.265 ±(99.9%) 1383.225 ns/op [Average]
  (min, avg, max) = (19093.487, 19384.265, 19910.239), stdev = 359.219
  CI (99.9%): [18001.039, 20767.490] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 31.76% complete, ETA 01:06:23
# Fork: 1 of 1
# Warmup Iteration   1: 119497.580 ns/op
# Warmup Iteration   2: 42279.956 ns/op
# Warmup Iteration   3: 43193.445 ns/op
# Warmup Iteration   4: 39840.106 ns/op
Iteration   1: 40433.952 ns/op
Iteration   2: 39886.227 ns/op
Iteration   3: 39675.414 ns/op
Iteration   4: 39515.687 ns/op
Iteration   5: 39377.501 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  39777.756 ±(99.9%) 1589.665 ns/op [Average]
  (min, avg, max) = (39377.501, 39777.756, 40433.952), stdev = 412.831
  CI (99.9%): [38188.091, 41367.421] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 31.96% complete, ETA 01:06:13
# Fork: 1 of 1
# Warmup Iteration   1: 205768.264 ns/op
# Warmup Iteration   2: 101282.028 ns/op
# Warmup Iteration   3: 92860.071 ns/op
# Warmup Iteration   4: 87085.655 ns/op
Iteration   1: 88367.924 ns/op
Iteration   2: 88688.708 ns/op
Iteration   3: 87048.802 ns/op
Iteration   4: 86285.461 ns/op
Iteration   5: 86269.195 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  87332.018 ±(99.9%) 4398.337 ns/op [Average]
  (min, avg, max) = (86269.195, 87332.018, 88688.708), stdev = 1142.234
  CI (99.9%): [82933.681, 91730.355] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 32.16% complete, ETA 01:06:02
# Fork: 1 of 1
# Warmup Iteration   1: 1351728.255 ns/op
# Warmup Iteration   2: 765810.513 ns/op
# Warmup Iteration   3: 748205.977 ns/op
# Warmup Iteration   4: 734615.621 ns/op
Iteration   1: 728775.275 ns/op
Iteration   2: 725143.782 ns/op
Iteration   3: 720249.548 ns/op
Iteration   4: 727305.704 ns/op
Iteration   5: 717323.683 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  723759.598 ±(99.9%) 18605.954 ns/op [Average]
  (min, avg, max) = (717323.683, 723759.598, 728775.275), stdev = 4831.907
  CI (99.9%): [705153.645, 742365.552] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 32.35% complete, ETA 01:05:52
# Fork: 1 of 1
# Warmup Iteration   1: 17589.350 ns/op
# Warmup Iteration   2: 8290.563 ns/op
# Warmup Iteration   3: 7985.008 ns/op
# Warmup Iteration   4: 7653.432 ns/op
Iteration   1: 7736.795 ns/op
Iteration   2: 7597.412 ns/op
Iteration   3: 7518.953 ns/op
Iteration   4: 7497.367 ns/op
Iteration   5: 7495.700 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  7569.245 ±(99.9%) 394.438 ns/op [Average]
  (min, avg, max) = (7495.700, 7569.245, 7736.795), stdev = 102.434
  CI (99.9%): [7174.808, 7963.683] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 32.55% complete, ETA 01:05:42
# Fork: 1 of 1
# Warmup Iteration   1: 33995.089 ns/op
# Warmup Iteration   2: 16411.503 ns/op
# Warmup Iteration   3: 16641.736 ns/op
# Warmup Iteration   4: 16802.836 ns/op
Iteration   1: 16831.520 ns/op
Iteration   2: 16416.921 ns/op
Iteration   3: 16247.547 ns/op
Iteration   4: 16402.656 ns/op
Iteration   5: 16142.258 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  16408.181 ±(99.9%) 1011.190 ns/op [Average]
  (min, avg, max) = (16142.258, 16408.181, 16831.520), stdev = 262.603
  CI (99.9%): [15396.990, 17419.371] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 32.75% complete, ETA 01:05:31
# Fork: 1 of 1
# Warmup Iteration   1: 64123.731 ns/op
# Warmup Iteration   2: 36136.286 ns/op
# Warmup Iteration   3: 36842.112 ns/op
# Warmup Iteration   4: 35617.377 ns/op
Iteration   1: 34843.696 ns/op
Iteration   2: 35000.157 ns/op
Iteration   3: 34672.495 ns/op
Iteration   4: 34614.317 ns/op
Iteration   5: 34803.707 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  34786.874 ±(99.9%) 583.535 ns/op [Average]
  (min, avg, max) = (34614.317, 34786.874, 35000.157), stdev = 151.542
  CI (99.9%): [34203.339, 35370.410] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 32.94% complete, ETA 01:05:21
# Fork: 1 of 1
# Warmup Iteration   1: 145349.852 ns/op
# Warmup Iteration   2: 68662.515 ns/op
# Warmup Iteration   3: 66839.451 ns/op
# Warmup Iteration   4: 66224.716 ns/op
Iteration   1: 65365.259 ns/op
Iteration   2: 66946.966 ns/op
Iteration   3: 65444.012 ns/op
Iteration   4: 65169.088 ns/op
Iteration   5: 64481.508 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  65481.367 ±(99.9%) 3476.308 ns/op [Average]
  (min, avg, max) = (64481.508, 65481.367, 66946.966), stdev = 902.786
  CI (99.9%): [62005.058, 68957.675] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 33.14% complete, ETA 01:05:10
# Fork: 1 of 1
# Warmup Iteration   1: 1127870.537 ns/op
# Warmup Iteration   2: 629428.703 ns/op
# Warmup Iteration   3: 621199.100 ns/op
# Warmup Iteration   4: 612608.797 ns/op
Iteration   1: 606797.169 ns/op
Iteration   2: 601250.845 ns/op
Iteration   3: 599284.314 ns/op
Iteration   4: 593407.493 ns/op
Iteration   5: 592891.809 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  598726.326 ±(99.9%) 22300.068 ns/op [Average]
  (min, avg, max) = (592891.809, 598726.326, 606797.169), stdev = 5791.257
  CI (99.9%): [576426.258, 621026.394] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 33.33% complete, ETA 01:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 18968.224 ns/op
# Warmup Iteration   2: 9622.713 ns/op
# Warmup Iteration   3: 10076.798 ns/op
# Warmup Iteration   4: 10539.125 ns/op
Iteration   1: 10275.458 ns/op
Iteration   2: 10593.991 ns/op
Iteration   3: 10462.693 ns/op
Iteration   4: 10465.181 ns/op
Iteration   5: 10453.914 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  10450.248 ±(99.9%) 437.370 ns/op [Average]
  (min, avg, max) = (10275.458, 10450.248, 10593.991), stdev = 113.584
  CI (99.9%): [10012.877, 10887.618] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 33.53% complete, ETA 01:04:50
# Fork: 1 of 1
# Warmup Iteration   1: 42650.224 ns/op
# Warmup Iteration   2: 19748.914 ns/op
# Warmup Iteration   3: 18225.020 ns/op
# Warmup Iteration   4: 17486.810 ns/op
Iteration   1: 18310.476 ns/op
Iteration   2: 17528.034 ns/op
Iteration   3: 17459.308 ns/op
Iteration   4: 17126.272 ns/op
Iteration   5: 17380.366 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  17560.891 ±(99.9%) 1716.411 ns/op [Average]
  (min, avg, max) = (17126.272, 17560.891, 18310.476), stdev = 445.746
  CI (99.9%): [15844.480, 19277.302] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 33.73% complete, ETA 01:04:39
# Fork: 1 of 1
# Warmup Iteration   1: 71959.468 ns/op
# Warmup Iteration   2: 36877.703 ns/op
# Warmup Iteration   3: 37481.993 ns/op
# Warmup Iteration   4: 35400.104 ns/op
Iteration   1: 35016.017 ns/op
Iteration   2: 34762.143 ns/op
Iteration   3: 34909.238 ns/op
Iteration   4: 34662.462 ns/op
Iteration   5: 35694.920 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  35008.956 ±(99.9%) 1565.934 ns/op [Average]
  (min, avg, max) = (34662.462, 35008.956, 35694.920), stdev = 406.668
  CI (99.9%): [33443.022, 36574.889] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 33.92% complete, ETA 01:04:29
# Fork: 1 of 1
# Warmup Iteration   1: 198794.871 ns/op
# Warmup Iteration   2: 79845.400 ns/op
# Warmup Iteration   3: 77787.982 ns/op
# Warmup Iteration   4: 76214.221 ns/op
Iteration   1: 76465.588 ns/op
Iteration   2: 75443.144 ns/op
Iteration   3: 76147.897 ns/op
Iteration   4: 77862.773 ns/op
Iteration   5: 74353.174 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  76054.515 ±(99.9%) 4989.458 ns/op [Average]
  (min, avg, max) = (74353.174, 76054.515, 77862.773), stdev = 1295.746
  CI (99.9%): [71065.057, 81043.973] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 34.12% complete, ETA 01:04:18
# Fork: 1 of 1
# Warmup Iteration   1: 1034532.896 ns/op
# Warmup Iteration   2: 717126.419 ns/op
# Warmup Iteration   3: 687162.947 ns/op
# Warmup Iteration   4: 670893.713 ns/op
Iteration   1: 723258.721 ns/op
Iteration   2: 669944.686 ns/op
Iteration   3: 662229.442 ns/op
Iteration   4: 661528.290 ns/op
Iteration   5: 662225.906 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  675837.409 ±(99.9%) 102940.930 ns/op [Average]
  (min, avg, max) = (661528.290, 675837.409, 723258.721), stdev = 26733.433
  CI (99.9%): [572896.479, 778778.339] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 34.31% complete, ETA 01:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 5367.934 ns/op
# Warmup Iteration   2: 3242.570 ns/op
# Warmup Iteration   3: 3173.117 ns/op
# Warmup Iteration   4: 3122.429 ns/op
Iteration   1: 3146.895 ns/op
Iteration   2: 3114.276 ns/op
Iteration   3: 3101.074 ns/op
Iteration   4: 3128.830 ns/op
Iteration   5: 3094.929 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  3117.201 ±(99.9%) 81.268 ns/op [Average]
  (min, avg, max) = (3094.929, 3117.201, 3146.895), stdev = 21.105
  CI (99.9%): [3035.933, 3198.469] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 34.51% complete, ETA 01:03:57
# Fork: 1 of 1
# Warmup Iteration   1: 11586.443 ns/op
# Warmup Iteration   2: 6682.491 ns/op
# Warmup Iteration   3: 6578.028 ns/op
# Warmup Iteration   4: 6787.026 ns/op
Iteration   1: 6778.894 ns/op
Iteration   2: 6481.076 ns/op
Iteration   3: 6417.378 ns/op
Iteration   4: 6435.418 ns/op
Iteration   5: 6662.696 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  6555.092 ±(99.9%) 610.152 ns/op [Average]
  (min, avg, max) = (6417.378, 6555.092, 6778.894), stdev = 158.454
  CI (99.9%): [5944.940, 7165.244] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 34.71% complete, ETA 01:03:47
# Fork: 1 of 1
# Warmup Iteration   1: 24600.806 ns/op
# Warmup Iteration   2: 13100.232 ns/op
# Warmup Iteration   3: 12947.082 ns/op
# Warmup Iteration   4: 12747.363 ns/op
Iteration   1: 12658.422 ns/op
Iteration   2: 12599.082 ns/op
Iteration   3: 13059.749 ns/op
Iteration   4: 12504.565 ns/op
Iteration   5: 12540.474 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  12672.458 ±(99.9%) 863.574 ns/op [Average]
  (min, avg, max) = (12504.565, 12672.458, 13059.749), stdev = 224.267
  CI (99.9%): [11808.884, 13536.033] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 34.90% complete, ETA 01:03:36
# Fork: 1 of 1
# Warmup Iteration   1: 38722.014 ns/op
# Warmup Iteration   2: 25071.899 ns/op
# Warmup Iteration   3: 24449.002 ns/op
# Warmup Iteration   4: 23808.392 ns/op
Iteration   1: 23947.954 ns/op
Iteration   2: 23634.415 ns/op
Iteration   3: 24281.100 ns/op
Iteration   4: 23610.090 ns/op
Iteration   5: 23604.754 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  23815.662 ±(99.9%) 1145.083 ns/op [Average]
  (min, avg, max) = (23604.754, 23815.662, 24281.100), stdev = 297.374
  CI (99.9%): [22670.580, 24960.745] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 35.10% complete, ETA 01:03:25
# Fork: 1 of 1
# Warmup Iteration   1: 451216.499 ns/op
# Warmup Iteration   2: 269616.270 ns/op
# Warmup Iteration   3: 254227.090 ns/op
# Warmup Iteration   4: 270066.822 ns/op
Iteration   1: 249078.402 ns/op
Iteration   2: 248837.451 ns/op
Iteration   3: 249763.988 ns/op
Iteration   4: 247612.550 ns/op
Iteration   5: 247452.726 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  248549.023 ±(99.9%) 3811.176 ns/op [Average]
  (min, avg, max) = (247452.726, 248549.023, 249763.988), stdev = 989.750
  CI (99.9%): [244737.847, 252360.199] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 35.29% complete, ETA 01:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 9279.518 ns/op
# Warmup Iteration   2: 5185.846 ns/op
# Warmup Iteration   3: 4724.554 ns/op
# Warmup Iteration   4: 4687.527 ns/op
Iteration   1: 4639.680 ns/op
Iteration   2: 4551.812 ns/op
Iteration   3: 4559.628 ns/op
Iteration   4: 4547.776 ns/op
Iteration   5: 4553.372 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  4570.454 ±(99.9%) 149.916 ns/op [Average]
  (min, avg, max) = (4547.776, 4570.454, 4639.680), stdev = 38.933
  CI (99.9%): [4420.538, 4720.370] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 35.49% complete, ETA 01:03:04
# Fork: 1 of 1
# Warmup Iteration   1: 26652.529 ns/op
# Warmup Iteration   2: 11029.891 ns/op
# Warmup Iteration   3: 10318.854 ns/op
# Warmup Iteration   4: 10296.606 ns/op
Iteration   1: 10284.382 ns/op
Iteration   2: 10340.314 ns/op
Iteration   3: 10053.553 ns/op
Iteration   4: 10211.338 ns/op
Iteration   5: 10007.841 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  10179.486 ±(99.9%) 555.362 ns/op [Average]
  (min, avg, max) = (10007.841, 10179.486, 10340.314), stdev = 144.226
  CI (99.9%): [9624.123, 10734.848] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 35.69% complete, ETA 01:02:54
# Fork: 1 of 1
# Warmup Iteration   1: 56739.995 ns/op
# Warmup Iteration   2: 20756.035 ns/op
# Warmup Iteration   3: 19673.328 ns/op
# Warmup Iteration   4: 19403.166 ns/op
Iteration   1: 19922.300 ns/op
Iteration   2: 18783.344 ns/op
Iteration   3: 19774.953 ns/op
Iteration   4: 18747.292 ns/op
Iteration   5: 18749.162 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  19195.410 ±(99.9%) 2305.556 ns/op [Average]
  (min, avg, max) = (18747.292, 19195.410, 19922.300), stdev = 598.745
  CI (99.9%): [16889.855, 21500.966] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 35.88% complete, ETA 01:02:43
# Fork: 1 of 1
# Warmup Iteration   1: 60971.782 ns/op
# Warmup Iteration   2: 39452.569 ns/op
# Warmup Iteration   3: 40075.449 ns/op
# Warmup Iteration   4: 38051.698 ns/op
Iteration   1: 37440.217 ns/op
Iteration   2: 37207.168 ns/op
Iteration   3: 37750.904 ns/op
Iteration   4: 37079.813 ns/op
Iteration   5: 37191.215 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  37333.863 ±(99.9%) 1029.958 ns/op [Average]
  (min, avg, max) = (37079.813, 37333.863, 37750.904), stdev = 267.477
  CI (99.9%): [36303.905, 38363.821] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 36.08% complete, ETA 01:02:32
# Fork: 1 of 1
# Warmup Iteration   1: 736641.817 ns/op
# Warmup Iteration   2: 475788.843 ns/op
# Warmup Iteration   3: 433979.669 ns/op
# Warmup Iteration   4: 418453.437 ns/op
Iteration   1: 415878.151 ns/op
Iteration   2: 418423.885 ns/op
Iteration   3: 416890.385 ns/op
Iteration   4: 416339.845 ns/op
Iteration   5: 416124.747 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  416731.403 ±(99.9%) 3917.052 ns/op [Average]
  (min, avg, max) = (415878.151, 416731.403, 418423.885), stdev = 1017.246
  CI (99.9%): [412814.351, 420648.455] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 36.27% complete, ETA 01:02:22
# Fork: 1 of 1
# Warmup Iteration   1: 12815.989 ns/op
# Warmup Iteration   2: 7071.706 ns/op
# Warmup Iteration   3: 6061.044 ns/op
# Warmup Iteration   4: 6095.018 ns/op
Iteration   1: 6085.323 ns/op
Iteration   2: 6092.476 ns/op
Iteration   3: 6078.750 ns/op
Iteration   4: 6040.419 ns/op
Iteration   5: 6080.204 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  6075.434 ±(99.9%) 78.160 ns/op [Average]
  (min, avg, max) = (6040.419, 6075.434, 6092.476), stdev = 20.298
  CI (99.9%): [5997.275, 6153.594] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 36.47% complete, ETA 01:02:11
# Fork: 1 of 1
# Warmup Iteration   1: 31688.059 ns/op
# Warmup Iteration   2: 14966.148 ns/op
# Warmup Iteration   3: 12711.755 ns/op
# Warmup Iteration   4: 12488.587 ns/op
Iteration   1: 12451.594 ns/op
Iteration   2: 12458.774 ns/op
Iteration   3: 12438.530 ns/op
Iteration   4: 12425.398 ns/op
Iteration   5: 13822.509 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  12719.361 ±(99.9%) 2375.117 ns/op [Average]
  (min, avg, max) = (12425.398, 12719.361, 13822.509), stdev = 616.810
  CI (99.9%): [10344.244, 15094.478] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 36.67% complete, ETA 01:02:00
# Fork: 1 of 1
# Warmup Iteration   1: 57925.021 ns/op
# Warmup Iteration   2: 28142.125 ns/op
# Warmup Iteration   3: 26595.243 ns/op
# Warmup Iteration   4: 24584.764 ns/op
Iteration   1: 24529.603 ns/op
Iteration   2: 24577.073 ns/op
Iteration   3: 24409.203 ns/op
Iteration   4: 24566.955 ns/op
Iteration   5: 25593.531 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  24735.273 ±(99.9%) 1865.265 ns/op [Average]
  (min, avg, max) = (24409.203, 24735.273, 25593.531), stdev = 484.403
  CI (99.9%): [22870.009, 26600.538] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 36.86% complete, ETA 01:01:49
# Fork: 1 of 1
# Warmup Iteration   1: 162085.956 ns/op
# Warmup Iteration   2: 68654.051 ns/op
# Warmup Iteration   3: 63021.427 ns/op
# Warmup Iteration   4: 58083.449 ns/op
Iteration   1: 57452.107 ns/op
Iteration   2: 58842.784 ns/op
Iteration   3: 57172.203 ns/op
Iteration   4: 57233.322 ns/op
Iteration   5: 57170.952 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  57574.274 ±(99.9%) 2766.453 ns/op [Average]
  (min, avg, max) = (57170.952, 57574.274, 58842.784), stdev = 718.439
  CI (99.9%): [54807.820, 60340.727] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 37.06% complete, ETA 01:01:38
# Fork: 1 of 1
# Warmup Iteration   1: 1618441.426 ns/op
# Warmup Iteration   2: 703776.431 ns/op
# Warmup Iteration   3: 631384.062 ns/op
# Warmup Iteration   4: 607848.279 ns/op
Iteration   1: 598376.434 ns/op
Iteration   2: 604512.497 ns/op
Iteration   3: 599379.617 ns/op
Iteration   4: 597270.834 ns/op
Iteration   5: 599093.743 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  599726.625 ±(99.9%) 10767.947 ns/op [Average]
  (min, avg, max) = (597270.834, 599726.625, 604512.497), stdev = 2796.402
  CI (99.9%): [588958.678, 610494.572] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 37.25% complete, ETA 01:01:28
# Fork: 1 of 1
# Warmup Iteration   1: 92997.756 ns/op
# Warmup Iteration   2: 34736.601 ns/op
# Warmup Iteration   3: 30305.768 ns/op
# Warmup Iteration   4: 29032.472 ns/op
Iteration   1: 29347.476 ns/op
Iteration   2: 28347.649 ns/op
Iteration   3: 28335.814 ns/op
Iteration   4: 28420.488 ns/op
Iteration   5: 28382.051 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  28566.696 ±(99.9%) 1685.484 ns/op [Average]
  (min, avg, max) = (28335.814, 28566.696, 29347.476), stdev = 437.715
  CI (99.9%): [26881.212, 30252.179] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 37.45% complete, ETA 01:01:17
# Fork: 1 of 1
# Warmup Iteration   1: 119667.220 ns/op
# Warmup Iteration   2: 57300.515 ns/op
# Warmup Iteration   3: 52725.065 ns/op
# Warmup Iteration   4: 49994.749 ns/op
Iteration   1: 49709.869 ns/op
Iteration   2: 48624.633 ns/op
Iteration   3: 48669.452 ns/op
Iteration   4: 48509.147 ns/op
Iteration   5: 48495.774 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  48801.775 ±(99.9%) 1975.488 ns/op [Average]
  (min, avg, max) = (48495.774, 48801.775, 49709.869), stdev = 513.028
  CI (99.9%): [46826.287, 50777.263] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 37.65% complete, ETA 01:01:06
# Fork: 1 of 1
# Warmup Iteration   1: 278128.543 ns/op
# Warmup Iteration   2: 146160.623 ns/op
# Warmup Iteration   3: 118428.969 ns/op
# Warmup Iteration   4: 111810.950 ns/op
Iteration   1: 112087.441 ns/op
Iteration   2: 111972.332 ns/op
Iteration   3: 112254.852 ns/op
Iteration   4: 111726.361 ns/op
Iteration   5: 111611.181 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  111930.433 ±(99.9%) 1010.054 ns/op [Average]
  (min, avg, max) = (111611.181, 111930.433, 112254.852), stdev = 262.308
  CI (99.9%): [110920.379, 112940.488] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 37.84% complete, ETA 01:00:55
# Fork: 1 of 1
# Warmup Iteration   1: 660013.226 ns/op
# Warmup Iteration   2: 291256.141 ns/op
# Warmup Iteration   3: 262301.046 ns/op
# Warmup Iteration   4: 257320.567 ns/op
Iteration   1: 265289.538 ns/op
Iteration   2: 250889.809 ns/op
Iteration   3: 255090.537 ns/op
Iteration   4: 250249.300 ns/op
Iteration   5: 251473.310 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  254598.499 ±(99.9%) 24122.458 ns/op [Average]
  (min, avg, max) = (250249.300, 254598.499, 265289.538), stdev = 6264.526
  CI (99.9%): [230476.041, 278720.957] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 38.04% complete, ETA 01:00:44
# Fork: 1 of 1
# Warmup Iteration   1: 4669527.203 ns/op
# Warmup Iteration   2: 2569654.344 ns/op
# Warmup Iteration   3: 2379972.222 ns/op
# Warmup Iteration   4: 2415329.649 ns/op
Iteration   1: 2293872.141 ns/op
Iteration   2: 2300160.255 ns/op
Iteration   3: 2287039.867 ns/op
Iteration   4: 2277408.114 ns/op
Iteration   5: 2289876.588 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  2289671.393 ±(99.9%) 32504.177 ns/op [Average]
  (min, avg, max) = (2277408.114, 2289671.393, 2300160.255), stdev = 8441.232
  CI (99.9%): [2257167.216, 2322175.570] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 38.24% complete, ETA 01:00:34
# Fork: 1 of 1
# Warmup Iteration   1: 7723.815 ns/op
# Warmup Iteration   2: 4751.176 ns/op
# Warmup Iteration   3: 4190.808 ns/op
# Warmup Iteration   4: 4230.238 ns/op
Iteration   1: 4480.301 ns/op
Iteration   2: 4168.884 ns/op
Iteration   3: 4484.339 ns/op
Iteration   4: 4175.781 ns/op
Iteration   5: 4190.349 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  4299.931 ±(99.9%) 641.842 ns/op [Average]
  (min, avg, max) = (4168.884, 4299.931, 4484.339), stdev = 166.684
  CI (99.9%): [3658.089, 4941.773] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 38.43% complete, ETA 01:00:23
# Fork: 1 of 1
# Warmup Iteration   1: 16194.275 ns/op
# Warmup Iteration   2: 9022.825 ns/op
# Warmup Iteration   3: 7849.725 ns/op
# Warmup Iteration   4: 7789.801 ns/op
Iteration   1: 8406.506 ns/op
Iteration   2: 7789.772 ns/op
Iteration   3: 8090.913 ns/op
Iteration   4: 7749.016 ns/op
Iteration   5: 7770.123 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  7961.266 ±(99.9%) 1099.363 ns/op [Average]
  (min, avg, max) = (7749.016, 7961.266, 8406.506), stdev = 285.501
  CI (99.9%): [6861.903, 9060.629] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 38.63% complete, ETA 01:00:12
# Fork: 1 of 1
# Warmup Iteration   1: 30900.114 ns/op
# Warmup Iteration   2: 15312.551 ns/op
# Warmup Iteration   3: 14159.557 ns/op
# Warmup Iteration   4: 14585.998 ns/op
Iteration   1: 14788.421 ns/op
Iteration   2: 14046.146 ns/op
Iteration   3: 14565.223 ns/op
Iteration   4: 14118.525 ns/op
Iteration   5: 14119.882 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  14327.639 ±(99.9%) 1269.685 ns/op [Average]
  (min, avg, max) = (14046.146, 14327.639, 14788.421), stdev = 329.733
  CI (99.9%): [13057.954, 15597.325] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 38.82% complete, ETA 01:00:01
# Fork: 1 of 1
# Warmup Iteration   1: 54592.528 ns/op
# Warmup Iteration   2: 27896.660 ns/op
# Warmup Iteration   3: 26150.153 ns/op
# Warmup Iteration   4: 25981.092 ns/op
Iteration   1: 25884.153 ns/op
Iteration   2: 25895.248 ns/op
Iteration   3: 26714.645 ns/op
Iteration   4: 25781.844 ns/op
Iteration   5: 26590.963 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  26173.371 ±(99.9%) 1702.198 ns/op [Average]
  (min, avg, max) = (25781.844, 26173.371, 26714.645), stdev = 442.056
  CI (99.9%): [24471.172, 27875.569] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 39.02% complete, ETA 00:59:50
# Fork: 1 of 1
# Warmup Iteration   1: 537248.245 ns/op
# Warmup Iteration   2: 273174.951 ns/op
# Warmup Iteration   3: 250164.626 ns/op
# Warmup Iteration   4: 254760.645 ns/op
Iteration   1: 248804.749 ns/op
Iteration   2: 249263.945 ns/op
Iteration   3: 259281.525 ns/op
Iteration   4: 249251.503 ns/op
Iteration   5: 248755.385 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  251071.422 ±(99.9%) 17696.914 ns/op [Average]
  (min, avg, max) = (248755.385, 251071.422, 259281.525), stdev = 4595.832
  CI (99.9%): [233374.508, 268768.336] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 39.22% complete, ETA 00:59:39
# Fork: 1 of 1
# Warmup Iteration   1: 34759.700 ns/op
# Warmup Iteration   2: 35707.998 ns/op
# Warmup Iteration   3: 36026.434 ns/op
# Warmup Iteration   4: 30413.581 ns/op
Iteration   1: 34199.380 ns/op
Iteration   2: 34089.971 ns/op
Iteration   3: 34375.052 ns/op
Iteration   4: 36669.805 ns/op
Iteration   5: 37141.585 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  35295.159 ±(99.9%) 5711.022 ns/op [Average]
  (min, avg, max) = (34089.971, 35295.159, 37141.585), stdev = 1483.134
  CI (99.9%): [29584.137, 41006.180] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 39.41% complete, ETA 00:59:29
# Fork: 1 of 1
# Warmup Iteration   1: 66087.570 ns/op
# Warmup Iteration   2: 63050.513 ns/op
# Warmup Iteration   3: 60434.999 ns/op
# Warmup Iteration   4: 60309.696 ns/op
Iteration   1: 64645.971 ns/op
Iteration   2: 62318.704 ns/op
Iteration   3: 63958.266 ns/op
Iteration   4: 63992.497 ns/op
Iteration   5: 64390.326 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  63861.153 ±(99.9%) 3498.471 ns/op [Average]
  (min, avg, max) = (62318.704, 63861.153, 64645.971), stdev = 908.542
  CI (99.9%): [60362.682, 67359.624] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 39.61% complete, ETA 00:59:18
# Fork: 1 of 1
# Warmup Iteration   1: 109470.902 ns/op
# Warmup Iteration   2: 129196.152 ns/op
# Warmup Iteration   3: 123516.899 ns/op
# Warmup Iteration   4: 116285.125 ns/op
Iteration   1: 112786.355 ns/op
Iteration   2: 125971.537 ns/op
Iteration   3: 125391.054 ns/op
Iteration   4: 119569.094 ns/op
Iteration   5: 123024.969 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  121348.602 ±(99.9%) 20825.708 ns/op [Average]
  (min, avg, max) = (112786.355, 121348.602, 125971.537), stdev = 5408.370
  CI (99.9%): [100522.894, 142174.310] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 39.80% complete, ETA 00:59:07
# Fork: 1 of 1
# Warmup Iteration   1: 256850.292 ns/op
# Warmup Iteration   2: 264302.135 ns/op
# Warmup Iteration   3: 276913.649 ns/op
# Warmup Iteration   4: 257743.219 ns/op
Iteration   1: 255223.997 ns/op
Iteration   2: 260912.373 ns/op
Iteration   3: 262081.252 ns/op
Iteration   4: 271635.700 ns/op
Iteration   5: 249786.408 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  259927.946 ±(99.9%) 31498.600 ns/op [Average]
  (min, avg, max) = (249786.408, 259927.946, 271635.700), stdev = 8180.086
  CI (99.9%): [228429.346, 291426.546] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 40.00% complete, ETA 00:58:56
# Fork: 1 of 1
# Warmup Iteration   1: 2675173.342 ns/op
# Warmup Iteration   2: 2716329.450 ns/op
# Warmup Iteration   3: 2930998.057 ns/op
# Warmup Iteration   4: 2928079.759 ns/op
Iteration   1: 2994916.954 ns/op
Iteration   2: 2743481.879 ns/op
Iteration   3: 2410223.284 ns/op
Iteration   4: 2200969.726 ns/op
Iteration   5: 2791578.756 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  2628234.120 ±(99.9%) 1224515.975 ns/op [Average]
  (min, avg, max) = (2200969.726, 2628234.120, 2994916.954), stdev = 318002.910
  CI (99.9%): [1403718.145, 3852750.095] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 40.20% complete, ETA 00:58:45
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 40.39% complete, ETA 00:58:21
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 40.59% complete, ETA 00:57:57
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 40.78% complete, ETA 00:57:33
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 40.98% complete, ETA 00:57:09
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e25(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.e0(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$3.encodeValue(JsoniterScalaConverter.scala:21)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:27)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 41.18% complete, ETA 00:56:46
# Fork: 1 of 1
# Warmup Iteration   1: 70063.184 ns/op
# Warmup Iteration   2: 42978.770 ns/op
# Warmup Iteration   3: 40811.479 ns/op
# Warmup Iteration   4: 40759.524 ns/op
Iteration   1: 39672.344 ns/op
Iteration   2: 40348.095 ns/op
Iteration   3: 40166.347 ns/op
Iteration   4: 39685.068 ns/op
Iteration   5: 39611.858 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  39896.743 ±(99.9%) 1295.450 ns/op [Average]
  (min, avg, max) = (39611.858, 39896.743, 40348.095), stdev = 336.424
  CI (99.9%): [38601.293, 41192.192] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 41.37% complete, ETA 00:56:36
# Fork: 1 of 1
# Warmup Iteration   1: 145487.715 ns/op
# Warmup Iteration   2: 76380.469 ns/op
# Warmup Iteration   3: 73971.319 ns/op
# Warmup Iteration   4: 72625.933 ns/op
Iteration   1: 73364.583 ns/op
Iteration   2: 71798.109 ns/op
Iteration   3: 71174.267 ns/op
Iteration   4: 71865.173 ns/op
Iteration   5: 71564.528 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  71953.332 ±(99.9%) 3211.080 ns/op [Average]
  (min, avg, max) = (71174.267, 71953.332, 73364.583), stdev = 833.907
  CI (99.9%): [68742.252, 75164.412] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 41.57% complete, ETA 00:56:26
# Fork: 1 of 1
# Warmup Iteration   1: 296062.999 ns/op
# Warmup Iteration   2: 170691.736 ns/op
# Warmup Iteration   3: 161463.144 ns/op
# Warmup Iteration   4: 157427.028 ns/op
Iteration   1: 158352.266 ns/op
Iteration   2: 154583.084 ns/op
Iteration   3: 154093.326 ns/op
Iteration   4: 153734.233 ns/op
Iteration   5: 154800.218 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  155112.625 ±(99.9%) 7155.420 ns/op [Average]
  (min, avg, max) = (153734.233, 155112.625, 158352.266), stdev = 1858.240
  CI (99.9%): [147957.205, 162268.046] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 41.76% complete, ETA 00:56:16
# Fork: 1 of 1
# Warmup Iteration   1: 646753.456 ns/op
# Warmup Iteration   2: 396236.462 ns/op
# Warmup Iteration   3: 367786.266 ns/op
# Warmup Iteration   4: 365976.298 ns/op
Iteration   1: 365444.178 ns/op
Iteration   2: 360505.032 ns/op
Iteration   3: 358500.641 ns/op
Iteration   4: 357264.839 ns/op
Iteration   5: 356537.070 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  359650.352 ±(99.9%) 13750.079 ns/op [Average]
  (min, avg, max) = (356537.070, 359650.352, 365444.178), stdev = 3570.852
  CI (99.9%): [345900.273, 373400.431] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 41.96% complete, ETA 00:56:06
# Fork: 1 of 1
# Warmup Iteration   1: 5101339.638 ns/op
# Warmup Iteration   2: 3426176.572 ns/op
# Warmup Iteration   3: 3347519.374 ns/op
# Warmup Iteration   4: 3312351.730 ns/op
Iteration   1: 3251902.231 ns/op
Iteration   2: 3280311.118 ns/op
Iteration   3: 3287586.723 ns/op
Iteration   4: 3252547.205 ns/op
Iteration   5: 3240696.326 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  3262608.721 ±(99.9%) 77809.965 ns/op [Average]
  (min, avg, max) = (3240696.326, 3262608.721, 3287586.723), stdev = 20207.001
  CI (99.9%): [3184798.755, 3340418.686] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 42.16% complete, ETA 00:55:56
# Fork: 1 of 1
# Warmup Iteration   1: 38152.157 ns/op
# Warmup Iteration   2: 24329.442 ns/op
# Warmup Iteration   3: 23725.695 ns/op
# Warmup Iteration   4: 22985.519 ns/op
Iteration   1: 22731.887 ns/op
Iteration   2: 22964.569 ns/op
Iteration   3: 22930.822 ns/op
Iteration   4: 22868.568 ns/op
Iteration   5: 22653.058 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  22829.781 ±(99.9%) 511.917 ns/op [Average]
  (min, avg, max) = (22653.058, 22829.781, 22964.569), stdev = 132.943
  CI (99.9%): [22317.864, 23341.698] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 42.35% complete, ETA 00:55:46
# Fork: 1 of 1
# Warmup Iteration   1: 72714.426 ns/op
# Warmup Iteration   2: 40493.037 ns/op
# Warmup Iteration   3: 39889.571 ns/op
# Warmup Iteration   4: 38660.124 ns/op
Iteration   1: 39303.245 ns/op
Iteration   2: 38378.880 ns/op
Iteration   3: 38363.988 ns/op
Iteration   4: 37801.745 ns/op
Iteration   5: 37745.266 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  38318.625 ±(99.9%) 2413.244 ns/op [Average]
  (min, avg, max) = (37745.266, 38318.625, 39303.245), stdev = 626.712
  CI (99.9%): [35905.381, 40731.868] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 42.55% complete, ETA 00:55:35
# Fork: 1 of 1
# Warmup Iteration   1: 189223.255 ns/op
# Warmup Iteration   2: 112674.723 ns/op
# Warmup Iteration   3: 106605.448 ns/op
# Warmup Iteration   4: 107007.367 ns/op
Iteration   1: 105841.208 ns/op
Iteration   2: 106620.599 ns/op
Iteration   3: 105965.950 ns/op
Iteration   4: 105786.531 ns/op
Iteration   5: 105542.374 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  105951.333 ±(99.9%) 1557.805 ns/op [Average]
  (min, avg, max) = (105542.374, 105951.333, 106620.599), stdev = 404.557
  CI (99.9%): [104393.528, 107509.138] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 42.75% complete, ETA 00:55:25
# Fork: 1 of 1
# Warmup Iteration   1: 380820.110 ns/op
# Warmup Iteration   2: 257696.103 ns/op
# Warmup Iteration   3: 251871.058 ns/op
# Warmup Iteration   4: 249720.544 ns/op
Iteration   1: 248221.019 ns/op
Iteration   2: 246665.748 ns/op
Iteration   3: 253651.222 ns/op
Iteration   4: 248039.549 ns/op
Iteration   5: 245028.967 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  248321.301 ±(99.9%) 12489.066 ns/op [Average]
  (min, avg, max) = (245028.967, 248321.301, 253651.222), stdev = 3243.371
  CI (99.9%): [235832.235, 260810.368] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 42.94% complete, ETA 00:55:14
# Fork: 1 of 1
# Warmup Iteration   1: 3140628.725 ns/op
# Warmup Iteration   2: 1900422.213 ns/op
# Warmup Iteration   3: 1882741.161 ns/op
# Warmup Iteration   4: 1861183.557 ns/op
Iteration   1: 1831765.917 ns/op
Iteration   2: 1832209.664 ns/op
Iteration   3: 1798547.869 ns/op
Iteration   4: 1792302.000 ns/op
Iteration   5: 1793379.757 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  1809641.041 ±(99.9%) 79078.554 ns/op [Average]
  (min, avg, max) = (1792302.000, 1809641.041, 1832209.664), stdev = 20536.449
  CI (99.9%): [1730562.487, 1888719.596] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _1_K)

# Run progress: 43.14% complete, ETA 00:55:04
# Fork: 1 of 1
# Warmup Iteration   1: 27571.812 ns/op
# Warmup Iteration   2: 17967.903 ns/op
# Warmup Iteration   3: 18414.427 ns/op
# Warmup Iteration   4: 17438.569 ns/op
Iteration   1: 17375.497 ns/op
Iteration   2: 17084.972 ns/op
Iteration   3: 18316.121 ns/op
Iteration   4: 17079.277 ns/op
Iteration   5: 17150.368 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  17401.247 ±(99.9%) 2023.231 ns/op [Average]
  (min, avg, max) = (17079.277, 17401.247, 18316.121), stdev = 525.427
  CI (99.9%): [15378.016, 19424.478] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _2_K)

# Run progress: 43.33% complete, ETA 00:54:53
# Fork: 1 of 1
# Warmup Iteration   1: 53667.945 ns/op
# Warmup Iteration   2: 36716.340 ns/op
# Warmup Iteration   3: 33112.421 ns/op
# Warmup Iteration   4: 33969.650 ns/op
Iteration   1: 34395.928 ns/op
Iteration   2: 34233.970 ns/op
Iteration   3: 34390.068 ns/op
Iteration   4: 34333.857 ns/op
Iteration   5: 34052.923 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  34281.349 ±(99.9%) 551.759 ns/op [Average]
  (min, avg, max) = (34052.923, 34281.349, 34395.928), stdev = 143.290
  CI (99.9%): [33729.590, 34833.108] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _4_K)

# Run progress: 43.53% complete, ETA 00:54:42
# Fork: 1 of 1
# Warmup Iteration   1: 118583.606 ns/op
# Warmup Iteration   2: 78556.647 ns/op
# Warmup Iteration   3: 78796.473 ns/op
# Warmup Iteration   4: 79218.286 ns/op
Iteration   1: 82579.765 ns/op
Iteration   2: 77315.291 ns/op
Iteration   3: 76490.567 ns/op
Iteration   4: 76339.870 ns/op
Iteration   5: 76965.818 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  77938.262 ±(99.9%) 10101.606 ns/op [Average]
  (min, avg, max) = (76339.870, 77938.262, 82579.765), stdev = 2623.355
  CI (99.9%): [67836.656, 88039.868] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _8_K)

# Run progress: 43.73% complete, ETA 00:54:32
# Fork: 1 of 1
# Warmup Iteration   1: 287975.948 ns/op
# Warmup Iteration   2: 178317.883 ns/op
# Warmup Iteration   3: 169792.672 ns/op
# Warmup Iteration   4: 170353.878 ns/op
Iteration   1: 171287.707 ns/op
Iteration   2: 173622.333 ns/op
Iteration   3: 170843.345 ns/op
Iteration   4: 172292.414 ns/op
Iteration   5: 171182.618 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  171845.683 ±(99.9%) 4352.986 ns/op [Average]
  (min, avg, max) = (170843.345, 171845.683, 173622.333), stdev = 1130.457
  CI (99.9%): [167492.697, 176198.669] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _64_K)

# Run progress: 43.92% complete, ETA 00:54:21
# Fork: 1 of 1
# Warmup Iteration   1: 2138525.271 ns/op
# Warmup Iteration   2: 1564621.245 ns/op
# Warmup Iteration   3: 1537246.368 ns/op
# Warmup Iteration   4: 1544998.308 ns/op
Iteration   1: 1516185.208 ns/op
Iteration   2: 1524366.720 ns/op
Iteration   3: 1518345.555 ns/op
Iteration   4: 1501702.582 ns/op
Iteration   5: 1497147.089 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  1511549.431 ±(99.9%) 44588.915 ns/op [Average]
  (min, avg, max) = (1497147.089, 1511549.431, 1524366.720), stdev = 11579.600
  CI (99.9%): [1466960.516, 1556138.345] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 44.12% complete, ETA 00:54:10
# Fork: 1 of 1
# Warmup Iteration   1: 44179.467 ns/op
# Warmup Iteration   2: 22075.880 ns/op
# Warmup Iteration   3: 20302.801 ns/op
# Warmup Iteration   4: 18979.093 ns/op
Iteration   1: 19048.436 ns/op
Iteration   2: 18970.714 ns/op
Iteration   3: 19005.683 ns/op
Iteration   4: 18924.026 ns/op
Iteration   5: 19018.208 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  18993.413 ±(99.9%) 183.893 ns/op [Average]
  (min, avg, max) = (18924.026, 18993.413, 19048.436), stdev = 47.756
  CI (99.9%): [18809.521, 19177.306] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 44.31% complete, ETA 00:54:00
# Fork: 1 of 1
# Warmup Iteration   1: 54174.198 ns/op
# Warmup Iteration   2: 37308.954 ns/op
# Warmup Iteration   3: 33420.072 ns/op
# Warmup Iteration   4: 33021.290 ns/op
Iteration   1: 33747.495 ns/op
Iteration   2: 34724.397 ns/op
Iteration   3: 33009.748 ns/op
Iteration   4: 33088.191 ns/op
Iteration   5: 32962.259 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  33506.418 ±(99.9%) 2893.941 ns/op [Average]
  (min, avg, max) = (32962.259, 33506.418, 34724.397), stdev = 751.547
  CI (99.9%): [30612.477, 36400.359] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 44.51% complete, ETA 00:53:49
# Fork: 1 of 1
# Warmup Iteration   1: 166072.513 ns/op
# Warmup Iteration   2: 95038.807 ns/op
# Warmup Iteration   3: 93047.520 ns/op
# Warmup Iteration   4: 88290.447 ns/op
Iteration   1: 87168.496 ns/op
Iteration   2: 86935.866 ns/op
Iteration   3: 86499.488 ns/op
Iteration   4: 86609.826 ns/op
Iteration   5: 86937.879 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  86830.311 ±(99.9%) 1045.964 ns/op [Average]
  (min, avg, max) = (86499.488, 86830.311, 87168.496), stdev = 271.634
  CI (99.9%): [85784.347, 87876.275] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 44.71% complete, ETA 00:53:38
# Fork: 1 of 1
# Warmup Iteration   1: 353126.095 ns/op
# Warmup Iteration   2: 208106.663 ns/op
# Warmup Iteration   3: 198189.131 ns/op
# Warmup Iteration   4: 191662.882 ns/op
Iteration   1: 191505.815 ns/op
Iteration   2: 191606.690 ns/op
Iteration   3: 190928.684 ns/op
Iteration   4: 191894.305 ns/op
Iteration   5: 191570.352 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  191501.169 ±(99.9%) 1359.007 ns/op [Average]
  (min, avg, max) = (190928.684, 191501.169, 191894.305), stdev = 352.930
  CI (99.9%): [190142.162, 192860.176] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 44.90% complete, ETA 00:53:28
# Fork: 1 of 1
# Warmup Iteration   1: 4071711.206 ns/op
# Warmup Iteration   2: 2162717.320 ns/op
# Warmup Iteration   3: 1970702.274 ns/op
# Warmup Iteration   4: 1863542.854 ns/op
Iteration   1: 1844746.556 ns/op
Iteration   2: 1850921.269 ns/op
Iteration   3: 1840133.111 ns/op
Iteration   4: 1837248.263 ns/op
Iteration   5: 1831112.871 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  1840832.414 ±(99.9%) 28874.064 ns/op [Average]
  (min, avg, max) = (1831112.871, 1840832.414, 1850921.269), stdev = 7498.503
  CI (99.9%): [1811958.350, 1869706.478] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _1_K)

# Run progress: 45.10% complete, ETA 00:53:17
# Fork: 1 of 1
# Warmup Iteration   1: 170337.211 ns/op
# Warmup Iteration   2: 38303.225 ns/op
# Warmup Iteration   3: 37716.331 ns/op
# Warmup Iteration   4: 35667.829 ns/op
Iteration   1: 35648.127 ns/op
Iteration   2: 39893.137 ns/op
Iteration   3: 37643.858 ns/op
Iteration   4: 37941.662 ns/op
Iteration   5: 36107.738 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  37446.905 ±(99.9%) 6471.086 ns/op [Average]
  (min, avg, max) = (35648.127, 37446.905, 39893.137), stdev = 1680.520
  CI (99.9%): [30975.819, 43917.990] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _2_K)

# Run progress: 45.29% complete, ETA 00:53:06
# Fork: 1 of 1
# Warmup Iteration   1: 179796.622 ns/op
# Warmup Iteration   2: 69125.747 ns/op
# Warmup Iteration   3: 67112.533 ns/op
# Warmup Iteration   4: 69793.983 ns/op
Iteration   1: 66495.665 ns/op
Iteration   2: 66647.479 ns/op
Iteration   3: 68122.381 ns/op
Iteration   4: 66241.281 ns/op
Iteration   5: 66222.029 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  66745.767 ±(99.9%) 3041.817 ns/op [Average]
  (min, avg, max) = (66222.029, 66745.767, 68122.381), stdev = 789.950
  CI (99.9%): [63703.950, 69787.585] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _4_K)

# Run progress: 45.49% complete, ETA 00:52:55
# Fork: 1 of 1
# Warmup Iteration   1: 441548.467 ns/op
# Warmup Iteration   2: 145854.134 ns/op
# Warmup Iteration   3: 134340.490 ns/op
# Warmup Iteration   4: 141886.200 ns/op
Iteration   1: 136742.921 ns/op
Iteration   2: 134132.005 ns/op
Iteration   3: 139177.853 ns/op
Iteration   4: 134728.906 ns/op
Iteration   5: 134695.506 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  135895.438 ±(99.9%) 8031.802 ns/op [Average]
  (min, avg, max) = (134132.005, 135895.438, 139177.853), stdev = 2085.834
  CI (99.9%): [127863.636, 143927.241] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _8_K)

# Run progress: 45.69% complete, ETA 00:52:45
# Fork: 1 of 1
# Warmup Iteration   1: 1108569.176 ns/op
# Warmup Iteration   2: 327022.607 ns/op
# Warmup Iteration   3: 301311.330 ns/op
# Warmup Iteration   4: 301856.992 ns/op
Iteration   1: 299811.473 ns/op
Iteration   2: 299517.220 ns/op
Iteration   3: 331797.763 ns/op
Iteration   4: 300163.220 ns/op
Iteration   5: 301224.489 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  306502.833 ±(99.9%) 54505.935 ns/op [Average]
  (min, avg, max) = (299517.220, 306502.833, 331797.763), stdev = 14155.018
  CI (99.9%): [251996.898, 361008.768] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _64_K)

# Run progress: 45.88% complete, ETA 00:52:34
# Fork: 1 of 1
# Warmup Iteration   1: 8084595.890 ns/op
# Warmup Iteration   2: 2988758.304 ns/op
# Warmup Iteration   3: 2938204.753 ns/op
# Warmup Iteration   4: 2939250.693 ns/op
Iteration   1: 2964088.270 ns/op
Iteration   2: 3040903.807 ns/op
Iteration   3: 2953012.726 ns/op
Iteration   4: 2933870.082 ns/op
Iteration   5: 2963328.100 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  2971040.597 ±(99.9%) 157539.543 ns/op [Average]
  (min, avg, max) = (2933870.082, 2971040.597, 3040903.807), stdev = 40912.519
  CI (99.9%): [2813501.054, 3128580.141] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _1_K)

# Run progress: 46.08% complete, ETA 00:52:23
# Fork: 1 of 1
# Warmup Iteration   1: 122982.047 ns/op
# Warmup Iteration   2: 35324.094 ns/op
# Warmup Iteration   3: 35303.797 ns/op
# Warmup Iteration   4: 35312.529 ns/op
Iteration   1: 34733.619 ns/op
Iteration   2: 37975.363 ns/op
Iteration   3: 34835.218 ns/op
Iteration   4: 34900.499 ns/op
Iteration   5: 34964.053 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  35481.751 ±(99.9%) 5377.709 ns/op [Average]
  (min, avg, max) = (34733.619, 35481.751, 37975.363), stdev = 1396.574
  CI (99.9%): [30104.042, 40859.459] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _2_K)

# Run progress: 46.27% complete, ETA 00:52:12
# Fork: 1 of 1
# Warmup Iteration   1: 351191.670 ns/op
# Warmup Iteration   2: 71294.238 ns/op
# Warmup Iteration   3: 63597.485 ns/op
# Warmup Iteration   4: 63676.959 ns/op
Iteration   1: 63582.605 ns/op
Iteration   2: 66452.178 ns/op
Iteration   3: 62586.947 ns/op
Iteration   4: 62630.016 ns/op
Iteration   5: 62804.705 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  63611.290 ±(99.9%) 6307.956 ns/op [Average]
  (min, avg, max) = (62586.947, 63611.290, 66452.178), stdev = 1638.156
  CI (99.9%): [57303.334, 69919.246] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _4_K)

# Run progress: 46.47% complete, ETA 00:52:02
# Fork: 1 of 1
# Warmup Iteration   1: 410228.632 ns/op
# Warmup Iteration   2: 148074.778 ns/op
# Warmup Iteration   3: 145695.031 ns/op
# Warmup Iteration   4: 138326.300 ns/op
Iteration   1: 142189.616 ns/op
Iteration   2: 133854.003 ns/op
Iteration   3: 135011.427 ns/op
Iteration   4: 132814.071 ns/op
Iteration   5: 133443.430 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  135462.509 ±(99.9%) 14805.669 ns/op [Average]
  (min, avg, max) = (132814.071, 135462.509, 142189.616), stdev = 3844.985
  CI (99.9%): [120656.841, 150268.178] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _8_K)

# Run progress: 46.67% complete, ETA 00:51:51
# Fork: 1 of 1
# Warmup Iteration   1: 570183.102 ns/op
# Warmup Iteration   2: 293146.892 ns/op
# Warmup Iteration   3: 282955.535 ns/op
# Warmup Iteration   4: 284173.515 ns/op
Iteration   1: 283292.879 ns/op
Iteration   2: 288292.499 ns/op
Iteration   3: 289712.863 ns/op
Iteration   4: 281999.788 ns/op
Iteration   5: 281293.295 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  284918.265 ±(99.9%) 14747.693 ns/op [Average]
  (min, avg, max) = (281293.295, 284918.265, 289712.863), stdev = 3829.929
  CI (99.9%): [270170.572, 299665.958] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _64_K)

# Run progress: 46.86% complete, ETA 00:51:40
# Fork: 1 of 1
# Warmup Iteration   1: 4625841.796 ns/op
# Warmup Iteration   2: 2737356.795 ns/op
# Warmup Iteration   3: 2722857.363 ns/op
# Warmup Iteration   4: 2712388.970 ns/op
Iteration   1: 2715502.154 ns/op
Iteration   2: 2707964.963 ns/op
Iteration   3: 2818587.876 ns/op
Iteration   4: 2722492.233 ns/op
Iteration   5: 2732955.201 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  2739500.485 ±(99.9%) 173891.279 ns/op [Average]
  (min, avg, max) = (2707964.963, 2739500.485, 2818587.876), stdev = 45159.013
  CI (99.9%): [2565609.206, 2913391.764] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.both
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _1_K)

# Run progress: 47.06% complete, ETA 00:51:29
# Fork: 1 of 1
# Warmup Iteration   1: 28360.913 ns/op
# Warmup Iteration   2: 12285.794 ns/op
# Warmup Iteration   3: 12283.642 ns/op
# Warmup Iteration   4: 11978.244 ns/op
Iteration   1: 11836.430 ns/op
Iteration   2: 11857.125 ns/op
Iteration   3: 11744.324 ns/op
Iteration   4: 11700.762 ns/op
Iteration   5: 11729.450 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.both":
  11773.618 ±(99.9%) 265.638 ns/op [Average]
  (min, avg, max) = (11700.762, 11773.618, 11857.125), stdev = 68.985
  CI (99.9%): [11507.980, 12039.256] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.both
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _2_K)

# Run progress: 47.25% complete, ETA 00:51:17
# Fork: 1 of 1
# Warmup Iteration   1: 146266.505 ns/op
# Warmup Iteration   2: 37332.651 ns/op
# Warmup Iteration   3: 32276.276 ns/op
# Warmup Iteration   4: 32456.210 ns/op
Iteration   1: 32522.627 ns/op
Iteration   2: 33309.667 ns/op
Iteration   3: 31270.576 ns/op
Iteration   4: 31789.386 ns/op
Iteration   5: 31717.686 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.both":
  32121.989 ±(99.9%) 3086.573 ns/op [Average]
  (min, avg, max) = (31270.576, 32121.989, 33309.667), stdev = 801.573
  CI (99.9%): [29035.416, 35208.562] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.both
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _4_K)

# Run progress: 47.45% complete, ETA 00:51:06
# Fork: 1 of 1
# Warmup Iteration   1: 350791.790 ns/op
# Warmup Iteration   2: 76811.436 ns/op
# Warmup Iteration   3: 66069.841 ns/op
# Warmup Iteration   4: 64533.549 ns/op
Iteration   1: 65216.751 ns/op
Iteration   2: 63761.594 ns/op
Iteration   3: 68660.046 ns/op
Iteration   4: 63885.486 ns/op
Iteration   5: 63862.975 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.both":
  65077.371 ±(99.9%) 8049.965 ns/op [Average]
  (min, avg, max) = (63761.594, 65077.371, 68660.046), stdev = 2090.550
  CI (99.9%): [57027.405, 73127.336] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.both
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _8_K)

# Run progress: 47.65% complete, ETA 00:50:54
# Fork: 1 of 1
# Warmup Iteration   1: 1274827.496 ns/op
# Warmup Iteration   2: 149575.240 ns/op
# Warmup Iteration   3: 124177.589 ns/op
# Warmup Iteration   4: 123971.692 ns/op
Iteration   1: 121382.617 ns/op
Iteration   2: 120839.962 ns/op
Iteration   3: 120869.434 ns/op
Iteration   4: 129527.820 ns/op
Iteration   5: 119637.115 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.both":
  122451.390 ±(99.9%) 15431.137 ns/op [Average]
  (min, avg, max) = (119637.115, 122451.390, 129527.820), stdev = 4007.417
  CI (99.9%): [107020.253, 137882.526] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.both
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _64_K)

# Run progress: 47.84% complete, ETA 00:50:42
# Fork: 1 of 1
# Warmup Iteration   1: 14673838.640 ns/op
# Warmup Iteration   2: 1917660.850 ns/op
# Warmup Iteration   3: 1003536.842 ns/op
# Warmup Iteration   4: 1010451.454 ns/op
Iteration   1: 974023.568 ns/op
Iteration   2: 994557.275 ns/op
Iteration   3: 960896.584 ns/op
Iteration   4: 956733.234 ns/op
Iteration   5: 950894.208 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.both":
  967420.974 ±(99.9%) 66969.732 ns/op [Average]
  (min, avg, max) = (950894.208, 967420.974, 994557.275), stdev = 17391.827
  CI (99.9%): [900451.242, 1034390.705] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.deserialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _1_K)

# Run progress: 48.04% complete, ETA 00:50:30
# Fork: 1 of 1
# Warmup Iteration   1: 5032.150 ns/op
# Warmup Iteration   2: 3315.848 ns/op
# Warmup Iteration   3: 3134.563 ns/op
# Warmup Iteration   4: 3143.282 ns/op
Iteration   1: 3134.234 ns/op
Iteration   2: 3097.691 ns/op
Iteration   3: 3079.388 ns/op
Iteration   4: 3096.774 ns/op
Iteration   5: 3083.296 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.deserialization":
  3098.277 ±(99.9%) 83.408 ns/op [Average]
  (min, avg, max) = (3079.388, 3098.277, 3134.234), stdev = 21.661
  CI (99.9%): [3014.869, 3181.685] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.deserialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _2_K)

# Run progress: 48.24% complete, ETA 00:50:19
# Fork: 1 of 1
# Warmup Iteration   1: 10176.350 ns/op
# Warmup Iteration   2: 6758.687 ns/op
# Warmup Iteration   3: 6453.386 ns/op
# Warmup Iteration   4: 6282.456 ns/op
Iteration   1: 6448.474 ns/op
Iteration   2: 6287.601 ns/op
Iteration   3: 6311.019 ns/op
Iteration   4: 6749.653 ns/op
Iteration   5: 6305.383 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.deserialization":
  6420.426 ±(99.9%) 750.690 ns/op [Average]
  (min, avg, max) = (6287.601, 6420.426, 6749.653), stdev = 194.952
  CI (99.9%): [5669.736, 7171.116] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.deserialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _4_K)

# Run progress: 48.43% complete, ETA 00:50:07
# Fork: 1 of 1
# Warmup Iteration   1: 22658.748 ns/op
# Warmup Iteration   2: 13392.232 ns/op
# Warmup Iteration   3: 12526.782 ns/op
# Warmup Iteration   4: 12237.671 ns/op
Iteration   1: 12207.939 ns/op
Iteration   2: 12338.894 ns/op
Iteration   3: 12161.365 ns/op
Iteration   4: 12196.635 ns/op
Iteration   5: 12496.560 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.deserialization":
  12280.278 ±(99.9%) 532.807 ns/op [Average]
  (min, avg, max) = (12161.365, 12280.278, 12496.560), stdev = 138.368
  CI (99.9%): [11747.471, 12813.085] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.deserialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _8_K)

# Run progress: 48.63% complete, ETA 00:49:55
# Fork: 1 of 1
# Warmup Iteration   1: 40601.401 ns/op
# Warmup Iteration   2: 25455.250 ns/op
# Warmup Iteration   3: 24017.674 ns/op
# Warmup Iteration   4: 24034.284 ns/op
Iteration   1: 23993.522 ns/op
Iteration   2: 23969.020 ns/op
Iteration   3: 24031.550 ns/op
Iteration   4: 24002.614 ns/op
Iteration   5: 23990.187 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.deserialization":
  23997.378 ±(99.9%) 87.510 ns/op [Average]
  (min, avg, max) = (23969.020, 23997.378, 24031.550), stdev = 22.726
  CI (99.9%): [23909.869, 24084.888] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.deserialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _64_K)

# Run progress: 48.82% complete, ETA 00:49:43
# Fork: 1 of 1
# Warmup Iteration   1: 359251.007 ns/op
# Warmup Iteration   2: 279013.237 ns/op
# Warmup Iteration   3: 244426.488 ns/op
# Warmup Iteration   4: 245658.293 ns/op
Iteration   1: 244725.395 ns/op
Iteration   2: 244651.567 ns/op
Iteration   3: 250332.253 ns/op
Iteration   4: 244587.487 ns/op
Iteration   5: 227543.907 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.deserialization":
  242368.122 ±(99.9%) 33285.312 ns/op [Average]
  (min, avg, max) = (227543.907, 242368.122, 250332.253), stdev = 8644.090
  CI (99.9%): [209082.809, 275653.434] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.serialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _1_K)

# Run progress: 49.02% complete, ETA 00:49:32
# Fork: 1 of 1
# Warmup Iteration   1: 15180.940 ns/op
# Warmup Iteration   2: 7664.753 ns/op
# Warmup Iteration   3: 7482.562 ns/op
# Warmup Iteration   4: 7312.666 ns/op
Iteration   1: 7315.648 ns/op
Iteration   2: 7682.906 ns/op
Iteration   3: 7189.497 ns/op
Iteration   4: 7231.222 ns/op
Iteration   5: 7243.226 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.serialization":
  7332.500 ±(99.9%) 774.317 ns/op [Average]
  (min, avg, max) = (7189.497, 7332.500, 7682.906), stdev = 201.088
  CI (99.9%): [6558.182, 8106.817] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.serialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _2_K)

# Run progress: 49.22% complete, ETA 00:49:20
# Fork: 1 of 1
# Warmup Iteration   1: 78782.392 ns/op
# Warmup Iteration   2: 21266.538 ns/op
# Warmup Iteration   3: 21609.848 ns/op
# Warmup Iteration   4: 20842.498 ns/op
Iteration   1: 20907.684 ns/op
Iteration   2: 21733.013 ns/op
Iteration   3: 20915.155 ns/op
Iteration   4: 20619.885 ns/op
Iteration   5: 20457.864 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.serialization":
  20926.720 ±(99.9%) 1890.916 ns/op [Average]
  (min, avg, max) = (20457.864, 20926.720, 21733.013), stdev = 491.065
  CI (99.9%): [19035.805, 22817.636] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.serialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _4_K)

# Run progress: 49.41% complete, ETA 00:49:08
# Fork: 1 of 1
# Warmup Iteration   1: 80593.750 ns/op
# Warmup Iteration   2: 48952.404 ns/op
# Warmup Iteration   3: 45341.930 ns/op
# Warmup Iteration   4: 44978.663 ns/op
Iteration   1: 45367.466 ns/op
Iteration   2: 45253.582 ns/op
Iteration   3: 44926.892 ns/op
Iteration   4: 44965.855 ns/op
Iteration   5: 44408.195 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.serialization":
  44984.398 ±(99.9%) 1434.153 ns/op [Average]
  (min, avg, max) = (44408.195, 44984.398, 45367.466), stdev = 372.445
  CI (99.9%): [43550.245, 46418.551] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.serialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _8_K)

# Run progress: 49.61% complete, ETA 00:48:56
# Fork: 1 of 1
# Warmup Iteration   1: 2099666.382 ns/op
# Warmup Iteration   2: 1873043.218 ns/op
# Warmup Iteration   3: 118493.554 ns/op
# Warmup Iteration   4: 83987.971 ns/op
Iteration   1: 81691.707 ns/op
Iteration   2: 82488.829 ns/op
Iteration   3: 82192.095 ns/op
Iteration   4: 82369.493 ns/op
Iteration   5: 82230.719 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.serialization":
  82194.569 ±(99.9%) 1173.295 ns/op [Average]
  (min, avg, max) = (81691.707, 82194.569, 82488.829), stdev = 304.701
  CI (99.9%): [81021.274, 83367.863] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventRawScalaPbBenchmark.serialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _64_K)

# Run progress: 49.80% complete, ETA 00:48:45
# Fork: 1 of 1
# Warmup Iteration   1: 11768288.297 ns/op
# Warmup Iteration   2: 1489807.123 ns/op
# Warmup Iteration   3: 660399.520 ns/op
# Warmup Iteration   4: 695769.584 ns/op
Iteration   1: 633790.295 ns/op
Iteration   2: 624941.737 ns/op
Iteration   3: 645327.986 ns/op
Iteration   4: 619797.433 ns/op
Iteration   5: 619274.441 ns/op


Result "com.komanov.serialization.jmh.EventRawScalaPbBenchmark.serialization":
  628626.378 ±(99.9%) 42383.126 ns/op [Average]
  (min, avg, max) = (619274.441, 628626.378, 645327.986), stdev = 11006.763
  CI (99.9%): [586243.253, 671009.504] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 50.00% complete, ETA 00:48:33
# Fork: 1 of 1
# Warmup Iteration   1: 42523.145 ns/op
# Warmup Iteration   2: 15711.922 ns/op
# Warmup Iteration   3: 15578.582 ns/op
# Warmup Iteration   4: 15390.344 ns/op
Iteration   1: 15727.546 ns/op
Iteration   2: 15955.316 ns/op
Iteration   3: 15579.050 ns/op
Iteration   4: 15282.942 ns/op
Iteration   5: 15131.467 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  15535.264 ±(99.9%) 1280.088 ns/op [Average]
  (min, avg, max) = (15131.467, 15535.264, 15955.316), stdev = 332.435
  CI (99.9%): [14255.177, 16815.352] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 50.20% complete, ETA 00:48:22
# Fork: 1 of 1
# Warmup Iteration   1: 227502.249 ns/op
# Warmup Iteration   2: 51871.213 ns/op
# Warmup Iteration   3: 32890.336 ns/op
# Warmup Iteration   4: 28948.328 ns/op
Iteration   1: 28414.578 ns/op
Iteration   2: 28459.839 ns/op
Iteration   3: 28208.575 ns/op
Iteration   4: 28294.148 ns/op
Iteration   5: 29096.557 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  28494.739 ±(99.9%) 1350.411 ns/op [Average]
  (min, avg, max) = (28208.575, 28494.739, 29096.557), stdev = 350.698
  CI (99.9%): [27144.328, 29845.150] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 50.39% complete, ETA 00:48:11
# Fork: 1 of 1
# Warmup Iteration   1: 488264.048 ns/op
# Warmup Iteration   2: 131729.822 ns/op
# Warmup Iteration   3: 57578.783 ns/op
# Warmup Iteration   4: 53662.353 ns/op
Iteration   1: 54919.862 ns/op
Iteration   2: 52958.882 ns/op
Iteration   3: 53425.901 ns/op
Iteration   4: 52756.562 ns/op
Iteration   5: 52801.746 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  53372.591 ±(99.9%) 3483.397 ns/op [Average]
  (min, avg, max) = (52756.562, 53372.591, 54919.862), stdev = 904.627
  CI (99.9%): [49889.193, 56855.988] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 50.59% complete, ETA 00:48:00
# Fork: 1 of 1
# Warmup Iteration   1: 374468.330 ns/op
# Warmup Iteration   2: 126235.531 ns/op
# Warmup Iteration   3: 111624.381 ns/op
# Warmup Iteration   4: 109733.450 ns/op
Iteration   1: 118425.959 ns/op
Iteration   2: 107774.816 ns/op
Iteration   3: 108944.630 ns/op
Iteration   4: 107390.140 ns/op
Iteration   5: 107145.797 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  109936.268 ±(99.9%) 18466.997 ns/op [Average]
  (min, avg, max) = (107145.797, 109936.268, 118425.959), stdev = 4795.820
  CI (99.9%): [91469.272, 128403.265] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 50.78% complete, ETA 00:47:49
# Fork: 1 of 1
# Warmup Iteration   1: 4663800.942 ns/op
# Warmup Iteration   2: 1497295.344 ns/op
# Warmup Iteration   3: 836510.914 ns/op
# Warmup Iteration   4: 828947.859 ns/op
Iteration   1: 873220.235 ns/op
Iteration   2: 794327.302 ns/op
Iteration   3: 787317.431 ns/op
Iteration   4: 773870.158 ns/op
Iteration   5: 781831.376 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  802113.301 ±(99.9%) 155758.038 ns/op [Average]
  (min, avg, max) = (773870.158, 802113.301, 873220.235), stdev = 40449.868
  CI (99.9%): [646355.262, 957871.339] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 50.98% complete, ETA 00:47:38
# Fork: 1 of 1
# Warmup Iteration   1: 41298.493 ns/op
# Warmup Iteration   2: 13052.880 ns/op
# Warmup Iteration   3: 12956.595 ns/op
# Warmup Iteration   4: 12822.544 ns/op
Iteration   1: 12634.165 ns/op
Iteration   2: 12728.749 ns/op
Iteration   3: 12579.511 ns/op
Iteration   4: 12654.575 ns/op
Iteration   5: 12658.203 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  12651.041 ±(99.9%) 206.500 ns/op [Average]
  (min, avg, max) = (12579.511, 12651.041, 12728.749), stdev = 53.627
  CI (99.9%): [12444.541, 12857.540] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 51.18% complete, ETA 00:47:27
# Fork: 1 of 1
# Warmup Iteration   1: 100158.960 ns/op
# Warmup Iteration   2: 24606.224 ns/op
# Warmup Iteration   3: 22735.489 ns/op
# Warmup Iteration   4: 21499.693 ns/op
Iteration   1: 21514.524 ns/op
Iteration   2: 21360.375 ns/op
Iteration   3: 21356.341 ns/op
Iteration   4: 21157.745 ns/op
Iteration   5: 21248.391 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  21327.475 ±(99.9%) 516.496 ns/op [Average]
  (min, avg, max) = (21157.745, 21327.475, 21514.524), stdev = 134.132
  CI (99.9%): [20810.979, 21843.971] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 51.37% complete, ETA 00:47:16
# Fork: 1 of 1
# Warmup Iteration   1: 306942.125 ns/op
# Warmup Iteration   2: 48693.111 ns/op
# Warmup Iteration   3: 41989.442 ns/op
# Warmup Iteration   4: 42535.842 ns/op
Iteration   1: 42260.430 ns/op
Iteration   2: 43131.247 ns/op
Iteration   3: 40743.412 ns/op
Iteration   4: 40668.211 ns/op
Iteration   5: 41900.988 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  41740.858 ±(99.9%) 4026.754 ns/op [Average]
  (min, avg, max) = (40668.211, 41740.858, 43131.247), stdev = 1045.735
  CI (99.9%): [37714.104, 45767.611] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 51.57% complete, ETA 00:47:06
# Fork: 1 of 1
# Warmup Iteration   1: 665852.326 ns/op
# Warmup Iteration   2: 102727.086 ns/op
# Warmup Iteration   3: 80003.678 ns/op
# Warmup Iteration   4: 82344.936 ns/op
Iteration   1: 79680.363 ns/op
Iteration   2: 78459.141 ns/op
Iteration   3: 78114.050 ns/op
Iteration   4: 78220.504 ns/op
Iteration   5: 80902.744 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  79075.361 ±(99.9%) 4612.737 ns/op [Average]
  (min, avg, max) = (78114.050, 79075.361, 80902.744), stdev = 1197.913
  CI (99.9%): [74462.624, 83688.097] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 51.76% complete, ETA 00:46:55
# Fork: 1 of 1
# Warmup Iteration   1: 2902146.125 ns/op
# Warmup Iteration   2: 675366.465 ns/op
# Warmup Iteration   3: 669316.378 ns/op
# Warmup Iteration   4: 650274.156 ns/op
Iteration   1: 632222.992 ns/op
Iteration   2: 635843.456 ns/op
Iteration   3: 627744.672 ns/op
Iteration   4: 628731.440 ns/op
Iteration   5: 626797.777 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  630268.067 ±(99.9%) 14366.353 ns/op [Average]
  (min, avg, max) = (626797.777, 630268.067, 635843.456), stdev = 3730.896
  CI (99.9%): [615901.714, 644634.421] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 51.96% complete, ETA 00:46:44
# Fork: 1 of 1
# Warmup Iteration   1: 98756.052 ns/op
# Warmup Iteration   2: 46350.783 ns/op
# Warmup Iteration   3: 14323.306 ns/op
# Warmup Iteration   4: 14537.476 ns/op
Iteration   1: 14302.476 ns/op
Iteration   2: 13866.901 ns/op
Iteration   3: 14000.245 ns/op
Iteration   4: 13852.887 ns/op
Iteration   5: 13880.049 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  13980.512 ±(99.9%) 728.928 ns/op [Average]
  (min, avg, max) = (13852.887, 13980.512, 14302.476), stdev = 189.300
  CI (99.9%): [13251.584, 14709.439] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 52.16% complete, ETA 00:46:33
# Fork: 1 of 1
# Warmup Iteration   1: 80710.492 ns/op
# Warmup Iteration   2: 24506.876 ns/op
# Warmup Iteration   3: 23785.834 ns/op
# Warmup Iteration   4: 23555.317 ns/op
Iteration   1: 23473.156 ns/op
Iteration   2: 23550.290 ns/op
Iteration   3: 23333.728 ns/op
Iteration   4: 23259.440 ns/op
Iteration   5: 23322.356 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  23387.794 ±(99.9%) 461.160 ns/op [Average]
  (min, avg, max) = (23259.440, 23387.794, 23550.290), stdev = 119.762
  CI (99.9%): [22926.633, 23848.954] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 52.35% complete, ETA 00:46:22
# Fork: 1 of 1
# Warmup Iteration   1: 149884.529 ns/op
# Warmup Iteration   2: 49175.684 ns/op
# Warmup Iteration   3: 44618.243 ns/op
# Warmup Iteration   4: 43742.084 ns/op
Iteration   1: 42917.285 ns/op
Iteration   2: 43329.869 ns/op
Iteration   3: 42750.727 ns/op
Iteration   4: 42752.859 ns/op
Iteration   5: 42856.984 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  42921.545 ±(99.9%) 920.433 ns/op [Average]
  (min, avg, max) = (42750.727, 42921.545, 43329.869), stdev = 239.034
  CI (99.9%): [42001.112, 43841.978] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 52.55% complete, ETA 00:46:11
# Fork: 1 of 1
# Warmup Iteration   1: 258075.481 ns/op
# Warmup Iteration   2: 93144.060 ns/op
# Warmup Iteration   3: 82028.265 ns/op
# Warmup Iteration   4: 83019.380 ns/op
Iteration   1: 81045.254 ns/op
Iteration   2: 80666.922 ns/op
Iteration   3: 80036.524 ns/op
Iteration   4: 79673.570 ns/op
Iteration   5: 80962.498 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  80476.954 ±(99.9%) 2305.738 ns/op [Average]
  (min, avg, max) = (79673.570, 80476.954, 81045.254), stdev = 598.793
  CI (99.9%): [78171.216, 82782.691] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 52.75% complete, ETA 00:46:00
# Fork: 1 of 1
# Warmup Iteration   1: 2269537.796 ns/op
# Warmup Iteration   2: 598234.062 ns/op
# Warmup Iteration   3: 606736.804 ns/op
# Warmup Iteration   4: 561295.189 ns/op
Iteration   1: 608190.318 ns/op
Iteration   2: 553909.967 ns/op
Iteration   3: 554763.857 ns/op
Iteration   4: 553712.460 ns/op
Iteration   5: 552936.071 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  564702.535 ±(99.9%) 93644.216 ns/op [Average]
  (min, avg, max) = (552936.071, 564702.535, 608190.318), stdev = 24319.106
  CI (99.9%): [471058.318, 658346.751] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 52.94% complete, ETA 00:45:49
# Fork: 1 of 1
# Warmup Iteration   1: 32177.306 ns/op
# Warmup Iteration   2: 6936.849 ns/op
# Warmup Iteration   3: 5782.494 ns/op
# Warmup Iteration   4: 5671.684 ns/op
Iteration   1: 5526.389 ns/op
Iteration   2: 5496.712 ns/op
Iteration   3: 5492.411 ns/op
Iteration   4: 5789.871 ns/op
Iteration   5: 5644.112 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  5589.899 ±(99.9%) 491.425 ns/op [Average]
  (min, avg, max) = (5492.411, 5589.899, 5789.871), stdev = 127.622
  CI (99.9%): [5098.474, 6081.324] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 53.14% complete, ETA 00:45:38
# Fork: 1 of 1
# Warmup Iteration   1: 55665.081 ns/op
# Warmup Iteration   2: 16799.601 ns/op
# Warmup Iteration   3: 11980.355 ns/op
# Warmup Iteration   4: 11893.571 ns/op
Iteration   1: 11482.378 ns/op
Iteration   2: 11506.407 ns/op
Iteration   3: 11321.743 ns/op
Iteration   4: 11342.484 ns/op
Iteration   5: 11250.213 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  11380.645 ±(99.9%) 422.274 ns/op [Average]
  (min, avg, max) = (11250.213, 11380.645, 11506.407), stdev = 109.663
  CI (99.9%): [10958.371, 11802.919] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 53.33% complete, ETA 00:45:27
# Fork: 1 of 1
# Warmup Iteration   1: 107291.435 ns/op
# Warmup Iteration   2: 27232.059 ns/op
# Warmup Iteration   3: 21739.575 ns/op
# Warmup Iteration   4: 21011.318 ns/op
Iteration   1: 20799.088 ns/op
Iteration   2: 20652.149 ns/op
Iteration   3: 20588.546 ns/op
Iteration   4: 20606.905 ns/op
Iteration   5: 20570.154 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  20643.368 ±(99.9%) 355.122 ns/op [Average]
  (min, avg, max) = (20570.154, 20643.368, 20799.088), stdev = 92.224
  CI (99.9%): [20288.247, 20998.490] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 53.53% complete, ETA 00:45:15
# Fork: 1 of 1
# Warmup Iteration   1: 194113.156 ns/op
# Warmup Iteration   2: 52265.810 ns/op
# Warmup Iteration   3: 41576.086 ns/op
# Warmup Iteration   4: 41264.858 ns/op
Iteration   1: 39840.347 ns/op
Iteration   2: 39888.004 ns/op
Iteration   3: 39445.410 ns/op
Iteration   4: 39758.273 ns/op
Iteration   5: 41033.067 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  39993.020 ±(99.9%) 2335.137 ns/op [Average]
  (min, avg, max) = (39445.410, 39993.020, 41033.067), stdev = 606.428
  CI (99.9%): [37657.883, 42328.158] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 53.73% complete, ETA 00:45:04
# Fork: 1 of 1
# Warmup Iteration   1: 1556984.570 ns/op
# Warmup Iteration   2: 444030.802 ns/op
# Warmup Iteration   3: 358690.540 ns/op
# Warmup Iteration   4: 333997.244 ns/op
Iteration   1: 324442.767 ns/op
Iteration   2: 319242.421 ns/op
Iteration   3: 319527.973 ns/op
Iteration   4: 318496.695 ns/op
Iteration   5: 318623.569 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  320066.685 ±(99.9%) 9562.314 ns/op [Average]
  (min, avg, max) = (318496.695, 320066.685, 324442.767), stdev = 2483.302
  CI (99.9%): [310504.371, 329628.999] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 53.92% complete, ETA 00:44:53
# Fork: 1 of 1
# Warmup Iteration   1: 67379.125 ns/op
# Warmup Iteration   2: 12324.629 ns/op
# Warmup Iteration   3: 9461.713 ns/op
# Warmup Iteration   4: 9156.169 ns/op
Iteration   1: 8925.472 ns/op
Iteration   2: 9030.662 ns/op
Iteration   3: 8877.115 ns/op
Iteration   4: 8825.470 ns/op
Iteration   5: 8856.078 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  8902.959 ±(99.9%) 308.563 ns/op [Average]
  (min, avg, max) = (8825.470, 8902.959, 9030.662), stdev = 80.133
  CI (99.9%): [8594.396, 9211.523] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 54.12% complete, ETA 00:44:42
# Fork: 1 of 1
# Warmup Iteration   1: 91908.209 ns/op
# Warmup Iteration   2: 20363.691 ns/op
# Warmup Iteration   3: 16922.193 ns/op
# Warmup Iteration   4: 16025.418 ns/op
Iteration   1: 15697.215 ns/op
Iteration   2: 15552.806 ns/op
Iteration   3: 15582.579 ns/op
Iteration   4: 15573.281 ns/op
Iteration   5: 15529.270 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  15587.030 ±(99.9%) 249.973 ns/op [Average]
  (min, avg, max) = (15529.270, 15587.030, 15697.215), stdev = 64.917
  CI (99.9%): [15337.057, 15837.003] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 54.31% complete, ETA 00:44:31
# Fork: 1 of 1
# Warmup Iteration   1: 106334.144 ns/op
# Warmup Iteration   2: 50940.115 ns/op
# Warmup Iteration   3: 31920.285 ns/op
# Warmup Iteration   4: 31207.158 ns/op
Iteration   1: 29828.256 ns/op
Iteration   2: 29943.648 ns/op
Iteration   3: 29839.086 ns/op
Iteration   4: 29754.689 ns/op
Iteration   5: 29941.541 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  29861.444 ±(99.9%) 311.468 ns/op [Average]
  (min, avg, max) = (29754.689, 29861.444, 29943.648), stdev = 80.887
  CI (99.9%): [29549.976, 30172.912] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 54.51% complete, ETA 00:44:20
# Fork: 1 of 1
# Warmup Iteration   1: 279096.920 ns/op
# Warmup Iteration   2: 76468.128 ns/op
# Warmup Iteration   3: 60238.011 ns/op
# Warmup Iteration   4: 60300.381 ns/op
Iteration   1: 56620.855 ns/op
Iteration   2: 55972.371 ns/op
Iteration   3: 55949.769 ns/op
Iteration   4: 56139.818 ns/op
Iteration   5: 56142.844 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  56165.132 ±(99.9%) 1041.026 ns/op [Average]
  (min, avg, max) = (55949.769, 56165.132, 56620.855), stdev = 270.351
  CI (99.9%): [55124.105, 57206.158] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 54.71% complete, ETA 00:44:09
# Fork: 1 of 1
# Warmup Iteration   1: 1684003.959 ns/op
# Warmup Iteration   2: 676676.644 ns/op
# Warmup Iteration   3: 636879.114 ns/op
# Warmup Iteration   4: 568247.984 ns/op
Iteration   1: 548648.210 ns/op
Iteration   2: 548032.583 ns/op
Iteration   3: 547213.789 ns/op
Iteration   4: 548008.983 ns/op
Iteration   5: 547562.179 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  547893.149 ±(99.9%) 2086.153 ns/op [Average]
  (min, avg, max) = (547213.789, 547893.149, 548648.210), stdev = 541.767
  CI (99.9%): [545806.996, 549979.301] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 54.90% complete, ETA 00:43:58
# Fork: 1 of 1
# Warmup Iteration   1: 40907.975 ns/op
# Warmup Iteration   2: 13712.474 ns/op
# Warmup Iteration   3: 10124.537 ns/op
# Warmup Iteration   4: 9789.445 ns/op
Iteration   1: 9207.637 ns/op
Iteration   2: 8810.796 ns/op
Iteration   3: 8822.156 ns/op
Iteration   4: 8793.890 ns/op
Iteration   5: 8775.052 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  8881.906 ±(99.9%) 704.500 ns/op [Average]
  (min, avg, max) = (8775.052, 8881.906, 9207.637), stdev = 182.956
  CI (99.9%): [8177.406, 9586.406] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 55.10% complete, ETA 00:43:47
# Fork: 1 of 1
# Warmup Iteration   1: 74312.998 ns/op
# Warmup Iteration   2: 26313.502 ns/op
# Warmup Iteration   3: 20305.260 ns/op
# Warmup Iteration   4: 18001.640 ns/op
Iteration   1: 16895.842 ns/op
Iteration   2: 16263.128 ns/op
Iteration   3: 16257.643 ns/op
Iteration   4: 16263.845 ns/op
Iteration   5: 16264.700 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  16389.032 ±(99.9%) 1091.000 ns/op [Average]
  (min, avg, max) = (16257.643, 16389.032, 16895.842), stdev = 283.329
  CI (99.9%): [15298.032, 17480.031] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 55.29% complete, ETA 00:43:36
# Fork: 1 of 1
# Warmup Iteration   1: 141793.908 ns/op
# Warmup Iteration   2: 43313.966 ns/op
# Warmup Iteration   3: 33394.698 ns/op
# Warmup Iteration   4: 30753.508 ns/op
Iteration   1: 29421.209 ns/op
Iteration   2: 29127.376 ns/op
Iteration   3: 29090.595 ns/op
Iteration   4: 29094.651 ns/op
Iteration   5: 29163.359 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  29179.438 ±(99.9%) 532.532 ns/op [Average]
  (min, avg, max) = (29090.595, 29179.438, 29421.209), stdev = 138.297
  CI (99.9%): [28646.906, 29711.970] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 55.49% complete, ETA 00:43:25
# Fork: 1 of 1
# Warmup Iteration   1: 220025.629 ns/op
# Warmup Iteration   2: 81429.890 ns/op
# Warmup Iteration   3: 61024.661 ns/op
# Warmup Iteration   4: 59901.753 ns/op
Iteration   1: 58656.841 ns/op
Iteration   2: 57538.786 ns/op
Iteration   3: 57714.101 ns/op
Iteration   4: 57651.336 ns/op
Iteration   5: 57621.200 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  57836.453 ±(99.9%) 1782.576 ns/op [Average]
  (min, avg, max) = (57538.786, 57836.453, 58656.841), stdev = 462.929
  CI (99.9%): [56053.876, 59619.029] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 55.69% complete, ETA 00:43:14
# Fork: 1 of 1
# Warmup Iteration   1: 2630221.900 ns/op
# Warmup Iteration   2: 1131627.022 ns/op
# Warmup Iteration   3: 665009.387 ns/op
# Warmup Iteration   4: 660605.290 ns/op
Iteration   1: 593324.566 ns/op
Iteration   2: 583095.304 ns/op
Iteration   3: 580884.513 ns/op
Iteration   4: 586107.939 ns/op
Iteration   5: 585663.522 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  585815.169 ±(99.9%) 18082.534 ns/op [Average]
  (min, avg, max) = (580884.513, 585815.169, 593324.566), stdev = 4695.977
  CI (99.9%): [567732.635, 603897.703] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 55.88% complete, ETA 00:43:03
# Fork: 1 of 1
# Warmup Iteration   1: 378126.845 ns/op
# Warmup Iteration   2: 155598.816 ns/op
# Warmup Iteration   3: 138798.853 ns/op
# Warmup Iteration   4: 133013.792 ns/op
Iteration   1: 131124.066 ns/op
Iteration   2: 130804.086 ns/op
Iteration   3: 131825.218 ns/op
Iteration   4: 131221.769 ns/op
Iteration   5: 130913.385 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  131177.705 ±(99.9%) 1532.474 ns/op [Average]
  (min, avg, max) = (130804.086, 131177.705, 131825.218), stdev = 397.979
  CI (99.9%): [129645.231, 132710.178] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 56.08% complete, ETA 00:42:52
# Fork: 1 of 1
# Warmup Iteration   1: 576859.548 ns/op
# Warmup Iteration   2: 226334.548 ns/op
# Warmup Iteration   3: 186084.465 ns/op
# Warmup Iteration   4: 182589.958 ns/op
Iteration   1: 180852.469 ns/op
Iteration   2: 182851.544 ns/op
Iteration   3: 179727.043 ns/op
Iteration   4: 179427.499 ns/op
Iteration   5: 179148.291 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  180401.369 ±(99.9%) 5833.500 ns/op [Average]
  (min, avg, max) = (179148.291, 180401.369, 182851.544), stdev = 1514.941
  CI (99.9%): [174567.870, 186234.869] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 56.27% complete, ETA 00:42:41
# Fork: 1 of 1
# Warmup Iteration   1: 898754.618 ns/op
# Warmup Iteration   2: 267640.790 ns/op
# Warmup Iteration   3: 242672.061 ns/op
# Warmup Iteration   4: 237002.233 ns/op
Iteration   1: 234746.536 ns/op
Iteration   2: 235478.540 ns/op
Iteration   3: 233365.293 ns/op
Iteration   4: 232896.841 ns/op
Iteration   5: 233121.725 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  233921.787 ±(99.9%) 4349.689 ns/op [Average]
  (min, avg, max) = (232896.841, 233921.787, 235478.540), stdev = 1129.600
  CI (99.9%): [229572.098, 238271.476] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 56.47% complete, ETA 00:42:30
# Fork: 1 of 1
# Warmup Iteration   1: 1273680.331 ns/op
# Warmup Iteration   2: 416605.081 ns/op
# Warmup Iteration   3: 357983.483 ns/op
# Warmup Iteration   4: 346815.117 ns/op
Iteration   1: 350751.752 ns/op
Iteration   2: 347216.687 ns/op
Iteration   3: 341224.324 ns/op
Iteration   4: 340528.924 ns/op
Iteration   5: 342137.076 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  344371.753 ±(99.9%) 17054.643 ns/op [Average]
  (min, avg, max) = (340528.924, 344371.753, 350751.752), stdev = 4429.037
  CI (99.9%): [327317.109, 361426.396] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 56.67% complete, ETA 00:42:18
# Fork: 1 of 1
# Warmup Iteration   1: 7614122.071 ns/op
# Warmup Iteration   2: 2241361.122 ns/op
# Warmup Iteration   3: 2030930.961 ns/op
# Warmup Iteration   4: 2004228.990 ns/op
Iteration   1: 2098927.362 ns/op
Iteration   2: 2061995.228 ns/op
Iteration   3: 2056115.004 ns/op
Iteration   4: 1973859.643 ns/op
Iteration   5: 1946342.619 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  2027447.971 ±(99.9%) 247869.049 ns/op [Average]
  (min, avg, max) = (1946342.619, 2027447.971, 2098927.362), stdev = 64370.805
  CI (99.9%): [1779578.922, 2275317.021] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 56.86% complete, ETA 00:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 13349.760 ns/op
# Warmup Iteration   2: 5961.679 ns/op
# Warmup Iteration   3: 5497.733 ns/op
# Warmup Iteration   4: 5235.818 ns/op
Iteration   1: 5375.025 ns/op
Iteration   2: 5244.582 ns/op
Iteration   3: 5236.872 ns/op
Iteration   4: 5258.091 ns/op
Iteration   5: 5271.035 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  5277.121 ±(99.9%) 216.658 ns/op [Average]
  (min, avg, max) = (5236.872, 5277.121, 5375.025), stdev = 56.265
  CI (99.9%): [5060.463, 5493.779] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 57.06% complete, ETA 00:41:56
# Fork: 1 of 1
# Warmup Iteration   1: 21996.712 ns/op
# Warmup Iteration   2: 10443.039 ns/op
# Warmup Iteration   3: 10234.151 ns/op
# Warmup Iteration   4: 9588.152 ns/op
Iteration   1: 9543.403 ns/op
Iteration   2: 9556.614 ns/op
Iteration   3: 10246.991 ns/op
Iteration   4: 9534.056 ns/op
Iteration   5: 9522.126 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  9680.638 ±(99.9%) 1220.089 ns/op [Average]
  (min, avg, max) = (9522.126, 9680.638, 10246.991), stdev = 316.853
  CI (99.9%): [8460.549, 10900.727] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 57.25% complete, ETA 00:41:45
# Fork: 1 of 1
# Warmup Iteration   1: 46891.843 ns/op
# Warmup Iteration   2: 19417.634 ns/op
# Warmup Iteration   3: 18783.523 ns/op
# Warmup Iteration   4: 17867.932 ns/op
Iteration   1: 18964.532 ns/op
Iteration   2: 17660.376 ns/op
Iteration   3: 17421.124 ns/op
Iteration   4: 17485.447 ns/op
Iteration   5: 17368.463 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  17779.988 ±(99.9%) 2584.769 ns/op [Average]
  (min, avg, max) = (17368.463, 17779.988, 18964.532), stdev = 671.256
  CI (99.9%): [15195.219, 20364.758] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 57.45% complete, ETA 00:41:34
# Fork: 1 of 1
# Warmup Iteration   1: 64891.445 ns/op
# Warmup Iteration   2: 33112.339 ns/op
# Warmup Iteration   3: 32784.333 ns/op
# Warmup Iteration   4: 31642.635 ns/op
Iteration   1: 31468.715 ns/op
Iteration   2: 31080.768 ns/op
Iteration   3: 30784.931 ns/op
Iteration   4: 30789.098 ns/op
Iteration   5: 30768.421 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  30978.387 ±(99.9%) 1168.346 ns/op [Average]
  (min, avg, max) = (30768.421, 30978.387, 31468.715), stdev = 303.416
  CI (99.9%): [29810.040, 32146.733] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 57.65% complete, ETA 00:41:22
# Fork: 1 of 1
# Warmup Iteration   1: 788787.537 ns/op
# Warmup Iteration   2: 329636.739 ns/op
# Warmup Iteration   3: 305519.175 ns/op
# Warmup Iteration   4: 301304.166 ns/op
Iteration   1: 292884.226 ns/op
Iteration   2: 294594.656 ns/op
Iteration   3: 290392.145 ns/op
Iteration   4: 290335.040 ns/op
Iteration   5: 290765.818 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  291794.377 ±(99.9%) 7250.873 ns/op [Average]
  (min, avg, max) = (290335.040, 291794.377, 294594.656), stdev = 1883.029
  CI (99.9%): [284543.504, 299045.250] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 57.84% complete, ETA 00:41:11
# Fork: 1 of 1
# Warmup Iteration   1: 27527.925 ns/op
# Warmup Iteration   2: 12820.692 ns/op
# Warmup Iteration   3: 12352.042 ns/op
# Warmup Iteration   4: 12464.844 ns/op
Iteration   1: 12425.584 ns/op
Iteration   2: 12331.269 ns/op
Iteration   3: 12157.176 ns/op
Iteration   4: 12526.629 ns/op
Iteration   5: 12219.379 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  12332.007 ±(99.9%) 577.230 ns/op [Average]
  (min, avg, max) = (12157.176, 12332.007, 12526.629), stdev = 149.905
  CI (99.9%): [11754.777, 12909.237] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 58.04% complete, ETA 00:41:00
# Fork: 1 of 1
# Warmup Iteration   1: 38938.341 ns/op
# Warmup Iteration   2: 22629.453 ns/op
# Warmup Iteration   3: 22128.988 ns/op
# Warmup Iteration   4: 21709.920 ns/op
Iteration   1: 21697.296 ns/op
Iteration   2: 21416.027 ns/op
Iteration   3: 21396.414 ns/op
Iteration   4: 21343.444 ns/op
Iteration   5: 21334.251 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  21437.486 ±(99.9%) 574.862 ns/op [Average]
  (min, avg, max) = (21334.251, 21437.486, 21697.296), stdev = 149.290
  CI (99.9%): [20862.624, 22012.348] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 58.24% complete, ETA 00:40:49
# Fork: 1 of 1
# Warmup Iteration   1: 64971.140 ns/op
# Warmup Iteration   2: 35985.627 ns/op
# Warmup Iteration   3: 35484.858 ns/op
# Warmup Iteration   4: 34989.692 ns/op
Iteration   1: 34926.969 ns/op
Iteration   2: 35201.796 ns/op
Iteration   3: 35121.707 ns/op
Iteration   4: 35103.498 ns/op
Iteration   5: 34981.631 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  35067.120 ±(99.9%) 427.888 ns/op [Average]
  (min, avg, max) = (34926.969, 35067.120, 35201.796), stdev = 111.121
  CI (99.9%): [34639.232, 35495.008] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 58.43% complete, ETA 00:40:38
# Fork: 1 of 1
# Warmup Iteration   1: 144942.929 ns/op
# Warmup Iteration   2: 66939.534 ns/op
# Warmup Iteration   3: 66249.364 ns/op
# Warmup Iteration   4: 73524.896 ns/op
Iteration   1: 88836.789 ns/op
Iteration   2: 91146.108 ns/op
Iteration   3: 102928.054 ns/op
Iteration   4: 102756.338 ns/op
Iteration   5: 103491.144 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  97831.686 ±(99.9%) 27758.026 ns/op [Average]
  (min, avg, max) = (88836.789, 97831.686, 103491.144), stdev = 7208.671
  CI (99.9%): [70073.660, 125589.713] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 58.63% complete, ETA 00:40:27
# Fork: 1 of 1
# Warmup Iteration   1: 1223584.022 ns/op
# Warmup Iteration   2: 787371.724 ns/op
# Warmup Iteration   3: 775320.186 ns/op
# Warmup Iteration   4: 749372.239 ns/op
Iteration   1: 741932.069 ns/op
Iteration   2: 745877.892 ns/op
Iteration   3: 745463.701 ns/op
Iteration   4: 745596.840 ns/op
Iteration   5: 741023.891 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  743978.879 ±(99.9%) 8896.181 ns/op [Average]
  (min, avg, max) = (741023.891, 743978.879, 745877.892), stdev = 2310.310
  CI (99.9%): [735082.697, 752875.060] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 58.82% complete, ETA 00:40:16
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 59.02% complete, ETA 00:39:58
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 59.22% complete, ETA 00:39:41
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 59.41% complete, ETA 00:39:23
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 59.61% complete, ETA 00:39:06
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 59.80% complete, ETA 00:38:49
# Fork: 1 of 1
# Warmup Iteration   1: 218880.691 ns/op
# Warmup Iteration   2: 66224.006 ns/op
# Warmup Iteration   3: 50440.382 ns/op
# Warmup Iteration   4: 45404.486 ns/op
Iteration   1: 43546.333 ns/op
Iteration   2: 43581.477 ns/op
Iteration   3: 43505.853 ns/op
Iteration   4: 43432.528 ns/op
Iteration   5: 43298.966 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  43473.032 ±(99.9%) 431.160 ns/op [Average]
  (min, avg, max) = (43298.966, 43473.032, 43581.477), stdev = 111.971
  CI (99.9%): [43041.871, 43904.192] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 60.00% complete, ETA 00:38:38
# Fork: 1 of 1
# Warmup Iteration   1: 335160.375 ns/op
# Warmup Iteration   2: 127223.973 ns/op
# Warmup Iteration   3: 87306.164 ns/op
# Warmup Iteration   4: 82765.471 ns/op
Iteration   1: 79837.225 ns/op
Iteration   2: 79681.658 ns/op
Iteration   3: 79076.796 ns/op
Iteration   4: 79319.655 ns/op
Iteration   5: 79194.185 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  79421.904 ±(99.9%) 1249.791 ns/op [Average]
  (min, avg, max) = (79076.796, 79421.904, 79837.225), stdev = 324.567
  CI (99.9%): [78172.112, 80671.695] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 60.20% complete, ETA 00:38:28
# Fork: 1 of 1
# Warmup Iteration   1: 693085.517 ns/op
# Warmup Iteration   2: 280410.038 ns/op
# Warmup Iteration   3: 190326.925 ns/op
# Warmup Iteration   4: 180419.343 ns/op
Iteration   1: 175518.378 ns/op
Iteration   2: 175886.401 ns/op
Iteration   3: 176551.429 ns/op
Iteration   4: 175506.579 ns/op
Iteration   5: 175916.261 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  175875.810 ±(99.9%) 1636.296 ns/op [Average]
  (min, avg, max) = (175506.579, 175875.810, 176551.429), stdev = 424.941
  CI (99.9%): [174239.513, 177512.106] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 60.39% complete, ETA 00:38:17
# Fork: 1 of 1
# Warmup Iteration   1: 1966718.652 ns/op
# Warmup Iteration   2: 554794.000 ns/op
# Warmup Iteration   3: 446699.361 ns/op
# Warmup Iteration   4: 427374.039 ns/op
Iteration   1: 410112.536 ns/op
Iteration   2: 405127.442 ns/op
Iteration   3: 407681.525 ns/op
Iteration   4: 404964.870 ns/op
Iteration   5: 404128.177 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  406402.910 ±(99.9%) 9484.115 ns/op [Average]
  (min, avg, max) = (404128.177, 406402.910, 410112.536), stdev = 2462.994
  CI (99.9%): [396918.795, 415887.025] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 60.59% complete, ETA 00:38:06
# Fork: 1 of 1
# Warmup Iteration   1: 12119954.597 ns/op
# Warmup Iteration   2: 4064987.680 ns/op
# Warmup Iteration   3: 3550583.700 ns/op
# Warmup Iteration   4: 3395159.910 ns/op
Iteration   1: 3431911.066 ns/op
Iteration   2: 3301810.795 ns/op
Iteration   3: 3327582.298 ns/op
Iteration   4: 3334704.043 ns/op
Iteration   5: 3302356.201 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  3339672.880 ±(99.9%) 206511.100 ns/op [Average]
  (min, avg, max) = (3301810.795, 3339672.880, 3431911.066), stdev = 53630.277
  CI (99.9%): [3133161.780, 3546183.980] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 60.78% complete, ETA 00:37:56
# Fork: 1 of 1
# Warmup Iteration   1: 179204.668 ns/op
# Warmup Iteration   2: 40018.226 ns/op
# Warmup Iteration   3: 34766.532 ns/op
# Warmup Iteration   4: 34060.358 ns/op
Iteration   1: 34044.820 ns/op
Iteration   2: 33463.777 ns/op
Iteration   3: 33707.299 ns/op
Iteration   4: 33540.622 ns/op
Iteration   5: 33294.904 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  33610.284 ±(99.9%) 1095.937 ns/op [Average]
  (min, avg, max) = (33294.904, 33610.284, 34044.820), stdev = 284.611
  CI (99.9%): [32514.347, 34706.222] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 60.98% complete, ETA 00:37:45
# Fork: 1 of 1
# Warmup Iteration   1: 157116.663 ns/op
# Warmup Iteration   2: 67365.231 ns/op
# Warmup Iteration   3: 68737.784 ns/op
# Warmup Iteration   4: 65105.137 ns/op
Iteration   1: 64035.554 ns/op
Iteration   2: 64416.393 ns/op
Iteration   3: 63980.349 ns/op
Iteration   4: 64209.590 ns/op
Iteration   5: 66385.535 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  64605.484 ±(99.9%) 3887.379 ns/op [Average]
  (min, avg, max) = (63980.349, 64605.484, 66385.535), stdev = 1009.540
  CI (99.9%): [60718.106, 68492.863] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 61.18% complete, ETA 00:37:34
# Fork: 1 of 1
# Warmup Iteration   1: 419926.456 ns/op
# Warmup Iteration   2: 150832.794 ns/op
# Warmup Iteration   3: 143003.168 ns/op
# Warmup Iteration   4: 142342.768 ns/op
Iteration   1: 141776.283 ns/op
Iteration   2: 140624.193 ns/op
Iteration   3: 140296.106 ns/op
Iteration   4: 139581.148 ns/op
Iteration   5: 141106.642 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  140676.875 ±(99.9%) 3188.008 ns/op [Average]
  (min, avg, max) = (139581.148, 140676.875, 141776.283), stdev = 827.915
  CI (99.9%): [137488.867, 143864.882] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 61.37% complete, ETA 00:37:23
# Fork: 1 of 1
# Warmup Iteration   1: 1219606.472 ns/op
# Warmup Iteration   2: 367988.830 ns/op
# Warmup Iteration   3: 332632.510 ns/op
# Warmup Iteration   4: 318276.022 ns/op
Iteration   1: 314512.438 ns/op
Iteration   2: 316736.502 ns/op
Iteration   3: 313862.052 ns/op
Iteration   4: 313531.809 ns/op
Iteration   5: 316163.674 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  314961.295 ±(99.9%) 5462.730 ns/op [Average]
  (min, avg, max) = (313531.809, 314961.295, 316736.502), stdev = 1418.654
  CI (99.9%): [309498.565, 320424.025] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 61.57% complete, ETA 00:37:12
# Fork: 1 of 1
# Warmup Iteration   1: 5965220.252 ns/op
# Warmup Iteration   2: 2630481.066 ns/op
# Warmup Iteration   3: 2556217.379 ns/op
# Warmup Iteration   4: 2515375.853 ns/op
Iteration   1: 2488577.319 ns/op
Iteration   2: 2508504.159 ns/op
Iteration   3: 2471543.713 ns/op
Iteration   4: 2480198.934 ns/op
Iteration   5: 2446847.406 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  2479134.306 ±(99.9%) 87235.427 ns/op [Average]
  (min, avg, max) = (2446847.406, 2479134.306, 2508504.159), stdev = 22654.763
  CI (99.9%): [2391898.879, 2566369.733] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _1_K)

# Run progress: 61.76% complete, ETA 00:37:01
# Fork: 1 of 1
# Warmup Iteration   1: 150859.835 ns/op
# Warmup Iteration   2: 34459.081 ns/op
# Warmup Iteration   3: 32772.163 ns/op
# Warmup Iteration   4: 33007.604 ns/op
Iteration   1: 31772.786 ns/op
Iteration   2: 31437.214 ns/op
Iteration   3: 31488.467 ns/op
Iteration   4: 31550.140 ns/op
Iteration   5: 31972.684 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  31644.258 ±(99.9%) 861.845 ns/op [Average]
  (min, avg, max) = (31437.214, 31644.258, 31972.684), stdev = 223.819
  CI (99.9%): [30782.413, 32506.104] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _2_K)

# Run progress: 61.96% complete, ETA 00:36:50
# Fork: 1 of 1
# Warmup Iteration   1: 214553.524 ns/op
# Warmup Iteration   2: 66577.028 ns/op
# Warmup Iteration   3: 61783.819 ns/op
# Warmup Iteration   4: 61203.948 ns/op
Iteration   1: 62105.596 ns/op
Iteration   2: 60097.694 ns/op
Iteration   3: 60424.393 ns/op
Iteration   4: 60224.666 ns/op
Iteration   5: 60042.808 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  60579.032 ±(99.9%) 3334.261 ns/op [Average]
  (min, avg, max) = (60042.808, 60579.032, 62105.596), stdev = 865.897
  CI (99.9%): [57244.771, 63913.292] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _4_K)

# Run progress: 62.16% complete, ETA 00:36:39
# Fork: 1 of 1
# Warmup Iteration   1: 369719.816 ns/op
# Warmup Iteration   2: 148336.439 ns/op
# Warmup Iteration   3: 148680.183 ns/op
# Warmup Iteration   4: 134482.503 ns/op
Iteration   1: 135191.820 ns/op
Iteration   2: 134627.074 ns/op
Iteration   3: 133868.138 ns/op
Iteration   4: 137431.539 ns/op
Iteration   5: 138501.115 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  135923.937 ±(99.9%) 7545.412 ns/op [Average]
  (min, avg, max) = (133868.138, 135923.937, 138501.115), stdev = 1959.519
  CI (99.9%): [128378.526, 143469.349] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _8_K)

# Run progress: 62.35% complete, ETA 00:36:28
# Fork: 1 of 1
# Warmup Iteration   1: 1300944.978 ns/op
# Warmup Iteration   2: 341983.798 ns/op
# Warmup Iteration   3: 335438.388 ns/op
# Warmup Iteration   4: 319094.515 ns/op
Iteration   1: 315174.147 ns/op
Iteration   2: 313296.460 ns/op
Iteration   3: 313435.787 ns/op
Iteration   4: 310231.359 ns/op
Iteration   5: 323596.902 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  315146.931 ±(99.9%) 19436.967 ns/op [Average]
  (min, avg, max) = (310231.359, 315146.931, 323596.902), stdev = 5047.719
  CI (99.9%): [295709.964, 334583.899] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _64_K)

# Run progress: 62.55% complete, ETA 00:36:16
# Fork: 1 of 1
# Warmup Iteration   1: 5402389.185 ns/op
# Warmup Iteration   2: 2681637.144 ns/op
# Warmup Iteration   3: 2461085.456 ns/op
# Warmup Iteration   4: 2444979.664 ns/op
Iteration   1: 2396808.298 ns/op
Iteration   2: 2393168.280 ns/op
Iteration   3: 2410178.816 ns/op
Iteration   4: 2388250.942 ns/op
Iteration   5: 2388829.901 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  2395447.247 ±(99.9%) 34421.900 ns/op [Average]
  (min, avg, max) = (2388250.942, 2395447.247, 2410178.816), stdev = 8939.258
  CI (99.9%): [2361025.347, 2429869.147] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 62.75% complete, ETA 00:36:05
# Fork: 1 of 1
# Warmup Iteration   1: 48513.579 ns/op
# Warmup Iteration   2: 26691.138 ns/op
# Warmup Iteration   3: 24385.425 ns/op
# Warmup Iteration   4: 23874.094 ns/op
Iteration   1: 23795.957 ns/op
Iteration   2: 23371.984 ns/op
Iteration   3: 23263.141 ns/op
Iteration   4: 23325.334 ns/op
Iteration   5: 23214.813 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  23394.246 ±(99.9%) 894.811 ns/op [Average]
  (min, avg, max) = (23214.813, 23394.246, 23795.957), stdev = 232.379
  CI (99.9%): [22499.435, 24289.056] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 62.94% complete, ETA 00:35:54
# Fork: 1 of 1
# Warmup Iteration   1: 97155.128 ns/op
# Warmup Iteration   2: 48855.970 ns/op
# Warmup Iteration   3: 45558.321 ns/op
# Warmup Iteration   4: 44882.557 ns/op
Iteration   1: 44133.232 ns/op
Iteration   2: 43785.050 ns/op
Iteration   3: 43529.878 ns/op
Iteration   4: 43475.707 ns/op
Iteration   5: 43642.455 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  43713.264 ±(99.9%) 1012.588 ns/op [Average]
  (min, avg, max) = (43475.707, 43713.264, 44133.232), stdev = 262.966
  CI (99.9%): [42700.677, 44725.852] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 63.14% complete, ETA 00:35:43
# Fork: 1 of 1
# Warmup Iteration   1: 311419.419 ns/op
# Warmup Iteration   2: 114584.355 ns/op
# Warmup Iteration   3: 103902.953 ns/op
# Warmup Iteration   4: 100387.536 ns/op
Iteration   1: 98160.940 ns/op
Iteration   2: 98222.716 ns/op
Iteration   3: 96667.249 ns/op
Iteration   4: 97164.620 ns/op
Iteration   5: 97746.123 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  97592.330 ±(99.9%) 2570.912 ns/op [Average]
  (min, avg, max) = (96667.249, 97592.330, 98222.716), stdev = 667.658
  CI (99.9%): [95021.418, 100163.241] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 63.33% complete, ETA 00:35:32
# Fork: 1 of 1
# Warmup Iteration   1: 585186.542 ns/op
# Warmup Iteration   2: 251561.609 ns/op
# Warmup Iteration   3: 238754.272 ns/op
# Warmup Iteration   4: 232739.283 ns/op
Iteration   1: 227638.860 ns/op
Iteration   2: 241888.290 ns/op
Iteration   3: 225392.189 ns/op
Iteration   4: 225447.822 ns/op
Iteration   5: 225194.296 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  229112.291 ±(99.9%) 27768.411 ns/op [Average]
  (min, avg, max) = (225194.296, 229112.291, 241888.290), stdev = 7211.368
  CI (99.9%): [201343.880, 256880.703] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 63.53% complete, ETA 00:35:21
# Fork: 1 of 1
# Warmup Iteration   1: 3642344.305 ns/op
# Warmup Iteration   2: 2071247.821 ns/op
# Warmup Iteration   3: 1979731.517 ns/op
# Warmup Iteration   4: 1970682.811 ns/op
Iteration   1: 1929382.100 ns/op
Iteration   2: 1963304.262 ns/op
Iteration   3: 1920452.517 ns/op
Iteration   4: 1927411.444 ns/op
Iteration   5: 1919354.679 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  1931981.001 ±(99.9%) 69448.148 ns/op [Average]
  (min, avg, max) = (1919354.679, 1931981.001, 1963304.262), stdev = 18035.464
  CI (99.9%): [1862532.852, 2001429.149] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CAP_N_PROTO, inputType = _1_K)

# Run progress: 63.73% complete, ETA 00:35:10
# Fork: 1 of 1
# Warmup Iteration   1: 94538.401 ns/op
# Warmup Iteration   2: 24312.772 ns/op
# Warmup Iteration   3: 19127.693 ns/op
# Warmup Iteration   4: 18641.541 ns/op
Iteration   1: 18736.353 ns/op
Iteration   2: 18716.488 ns/op
Iteration   3: 18667.187 ns/op
Iteration   4: 18763.874 ns/op
Iteration   5: 18712.522 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  18719.285 ±(99.9%) 136.782 ns/op [Average]
  (min, avg, max) = (18667.187, 18719.285, 18763.874), stdev = 35.522
  CI (99.9%): [18582.503, 18856.067] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CAP_N_PROTO, inputType = _2_K)

# Run progress: 63.92% complete, ETA 00:34:59
# Fork: 1 of 1
# Warmup Iteration   1: 200268.876 ns/op
# Warmup Iteration   2: 53785.523 ns/op
# Warmup Iteration   3: 36641.556 ns/op
# Warmup Iteration   4: 35177.436 ns/op
Iteration   1: 34061.209 ns/op
Iteration   2: 34015.819 ns/op
Iteration   3: 34050.501 ns/op
Iteration   4: 34078.292 ns/op
Iteration   5: 34112.609 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  34063.686 ±(99.9%) 137.199 ns/op [Average]
  (min, avg, max) = (34015.819, 34063.686, 34112.609), stdev = 35.630
  CI (99.9%): [33926.487, 34200.885] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CAP_N_PROTO, inputType = _4_K)

# Run progress: 64.12% complete, ETA 00:34:48
# Fork: 1 of 1
# Warmup Iteration   1: 307540.699 ns/op
# Warmup Iteration   2: 85326.531 ns/op
# Warmup Iteration   3: 67590.446 ns/op
# Warmup Iteration   4: 63732.881 ns/op
Iteration   1: 63643.861 ns/op
Iteration   2: 62386.618 ns/op
Iteration   3: 62276.217 ns/op
Iteration   4: 62466.233 ns/op
Iteration   5: 62265.541 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  62607.694 ±(99.9%) 2253.098 ns/op [Average]
  (min, avg, max) = (62265.541, 62607.694, 63643.861), stdev = 585.122
  CI (99.9%): [60354.596, 64860.792] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CAP_N_PROTO, inputType = _8_K)

# Run progress: 64.31% complete, ETA 00:34:37
# Fork: 1 of 1
# Warmup Iteration   1: 1136366.768 ns/op
# Warmup Iteration   2: 172734.674 ns/op
# Warmup Iteration   3: 137495.929 ns/op
# Warmup Iteration   4: 128393.278 ns/op
Iteration   1: 129790.918 ns/op
Iteration   2: 128183.681 ns/op
Iteration   3: 127982.023 ns/op
Iteration   4: 127207.077 ns/op
Iteration   5: 126508.212 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  127934.382 ±(99.9%) 4745.081 ns/op [Average]
  (min, avg, max) = (126508.212, 127934.382, 129790.918), stdev = 1232.282
  CI (99.9%): [123189.301, 132679.463] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CAP_N_PROTO, inputType = _64_K)

# Run progress: 64.51% complete, ETA 00:34:26
# Fork: 1 of 1
# Warmup Iteration   1: 4721859.715 ns/op
# Warmup Iteration   2: 1532559.666 ns/op
# Warmup Iteration   3: 1353122.725 ns/op
# Warmup Iteration   4: 1362072.684 ns/op
Iteration   1: 1344830.881 ns/op
Iteration   2: 1336920.553 ns/op
Iteration   3: 1297235.412 ns/op
Iteration   4: 1299330.533 ns/op
Iteration   5: 1292073.181 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  1314078.112 ±(99.9%) 95354.854 ns/op [Average]
  (min, avg, max) = (1292073.181, 1314078.112, 1344830.881), stdev = 24763.353
  CI (99.9%): [1218723.258, 1409432.966] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _1_K)

# Run progress: 64.71% complete, ETA 00:34:15
# Fork: 1 of 1
# Warmup Iteration   1: 127333.451 ns/op
# Warmup Iteration   2: 29056.822 ns/op
# Warmup Iteration   3: 19950.628 ns/op
# Warmup Iteration   4: 19024.683 ns/op
Iteration   1: 18982.334 ns/op
Iteration   2: 18998.567 ns/op
Iteration   3: 18930.688 ns/op
Iteration   4: 19006.015 ns/op
Iteration   5: 18977.215 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  18978.964 ±(99.9%) 113.267 ns/op [Average]
  (min, avg, max) = (18930.688, 18978.964, 19006.015), stdev = 29.415
  CI (99.9%): [18865.697, 19092.231] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _2_K)

# Run progress: 64.90% complete, ETA 00:34:04
# Fork: 1 of 1
# Warmup Iteration   1: 146362.329 ns/op
# Warmup Iteration   2: 47310.520 ns/op
# Warmup Iteration   3: 36805.669 ns/op
# Warmup Iteration   4: 33925.546 ns/op
Iteration   1: 33911.866 ns/op
Iteration   2: 33990.433 ns/op
Iteration   3: 33921.555 ns/op
Iteration   4: 33938.569 ns/op
Iteration   5: 33899.787 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  33932.442 ±(99.9%) 136.259 ns/op [Average]
  (min, avg, max) = (33899.787, 33932.442, 33990.433), stdev = 35.386
  CI (99.9%): [33796.183, 34068.701] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _4_K)

# Run progress: 65.10% complete, ETA 00:33:52
# Fork: 1 of 1
# Warmup Iteration   1: 289293.062 ns/op
# Warmup Iteration   2: 126783.390 ns/op
# Warmup Iteration   3: 78316.798 ns/op
# Warmup Iteration   4: 66692.446 ns/op
Iteration   1: 66104.422 ns/op
Iteration   2: 65416.394 ns/op
Iteration   3: 63577.456 ns/op
Iteration   4: 63537.556 ns/op
Iteration   5: 63384.799 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  64404.125 ±(99.9%) 4866.553 ns/op [Average]
  (min, avg, max) = (63384.799, 64404.125, 66104.422), stdev = 1263.828
  CI (99.9%): [59537.572, 69270.678] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _8_K)

# Run progress: 65.29% complete, ETA 00:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 491933.809 ns/op
# Warmup Iteration   2: 183888.841 ns/op
# Warmup Iteration   3: 134490.377 ns/op
# Warmup Iteration   4: 129361.454 ns/op
Iteration   1: 127993.265 ns/op
Iteration   2: 128450.148 ns/op
Iteration   3: 132166.770 ns/op
Iteration   4: 126849.835 ns/op
Iteration   5: 127538.014 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  128599.606 ±(99.9%) 8008.813 ns/op [Average]
  (min, avg, max) = (126849.835, 128599.606, 132166.770), stdev = 2079.863
  CI (99.9%): [120590.793, 136608.419] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _64_K)

# Run progress: 65.49% complete, ETA 00:33:30
# Fork: 1 of 1
# Warmup Iteration   1: 3586757.851 ns/op
# Warmup Iteration   2: 1443627.483 ns/op
# Warmup Iteration   3: 1331464.683 ns/op
# Warmup Iteration   4: 1296832.317 ns/op
Iteration   1: 1308453.478 ns/op
Iteration   2: 1285362.689 ns/op
Iteration   3: 1271262.918 ns/op
Iteration   4: 1255972.614 ns/op
Iteration   5: 1303714.784 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  1284953.297 ±(99.9%) 84620.604 ns/op [Average]
  (min, avg, max) = (1255972.614, 1284953.297, 1308453.478), stdev = 21975.702
  CI (99.9%): [1200332.693, 1369573.901] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 65.69% complete, ETA 00:33:19
# Fork: 1 of 1
# Warmup Iteration   1: 21551.541 ns/op
# Warmup Iteration   2: 9209.979 ns/op
# Warmup Iteration   3: 9059.874 ns/op
# Warmup Iteration   4: 8882.421 ns/op
Iteration   1: 8998.412 ns/op
Iteration   2: 8913.400 ns/op
Iteration   3: 8908.458 ns/op
Iteration   4: 8898.576 ns/op
Iteration   5: 8918.755 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8927.520 ±(99.9%) 155.260 ns/op [Average]
  (min, avg, max) = (8898.576, 8927.520, 8998.412), stdev = 40.321
  CI (99.9%): [8772.260, 9082.780] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 65.88% complete, ETA 00:33:08
# Fork: 1 of 1
# Warmup Iteration   1: 35963.277 ns/op
# Warmup Iteration   2: 17195.637 ns/op
# Warmup Iteration   3: 16736.148 ns/op
# Warmup Iteration   4: 17232.005 ns/op
Iteration   1: 16408.966 ns/op
Iteration   2: 16370.828 ns/op
Iteration   3: 16495.162 ns/op
Iteration   4: 16315.351 ns/op
Iteration   5: 16350.461 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  16388.154 ±(99.9%) 264.724 ns/op [Average]
  (min, avg, max) = (16315.351, 16388.154, 16495.162), stdev = 68.748
  CI (99.9%): [16123.429, 16652.878] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 66.08% complete, ETA 00:32:57
# Fork: 1 of 1
# Warmup Iteration   1: 88609.188 ns/op
# Warmup Iteration   2: 31061.508 ns/op
# Warmup Iteration   3: 30673.050 ns/op
# Warmup Iteration   4: 30350.214 ns/op
Iteration   1: 29944.303 ns/op
Iteration   2: 29992.008 ns/op
Iteration   3: 29984.184 ns/op
Iteration   4: 29810.449 ns/op
Iteration   5: 29869.565 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  29920.102 ±(99.9%) 300.994 ns/op [Average]
  (min, avg, max) = (29810.449, 29920.102, 29992.008), stdev = 78.167
  CI (99.9%): [29619.108, 30221.096] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 66.27% complete, ETA 00:32:45
# Fork: 1 of 1
# Warmup Iteration   1: 247543.308 ns/op
# Warmup Iteration   2: 68746.391 ns/op
# Warmup Iteration   3: 67405.132 ns/op
# Warmup Iteration   4: 66626.324 ns/op
Iteration   1: 66724.417 ns/op
Iteration   2: 65973.753 ns/op
Iteration   3: 67585.563 ns/op
Iteration   4: 65668.038 ns/op
Iteration   5: 67675.825 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  66725.519 ±(99.9%) 3511.365 ns/op [Average]
  (min, avg, max) = (65668.038, 66725.519, 67675.825), stdev = 911.890
  CI (99.9%): [63214.154, 70236.885] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 66.47% complete, ETA 00:32:34
# Fork: 1 of 1
# Warmup Iteration   1: 866167.424 ns/op
# Warmup Iteration   2: 514924.203 ns/op
# Warmup Iteration   3: 480921.906 ns/op
# Warmup Iteration   4: 483679.519 ns/op
Iteration   1: 478618.261 ns/op
Iteration   2: 483173.293 ns/op
Iteration   3: 477151.864 ns/op
Iteration   4: 475821.707 ns/op
Iteration   5: 476309.982 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  478215.021 ±(99.9%) 11428.452 ns/op [Average]
  (min, avg, max) = (475821.707, 478215.021, 483173.293), stdev = 2967.933
  CI (99.9%): [466786.569, 489643.473] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 66.67% complete, ETA 00:32:23
# Fork: 1 of 1
# Warmup Iteration   1: 20319.329 ns/op
# Warmup Iteration   2: 8220.428 ns/op
# Warmup Iteration   3: 7996.654 ns/op
# Warmup Iteration   4: 7975.590 ns/op
Iteration   1: 8280.472 ns/op
Iteration   2: 8150.329 ns/op
Iteration   3: 7863.052 ns/op
Iteration   4: 7883.300 ns/op
Iteration   5: 7881.691 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8011.769 ±(99.9%) 738.033 ns/op [Average]
  (min, avg, max) = (7863.052, 8011.769, 8280.472), stdev = 191.665
  CI (99.9%): [7273.736, 8749.801] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 66.86% complete, ETA 00:32:12
# Fork: 1 of 1
# Warmup Iteration   1: 35328.092 ns/op
# Warmup Iteration   2: 13464.784 ns/op
# Warmup Iteration   3: 13201.746 ns/op
# Warmup Iteration   4: 13360.581 ns/op
Iteration   1: 13016.509 ns/op
Iteration   2: 12826.136 ns/op
Iteration   3: 12824.139 ns/op
Iteration   4: 12802.612 ns/op
Iteration   5: 13546.461 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  13003.172 ±(99.9%) 1216.097 ns/op [Average]
  (min, avg, max) = (12802.612, 13003.172, 13546.461), stdev = 315.816
  CI (99.9%): [11787.075, 14219.268] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 67.06% complete, ETA 00:32:01
# Fork: 1 of 1
# Warmup Iteration   1: 58422.124 ns/op
# Warmup Iteration   2: 26963.092 ns/op
# Warmup Iteration   3: 25802.216 ns/op
# Warmup Iteration   4: 25375.475 ns/op
Iteration   1: 25644.746 ns/op
Iteration   2: 25354.605 ns/op
Iteration   3: 25212.840 ns/op
Iteration   4: 25500.665 ns/op
Iteration   5: 25256.527 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  25393.877 ±(99.9%) 687.533 ns/op [Average]
  (min, avg, max) = (25212.840, 25393.877, 25644.746), stdev = 178.550
  CI (99.9%): [24706.344, 26081.409] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 67.25% complete, ETA 00:31:50
# Fork: 1 of 1
# Warmup Iteration   1: 104475.278 ns/op
# Warmup Iteration   2: 53615.456 ns/op
# Warmup Iteration   3: 53223.068 ns/op
# Warmup Iteration   4: 51976.308 ns/op
Iteration   1: 52460.639 ns/op
Iteration   2: 51651.202 ns/op
Iteration   3: 51651.436 ns/op
Iteration   4: 51501.435 ns/op
Iteration   5: 51594.065 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  51771.755 ±(99.9%) 1501.525 ns/op [Average]
  (min, avg, max) = (51501.435, 51771.755, 52460.639), stdev = 389.941
  CI (99.9%): [50270.230, 53273.280] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 67.45% complete, ETA 00:31:38
# Fork: 1 of 1
# Warmup Iteration   1: 798535.566 ns/op
# Warmup Iteration   2: 439075.792 ns/op
# Warmup Iteration   3: 411513.524 ns/op
# Warmup Iteration   4: 414009.898 ns/op
Iteration   1: 406269.423 ns/op
Iteration   2: 408102.426 ns/op
Iteration   3: 406837.399 ns/op
Iteration   4: 404591.011 ns/op
Iteration   5: 408152.191 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  406790.490 ±(99.9%) 5674.583 ns/op [Average]
  (min, avg, max) = (404591.011, 406790.490, 408152.191), stdev = 1473.671
  CI (99.9%): [401115.907, 412465.073] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 67.65% complete, ETA 00:31:27
# Fork: 1 of 1
# Warmup Iteration   1: 14976.171 ns/op
# Warmup Iteration   2: 8384.874 ns/op
# Warmup Iteration   3: 8197.578 ns/op
# Warmup Iteration   4: 8186.429 ns/op
Iteration   1: 8069.050 ns/op
Iteration   2: 8136.739 ns/op
Iteration   3: 8369.920 ns/op
Iteration   4: 8307.975 ns/op
Iteration   5: 8289.286 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8234.594 ±(99.9%) 485.814 ns/op [Average]
  (min, avg, max) = (8069.050, 8234.594, 8369.920), stdev = 126.164
  CI (99.9%): [7748.780, 8720.408] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 67.84% complete, ETA 00:31:16
# Fork: 1 of 1
# Warmup Iteration   1: 33721.482 ns/op
# Warmup Iteration   2: 15185.033 ns/op
# Warmup Iteration   3: 14963.106 ns/op
# Warmup Iteration   4: 14519.168 ns/op
Iteration   1: 14633.137 ns/op
Iteration   2: 14461.923 ns/op
Iteration   3: 14452.438 ns/op
Iteration   4: 14421.479 ns/op
Iteration   5: 14446.466 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  14483.089 ±(99.9%) 328.090 ns/op [Average]
  (min, avg, max) = (14421.479, 14483.089, 14633.137), stdev = 85.204
  CI (99.9%): [14154.998, 14811.179] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 68.04% complete, ETA 00:31:05
# Fork: 1 of 1
# Warmup Iteration   1: 109383.833 ns/op
# Warmup Iteration   2: 26876.687 ns/op
# Warmup Iteration   3: 26045.772 ns/op
# Warmup Iteration   4: 24931.080 ns/op
Iteration   1: 24577.218 ns/op
Iteration   2: 24750.232 ns/op
Iteration   3: 24935.169 ns/op
Iteration   4: 24535.940 ns/op
Iteration   5: 24631.498 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  24686.012 ±(99.9%) 619.502 ns/op [Average]
  (min, avg, max) = (24535.940, 24686.012, 24935.169), stdev = 160.883
  CI (99.9%): [24066.509, 25305.514] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 68.24% complete, ETA 00:30:54
# Fork: 1 of 1
# Warmup Iteration   1: 138136.796 ns/op
# Warmup Iteration   2: 51283.595 ns/op
# Warmup Iteration   3: 47190.413 ns/op
# Warmup Iteration   4: 47370.321 ns/op
Iteration   1: 47264.804 ns/op
Iteration   2: 46810.657 ns/op
Iteration   3: 46665.245 ns/op
Iteration   4: 46477.573 ns/op
Iteration   5: 46525.768 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  46748.809 ±(99.9%) 1218.252 ns/op [Average]
  (min, avg, max) = (46477.573, 46748.809, 47264.804), stdev = 316.376
  CI (99.9%): [45530.557, 47967.062] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 68.43% complete, ETA 00:30:42
# Fork: 1 of 1
# Warmup Iteration   1: 734730.411 ns/op
# Warmup Iteration   2: 370729.083 ns/op
# Warmup Iteration   3: 368062.298 ns/op
# Warmup Iteration   4: 355911.085 ns/op
Iteration   1: 352294.432 ns/op
Iteration   2: 346168.384 ns/op
Iteration   3: 348349.367 ns/op
Iteration   4: 352011.308 ns/op
Iteration   5: 359215.653 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  351607.829 ±(99.9%) 19129.442 ns/op [Average]
  (min, avg, max) = (346168.384, 351607.829, 359215.653), stdev = 4967.855
  CI (99.9%): [332478.387, 370737.270] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 68.63% complete, ETA 00:30:31
# Fork: 1 of 1
# Warmup Iteration   1: 11482.833 ns/op
# Warmup Iteration   2: 3351.296 ns/op
# Warmup Iteration   3: 3131.330 ns/op
# Warmup Iteration   4: 3007.711 ns/op
Iteration   1: 2987.185 ns/op
Iteration   2: 3114.609 ns/op
Iteration   3: 2969.741 ns/op
Iteration   4: 2971.473 ns/op
Iteration   5: 2977.959 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  3004.193 ±(99.9%) 239.133 ns/op [Average]
  (min, avg, max) = (2969.741, 3004.193, 3114.609), stdev = 62.102
  CI (99.9%): [2765.061, 3243.326] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 68.82% complete, ETA 00:30:20
# Fork: 1 of 1
# Warmup Iteration   1: 22573.764 ns/op
# Warmup Iteration   2: 6645.721 ns/op
# Warmup Iteration   3: 5989.931 ns/op
# Warmup Iteration   4: 5838.110 ns/op
Iteration   1: 5762.966 ns/op
Iteration   2: 5787.297 ns/op
Iteration   3: 6189.229 ns/op
Iteration   4: 5754.544 ns/op
Iteration   5: 5748.182 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  5848.443 ±(99.9%) 735.789 ns/op [Average]
  (min, avg, max) = (5748.182, 5848.443, 6189.229), stdev = 191.082
  CI (99.9%): [5112.654, 6584.232] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 69.02% complete, ETA 00:30:09
# Fork: 1 of 1
# Warmup Iteration   1: 22080.851 ns/op
# Warmup Iteration   2: 10998.168 ns/op
# Warmup Iteration   3: 10535.360 ns/op
# Warmup Iteration   4: 10038.907 ns/op
Iteration   1: 10065.580 ns/op
Iteration   2: 10086.526 ns/op
Iteration   3: 10041.116 ns/op
Iteration   4: 10493.731 ns/op
Iteration   5: 10036.753 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  10144.741 ±(99.9%) 755.180 ns/op [Average]
  (min, avg, max) = (10036.753, 10144.741, 10493.731), stdev = 196.118
  CI (99.9%): [9389.561, 10899.921] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 69.22% complete, ETA 00:29:58
# Fork: 1 of 1
# Warmup Iteration   1: 98174.764 ns/op
# Warmup Iteration   2: 23195.754 ns/op
# Warmup Iteration   3: 22312.095 ns/op
# Warmup Iteration   4: 21398.460 ns/op
Iteration   1: 21448.171 ns/op
Iteration   2: 20917.895 ns/op
Iteration   3: 20919.109 ns/op
Iteration   4: 20976.401 ns/op
Iteration   5: 20956.520 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  21043.619 ±(99.9%) 876.129 ns/op [Average]
  (min, avg, max) = (20917.895, 21043.619, 21448.171), stdev = 227.528
  CI (99.9%): [20167.490, 21919.749] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 69.41% complete, ETA 00:29:46
# Fork: 1 of 1
# Warmup Iteration   1: 973842.523 ns/op
# Warmup Iteration   2: 230387.056 ns/op
# Warmup Iteration   3: 195069.275 ns/op
# Warmup Iteration   4: 189002.165 ns/op
Iteration   1: 183619.555 ns/op
Iteration   2: 183379.389 ns/op
Iteration   3: 183499.782 ns/op
Iteration   4: 182807.495 ns/op
Iteration   5: 183346.678 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  183330.580 ±(99.9%) 1199.887 ns/op [Average]
  (min, avg, max) = (182807.495, 183330.580, 183619.555), stdev = 311.607
  CI (99.9%): [182130.693, 184530.467] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 69.61% complete, ETA 00:29:35
# Fork: 1 of 1
# Warmup Iteration   1: 10196.582 ns/op
# Warmup Iteration   2: 4898.455 ns/op
# Warmup Iteration   3: 4681.253 ns/op
# Warmup Iteration   4: 4605.277 ns/op
Iteration   1: 4532.917 ns/op
Iteration   2: 4524.062 ns/op
Iteration   3: 4528.326 ns/op
Iteration   4: 4512.731 ns/op
Iteration   5: 4502.654 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  4520.138 ±(99.9%) 47.407 ns/op [Average]
  (min, avg, max) = (4502.654, 4520.138, 4532.917), stdev = 12.311
  CI (99.9%): [4472.731, 4567.545] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 69.80% complete, ETA 00:29:24
# Fork: 1 of 1
# Warmup Iteration   1: 21008.667 ns/op
# Warmup Iteration   2: 9255.219 ns/op
# Warmup Iteration   3: 8864.026 ns/op
# Warmup Iteration   4: 8861.749 ns/op
Iteration   1: 8905.200 ns/op
Iteration   2: 8563.638 ns/op
Iteration   3: 8577.927 ns/op
Iteration   4: 8589.100 ns/op
Iteration   5: 8598.432 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8646.860 ±(99.9%) 558.339 ns/op [Average]
  (min, avg, max) = (8563.638, 8646.860, 8905.200), stdev = 144.999
  CI (99.9%): [8088.520, 9205.199] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 70.00% complete, ETA 00:29:13
# Fork: 1 of 1
# Warmup Iteration   1: 31638.935 ns/op
# Warmup Iteration   2: 16506.544 ns/op
# Warmup Iteration   3: 16001.515 ns/op
# Warmup Iteration   4: 15887.007 ns/op
Iteration   1: 15188.260 ns/op
Iteration   2: 15193.398 ns/op
Iteration   3: 15179.219 ns/op
Iteration   4: 15174.386 ns/op
Iteration   5: 15118.954 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  15170.843 ±(99.9%) 115.315 ns/op [Average]
  (min, avg, max) = (15118.954, 15170.843, 15193.398), stdev = 29.947
  CI (99.9%): [15055.528, 15286.159] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 70.20% complete, ETA 00:29:01
# Fork: 1 of 1
# Warmup Iteration   1: 66077.722 ns/op
# Warmup Iteration   2: 31695.138 ns/op
# Warmup Iteration   3: 30503.052 ns/op
# Warmup Iteration   4: 30005.565 ns/op
Iteration   1: 29604.623 ns/op
Iteration   2: 29219.591 ns/op
Iteration   3: 29314.930 ns/op
Iteration   4: 29181.803 ns/op
Iteration   5: 29161.581 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  29296.506 ±(99.9%) 700.968 ns/op [Average]
  (min, avg, max) = (29161.581, 29296.506, 29604.623), stdev = 182.039
  CI (99.9%): [28595.538, 29997.473] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 70.39% complete, ETA 00:28:50
# Fork: 1 of 1
# Warmup Iteration   1: 590580.851 ns/op
# Warmup Iteration   2: 303252.924 ns/op
# Warmup Iteration   3: 280755.514 ns/op
# Warmup Iteration   4: 273896.108 ns/op
Iteration   1: 291120.876 ns/op
Iteration   2: 266305.754 ns/op
Iteration   3: 266850.941 ns/op
Iteration   4: 266321.962 ns/op
Iteration   5: 266371.218 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  271394.150 ±(99.9%) 42472.148 ns/op [Average]
  (min, avg, max) = (266305.754, 271394.150, 291120.876), stdev = 11029.882
  CI (99.9%): [228922.002, 313866.299] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 70.59% complete, ETA 00:28:39
# Fork: 1 of 1
# Warmup Iteration   1: 19590.279 ns/op
# Warmup Iteration   2: 7693.321 ns/op
# Warmup Iteration   3: 4950.674 ns/op
# Warmup Iteration   4: 4536.504 ns/op
Iteration   1: 4138.491 ns/op
Iteration   2: 4152.304 ns/op
Iteration   3: 4272.416 ns/op
Iteration   4: 4275.861 ns/op
Iteration   5: 4138.603 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  4195.535 ±(99.9%) 277.187 ns/op [Average]
  (min, avg, max) = (4138.491, 4195.535, 4275.861), stdev = 71.985
  CI (99.9%): [3918.347, 4472.722] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 70.78% complete, ETA 00:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 32510.797 ns/op
# Warmup Iteration   2: 13642.193 ns/op
# Warmup Iteration   3: 10180.990 ns/op
# Warmup Iteration   4: 8203.518 ns/op
Iteration   1: 7729.292 ns/op
Iteration   2: 7656.779 ns/op
Iteration   3: 7841.985 ns/op
Iteration   4: 7643.999 ns/op
Iteration   5: 7659.929 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  7706.397 ±(99.9%) 318.831 ns/op [Average]
  (min, avg, max) = (7643.999, 7706.397, 7841.985), stdev = 82.799
  CI (99.9%): [7387.566, 8025.228] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 70.98% complete, ETA 00:28:16
# Fork: 1 of 1
# Warmup Iteration   1: 102121.551 ns/op
# Warmup Iteration   2: 21710.879 ns/op
# Warmup Iteration   3: 18216.707 ns/op
# Warmup Iteration   4: 15030.392 ns/op
Iteration   1: 14427.993 ns/op
Iteration   2: 14249.231 ns/op
Iteration   3: 14243.380 ns/op
Iteration   4: 14823.154 ns/op
Iteration   5: 14287.144 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  14406.181 ±(99.9%) 942.522 ns/op [Average]
  (min, avg, max) = (14243.380, 14406.181, 14823.154), stdev = 244.770
  CI (99.9%): [13463.659, 15348.703] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 71.18% complete, ETA 00:28:05
# Fork: 1 of 1
# Warmup Iteration   1: 60730.369 ns/op
# Warmup Iteration   2: 28202.655 ns/op
# Warmup Iteration   3: 28217.649 ns/op
# Warmup Iteration   4: 25394.427 ns/op
Iteration   1: 25602.145 ns/op
Iteration   2: 24134.473 ns/op
Iteration   3: 24088.560 ns/op
Iteration   4: 24174.472 ns/op
Iteration   5: 24078.273 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  24415.585 ±(99.9%) 2558.440 ns/op [Average]
  (min, avg, max) = (24078.273, 24415.585, 25602.145), stdev = 664.419
  CI (99.9%): [21857.144, 26974.025] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 71.37% complete, ETA 00:27:54
# Fork: 1 of 1
# Warmup Iteration   1: 492350.627 ns/op
# Warmup Iteration   2: 266246.684 ns/op
# Warmup Iteration   3: 218373.368 ns/op
# Warmup Iteration   4: 212177.650 ns/op
Iteration   1: 210916.979 ns/op
Iteration   2: 218015.921 ns/op
Iteration   3: 209689.996 ns/op
Iteration   4: 210297.971 ns/op
Iteration   5: 210032.951 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  211790.764 ±(99.9%) 13511.267 ns/op [Average]
  (min, avg, max) = (209689.996, 211790.764, 218015.921), stdev = 3508.833
  CI (99.9%): [198279.497, 225302.030] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 71.57% complete, ETA 00:27:43
# Fork: 1 of 1
# Warmup Iteration   1: 339179.956 ns/op
# Warmup Iteration   2: 107228.955 ns/op
# Warmup Iteration   3: 100801.922 ns/op
# Warmup Iteration   4: 100419.523 ns/op
Iteration   1: 99825.523 ns/op
Iteration   2: 102552.322 ns/op
Iteration   3: 100141.699 ns/op
Iteration   4: 98944.512 ns/op
Iteration   5: 98798.320 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  100052.475 ±(99.9%) 5810.898 ns/op [Average]
  (min, avg, max) = (98798.320, 100052.475, 102552.322), stdev = 1509.072
  CI (99.9%): [94241.578, 105863.373] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 71.76% complete, ETA 00:27:31
# Fork: 1 of 1
# Warmup Iteration   1: 491346.574 ns/op
# Warmup Iteration   2: 147875.081 ns/op
# Warmup Iteration   3: 134469.839 ns/op
# Warmup Iteration   4: 134924.010 ns/op
Iteration   1: 133124.344 ns/op
Iteration   2: 132474.275 ns/op
Iteration   3: 136370.278 ns/op
Iteration   4: 133735.401 ns/op
Iteration   5: 132041.411 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  133549.142 ±(99.9%) 6558.131 ns/op [Average]
  (min, avg, max) = (132041.411, 133549.142, 136370.278), stdev = 1703.126
  CI (99.9%): [126991.011, 140107.272] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 71.96% complete, ETA 00:27:20
# Fork: 1 of 1
# Warmup Iteration   1: 337330.147 ns/op
# Warmup Iteration   2: 168545.337 ns/op
# Warmup Iteration   3: 163863.553 ns/op
# Warmup Iteration   4: 159736.930 ns/op
Iteration   1: 159309.761 ns/op
Iteration   2: 159065.977 ns/op
Iteration   3: 158943.588 ns/op
Iteration   4: 158545.000 ns/op
Iteration   5: 157391.168 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  158651.099 ±(99.9%) 2913.663 ns/op [Average]
  (min, avg, max) = (157391.168, 158651.099, 159309.761), stdev = 756.669
  CI (99.9%): [155737.435, 161564.762] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 72.16% complete, ETA 00:27:09
# Fork: 1 of 1
# Warmup Iteration   1: 562321.748 ns/op
# Warmup Iteration   2: 216043.794 ns/op
# Warmup Iteration   3: 204783.208 ns/op
# Warmup Iteration   4: 205256.434 ns/op
Iteration   1: 207019.255 ns/op
Iteration   2: 199274.628 ns/op
Iteration   3: 199139.828 ns/op
Iteration   4: 198629.064 ns/op
Iteration   5: 198466.037 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  200505.762 ±(99.9%) 14081.138 ns/op [Average]
  (min, avg, max) = (198466.037, 200505.762, 207019.255), stdev = 3656.827
  CI (99.9%): [186424.625, 214586.900] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 72.35% complete, ETA 00:26:57
# Fork: 1 of 1
# Warmup Iteration   1: 2393523.713 ns/op
# Warmup Iteration   2: 915793.931 ns/op
# Warmup Iteration   3: 858659.189 ns/op
# Warmup Iteration   4: 858201.911 ns/op
Iteration   1: 848724.323 ns/op
Iteration   2: 853925.559 ns/op
Iteration   3: 844889.394 ns/op
Iteration   4: 842991.593 ns/op
Iteration   5: 843608.219 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  846827.818 ±(99.9%) 17520.915 ns/op [Average]
  (min, avg, max) = (842991.593, 846827.818, 853925.559), stdev = 4550.126
  CI (99.9%): [829306.903, 864348.733] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 72.55% complete, ETA 00:26:46
# Fork: 1 of 1
# Warmup Iteration   1: 3964.005 ns/op
# Warmup Iteration   2: 2643.061 ns/op
# Warmup Iteration   3: 2337.078 ns/op
# Warmup Iteration   4: 2282.302 ns/op
Iteration   1: 2331.636 ns/op
Iteration   2: 2279.231 ns/op
Iteration   3: 2329.478 ns/op
Iteration   4: 2282.214 ns/op
Iteration   5: 2301.787 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  2304.869 ±(99.9%) 96.307 ns/op [Average]
  (min, avg, max) = (2279.231, 2304.869, 2331.636), stdev = 25.011
  CI (99.9%): [2208.562, 2401.176] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 72.75% complete, ETA 00:26:35
# Fork: 1 of 1
# Warmup Iteration   1: 7795.635 ns/op
# Warmup Iteration   2: 4857.880 ns/op
# Warmup Iteration   3: 4710.611 ns/op
# Warmup Iteration   4: 4520.745 ns/op
Iteration   1: 4521.139 ns/op
Iteration   2: 4513.819 ns/op
Iteration   3: 4511.857 ns/op
Iteration   4: 4501.278 ns/op
Iteration   5: 4522.959 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  4514.210 ±(99.9%) 33.207 ns/op [Average]
  (min, avg, max) = (4501.278, 4514.210, 4522.959), stdev = 8.624
  CI (99.9%): [4481.003, 4547.418] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 72.94% complete, ETA 00:26:23
# Fork: 1 of 1
# Warmup Iteration   1: 14700.614 ns/op
# Warmup Iteration   2: 9000.234 ns/op
# Warmup Iteration   3: 8644.007 ns/op
# Warmup Iteration   4: 8315.883 ns/op
Iteration   1: 8231.969 ns/op
Iteration   2: 8219.073 ns/op
Iteration   3: 8213.670 ns/op
Iteration   4: 8206.465 ns/op
Iteration   5: 8238.582 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8221.952 ±(99.9%) 50.707 ns/op [Average]
  (min, avg, max) = (8206.465, 8221.952, 8238.582), stdev = 13.168
  CI (99.9%): [8171.245, 8272.659] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 73.14% complete, ETA 00:26:12
# Fork: 1 of 1
# Warmup Iteration   1: 24303.907 ns/op
# Warmup Iteration   2: 17154.312 ns/op
# Warmup Iteration   3: 16624.165 ns/op
# Warmup Iteration   4: 15910.793 ns/op
Iteration   1: 15925.626 ns/op
Iteration   2: 15928.249 ns/op
Iteration   3: 15990.974 ns/op
Iteration   4: 15878.989 ns/op
Iteration   5: 15895.717 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  15923.911 ±(99.9%) 164.862 ns/op [Average]
  (min, avg, max) = (15878.989, 15923.911, 15990.974), stdev = 42.814
  CI (99.9%): [15759.049, 16088.773] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 73.33% complete, ETA 00:26:01
# Fork: 1 of 1
# Warmup Iteration   1: 270478.185 ns/op
# Warmup Iteration   2: 172888.485 ns/op
# Warmup Iteration   3: 167105.238 ns/op
# Warmup Iteration   4: 160117.792 ns/op
Iteration   1: 160437.354 ns/op
Iteration   2: 160300.017 ns/op
Iteration   3: 166729.987 ns/op
Iteration   4: 163607.435 ns/op
Iteration   5: 159879.557 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  162190.870 ±(99.9%) 11325.501 ns/op [Average]
  (min, avg, max) = (159879.557, 162190.870, 166729.987), stdev = 2941.197
  CI (99.9%): [150865.369, 173516.370] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 73.53% complete, ETA 00:25:49
# Fork: 1 of 1
# Warmup Iteration   1: 10142.387 ns/op
# Warmup Iteration   2: 6569.935 ns/op
# Warmup Iteration   3: 6037.483 ns/op
# Warmup Iteration   4: 6104.895 ns/op
Iteration   1: 5920.699 ns/op
Iteration   2: 5878.666 ns/op
Iteration   3: 5873.493 ns/op
Iteration   4: 5843.296 ns/op
Iteration   5: 5947.796 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  5892.790 ±(99.9%) 159.071 ns/op [Average]
  (min, avg, max) = (5843.296, 5892.790, 5947.796), stdev = 41.310
  CI (99.9%): [5733.719, 6051.861] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 73.73% complete, ETA 00:25:38
# Fork: 1 of 1
# Warmup Iteration   1: 17149.657 ns/op
# Warmup Iteration   2: 10945.405 ns/op
# Warmup Iteration   3: 10628.318 ns/op
# Warmup Iteration   4: 12327.370 ns/op
Iteration   1: 11361.494 ns/op
Iteration   2: 10834.049 ns/op
Iteration   3: 10840.076 ns/op
Iteration   4: 10926.418 ns/op
Iteration   5: 11006.884 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  10993.784 ±(99.9%) 837.154 ns/op [Average]
  (min, avg, max) = (10834.049, 10993.784, 11361.494), stdev = 217.406
  CI (99.9%): [10156.630, 11830.938] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 73.92% complete, ETA 00:25:27
# Fork: 1 of 1
# Warmup Iteration   1: 30285.587 ns/op
# Warmup Iteration   2: 17730.135 ns/op
# Warmup Iteration   3: 17631.226 ns/op
# Warmup Iteration   4: 17607.077 ns/op
Iteration   1: 23496.663 ns/op
Iteration   2: 20159.736 ns/op
Iteration   3: 20440.561 ns/op
Iteration   4: 21970.051 ns/op
Iteration   5: 22349.702 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  21683.343 ±(99.9%) 5335.696 ns/op [Average]
  (min, avg, max) = (20159.736, 21683.343, 23496.663), stdev = 1385.663
  CI (99.9%): [16347.647, 27019.039] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 74.12% complete, ETA 00:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 50371.256 ns/op
# Warmup Iteration   2: 31725.963 ns/op
# Warmup Iteration   3: 31327.302 ns/op
# Warmup Iteration   4: 30905.645 ns/op
Iteration   1: 31479.996 ns/op
Iteration   2: 30959.226 ns/op
Iteration   3: 31103.337 ns/op
Iteration   4: 30924.848 ns/op
Iteration   5: 30820.697 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  31057.621 ±(99.9%) 989.125 ns/op [Average]
  (min, avg, max) = (30820.697, 31057.621, 31479.996), stdev = 256.873
  CI (99.9%): [30068.496, 32046.746] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 74.31% complete, ETA 00:25:04
# Fork: 1 of 1
# Warmup Iteration   1: 383430.706 ns/op
# Warmup Iteration   2: 278827.996 ns/op
# Warmup Iteration   3: 264452.476 ns/op
# Warmup Iteration   4: 251519.074 ns/op
Iteration   1: 252070.859 ns/op
Iteration   2: 285522.790 ns/op
Iteration   3: 261206.408 ns/op
Iteration   4: 257080.350 ns/op
Iteration   5: 253398.505 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  261855.782 ±(99.9%) 52749.042 ns/op [Average]
  (min, avg, max) = (252070.859, 261855.782, 285522.790), stdev = 13698.759
  CI (99.9%): [209106.740, 314604.825] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 74.51% complete, ETA 00:24:53
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 74.71% complete, ETA 00:24:39
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 74.90% complete, ETA 00:24:24
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 75.10% complete, ETA 00:24:10
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 75.29% complete, ETA 00:23:56
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 75.49% complete, ETA 00:23:42
# Fork: 1 of 1
# Warmup Iteration   1: 103255.723 ns/op
# Warmup Iteration   2: 30651.872 ns/op
# Warmup Iteration   3: 26293.925 ns/op
# Warmup Iteration   4: 23157.536 ns/op
Iteration   1: 22981.031 ns/op
Iteration   2: 22768.109 ns/op
Iteration   3: 22644.872 ns/op
Iteration   4: 22891.837 ns/op
Iteration   5: 22711.765 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  22799.523 ±(99.9%) 524.001 ns/op [Average]
  (min, avg, max) = (22644.872, 22799.523, 22981.031), stdev = 136.081
  CI (99.9%): [22275.522, 23323.524] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 75.69% complete, ETA 00:23:31
# Fork: 1 of 1
# Warmup Iteration   1: 186028.774 ns/op
# Warmup Iteration   2: 49092.433 ns/op
# Warmup Iteration   3: 43998.935 ns/op
# Warmup Iteration   4: 41352.075 ns/op
Iteration   1: 40076.174 ns/op
Iteration   2: 40563.673 ns/op
Iteration   3: 40245.637 ns/op
Iteration   4: 40080.870 ns/op
Iteration   5: 40149.395 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  40223.150 ±(99.9%) 779.094 ns/op [Average]
  (min, avg, max) = (40076.174, 40223.150, 40563.673), stdev = 202.328
  CI (99.9%): [39444.056, 41002.244] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 75.88% complete, ETA 00:23:19
# Fork: 1 of 1
# Warmup Iteration   1: 350225.944 ns/op
# Warmup Iteration   2: 125041.328 ns/op
# Warmup Iteration   3: 98759.787 ns/op
# Warmup Iteration   4: 93374.972 ns/op
Iteration   1: 91585.695 ns/op
Iteration   2: 91722.994 ns/op
Iteration   3: 91557.797 ns/op
Iteration   4: 91173.205 ns/op
Iteration   5: 92971.316 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  91802.202 ±(99.9%) 2636.600 ns/op [Average]
  (min, avg, max) = (91173.205, 91802.202, 92971.316), stdev = 684.717
  CI (99.9%): [89165.601, 94438.802] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 76.08% complete, ETA 00:23:08
# Fork: 1 of 1
# Warmup Iteration   1: 657718.300 ns/op
# Warmup Iteration   2: 250920.605 ns/op
# Warmup Iteration   3: 242317.331 ns/op
# Warmup Iteration   4: 222138.697 ns/op
Iteration   1: 217562.347 ns/op
Iteration   2: 217534.508 ns/op
Iteration   3: 216979.352 ns/op
Iteration   4: 217152.498 ns/op
Iteration   5: 217233.232 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  217292.387 ±(99.9%) 967.578 ns/op [Average]
  (min, avg, max) = (216979.352, 217292.387, 217562.347), stdev = 251.277
  CI (99.9%): [216324.810, 218259.965] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 76.27% complete, ETA 00:22:57
# Fork: 1 of 1
# Warmup Iteration   1: 4876447.056 ns/op
# Warmup Iteration   2: 1813229.163 ns/op
# Warmup Iteration   3: 1806913.109 ns/op
# Warmup Iteration   4: 1664869.163 ns/op
Iteration   1: 1658845.240 ns/op
Iteration   2: 1736639.651 ns/op
Iteration   3: 1672332.368 ns/op
Iteration   4: 1621706.782 ns/op
Iteration   5: 1619069.953 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  1661718.799 ±(99.9%) 184207.384 ns/op [Average]
  (min, avg, max) = (1619069.953, 1661718.799, 1736639.651), stdev = 47838.073
  CI (99.9%): [1477511.414, 1845926.183] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 76.47% complete, ETA 00:22:46
# Fork: 1 of 1
# Warmup Iteration   1: 59924.770 ns/op
# Warmup Iteration   2: 19816.005 ns/op
# Warmup Iteration   3: 19175.116 ns/op
# Warmup Iteration   4: 18891.077 ns/op
Iteration   1: 19154.184 ns/op
Iteration   2: 18399.912 ns/op
Iteration   3: 18565.428 ns/op
Iteration   4: 18375.646 ns/op
Iteration   5: 18928.637 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  18684.761 ±(99.9%) 1321.008 ns/op [Average]
  (min, avg, max) = (18375.646, 18684.761, 19154.184), stdev = 343.062
  CI (99.9%): [17363.753, 20005.770] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 76.67% complete, ETA 00:22:35
# Fork: 1 of 1
# Warmup Iteration   1: 97203.993 ns/op
# Warmup Iteration   2: 38326.646 ns/op
# Warmup Iteration   3: 37599.965 ns/op
# Warmup Iteration   4: 37144.164 ns/op
Iteration   1: 38162.249 ns/op
Iteration   2: 37181.504 ns/op
Iteration   3: 36839.268 ns/op
Iteration   4: 36591.963 ns/op
Iteration   5: 36391.573 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  37033.311 ±(99.9%) 2682.169 ns/op [Average]
  (min, avg, max) = (36391.573, 37033.311, 38162.249), stdev = 696.551
  CI (99.9%): [34351.143, 39715.480] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 76.86% complete, ETA 00:22:24
# Fork: 1 of 1
# Warmup Iteration   1: 279827.706 ns/op
# Warmup Iteration   2: 90008.731 ns/op
# Warmup Iteration   3: 87561.397 ns/op
# Warmup Iteration   4: 87611.418 ns/op
Iteration   1: 85337.665 ns/op
Iteration   2: 86715.899 ns/op
Iteration   3: 84909.531 ns/op
Iteration   4: 87395.316 ns/op
Iteration   5: 84471.413 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  85765.965 ±(99.9%) 4774.621 ns/op [Average]
  (min, avg, max) = (84471.413, 85765.965, 87395.316), stdev = 1239.954
  CI (99.9%): [80991.344, 90540.586] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 77.06% complete, ETA 00:22:13
# Fork: 1 of 1
# Warmup Iteration   1: 381232.828 ns/op
# Warmup Iteration   2: 200274.663 ns/op
# Warmup Iteration   3: 197580.674 ns/op
# Warmup Iteration   4: 192886.589 ns/op
Iteration   1: 191468.479 ns/op
Iteration   2: 190997.808 ns/op
Iteration   3: 192425.574 ns/op
Iteration   4: 189522.829 ns/op
Iteration   5: 198099.584 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  192502.855 ±(99.9%) 12704.937 ns/op [Average]
  (min, avg, max) = (189522.829, 192502.855, 198099.584), stdev = 3299.432
  CI (99.9%): [179797.917, 205207.792] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 77.25% complete, ETA 00:22:01
# Fork: 1 of 1
# Warmup Iteration   1: 2834896.606 ns/op
# Warmup Iteration   2: 1617537.020 ns/op
# Warmup Iteration   3: 1594608.735 ns/op
# Warmup Iteration   4: 1586281.884 ns/op
Iteration   1: 1601692.636 ns/op
Iteration   2: 1573497.918 ns/op
Iteration   3: 1563123.932 ns/op
Iteration   4: 1558925.386 ns/op
Iteration   5: 1555373.272 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  1570522.629 ±(99.9%) 72017.374 ns/op [Average]
  (min, avg, max) = (1555373.272, 1570522.629, 1601692.636), stdev = 18702.683
  CI (99.9%): [1498505.254, 1642540.003] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _1_K)

# Run progress: 77.45% complete, ETA 00:21:50
# Fork: 1 of 1
# Warmup Iteration   1: 60957.898 ns/op
# Warmup Iteration   2: 20493.893 ns/op
# Warmup Iteration   3: 19947.463 ns/op
# Warmup Iteration   4: 19386.465 ns/op
Iteration   1: 19553.942 ns/op
Iteration   2: 19395.490 ns/op
Iteration   3: 19397.904 ns/op
Iteration   4: 19349.390 ns/op
Iteration   5: 19327.728 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  19404.891 ±(99.9%) 341.102 ns/op [Average]
  (min, avg, max) = (19327.728, 19404.891, 19553.942), stdev = 88.583
  CI (99.9%): [19063.788, 19745.993] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _2_K)

# Run progress: 77.65% complete, ETA 00:21:39
# Fork: 1 of 1
# Warmup Iteration   1: 89354.313 ns/op
# Warmup Iteration   2: 38385.512 ns/op
# Warmup Iteration   3: 37534.727 ns/op
# Warmup Iteration   4: 39770.365 ns/op
Iteration   1: 36491.625 ns/op
Iteration   2: 36857.571 ns/op
Iteration   3: 36240.849 ns/op
Iteration   4: 36347.585 ns/op
Iteration   5: 36202.629 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  36428.052 ±(99.9%) 1020.355 ns/op [Average]
  (min, avg, max) = (36202.629, 36428.052, 36857.571), stdev = 264.983
  CI (99.9%): [35407.696, 37448.407] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _4_K)

# Run progress: 77.84% complete, ETA 00:21:28
# Fork: 1 of 1
# Warmup Iteration   1: 276166.852 ns/op
# Warmup Iteration   2: 91334.717 ns/op
# Warmup Iteration   3: 87559.664 ns/op
# Warmup Iteration   4: 88289.341 ns/op
Iteration   1: 86243.028 ns/op
Iteration   2: 86626.172 ns/op
Iteration   3: 86706.218 ns/op
Iteration   4: 86095.366 ns/op
Iteration   5: 87406.005 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  86615.358 ±(99.9%) 1965.825 ns/op [Average]
  (min, avg, max) = (86095.366, 86615.358, 87406.005), stdev = 510.518
  CI (99.9%): [84649.533, 88581.182] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _8_K)

# Run progress: 78.04% complete, ETA 00:21:16
# Fork: 1 of 1
# Warmup Iteration   1: 377869.008 ns/op
# Warmup Iteration   2: 201885.565 ns/op
# Warmup Iteration   3: 199023.354 ns/op
# Warmup Iteration   4: 196392.752 ns/op
Iteration   1: 195439.962 ns/op
Iteration   2: 194375.098 ns/op
Iteration   3: 196105.648 ns/op
Iteration   4: 196088.486 ns/op
Iteration   5: 201707.265 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  196743.292 ±(99.9%) 11023.776 ns/op [Average]
  (min, avg, max) = (194375.098, 196743.292, 201707.265), stdev = 2862.840
  CI (99.9%): [185719.516, 207767.067] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _64_K)

# Run progress: 78.24% complete, ETA 00:21:05
# Fork: 1 of 1
# Warmup Iteration   1: 2850789.549 ns/op
# Warmup Iteration   2: 1647023.714 ns/op
# Warmup Iteration   3: 1680493.893 ns/op
# Warmup Iteration   4: 1599195.009 ns/op
Iteration   1: 1607444.679 ns/op
Iteration   2: 1604545.628 ns/op
Iteration   3: 1612420.366 ns/op
Iteration   4: 1576584.776 ns/op
Iteration   5: 1571079.450 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  1594414.980 ±(99.9%) 73542.766 ns/op [Average]
  (min, avg, max) = (1571079.450, 1594414.980, 1612420.366), stdev = 19098.823
  CI (99.9%): [1520872.213, 1667957.746] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 78.43% complete, ETA 00:20:54
# Fork: 1 of 1
# Warmup Iteration   1: 15796.918 ns/op
# Warmup Iteration   2: 12081.676 ns/op
# Warmup Iteration   3: 11732.316 ns/op
# Warmup Iteration   4: 11503.591 ns/op
Iteration   1: 11598.486 ns/op
Iteration   2: 11507.852 ns/op
Iteration   3: 11591.817 ns/op
Iteration   4: 11456.131 ns/op
Iteration   5: 11482.816 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  11527.420 ±(99.9%) 248.448 ns/op [Average]
  (min, avg, max) = (11456.131, 11527.420, 11598.486), stdev = 64.521
  CI (99.9%): [11278.972, 11775.869] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 78.63% complete, ETA 00:20:43
# Fork: 1 of 1
# Warmup Iteration   1: 33615.090 ns/op
# Warmup Iteration   2: 24138.819 ns/op
# Warmup Iteration   3: 23808.041 ns/op
# Warmup Iteration   4: 22912.442 ns/op
Iteration   1: 23057.713 ns/op
Iteration   2: 22835.660 ns/op
Iteration   3: 22742.502 ns/op
Iteration   4: 22710.223 ns/op
Iteration   5: 22931.896 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  22855.599 ±(99.9%) 547.936 ns/op [Average]
  (min, avg, max) = (22710.223, 22855.599, 23057.713), stdev = 142.297
  CI (99.9%): [22307.662, 23403.535] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 78.82% complete, ETA 00:20:32
# Fork: 1 of 1
# Warmup Iteration   1: 85387.202 ns/op
# Warmup Iteration   2: 52674.247 ns/op
# Warmup Iteration   3: 50992.887 ns/op
# Warmup Iteration   4: 53203.062 ns/op
Iteration   1: 52076.935 ns/op
Iteration   2: 50183.563 ns/op
Iteration   3: 50139.620 ns/op
Iteration   4: 49720.517 ns/op
Iteration   5: 49836.265 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  50391.380 ±(99.9%) 3706.370 ns/op [Average]
  (min, avg, max) = (49720.517, 50391.380, 52076.935), stdev = 962.532
  CI (99.9%): [46685.010, 54097.750] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 79.02% complete, ETA 00:20:20
# Fork: 1 of 1
# Warmup Iteration   1: 199437.668 ns/op
# Warmup Iteration   2: 126676.840 ns/op
# Warmup Iteration   3: 122873.596 ns/op
# Warmup Iteration   4: 121469.436 ns/op
Iteration   1: 120302.295 ns/op
Iteration   2: 124490.243 ns/op
Iteration   3: 120855.545 ns/op
Iteration   4: 120524.694 ns/op
Iteration   5: 120909.306 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  121416.417 ±(99.9%) 6685.217 ns/op [Average]
  (min, avg, max) = (120302.295, 121416.417, 124490.243), stdev = 1736.130
  CI (99.9%): [114731.199, 128101.634] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 79.22% complete, ETA 00:20:09
# Fork: 1 of 1
# Warmup Iteration   1: 1356183.342 ns/op
# Warmup Iteration   2: 1113537.073 ns/op
# Warmup Iteration   3: 1044207.414 ns/op
# Warmup Iteration   4: 1018015.768 ns/op
Iteration   1: 1015541.684 ns/op
Iteration   2: 1011452.665 ns/op
Iteration   3: 1009586.254 ns/op
Iteration   4: 1004836.659 ns/op
Iteration   5: 1006553.967 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  1009594.246 ±(99.9%) 16189.169 ns/op [Average]
  (min, avg, max) = (1004836.659, 1009594.246, 1015541.684), stdev = 4204.276
  CI (99.9%): [993405.077, 1025783.415] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _1_K)

# Run progress: 79.41% complete, ETA 00:19:58
# Fork: 1 of 1
# Warmup Iteration   1: 31553.940 ns/op
# Warmup Iteration   2: 9797.594 ns/op
# Warmup Iteration   3: 8753.503 ns/op
# Warmup Iteration   4: 8503.641 ns/op
Iteration   1: 8528.803 ns/op
Iteration   2: 8537.681 ns/op
Iteration   3: 8519.696 ns/op
Iteration   4: 8541.827 ns/op
Iteration   5: 8504.433 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8526.488 ±(99.9%) 57.711 ns/op [Average]
  (min, avg, max) = (8504.433, 8526.488, 8541.827), stdev = 14.987
  CI (99.9%): [8468.777, 8584.199] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _2_K)

# Run progress: 79.61% complete, ETA 00:19:47
# Fork: 1 of 1
# Warmup Iteration   1: 58412.079 ns/op
# Warmup Iteration   2: 20106.141 ns/op
# Warmup Iteration   3: 16768.014 ns/op
# Warmup Iteration   4: 16448.769 ns/op
Iteration   1: 16133.050 ns/op
Iteration   2: 16009.649 ns/op
Iteration   3: 15981.365 ns/op
Iteration   4: 15902.892 ns/op
Iteration   5: 15957.265 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  15996.844 ±(99.9%) 329.839 ns/op [Average]
  (min, avg, max) = (15902.892, 15996.844, 16133.050), stdev = 85.658
  CI (99.9%): [15667.006, 16326.683] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _4_K)

# Run progress: 79.80% complete, ETA 00:19:35
# Fork: 1 of 1
# Warmup Iteration   1: 83982.650 ns/op
# Warmup Iteration   2: 39394.358 ns/op
# Warmup Iteration   3: 31417.683 ns/op
# Warmup Iteration   4: 29663.593 ns/op
Iteration   1: 29352.772 ns/op
Iteration   2: 29149.088 ns/op
Iteration   3: 30899.294 ns/op
Iteration   4: 29651.410 ns/op
Iteration   5: 29185.726 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  29647.658 ±(99.9%) 2800.346 ns/op [Average]
  (min, avg, max) = (29149.088, 29647.658, 30899.294), stdev = 727.241
  CI (99.9%): [26847.312, 32448.004] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _8_K)

# Run progress: 80.00% complete, ETA 00:19:24
# Fork: 1 of 1
# Warmup Iteration   1: 144781.293 ns/op
# Warmup Iteration   2: 74623.583 ns/op
# Warmup Iteration   3: 66687.036 ns/op
# Warmup Iteration   4: 63758.354 ns/op
Iteration   1: 68329.220 ns/op
Iteration   2: 62618.202 ns/op
Iteration   3: 62929.443 ns/op
Iteration   4: 62561.047 ns/op
Iteration   5: 63549.435 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  63997.469 ±(99.9%) 9446.086 ns/op [Average]
  (min, avg, max) = (62561.047, 63997.469, 68329.220), stdev = 2453.119
  CI (99.9%): [54551.383, 73443.556] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _64_K)

# Run progress: 80.20% complete, ETA 00:19:13
# Fork: 1 of 1
# Warmup Iteration   1: 920233.971 ns/op
# Warmup Iteration   2: 649098.626 ns/op
# Warmup Iteration   3: 733511.681 ns/op
# Warmup Iteration   4: 626594.490 ns/op
Iteration   1: 632309.594 ns/op
Iteration   2: 618334.801 ns/op
Iteration   3: 619340.937 ns/op
Iteration   4: 620044.812 ns/op
Iteration   5: 617636.918 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  621533.412 ±(99.9%) 23467.040 ns/op [Average]
  (min, avg, max) = (617636.918, 621533.412, 632309.594), stdev = 6094.316
  CI (99.9%): [598066.372, 645000.453] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _1_K)

# Run progress: 80.39% complete, ETA 00:19:01
# Fork: 1 of 1
# Warmup Iteration   1: 26928.245 ns/op
# Warmup Iteration   2: 9652.664 ns/op
# Warmup Iteration   3: 9352.883 ns/op
# Warmup Iteration   4: 8991.639 ns/op
Iteration   1: 8881.466 ns/op
Iteration   2: 8861.747 ns/op
Iteration   3: 8885.807 ns/op
Iteration   4: 8919.650 ns/op
Iteration   5: 8881.442 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8886.022 ±(99.9%) 80.815 ns/op [Average]
  (min, avg, max) = (8861.747, 8886.022, 8919.650), stdev = 20.987
  CI (99.9%): [8805.207, 8966.838] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _2_K)

# Run progress: 80.59% complete, ETA 00:18:50
# Fork: 1 of 1
# Warmup Iteration   1: 58475.421 ns/op
# Warmup Iteration   2: 19504.025 ns/op
# Warmup Iteration   3: 16983.746 ns/op
# Warmup Iteration   4: 16768.694 ns/op
Iteration   1: 16281.183 ns/op
Iteration   2: 16296.346 ns/op
Iteration   3: 16234.327 ns/op
Iteration   4: 16236.820 ns/op
Iteration   5: 16210.034 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  16251.742 ±(99.9%) 137.789 ns/op [Average]
  (min, avg, max) = (16210.034, 16251.742, 16296.346), stdev = 35.783
  CI (99.9%): [16113.953, 16389.531] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _4_K)

# Run progress: 80.78% complete, ETA 00:18:39
# Fork: 1 of 1
# Warmup Iteration   1: 72186.607 ns/op
# Warmup Iteration   2: 32432.572 ns/op
# Warmup Iteration   3: 30548.240 ns/op
# Warmup Iteration   4: 30938.931 ns/op
Iteration   1: 30229.253 ns/op
Iteration   2: 29648.080 ns/op
Iteration   3: 29898.406 ns/op
Iteration   4: 29589.579 ns/op
Iteration   5: 29543.595 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  29781.783 ±(99.9%) 1098.249 ns/op [Average]
  (min, avg, max) = (29543.595, 29781.783, 30229.253), stdev = 285.212
  CI (99.9%): [28683.533, 30880.032] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _8_K)

# Run progress: 80.98% complete, ETA 00:18:27
# Fork: 1 of 1
# Warmup Iteration   1: 164102.070 ns/op
# Warmup Iteration   2: 73560.764 ns/op
# Warmup Iteration   3: 64528.914 ns/op
# Warmup Iteration   4: 64743.120 ns/op
Iteration   1: 63435.858 ns/op
Iteration   2: 63201.258 ns/op
Iteration   3: 63084.120 ns/op
Iteration   4: 62817.084 ns/op
Iteration   5: 62884.847 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  63084.633 ±(99.9%) 959.686 ns/op [Average]
  (min, avg, max) = (62817.084, 63084.633, 63435.858), stdev = 249.227
  CI (99.9%): [62124.947, 64044.320] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _64_K)

# Run progress: 81.18% complete, ETA 00:18:16
# Fork: 1 of 1
# Warmup Iteration   1: 1120692.155 ns/op
# Warmup Iteration   2: 639134.720 ns/op
# Warmup Iteration   3: 655354.129 ns/op
# Warmup Iteration   4: 618529.174 ns/op
Iteration   1: 620932.411 ns/op
Iteration   2: 611090.639 ns/op
Iteration   3: 611268.572 ns/op
Iteration   4: 640197.661 ns/op
Iteration   5: 609781.505 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  618654.157 ±(99.9%) 49454.571 ns/op [Average]
  (min, avg, max) = (609781.505, 618654.157, 640197.661), stdev = 12843.195
  CI (99.9%): [569199.586, 668108.728] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 81.37% complete, ETA 00:18:05
# Fork: 1 of 1
# Warmup Iteration   1: 10692.569 ns/op
# Warmup Iteration   2: 5415.082 ns/op
# Warmup Iteration   3: 5142.182 ns/op
# Warmup Iteration   4: 5128.462 ns/op
Iteration   1: 5233.263 ns/op
Iteration   2: 5221.981 ns/op
Iteration   3: 5201.503 ns/op
Iteration   4: 5203.574 ns/op
Iteration   5: 5203.748 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  5212.814 ±(99.9%) 54.378 ns/op [Average]
  (min, avg, max) = (5201.503, 5212.814, 5233.263), stdev = 14.122
  CI (99.9%): [5158.436, 5267.192] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 81.57% complete, ETA 00:17:54
# Fork: 1 of 1
# Warmup Iteration   1: 80539.984 ns/op
# Warmup Iteration   2: 14941.374 ns/op
# Warmup Iteration   3: 10765.228 ns/op
# Warmup Iteration   4: 10884.031 ns/op
Iteration   1: 10597.544 ns/op
Iteration   2: 10848.324 ns/op
Iteration   3: 10485.710 ns/op
Iteration   4: 10494.565 ns/op
Iteration   5: 10527.056 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  10590.640 ±(99.9%) 579.942 ns/op [Average]
  (min, avg, max) = (10485.710, 10590.640, 10848.324), stdev = 150.609
  CI (99.9%): [10010.698, 11170.582] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 81.76% complete, ETA 00:17:42
# Fork: 1 of 1
# Warmup Iteration   1: 160251.797 ns/op
# Warmup Iteration   2: 22606.046 ns/op
# Warmup Iteration   3: 20777.836 ns/op
# Warmup Iteration   4: 19980.867 ns/op
Iteration   1: 20044.089 ns/op
Iteration   2: 20696.474 ns/op
Iteration   3: 19782.853 ns/op
Iteration   4: 19631.269 ns/op
Iteration   5: 19627.706 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  19956.478 ±(99.9%) 1721.271 ns/op [Average]
  (min, avg, max) = (19627.706, 19956.478, 20696.474), stdev = 447.009
  CI (99.9%): [18235.207, 21677.750] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 81.96% complete, ETA 00:17:31
# Fork: 1 of 1
# Warmup Iteration   1: 322759.378 ns/op
# Warmup Iteration   2: 77233.704 ns/op
# Warmup Iteration   3: 41476.160 ns/op
# Warmup Iteration   4: 40276.288 ns/op
Iteration   1: 41856.972 ns/op
Iteration   2: 39424.928 ns/op
Iteration   3: 39595.991 ns/op
Iteration   4: 39562.593 ns/op
Iteration   5: 39340.079 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  39956.113 ±(99.9%) 4111.123 ns/op [Average]
  (min, avg, max) = (39340.079, 39956.113, 41856.972), stdev = 1067.646
  CI (99.9%): [35844.990, 44067.235] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 82.16% complete, ETA 00:17:20
# Fork: 1 of 1
# Warmup Iteration   1: 2661004.014 ns/op
# Warmup Iteration   2: 402674.557 ns/op
# Warmup Iteration   3: 307141.425 ns/op
# Warmup Iteration   4: 301124.328 ns/op
Iteration   1: 294703.736 ns/op
Iteration   2: 297622.800 ns/op
Iteration   3: 293560.286 ns/op
Iteration   4: 292537.519 ns/op
Iteration   5: 292240.500 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  294132.968 ±(99.9%) 8383.348 ns/op [Average]
  (min, avg, max) = (292240.500, 294132.968, 297622.800), stdev = 2177.129
  CI (99.9%): [285749.621, 302516.316] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 82.35% complete, ETA 00:17:08
# Fork: 1 of 1
# Warmup Iteration   1: 16391.336 ns/op
# Warmup Iteration   2: 3608.960 ns/op
# Warmup Iteration   3: 3429.309 ns/op
# Warmup Iteration   4: 3418.670 ns/op
Iteration   1: 3417.296 ns/op
Iteration   2: 3524.040 ns/op
Iteration   3: 3284.074 ns/op
Iteration   4: 3290.330 ns/op
Iteration   5: 3288.079 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  3360.764 ±(99.9%) 412.847 ns/op [Average]
  (min, avg, max) = (3284.074, 3360.764, 3524.040), stdev = 107.215
  CI (99.9%): [2947.917, 3773.611] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 82.55% complete, ETA 00:16:57
# Fork: 1 of 1
# Warmup Iteration   1: 38153.138 ns/op
# Warmup Iteration   2: 6820.603 ns/op
# Warmup Iteration   3: 6735.234 ns/op
# Warmup Iteration   4: 6674.579 ns/op
Iteration   1: 6725.067 ns/op
Iteration   2: 6623.667 ns/op
Iteration   3: 6628.229 ns/op
Iteration   4: 6589.930 ns/op
Iteration   5: 6594.030 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  6632.185 ±(99.9%) 210.527 ns/op [Average]
  (min, avg, max) = (6589.930, 6632.185, 6725.067), stdev = 54.673
  CI (99.9%): [6421.658, 6842.711] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 82.75% complete, ETA 00:16:46
# Fork: 1 of 1
# Warmup Iteration   1: 68877.612 ns/op
# Warmup Iteration   2: 15187.370 ns/op
# Warmup Iteration   3: 13947.679 ns/op
# Warmup Iteration   4: 13646.577 ns/op
Iteration   1: 13599.661 ns/op
Iteration   2: 13627.044 ns/op
Iteration   3: 13473.087 ns/op
Iteration   4: 13427.957 ns/op
Iteration   5: 13489.106 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  13523.371 ±(99.9%) 329.982 ns/op [Average]
  (min, avg, max) = (13427.957, 13523.371, 13627.044), stdev = 85.695
  CI (99.9%): [13193.389, 13853.353] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 82.94% complete, ETA 00:16:34
# Fork: 1 of 1
# Warmup Iteration   1: 140040.616 ns/op
# Warmup Iteration   2: 29841.037 ns/op
# Warmup Iteration   3: 26997.959 ns/op
# Warmup Iteration   4: 24827.065 ns/op
Iteration   1: 24975.541 ns/op
Iteration   2: 24739.093 ns/op
Iteration   3: 24718.238 ns/op
Iteration   4: 26702.903 ns/op
Iteration   5: 24691.187 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  25165.392 ±(99.9%) 3338.384 ns/op [Average]
  (min, avg, max) = (24691.187, 25165.392, 26702.903), stdev = 866.968
  CI (99.9%): [21827.009, 28503.776] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 83.14% complete, ETA 00:16:23
# Fork: 1 of 1
# Warmup Iteration   1: 348085.827 ns/op
# Warmup Iteration   2: 223851.547 ns/op
# Warmup Iteration   3: 218023.231 ns/op
# Warmup Iteration   4: 215205.502 ns/op
Iteration   1: 217147.641 ns/op
Iteration   2: 214823.210 ns/op
Iteration   3: 214431.017 ns/op
Iteration   4: 213390.109 ns/op
Iteration   5: 223007.892 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  216559.974 ±(99.9%) 14853.438 ns/op [Average]
  (min, avg, max) = (213390.109, 216559.974, 223007.892), stdev = 3857.391
  CI (99.9%): [201706.536, 231413.412] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 83.33% complete, ETA 00:16:12
# Fork: 1 of 1
# Warmup Iteration   1: 71988.603 ns/op
# Warmup Iteration   2: 5745.223 ns/op
# Warmup Iteration   3: 4437.179 ns/op
# Warmup Iteration   4: 4379.769 ns/op
Iteration   1: 4359.911 ns/op
Iteration   2: 4270.893 ns/op
Iteration   3: 4268.734 ns/op
Iteration   4: 4304.973 ns/op
Iteration   5: 4336.974 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  4308.297 ±(99.9%) 154.766 ns/op [Average]
  (min, avg, max) = (4268.734, 4308.297, 4359.911), stdev = 40.192
  CI (99.9%): [4153.531, 4463.063] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 83.53% complete, ETA 00:16:00
# Fork: 1 of 1
# Warmup Iteration   1: 157981.835 ns/op
# Warmup Iteration   2: 20653.962 ns/op
# Warmup Iteration   3: 8327.223 ns/op
# Warmup Iteration   4: 8183.025 ns/op
Iteration   1: 8210.431 ns/op
Iteration   2: 8681.147 ns/op
Iteration   3: 8763.976 ns/op
Iteration   4: 8689.193 ns/op
Iteration   5: 8708.156 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  8610.581 ±(99.9%) 870.301 ns/op [Average]
  (min, avg, max) = (8210.431, 8610.581, 8763.976), stdev = 226.014
  CI (99.9%): [7740.279, 9480.882] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 83.73% complete, ETA 00:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 101910.725 ns/op
# Warmup Iteration   2: 20714.046 ns/op
# Warmup Iteration   3: 15839.682 ns/op
# Warmup Iteration   4: 15146.199 ns/op
Iteration   1: 15238.534 ns/op
Iteration   2: 15145.433 ns/op
Iteration   3: 15086.664 ns/op
Iteration   4: 15146.868 ns/op
Iteration   5: 15394.445 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  15202.389 ±(99.9%) 463.323 ns/op [Average]
  (min, avg, max) = (15086.664, 15202.389, 15394.445), stdev = 120.324
  CI (99.9%): [14739.066, 15665.712] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 83.92% complete, ETA 00:15:38
# Fork: 1 of 1
# Warmup Iteration   1: 204908.072 ns/op
# Warmup Iteration   2: 32995.959 ns/op
# Warmup Iteration   3: 27881.636 ns/op
# Warmup Iteration   4: 26693.136 ns/op
Iteration   1: 27612.748 ns/op
Iteration   2: 26671.222 ns/op
Iteration   3: 26408.112 ns/op
Iteration   4: 28155.841 ns/op
Iteration   5: 27949.607 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  27359.506 ±(99.9%) 2998.428 ns/op [Average]
  (min, avg, max) = (26408.112, 27359.506, 28155.841), stdev = 778.682
  CI (99.9%): [24361.078, 30357.934] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 84.12% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 2551751.882 ns/op
# Warmup Iteration   2: 278992.277 ns/op
# Warmup Iteration   3: 214599.558 ns/op
# Warmup Iteration   4: 208948.611 ns/op
Iteration   1: 215544.268 ns/op
Iteration   2: 208021.647 ns/op
Iteration   3: 213929.235 ns/op
Iteration   4: 215913.458 ns/op
Iteration   5: 207162.270 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  212114.176 ±(99.9%) 16196.144 ns/op [Average]
  (min, avg, max) = (207162.270, 212114.176, 215913.458), stdev = 4206.087
  CI (99.9%): [195918.032, 228310.320] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 84.31% complete, ETA 00:15:15
# Fork: 1 of 1
# Warmup Iteration   1: 7712.869 ns/op
# Warmup Iteration   2: 2714.474 ns/op
# Warmup Iteration   3: 2408.589 ns/op
# Warmup Iteration   4: 2372.266 ns/op
Iteration   1: 2348.674 ns/op
Iteration   2: 2353.838 ns/op
Iteration   3: 2334.505 ns/op
Iteration   4: 2333.150 ns/op
Iteration   5: 2348.406 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  2343.714 ±(99.9%) 35.787 ns/op [Average]
  (min, avg, max) = (2333.150, 2343.714, 2353.838), stdev = 9.294
  CI (99.9%): [2307.927, 2379.502] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 84.51% complete, ETA 00:15:04
# Fork: 1 of 1
# Warmup Iteration   1: 22612.463 ns/op
# Warmup Iteration   2: 5782.179 ns/op
# Warmup Iteration   3: 5631.903 ns/op
# Warmup Iteration   4: 5592.992 ns/op
Iteration   1: 5831.577 ns/op
Iteration   2: 5552.940 ns/op
Iteration   3: 5482.562 ns/op
Iteration   4: 5476.454 ns/op
Iteration   5: 5492.554 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  5567.217 ±(99.9%) 581.016 ns/op [Average]
  (min, avg, max) = (5476.454, 5567.217, 5831.577), stdev = 150.888
  CI (99.9%): [4986.201, 6148.234] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 84.71% complete, ETA 00:14:52
# Fork: 1 of 1
# Warmup Iteration   1: 25244.003 ns/op
# Warmup Iteration   2: 10183.315 ns/op
# Warmup Iteration   3: 10010.365 ns/op
# Warmup Iteration   4: 9926.955 ns/op
Iteration   1: 9791.273 ns/op
Iteration   2: 9870.720 ns/op
Iteration   3: 9783.624 ns/op
Iteration   4: 9808.463 ns/op
Iteration   5: 9818.876 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  9814.592 ±(99.9%) 132.120 ns/op [Average]
  (min, avg, max) = (9783.624, 9814.592, 9870.720), stdev = 34.311
  CI (99.9%): [9682.472, 9946.711] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 84.90% complete, ETA 00:14:41
# Fork: 1 of 1
# Warmup Iteration   1: 60965.699 ns/op
# Warmup Iteration   2: 18780.717 ns/op
# Warmup Iteration   3: 18895.298 ns/op
# Warmup Iteration   4: 19750.007 ns/op
Iteration   1: 17657.424 ns/op
Iteration   2: 19199.825 ns/op
Iteration   3: 18288.354 ns/op
Iteration   4: 17566.189 ns/op
Iteration   5: 17534.781 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  18049.315 ±(99.9%) 2744.882 ns/op [Average]
  (min, avg, max) = (17534.781, 18049.315, 19199.825), stdev = 712.837
  CI (99.9%): [15304.433, 20794.197] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 85.10% complete, ETA 00:14:30
# Fork: 1 of 1
# Warmup Iteration   1: 628432.258 ns/op
# Warmup Iteration   2: 173264.559 ns/op
# Warmup Iteration   3: 157274.838 ns/op
# Warmup Iteration   4: 148442.035 ns/op
Iteration   1: 146743.049 ns/op
Iteration   2: 149232.200 ns/op
Iteration   3: 146198.668 ns/op
Iteration   4: 145640.435 ns/op
Iteration   5: 150711.045 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  147705.079 ±(99.9%) 8353.648 ns/op [Average]
  (min, avg, max) = (145640.435, 147705.079, 150711.045), stdev = 2169.416
  CI (99.9%): [139351.431, 156058.728] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 85.29% complete, ETA 00:14:18
# Fork: 1 of 1
# Warmup Iteration   1: 22408.198 ns/op
# Warmup Iteration   2: 4231.834 ns/op
# Warmup Iteration   3: 4034.075 ns/op
# Warmup Iteration   4: 3935.189 ns/op
Iteration   1: 3870.402 ns/op
Iteration   2: 3816.680 ns/op
Iteration   3: 3819.247 ns/op
Iteration   4: 3829.791 ns/op
Iteration   5: 3810.696 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  3829.363 ±(99.9%) 92.256 ns/op [Average]
  (min, avg, max) = (3810.696, 3829.363, 3870.402), stdev = 23.959
  CI (99.9%): [3737.107, 3921.619] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 85.49% complete, ETA 00:14:07
# Fork: 1 of 1
# Warmup Iteration   1: 43033.676 ns/op
# Warmup Iteration   2: 9448.888 ns/op
# Warmup Iteration   3: 7677.180 ns/op
# Warmup Iteration   4: 7192.474 ns/op
Iteration   1: 7108.604 ns/op
Iteration   2: 7093.195 ns/op
Iteration   3: 7130.112 ns/op
Iteration   4: 7095.406 ns/op
Iteration   5: 7090.075 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  7103.478 ±(99.9%) 63.453 ns/op [Average]
  (min, avg, max) = (7090.075, 7103.478, 7130.112), stdev = 16.478
  CI (99.9%): [7040.026, 7166.931] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 85.69% complete, ETA 00:13:56
# Fork: 1 of 1
# Warmup Iteration   1: 71742.714 ns/op
# Warmup Iteration   2: 16969.975 ns/op
# Warmup Iteration   3: 14235.163 ns/op
# Warmup Iteration   4: 13594.362 ns/op
Iteration   1: 13224.634 ns/op
Iteration   2: 13271.786 ns/op
Iteration   3: 14566.305 ns/op
Iteration   4: 13231.542 ns/op
Iteration   5: 13278.728 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  13514.599 ±(99.9%) 2265.736 ns/op [Average]
  (min, avg, max) = (13224.634, 13514.599, 14566.305), stdev = 588.404
  CI (99.9%): [11248.863, 15780.335] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 85.88% complete, ETA 00:13:44
# Fork: 1 of 1
# Warmup Iteration   1: 117501.712 ns/op
# Warmup Iteration   2: 30622.989 ns/op
# Warmup Iteration   3: 26736.582 ns/op
# Warmup Iteration   4: 25541.822 ns/op
Iteration   1: 25084.750 ns/op
Iteration   2: 25152.210 ns/op
Iteration   3: 26429.463 ns/op
Iteration   4: 25064.939 ns/op
Iteration   5: 25072.189 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  25360.710 ±(99.9%) 2304.430 ns/op [Average]
  (min, avg, max) = (25064.939, 25360.710, 26429.463), stdev = 598.453
  CI (99.9%): [23056.280, 27665.140] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 86.08% complete, ETA 00:13:33
# Fork: 1 of 1
# Warmup Iteration   1: 893314.522 ns/op
# Warmup Iteration   2: 322304.656 ns/op
# Warmup Iteration   3: 285851.948 ns/op
# Warmup Iteration   4: 269732.247 ns/op
Iteration   1: 270443.601 ns/op
Iteration   2: 270479.516 ns/op
Iteration   3: 270553.852 ns/op
Iteration   4: 269501.813 ns/op
Iteration   5: 270218.590 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  270239.474 ±(99.9%) 1659.245 ns/op [Average]
  (min, avg, max) = (269501.813, 270239.474, 270553.852), stdev = 430.901
  CI (99.9%): [268580.229, 271898.719] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 86.27% complete, ETA 00:13:21
# Fork: 1 of 1
# Warmup Iteration   1: 19734.197 ns/op
# Warmup Iteration   2: 4528.978 ns/op
# Warmup Iteration   3: 4150.485 ns/op
# Warmup Iteration   4: 3949.691 ns/op
Iteration   1: 3899.646 ns/op
Iteration   2: 3900.283 ns/op
Iteration   3: 3889.597 ns/op
Iteration   4: 3902.141 ns/op
Iteration   5: 3893.758 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  3897.085 ±(99.9%) 20.146 ns/op [Average]
  (min, avg, max) = (3889.597, 3897.085, 3902.141), stdev = 5.232
  CI (99.9%): [3876.940, 3917.231] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 86.47% complete, ETA 00:13:10
# Fork: 1 of 1
# Warmup Iteration   1: 53497.693 ns/op
# Warmup Iteration   2: 9187.617 ns/op
# Warmup Iteration   3: 8359.259 ns/op
# Warmup Iteration   4: 8009.927 ns/op
Iteration   1: 7796.815 ns/op
Iteration   2: 7777.646 ns/op
Iteration   3: 8096.799 ns/op
Iteration   4: 7819.881 ns/op
Iteration   5: 7804.841 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  7859.196 ±(99.9%) 514.811 ns/op [Average]
  (min, avg, max) = (7777.646, 7859.196, 8096.799), stdev = 133.695
  CI (99.9%): [7344.385, 8374.007] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 86.67% complete, ETA 00:12:59
# Fork: 1 of 1
# Warmup Iteration   1: 63530.198 ns/op
# Warmup Iteration   2: 19651.014 ns/op
# Warmup Iteration   3: 17153.493 ns/op
# Warmup Iteration   4: 15994.730 ns/op
Iteration   1: 16014.512 ns/op
Iteration   2: 15970.751 ns/op
Iteration   3: 16209.854 ns/op
Iteration   4: 15991.345 ns/op
Iteration   5: 15962.784 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  16029.849 ±(99.9%) 395.089 ns/op [Average]
  (min, avg, max) = (15962.784, 16029.849, 16209.854), stdev = 102.603
  CI (99.9%): [15634.760, 16424.938] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 86.86% complete, ETA 00:12:47
# Fork: 1 of 1
# Warmup Iteration   1: 180070.824 ns/op
# Warmup Iteration   2: 44406.144 ns/op
# Warmup Iteration   3: 40175.761 ns/op
# Warmup Iteration   4: 38674.043 ns/op
Iteration   1: 37490.343 ns/op
Iteration   2: 37338.559 ns/op
Iteration   3: 37240.685 ns/op
Iteration   4: 37353.215 ns/op
Iteration   5: 37327.538 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  37350.068 ±(99.9%) 345.978 ns/op [Average]
  (min, avg, max) = (37240.685, 37350.068, 37490.343), stdev = 89.849
  CI (99.9%): [37004.090, 37696.046] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 87.06% complete, ETA 00:12:36
# Fork: 1 of 1
# Warmup Iteration   1: 1682015.782 ns/op
# Warmup Iteration   2: 483070.694 ns/op
# Warmup Iteration   3: 385879.640 ns/op
# Warmup Iteration   4: 370541.908 ns/op
Iteration   1: 358181.046 ns/op
Iteration   2: 356792.575 ns/op
Iteration   3: 355816.598 ns/op
Iteration   4: 354860.113 ns/op
Iteration   5: 354475.435 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  356025.153 ±(99.9%) 5788.547 ns/op [Average]
  (min, avg, max) = (354475.435, 356025.153, 358181.046), stdev = 1503.267
  CI (99.9%): [350236.607, 361813.700] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 87.25% complete, ETA 00:12:25
# Fork: 1 of 1
# Warmup Iteration   1: 82197.143 ns/op
# Warmup Iteration   2: 32824.149 ns/op
# Warmup Iteration   3: 28724.165 ns/op
# Warmup Iteration   4: 28428.647 ns/op
Iteration   1: 28606.892 ns/op
Iteration   2: 28361.494 ns/op
Iteration   3: 28005.634 ns/op
Iteration   4: 27897.634 ns/op
Iteration   5: 28136.823 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  28201.695 ±(99.9%) 1097.301 ns/op [Average]
  (min, avg, max) = (27897.634, 28201.695, 28606.892), stdev = 284.966
  CI (99.9%): [27104.394, 29298.997] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 87.45% complete, ETA 00:12:13
# Fork: 1 of 1
# Warmup Iteration   1: 83489.199 ns/op
# Warmup Iteration   2: 42699.807 ns/op
# Warmup Iteration   3: 39860.488 ns/op
# Warmup Iteration   4: 39458.891 ns/op
Iteration   1: 39271.003 ns/op
Iteration   2: 38957.983 ns/op
Iteration   3: 38524.224 ns/op
Iteration   4: 38510.699 ns/op
Iteration   5: 38788.533 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  38810.488 ±(99.9%) 1226.977 ns/op [Average]
  (min, avg, max) = (38510.699, 38810.488, 39271.003), stdev = 318.642
  CI (99.9%): [37583.511, 40037.465] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 87.65% complete, ETA 00:12:02
# Fork: 1 of 1
# Warmup Iteration   1: 167904.040 ns/op
# Warmup Iteration   2: 73244.071 ns/op
# Warmup Iteration   3: 63950.526 ns/op
# Warmup Iteration   4: 66869.418 ns/op
Iteration   1: 66867.071 ns/op
Iteration   2: 68256.524 ns/op
Iteration   3: 63734.472 ns/op
Iteration   4: 63013.930 ns/op
Iteration   5: 63234.772 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  65021.354 ±(99.9%) 9183.339 ns/op [Average]
  (min, avg, max) = (63013.930, 65021.354, 68256.524), stdev = 2384.884
  CI (99.9%): [55838.015, 74204.693] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 87.84% complete, ETA 00:11:50
# Fork: 1 of 1
# Warmup Iteration   1: 396535.225 ns/op
# Warmup Iteration   2: 148611.868 ns/op
# Warmup Iteration   3: 126596.587 ns/op
# Warmup Iteration   4: 127370.878 ns/op
Iteration   1: 125554.776 ns/op
Iteration   2: 124421.280 ns/op
Iteration   3: 124931.777 ns/op
Iteration   4: 124122.214 ns/op
Iteration   5: 128595.638 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  125525.137 ±(99.9%) 6933.197 ns/op [Average]
  (min, avg, max) = (124122.214, 125525.137, 128595.638), stdev = 1800.529
  CI (99.9%): [118591.940, 132458.334] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 88.04% complete, ETA 00:11:39
# Fork: 1 of 1
# Warmup Iteration   1: 2318040.734 ns/op
# Warmup Iteration   2: 1233055.483 ns/op
# Warmup Iteration   3: 1054994.709 ns/op
# Warmup Iteration   4: 1032113.001 ns/op
Iteration   1: 1050477.893 ns/op
Iteration   2: 1029861.040 ns/op
Iteration   3: 1031201.919 ns/op
Iteration   4: 1026302.089 ns/op
Iteration   5: 1072748.107 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  1042118.210 ±(99.9%) 75250.987 ns/op [Average]
  (min, avg, max) = (1026302.089, 1042118.210, 1072748.107), stdev = 19542.442
  CI (99.9%): [966867.223, 1117369.197] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 88.24% complete, ETA 00:11:28
# Fork: 1 of 1
# Warmup Iteration   1: 6244.613 ns/op
# Warmup Iteration   2: 3173.057 ns/op
# Warmup Iteration   3: 2854.616 ns/op
# Warmup Iteration   4: 2868.003 ns/op
Iteration   1: 2846.812 ns/op
Iteration   2: 2866.261 ns/op
Iteration   3: 2859.315 ns/op
Iteration   4: 2882.328 ns/op
Iteration   5: 2877.382 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  2866.420 ±(99.9%) 54.736 ns/op [Average]
  (min, avg, max) = (2846.812, 2866.420, 2882.328), stdev = 14.215
  CI (99.9%): [2811.684, 2921.155] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 88.43% complete, ETA 00:11:16
# Fork: 1 of 1
# Warmup Iteration   1: 9696.816 ns/op
# Warmup Iteration   2: 5043.747 ns/op
# Warmup Iteration   3: 4981.598 ns/op
# Warmup Iteration   4: 4651.027 ns/op
Iteration   1: 4651.101 ns/op
Iteration   2: 4658.847 ns/op
Iteration   3: 4659.842 ns/op
Iteration   4: 4675.109 ns/op
Iteration   5: 4670.849 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  4663.149 ±(99.9%) 37.379 ns/op [Average]
  (min, avg, max) = (4651.101, 4663.149, 4675.109), stdev = 9.707
  CI (99.9%): [4625.770, 4700.529] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 88.63% complete, ETA 00:11:05
# Fork: 1 of 1
# Warmup Iteration   1: 14503.492 ns/op
# Warmup Iteration   2: 8278.464 ns/op
# Warmup Iteration   3: 8015.357 ns/op
# Warmup Iteration   4: 7973.590 ns/op
Iteration   1: 7891.267 ns/op
Iteration   2: 7758.870 ns/op
Iteration   3: 7711.392 ns/op
Iteration   4: 7736.706 ns/op
Iteration   5: 7727.361 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  7765.119 ±(99.9%) 279.483 ns/op [Average]
  (min, avg, max) = (7711.392, 7765.119, 7891.267), stdev = 72.581
  CI (99.9%): [7485.636, 8044.602] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 88.82% complete, ETA 00:10:53
# Fork: 1 of 1
# Warmup Iteration   1: 24855.484 ns/op
# Warmup Iteration   2: 14621.342 ns/op
# Warmup Iteration   3: 13956.982 ns/op
# Warmup Iteration   4: 13683.021 ns/op
Iteration   1: 13530.884 ns/op
Iteration   2: 13438.768 ns/op
Iteration   3: 13428.721 ns/op
Iteration   4: 13437.350 ns/op
Iteration   5: 13500.712 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  13467.287 ±(99.9%) 176.025 ns/op [Average]
  (min, avg, max) = (13428.721, 13467.287, 13530.884), stdev = 45.713
  CI (99.9%): [13291.262, 13643.312] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 89.02% complete, ETA 00:10:42
# Fork: 1 of 1
# Warmup Iteration   1: 261888.981 ns/op
# Warmup Iteration   2: 131244.358 ns/op
# Warmup Iteration   3: 127896.818 ns/op
# Warmup Iteration   4: 127329.571 ns/op
Iteration   1: 129641.060 ns/op
Iteration   2: 124897.293 ns/op
Iteration   3: 126000.896 ns/op
Iteration   4: 130129.898 ns/op
Iteration   5: 124117.947 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  126957.419 ±(99.9%) 10630.883 ns/op [Average]
  (min, avg, max) = (124117.947, 126957.419, 130129.898), stdev = 2760.807
  CI (99.9%): [116326.536, 137588.302] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 89.22% complete, ETA 00:10:31
# Fork: 1 of 1
# Warmup Iteration   1: 7748.493 ns/op
# Warmup Iteration   2: 5979.749 ns/op
# Warmup Iteration   3: 6233.034 ns/op
# Warmup Iteration   4: 6225.861 ns/op
Iteration   1: 6455.357 ns/op
Iteration   2: 6499.146 ns/op
Iteration   3: 6439.205 ns/op
Iteration   4: 5877.816 ns/op
Iteration   5: 6594.331 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  6373.171 ±(99.9%) 1091.291 ns/op [Average]
  (min, avg, max) = (5877.816, 6373.171, 6594.331), stdev = 283.405
  CI (99.9%): [5281.880, 7464.462] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 89.41% complete, ETA 00:10:19
# Fork: 1 of 1
# Warmup Iteration   1: 14394.033 ns/op
# Warmup Iteration   2: 9922.097 ns/op
# Warmup Iteration   3: 9776.721 ns/op
# Warmup Iteration   4: 10170.006 ns/op
Iteration   1: 10021.754 ns/op
Iteration   2: 9933.853 ns/op
Iteration   3: 10016.803 ns/op
Iteration   4: 10432.437 ns/op
Iteration   5: 12466.511 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  10574.272 ±(99.9%) 4141.399 ns/op [Average]
  (min, avg, max) = (9933.853, 10574.272, 12466.511), stdev = 1075.508
  CI (99.9%): [6432.872, 14715.671] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 89.61% complete, ETA 00:10:08
# Fork: 1 of 1
# Warmup Iteration   1: 31075.563 ns/op
# Warmup Iteration   2: 17587.722 ns/op
# Warmup Iteration   3: 27853.401 ns/op
# Warmup Iteration   4: 24598.518 ns/op
Iteration   1: 19510.156 ns/op
Iteration   2: 24559.664 ns/op
Iteration   3: 21456.630 ns/op
Iteration   4: 17114.757 ns/op
Iteration   5: 25662.674 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  21660.776 ±(99.9%) 13580.258 ns/op [Average]
  (min, avg, max) = (17114.757, 21660.776, 25662.674), stdev = 3526.750
  CI (99.9%): [8080.518, 35241.035] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 89.80% complete, ETA 00:09:56
# Fork: 1 of 1
# Warmup Iteration   1: 47494.948 ns/op
# Warmup Iteration   2: 32100.585 ns/op
# Warmup Iteration   3: 39799.216 ns/op
# Warmup Iteration   4: 43469.949 ns/op
Iteration   1: 31528.718 ns/op
Iteration   2: 31650.349 ns/op
Iteration   3: 39393.859 ns/op
Iteration   4: 61598.810 ns/op
Iteration   5: 60310.705 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  44896.488 ±(99.9%) 57791.805 ns/op [Average]
  (min, avg, max) = (31528.718, 44896.488, 61598.810), stdev = 15008.348
  CI (99.9%): [≈ 0, 102688.293] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 90.00% complete, ETA 00:09:45
# Fork: 1 of 1
# Warmup Iteration   1: 572545.005 ns/op
# Warmup Iteration   2: 518063.402 ns/op
# Warmup Iteration   3: 501532.248 ns/op
# Warmup Iteration   4: 494262.909 ns/op
Iteration   1: 496765.670 ns/op
Iteration   2: 499660.595 ns/op
Iteration   3: 491875.225 ns/op
Iteration   4: 494396.080 ns/op
Iteration   5: 493391.308 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  495217.776 ±(99.9%) 11761.564 ns/op [Average]
  (min, avg, max) = (491875.225, 495217.776, 499660.595), stdev = 3054.441
  CI (99.9%): [483456.211, 506979.340] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 90.20% complete, ETA 00:09:33
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 90.39% complete, ETA 00:09:21
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 90.59% complete, ETA 00:09:09
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 90.78% complete, ETA 00:08:56
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 90.98% complete, ETA 00:08:44
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:756)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:473)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:74)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:369)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:363)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:362)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:352)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)

java.lang.UnsupportedClassVersionError: com/github/plokhotnyuk/jsoniter_scala/core/ByteArrayAccess has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.writeNonEscapedAsciiKey(JsonWriter.scala:138)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.e0(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.komanov.serialization.converters.JsoniterScalaConverter$$anon$2.encodeValue(JsoniterScalaConverter.scala:20)
	at com.github.plokhotnyuk.jsoniter_scala.core.JsonWriter.write(JsonWriter.scala:520)
	at com.github.plokhotnyuk.jsoniter_scala.core.package$.writeToArray(package.scala:405)
	at com.komanov.serialization.converters.JsoniterScalaConverter$.toByteArray(JsoniterScalaConverter.scala:23)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:750)




# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 91.18% complete, ETA 00:08:32
# Fork: 1 of 1
# Warmup Iteration   1: 34217.432 ns/op
# Warmup Iteration   2: 20744.592 ns/op
# Warmup Iteration   3: 19910.798 ns/op
# Warmup Iteration   4: 19537.528 ns/op
Iteration   1: 19155.820 ns/op
Iteration   2: 19120.250 ns/op
Iteration   3: 19169.761 ns/op
Iteration   4: 20000.153 ns/op
Iteration   5: 19264.151 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  19342.027 ±(99.9%) 1431.393 ns/op [Average]
  (min, avg, max) = (19120.250, 19342.027, 20000.153), stdev = 371.728
  CI (99.9%): [17910.634, 20773.421] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 91.37% complete, ETA 00:08:21
# Fork: 1 of 1
# Warmup Iteration   1: 74603.858 ns/op
# Warmup Iteration   2: 40794.140 ns/op
# Warmup Iteration   3: 40791.744 ns/op
# Warmup Iteration   4: 37667.328 ns/op
Iteration   1: 36894.642 ns/op
Iteration   2: 37006.072 ns/op
Iteration   3: 37138.541 ns/op
Iteration   4: 36742.591 ns/op
Iteration   5: 36818.207 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  36920.010 ±(99.9%) 601.636 ns/op [Average]
  (min, avg, max) = (36742.591, 36920.010, 37138.541), stdev = 156.243
  CI (99.9%): [36318.374, 37521.646] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 91.57% complete, ETA 00:08:09
# Fork: 1 of 1
# Warmup Iteration   1: 148386.532 ns/op
# Warmup Iteration   2: 85785.135 ns/op
# Warmup Iteration   3: 84438.091 ns/op
# Warmup Iteration   4: 80685.459 ns/op
Iteration   1: 80176.166 ns/op
Iteration   2: 87140.815 ns/op
Iteration   3: 83474.369 ns/op
Iteration   4: 79971.557 ns/op
Iteration   5: 80020.851 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  82156.752 ±(99.9%) 12151.951 ns/op [Average]
  (min, avg, max) = (79971.557, 82156.752, 87140.815), stdev = 3155.823
  CI (99.9%): [70004.801, 94308.702] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 91.76% complete, ETA 00:07:58
# Fork: 1 of 1
# Warmup Iteration   1: 389151.658 ns/op
# Warmup Iteration   2: 203035.983 ns/op
# Warmup Iteration   3: 189400.727 ns/op
# Warmup Iteration   4: 181263.723 ns/op
Iteration   1: 177148.639 ns/op
Iteration   2: 177259.574 ns/op
Iteration   3: 176656.124 ns/op
Iteration   4: 177682.370 ns/op
Iteration   5: 177481.685 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  177245.678 ±(99.9%) 1495.794 ns/op [Average]
  (min, avg, max) = (176656.124, 177245.678, 177682.370), stdev = 388.453
  CI (99.9%): [175749.884, 178741.473] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 91.96% complete, ETA 00:07:47
# Fork: 1 of 1
# Warmup Iteration   1: 2913405.373 ns/op
# Warmup Iteration   2: 1684695.428 ns/op
# Warmup Iteration   3: 1582121.393 ns/op
# Warmup Iteration   4: 1566493.791 ns/op
Iteration   1: 1535705.110 ns/op
Iteration   2: 1517988.669 ns/op
Iteration   3: 1508899.569 ns/op
Iteration   4: 1505702.678 ns/op
Iteration   5: 1523647.035 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  1518388.612 ±(99.9%) 46313.776 ns/op [Average]
  (min, avg, max) = (1505702.678, 1518388.612, 1535705.110), stdev = 12027.541
  CI (99.9%): [1472074.836, 1564702.388] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _1_K)

# Run progress: 92.16% complete, ETA 00:07:35
# Fork: 1 of 1
# Warmup Iteration   1: 23329.784 ns/op
# Warmup Iteration   2: 12347.515 ns/op
# Warmup Iteration   3: 11908.410 ns/op
# Warmup Iteration   4: 11969.798 ns/op
Iteration   1: 11560.815 ns/op
Iteration   2: 11538.375 ns/op
Iteration   3: 11451.100 ns/op
Iteration   4: 11471.137 ns/op
Iteration   5: 11887.178 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  11581.721 ±(99.9%) 680.460 ns/op [Average]
  (min, avg, max) = (11451.100, 11581.721, 11887.178), stdev = 176.713
  CI (99.9%): [10901.261, 12262.181] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _2_K)

# Run progress: 92.35% complete, ETA 00:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 42994.988 ns/op
# Warmup Iteration   2: 23666.251 ns/op
# Warmup Iteration   3: 22376.231 ns/op
# Warmup Iteration   4: 21898.000 ns/op
Iteration   1: 21722.266 ns/op
Iteration   2: 22361.968 ns/op
Iteration   3: 21250.375 ns/op
Iteration   4: 22033.426 ns/op
Iteration   5: 21246.470 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  21722.901 ±(99.9%) 1881.602 ns/op [Average]
  (min, avg, max) = (21246.470, 21722.901, 22361.968), stdev = 488.646
  CI (99.9%): [19841.299, 23604.503] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _4_K)

# Run progress: 92.55% complete, ETA 00:07:13
# Fork: 1 of 1
# Warmup Iteration   1: 87645.775 ns/op
# Warmup Iteration   2: 52234.850 ns/op
# Warmup Iteration   3: 49308.293 ns/op
# Warmup Iteration   4: 48557.128 ns/op
Iteration   1: 47969.447 ns/op
Iteration   2: 48045.572 ns/op
Iteration   3: 48013.843 ns/op
Iteration   4: 47498.582 ns/op
Iteration   5: 47343.641 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  47774.217 ±(99.9%) 1263.310 ns/op [Average]
  (min, avg, max) = (47343.641, 47774.217, 48045.572), stdev = 328.077
  CI (99.9%): [46510.907, 49037.526] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _8_K)

# Run progress: 92.75% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 225554.151 ns/op
# Warmup Iteration   2: 116368.742 ns/op
# Warmup Iteration   3: 110136.276 ns/op
# Warmup Iteration   4: 109024.210 ns/op
Iteration   1: 107288.409 ns/op
Iteration   2: 107666.367 ns/op
Iteration   3: 112702.424 ns/op
Iteration   4: 106577.484 ns/op
Iteration   5: 105386.170 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  107924.171 ±(99.9%) 10815.680 ns/op [Average]
  (min, avg, max) = (105386.170, 107924.171, 112702.424), stdev = 2808.798
  CI (99.9%): [97108.491, 118739.851] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_JSON, inputType = _64_K)

# Run progress: 92.94% complete, ETA 00:06:50
# Fork: 1 of 1
# Warmup Iteration   1: 1271453.405 ns/op
# Warmup Iteration   2: 850608.907 ns/op
# Warmup Iteration   3: 823913.961 ns/op
# Warmup Iteration   4: 814825.395 ns/op
Iteration   1: 800782.447 ns/op
Iteration   2: 811337.887 ns/op
Iteration   3: 797217.423 ns/op
Iteration   4: 806131.347 ns/op
Iteration   5: 818662.736 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  806826.368 ±(99.9%) 32775.590 ns/op [Average]
  (min, avg, max) = (797217.423, 806826.368, 818662.736), stdev = 8511.717
  CI (99.9%): [774050.779, 839601.958] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _1_K)

# Run progress: 93.14% complete, ETA 00:06:39
# Fork: 1 of 1
# Warmup Iteration   1: 19231.187 ns/op
# Warmup Iteration   2: 10855.032 ns/op
# Warmup Iteration   3: 10380.379 ns/op
# Warmup Iteration   4: 10142.730 ns/op
Iteration   1: 10270.422 ns/op
Iteration   2: 10163.744 ns/op
Iteration   3: 10732.221 ns/op
Iteration   4: 10229.772 ns/op
Iteration   5: 10167.365 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  10312.705 ±(99.9%) 919.273 ns/op [Average]
  (min, avg, max) = (10163.744, 10312.705, 10732.221), stdev = 238.732
  CI (99.9%): [9393.431, 11231.978] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _2_K)

# Run progress: 93.33% complete, ETA 00:06:27
# Fork: 1 of 1
# Warmup Iteration   1: 35020.882 ns/op
# Warmup Iteration   2: 21149.527 ns/op
# Warmup Iteration   3: 20098.439 ns/op
# Warmup Iteration   4: 19657.981 ns/op
Iteration   1: 19509.653 ns/op
Iteration   2: 19576.569 ns/op
Iteration   3: 19469.377 ns/op
Iteration   4: 19332.959 ns/op
Iteration   5: 21454.159 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  19868.543 ±(99.9%) 3430.323 ns/op [Average]
  (min, avg, max) = (19332.959, 19868.543, 21454.159), stdev = 890.844
  CI (99.9%): [16438.221, 23298.866] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _4_K)

# Run progress: 93.53% complete, ETA 00:06:16
# Fork: 1 of 1
# Warmup Iteration   1: 89393.152 ns/op
# Warmup Iteration   2: 43806.862 ns/op
# Warmup Iteration   3: 42373.684 ns/op
# Warmup Iteration   4: 42598.825 ns/op
Iteration   1: 41949.838 ns/op
Iteration   2: 41965.965 ns/op
Iteration   3: 42667.329 ns/op
Iteration   4: 41485.602 ns/op
Iteration   5: 41638.141 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  41941.375 ±(99.9%) 1751.266 ns/op [Average]
  (min, avg, max) = (41485.602, 41941.375, 42667.329), stdev = 454.798
  CI (99.9%): [40190.109, 43692.641] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _8_K)

# Run progress: 93.73% complete, ETA 00:06:05
# Fork: 1 of 1
# Warmup Iteration   1: 172580.282 ns/op
# Warmup Iteration   2: 96885.673 ns/op
# Warmup Iteration   3: 91144.971 ns/op
# Warmup Iteration   4: 92638.765 ns/op
Iteration   1: 90583.015 ns/op
Iteration   2: 89491.015 ns/op
Iteration   3: 89592.893 ns/op
Iteration   4: 89620.776 ns/op
Iteration   5: 89398.525 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  89737.245 ±(99.9%) 1851.806 ns/op [Average]
  (min, avg, max) = (89398.525, 89737.245, 90583.015), stdev = 480.908
  CI (99.9%): [87885.439, 91589.051] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_POOLED_JSON, inputType = _64_K)

# Run progress: 93.92% complete, ETA 00:05:53
# Fork: 1 of 1
# Warmup Iteration   1: 1391648.477 ns/op
# Warmup Iteration   2: 798342.710 ns/op
# Warmup Iteration   3: 790968.232 ns/op
# Warmup Iteration   4: 765409.760 ns/op
Iteration   1: 752321.540 ns/op
Iteration   2: 750171.101 ns/op
Iteration   3: 755303.042 ns/op
Iteration   4: 750814.695 ns/op
Iteration   5: 750815.053 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  751885.086 ±(99.9%) 7961.939 ns/op [Average]
  (min, avg, max) = (750171.101, 751885.086, 755303.042), stdev = 2067.690
  CI (99.9%): [743923.147, 759847.025] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _1_K)

# Run progress: 94.12% complete, ETA 00:05:42
# Fork: 1 of 1
# Warmup Iteration   1: 19097.919 ns/op
# Warmup Iteration   2: 11231.361 ns/op
# Warmup Iteration   3: 10896.842 ns/op
# Warmup Iteration   4: 10485.871 ns/op
Iteration   1: 10476.269 ns/op
Iteration   2: 10493.586 ns/op
Iteration   3: 10440.956 ns/op
Iteration   4: 10454.649 ns/op
Iteration   5: 10425.940 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  10458.280 ±(99.9%) 104.204 ns/op [Average]
  (min, avg, max) = (10425.940, 10458.280, 10493.586), stdev = 27.061
  CI (99.9%): [10354.076, 10562.484] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _2_K)

# Run progress: 94.31% complete, ETA 00:05:30
# Fork: 1 of 1
# Warmup Iteration   1: 45667.369 ns/op
# Warmup Iteration   2: 22837.407 ns/op
# Warmup Iteration   3: 21396.633 ns/op
# Warmup Iteration   4: 20111.210 ns/op
Iteration   1: 20416.124 ns/op
Iteration   2: 20381.795 ns/op
Iteration   3: 20062.962 ns/op
Iteration   4: 20675.526 ns/op
Iteration   5: 20140.260 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  20335.333 ±(99.9%) 936.618 ns/op [Average]
  (min, avg, max) = (20062.962, 20335.333, 20675.526), stdev = 243.237
  CI (99.9%): [19398.715, 21271.952] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _4_K)

# Run progress: 94.51% complete, ETA 00:05:19
# Fork: 1 of 1
# Warmup Iteration   1: 77640.813 ns/op
# Warmup Iteration   2: 49060.977 ns/op
# Warmup Iteration   3: 45122.538 ns/op
# Warmup Iteration   4: 45846.443 ns/op
Iteration   1: 43951.826 ns/op
Iteration   2: 44545.782 ns/op
Iteration   3: 43802.974 ns/op
Iteration   4: 43945.863 ns/op
Iteration   5: 43869.827 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  44023.254 ±(99.9%) 1149.063 ns/op [Average]
  (min, avg, max) = (43802.974, 44023.254, 44545.782), stdev = 298.408
  CI (99.9%): [42874.191, 45172.317] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _8_K)

# Run progress: 94.71% complete, ETA 00:05:08
# Fork: 1 of 1
# Warmup Iteration   1: 213884.344 ns/op
# Warmup Iteration   2: 106806.342 ns/op
# Warmup Iteration   3: 106472.750 ns/op
# Warmup Iteration   4: 97019.126 ns/op
Iteration   1: 96857.847 ns/op
Iteration   2: 96743.496 ns/op
Iteration   3: 96719.029 ns/op
Iteration   4: 101478.474 ns/op
Iteration   5: 96211.269 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  97602.023 ±(99.9%) 8399.263 ns/op [Average]
  (min, avg, max) = (96211.269, 97602.023, 101478.474), stdev = 2181.262
  CI (99.9%): [89202.760, 106001.287] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = UPICKLE_MSGPACK, inputType = _64_K)

# Run progress: 94.90% complete, ETA 00:04:56
# Fork: 1 of 1
# Warmup Iteration   1: 1642492.659 ns/op
# Warmup Iteration   2: 959396.004 ns/op
# Warmup Iteration   3: 907833.669 ns/op
# Warmup Iteration   4: 869388.499 ns/op
Iteration   1: 873918.392 ns/op
Iteration   2: 865957.743 ns/op
Iteration   3: 869001.001 ns/op
Iteration   4: 879603.699 ns/op
Iteration   5: 866950.387 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  871086.244 ±(99.9%) 21810.013 ns/op [Average]
  (min, avg, max) = (865957.743, 871086.244, 879603.699), stdev = 5663.991
  CI (99.9%): [849276.231, 892896.258] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _1_K)

# Run progress: 95.10% complete, ETA 00:04:45
# Fork: 1 of 1
# Warmup Iteration   1: 25914.620 ns/op
# Warmup Iteration   2: 10455.918 ns/op
# Warmup Iteration   3: 9426.102 ns/op
# Warmup Iteration   4: 9307.377 ns/op
Iteration   1: 9272.427 ns/op
Iteration   2: 9278.312 ns/op
Iteration   3: 9292.059 ns/op
Iteration   4: 9287.492 ns/op
Iteration   5: 9287.765 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  9283.611 ±(99.9%) 30.857 ns/op [Average]
  (min, avg, max) = (9272.427, 9283.611, 9292.059), stdev = 8.013
  CI (99.9%): [9252.754, 9314.468] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _2_K)

# Run progress: 95.29% complete, ETA 00:04:34
# Fork: 1 of 1
# Warmup Iteration   1: 64710.129 ns/op
# Warmup Iteration   2: 21994.867 ns/op
# Warmup Iteration   3: 18020.383 ns/op
# Warmup Iteration   4: 17229.151 ns/op
Iteration   1: 17236.194 ns/op
Iteration   2: 18275.874 ns/op
Iteration   3: 18130.064 ns/op
Iteration   4: 17302.848 ns/op
Iteration   5: 18379.969 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  17864.990 ±(99.9%) 2122.820 ns/op [Average]
  (min, avg, max) = (17236.194, 17864.990, 18379.969), stdev = 551.290
  CI (99.9%): [15742.169, 19987.810] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _4_K)

# Run progress: 95.49% complete, ETA 00:04:22
# Fork: 1 of 1
# Warmup Iteration   1: 129152.266 ns/op
# Warmup Iteration   2: 43101.841 ns/op
# Warmup Iteration   3: 34408.079 ns/op
# Warmup Iteration   4: 33399.403 ns/op
Iteration   1: 32484.610 ns/op
Iteration   2: 33043.236 ns/op
Iteration   3: 32597.784 ns/op
Iteration   4: 32504.428 ns/op
Iteration   5: 32525.824 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  32631.176 ±(99.9%) 902.140 ns/op [Average]
  (min, avg, max) = (32484.610, 32631.176, 33043.236), stdev = 234.283
  CI (99.9%): [31729.037, 33533.316] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _8_K)

# Run progress: 95.69% complete, ETA 00:04:11
# Fork: 1 of 1
# Warmup Iteration   1: 593856.215 ns/op
# Warmup Iteration   2: 75088.450 ns/op
# Warmup Iteration   3: 66303.139 ns/op
# Warmup Iteration   4: 65495.485 ns/op
Iteration   1: 64244.097 ns/op
Iteration   2: 64903.683 ns/op
Iteration   3: 64051.426 ns/op
Iteration   4: 63285.884 ns/op
Iteration   5: 63198.429 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  63936.704 ±(99.9%) 2730.509 ns/op [Average]
  (min, avg, max) = (63198.429, 63936.704, 64903.683), stdev = 709.104
  CI (99.9%): [61206.195, 66667.212] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO, inputType = _64_K)

# Run progress: 95.88% complete, ETA 00:03:59
# Fork: 1 of 1
# Warmup Iteration   1: 2574400.979 ns/op
# Warmup Iteration   2: 699966.338 ns/op
# Warmup Iteration   3: 666160.592 ns/op
# Warmup Iteration   4: 651928.789 ns/op
Iteration   1: 644128.574 ns/op
Iteration   2: 631329.346 ns/op
Iteration   3: 628030.336 ns/op
Iteration   4: 657785.816 ns/op
Iteration   5: 626581.631 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  637571.141 ±(99.9%) 51026.092 ns/op [Average]
  (min, avg, max) = (626581.631, 637571.141, 657785.816), stdev = 13251.314
  CI (99.9%): [586545.049, 688597.233] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _1_K)

# Run progress: 96.08% complete, ETA 00:03:48
# Fork: 1 of 1
# Warmup Iteration   1: 29252.079 ns/op
# Warmup Iteration   2: 10574.839 ns/op
# Warmup Iteration   3: 9354.328 ns/op
# Warmup Iteration   4: 9417.226 ns/op
Iteration   1: 9164.440 ns/op
Iteration   2: 9502.384 ns/op
Iteration   3: 9202.068 ns/op
Iteration   4: 9188.739 ns/op
Iteration   5: 9177.229 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  9246.972 ±(99.9%) 552.398 ns/op [Average]
  (min, avg, max) = (9164.440, 9246.972, 9502.384), stdev = 143.456
  CI (99.9%): [8694.574, 9799.370] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _2_K)

# Run progress: 96.27% complete, ETA 00:03:37
# Fork: 1 of 1
# Warmup Iteration   1: 49203.902 ns/op
# Warmup Iteration   2: 20063.114 ns/op
# Warmup Iteration   3: 17506.710 ns/op
# Warmup Iteration   4: 16616.385 ns/op
Iteration   1: 16531.246 ns/op
Iteration   2: 16543.687 ns/op
Iteration   3: 16530.933 ns/op
Iteration   4: 16539.150 ns/op
Iteration   5: 16491.062 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  16527.216 ±(99.9%) 80.563 ns/op [Average]
  (min, avg, max) = (16491.062, 16527.216, 16543.687), stdev = 20.922
  CI (99.9%): [16446.653, 16607.779] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _4_K)

# Run progress: 96.47% complete, ETA 00:03:25
# Fork: 1 of 1
# Warmup Iteration   1: 115881.967 ns/op
# Warmup Iteration   2: 37731.050 ns/op
# Warmup Iteration   3: 33618.072 ns/op
# Warmup Iteration   4: 32150.349 ns/op
Iteration   1: 32450.916 ns/op
Iteration   2: 33112.754 ns/op
Iteration   3: 31715.509 ns/op
Iteration   4: 31779.736 ns/op
Iteration   5: 31720.777 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  32155.938 ±(99.9%) 2379.451 ns/op [Average]
  (min, avg, max) = (31715.509, 32155.938, 33112.754), stdev = 617.936
  CI (99.9%): [29776.487, 34535.390] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _8_K)

# Run progress: 96.67% complete, ETA 00:03:14
# Fork: 1 of 1
# Warmup Iteration   1: 125962.265 ns/op
# Warmup Iteration   2: 66873.591 ns/op
# Warmup Iteration   3: 64828.214 ns/op
# Warmup Iteration   4: 65603.483 ns/op
Iteration   1: 63546.650 ns/op
Iteration   2: 63385.660 ns/op
Iteration   3: 62858.423 ns/op
Iteration   4: 62599.111 ns/op
Iteration   5: 63259.896 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  63129.948 ±(99.9%) 1505.485 ns/op [Average]
  (min, avg, max) = (62599.111, 63129.948, 63546.650), stdev = 390.970
  CI (99.9%): [61624.463, 64635.433] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CAP_N_PROTO_POOLED, inputType = _64_K)

# Run progress: 96.86% complete, ETA 00:03:02
# Fork: 1 of 1
# Warmup Iteration   1: 3763006.823 ns/op
# Warmup Iteration   2: 702153.896 ns/op
# Warmup Iteration   3: 690620.840 ns/op
# Warmup Iteration   4: 652213.540 ns/op
Iteration   1: 651089.294 ns/op
Iteration   2: 643172.618 ns/op
Iteration   3: 642917.181 ns/op
Iteration   4: 652231.991 ns/op
Iteration   5: 636182.988 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  645118.814 ±(99.9%) 25449.798 ns/op [Average]
  (min, avg, max) = (636182.988, 645118.814, 652231.991), stdev = 6609.232
  CI (99.9%): [619669.016, 670568.613] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.both
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _1_K)

# Run progress: 97.06% complete, ETA 00:02:51
# Fork: 1 of 1
# Warmup Iteration   1: 11123.580 ns/op
# Warmup Iteration   2: 4376.055 ns/op
# Warmup Iteration   3: 4282.211 ns/op
# Warmup Iteration   4: 3984.697 ns/op
Iteration   1: 3943.088 ns/op
Iteration   2: 3935.476 ns/op
Iteration   3: 3932.604 ns/op
Iteration   4: 3947.758 ns/op
Iteration   5: 3960.504 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.both":
  3943.886 ±(99.9%) 42.610 ns/op [Average]
  (min, avg, max) = (3932.604, 3943.886, 3960.504), stdev = 11.066
  CI (99.9%): [3901.276, 3986.496] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.both
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _2_K)

# Run progress: 97.25% complete, ETA 00:02:39
# Fork: 1 of 1
# Warmup Iteration   1: 28229.655 ns/op
# Warmup Iteration   2: 8755.284 ns/op
# Warmup Iteration   3: 8465.592 ns/op
# Warmup Iteration   4: 8170.924 ns/op
Iteration   1: 8279.535 ns/op
Iteration   2: 8664.099 ns/op
Iteration   3: 7952.559 ns/op
Iteration   4: 8186.581 ns/op
Iteration   5: 7940.498 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.both":
  8204.654 ±(99.9%) 1139.612 ns/op [Average]
  (min, avg, max) = (7940.498, 8204.654, 8664.099), stdev = 295.953
  CI (99.9%): [7065.043, 9344.266] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.both
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _4_K)

# Run progress: 97.45% complete, ETA 00:02:28
# Fork: 1 of 1
# Warmup Iteration   1: 49944.670 ns/op
# Warmup Iteration   2: 18433.232 ns/op
# Warmup Iteration   3: 17708.810 ns/op
# Warmup Iteration   4: 16827.404 ns/op
Iteration   1: 16899.272 ns/op
Iteration   2: 16412.137 ns/op
Iteration   3: 16922.038 ns/op
Iteration   4: 16457.077 ns/op
Iteration   5: 16778.328 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.both":
  16693.770 ±(99.9%) 936.957 ns/op [Average]
  (min, avg, max) = (16412.137, 16693.770, 16922.038), stdev = 243.325
  CI (99.9%): [15756.813, 17630.728] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.both
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _8_K)

# Run progress: 97.65% complete, ETA 00:02:17
# Fork: 1 of 1
# Warmup Iteration   1: 69006.030 ns/op
# Warmup Iteration   2: 27147.754 ns/op
# Warmup Iteration   3: 26131.877 ns/op
# Warmup Iteration   4: 24247.760 ns/op
Iteration   1: 24293.197 ns/op
Iteration   2: 24337.911 ns/op
Iteration   3: 24322.264 ns/op
Iteration   4: 27188.305 ns/op
Iteration   5: 24987.608 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.both":
  25025.857 ±(99.9%) 4787.339 ns/op [Average]
  (min, avg, max) = (24293.197, 25025.857, 27188.305), stdev = 1243.257
  CI (99.9%): [20238.518, 29813.196] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.both
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _64_K)

# Run progress: 97.84% complete, ETA 00:02:05
# Fork: 1 of 1
# Warmup Iteration   1: 658206.388 ns/op
# Warmup Iteration   2: 282542.975 ns/op
# Warmup Iteration   3: 246822.139 ns/op
# Warmup Iteration   4: 240326.072 ns/op
Iteration   1: 234259.925 ns/op
Iteration   2: 234033.195 ns/op
Iteration   3: 234347.370 ns/op
Iteration   4: 234431.127 ns/op
Iteration   5: 249593.682 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.both":
  237333.060 ±(99.9%) 26398.100 ns/op [Average]
  (min, avg, max) = (234033.195, 237333.060, 249593.682), stdev = 6855.503
  CI (99.9%): [210934.960, 263731.160] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.deserialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _1_K)

# Run progress: 98.04% complete, ETA 00:01:54
# Fork: 1 of 1
# Warmup Iteration   1: 5736.399 ns/op
# Warmup Iteration   2: 2788.779 ns/op
# Warmup Iteration   3: 2483.716 ns/op
# Warmup Iteration   4: 2441.532 ns/op
Iteration   1: 2439.459 ns/op
Iteration   2: 2438.904 ns/op
Iteration   3: 2442.091 ns/op
Iteration   4: 2439.346 ns/op
Iteration   5: 2441.532 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.deserialization":
  2440.266 ±(99.9%) 5.543 ns/op [Average]
  (min, avg, max) = (2438.904, 2440.266, 2442.091), stdev = 1.439
  CI (99.9%): [2434.724, 2445.809] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.deserialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _2_K)

# Run progress: 98.24% complete, ETA 00:01:42
# Fork: 1 of 1
# Warmup Iteration   1: 12485.805 ns/op
# Warmup Iteration   2: 5572.812 ns/op
# Warmup Iteration   3: 5214.670 ns/op
# Warmup Iteration   4: 4994.464 ns/op
Iteration   1: 5000.074 ns/op
Iteration   2: 5011.052 ns/op
Iteration   3: 4988.079 ns/op
Iteration   4: 4984.805 ns/op
Iteration   5: 4981.966 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.deserialization":
  4993.195 ±(99.9%) 46.721 ns/op [Average]
  (min, avg, max) = (4981.966, 4993.195, 5011.052), stdev = 12.133
  CI (99.9%): [4946.475, 5039.916] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.deserialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _4_K)

# Run progress: 98.43% complete, ETA 00:01:31
# Fork: 1 of 1
# Warmup Iteration   1: 22594.048 ns/op
# Warmup Iteration   2: 10982.506 ns/op
# Warmup Iteration   3: 10376.914 ns/op
# Warmup Iteration   4: 10165.143 ns/op
Iteration   1: 10025.545 ns/op
Iteration   2: 10027.191 ns/op
Iteration   3: 10035.740 ns/op
Iteration   4: 10023.689 ns/op
Iteration   5: 10006.581 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.deserialization":
  10023.749 ±(99.9%) 41.005 ns/op [Average]
  (min, avg, max) = (10006.581, 10023.749, 10035.740), stdev = 10.649
  CI (99.9%): [9982.744, 10064.754] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.deserialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _8_K)

# Run progress: 98.63% complete, ETA 00:01:19
# Fork: 1 of 1
# Warmup Iteration   1: 35894.393 ns/op
# Warmup Iteration   2: 18776.064 ns/op
# Warmup Iteration   3: 16952.769 ns/op
# Warmup Iteration   4: 16247.576 ns/op
Iteration   1: 15756.880 ns/op
Iteration   2: 15736.801 ns/op
Iteration   3: 15755.416 ns/op
Iteration   4: 15722.884 ns/op
Iteration   5: 15757.197 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.deserialization":
  15745.836 ±(99.9%) 59.382 ns/op [Average]
  (min, avg, max) = (15722.884, 15745.836, 15757.197), stdev = 15.421
  CI (99.9%): [15686.453, 15805.218] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.deserialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _64_K)

# Run progress: 98.82% complete, ETA 00:01:08
# Fork: 1 of 1
# Warmup Iteration   1: 320251.318 ns/op
# Warmup Iteration   2: 180872.355 ns/op
# Warmup Iteration   3: 160801.733 ns/op
# Warmup Iteration   4: 156881.895 ns/op
Iteration   1: 153459.359 ns/op
Iteration   2: 153961.012 ns/op
Iteration   3: 153988.711 ns/op
Iteration   4: 154194.156 ns/op
Iteration   5: 154028.997 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.deserialization":
  153926.447 ±(99.9%) 1064.039 ns/op [Average]
  (min, avg, max) = (153459.359, 153926.447, 154194.156), stdev = 276.328
  CI (99.9%): [152862.408, 154990.486] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.serialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _1_K)

# Run progress: 99.02% complete, ETA 00:00:57
# Fork: 1 of 1
# Warmup Iteration   1: 5967.152 ns/op
# Warmup Iteration   2: 2455.591 ns/op
# Warmup Iteration   3: 1181.365 ns/op
# Warmup Iteration   4: 1147.738 ns/op
Iteration   1: 1148.249 ns/op
Iteration   2: 1150.499 ns/op
Iteration   3: 1139.780 ns/op
Iteration   4: 1144.020 ns/op
Iteration   5: 1132.161 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.serialization":
  1142.942 ±(99.9%) 28.078 ns/op [Average]
  (min, avg, max) = (1132.161, 1142.942, 1150.499), stdev = 7.292
  CI (99.9%): [1114.864, 1171.019] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.serialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _2_K)

# Run progress: 99.22% complete, ETA 00:00:45
# Fork: 1 of 1
# Warmup Iteration   1: 8702.296 ns/op
# Warmup Iteration   2: 3454.558 ns/op
# Warmup Iteration   3: 2788.142 ns/op
# Warmup Iteration   4: 2738.866 ns/op
Iteration   1: 2745.293 ns/op
Iteration   2: 2729.294 ns/op
Iteration   3: 2721.412 ns/op
Iteration   4: 2705.277 ns/op
Iteration   5: 2706.248 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.serialization":
  2721.505 ±(99.9%) 64.510 ns/op [Average]
  (min, avg, max) = (2705.277, 2721.505, 2745.293), stdev = 16.753
  CI (99.9%): [2656.994, 2786.015] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.serialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _4_K)

# Run progress: 99.41% complete, ETA 00:00:34
# Fork: 1 of 1
# Warmup Iteration   1: 11573.797 ns/op
# Warmup Iteration   2: 7224.814 ns/op
# Warmup Iteration   3: 5350.705 ns/op
# Warmup Iteration   4: 5245.858 ns/op
Iteration   1: 5231.962 ns/op
Iteration   2: 5693.939 ns/op
Iteration   3: 5195.349 ns/op
Iteration   4: 5143.345 ns/op
Iteration   5: 5500.298 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.serialization":
  5352.978 ±(99.9%) 905.916 ns/op [Average]
  (min, avg, max) = (5143.345, 5352.978, 5693.939), stdev = 235.263
  CI (99.9%): [4447.063, 6258.894] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.serialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _8_K)

# Run progress: 99.61% complete, ETA 00:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 17790.646 ns/op
# Warmup Iteration   2: 10642.406 ns/op
# Warmup Iteration   3: 8711.604 ns/op
# Warmup Iteration   4: 9057.424 ns/op
Iteration   1: 8451.190 ns/op
Iteration   2: 8332.153 ns/op
Iteration   3: 8557.806 ns/op
Iteration   4: 8422.951 ns/op
Iteration   5: 8339.412 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.serialization":
  8420.702 ±(99.9%) 355.956 ns/op [Average]
  (min, avg, max) = (8332.153, 8420.702, 8557.806), stdev = 92.441
  CI (99.9%): [8064.746, 8776.659] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 1.8.0_342, VM 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -Xmx2G
# Warmup: 4 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.serialization
# Parameters: (converterType = SCALA_PB_DIRECT, inputType = _64_K)

# Run progress: 99.80% complete, ETA 00:00:11
# Fork: 1 of 1
# Warmup Iteration   1: 104026.585 ns/op
# Warmup Iteration   2: 72146.780 ns/op
# Warmup Iteration   3: 70219.842 ns/op
# Warmup Iteration   4: 71588.346 ns/op
Iteration   1: 69735.681 ns/op
Iteration   2: 72750.250 ns/op
Iteration   3: 69446.070 ns/op
Iteration   4: 68711.456 ns/op
Iteration   5: 72978.329 ns/op


Result "com.komanov.serialization.jmh.SiteRawScalaPbBenchmark.serialization":
  70724.357 ±(99.9%) 7664.595 ns/op [Average]
  (min, avg, max) = (68711.456, 70724.357, 72978.329), stdev = 1990.471
  CI (99.9%): [63059.763, 78388.952] (assumes normal distribution)


# Run complete. Total time: 01:37:02

Benchmark                                     (converterType)  (inputType)  Mode  Cnt         Score         Error  Units
EventBenchmark.both                                      JSON         _1_K  avgt    5     26179.048 ±    1759.558  ns/op
EventBenchmark.both                                      JSON         _2_K  avgt    5     47488.561 ±     734.462  ns/op
EventBenchmark.both                                      JSON         _4_K  avgt    5     98324.616 ±    9611.229  ns/op
EventBenchmark.both                                      JSON         _8_K  avgt    5    247258.659 ±   17342.161  ns/op
EventBenchmark.both                                      JSON        _64_K  avgt    5   2045895.537 ±   98820.043  ns/op
EventBenchmark.both                                      CBOR         _1_K  avgt    5     22935.238 ±    1530.405  ns/op
EventBenchmark.both                                      CBOR         _2_K  avgt    5     47362.689 ±    4228.015  ns/op
EventBenchmark.both                                      CBOR         _4_K  avgt    5     79982.607 ±    1013.952  ns/op
EventBenchmark.both                                      CBOR         _8_K  avgt    5    173312.946 ±    6467.732  ns/op
EventBenchmark.both                                      CBOR        _64_K  avgt    5   1850394.863 ±   80043.511  ns/op
EventBenchmark.both                                     SMILE         _1_K  avgt    5     23423.987 ±    1259.525  ns/op
EventBenchmark.both                                     SMILE         _2_K  avgt    5     43126.736 ±     912.698  ns/op
EventBenchmark.both                                     SMILE         _4_K  avgt    5     98670.502 ±    3903.759  ns/op
EventBenchmark.both                                     SMILE         _8_K  avgt    5    221936.257 ±    9702.108  ns/op
EventBenchmark.both                                     SMILE        _64_K  avgt    5   1842195.919 ±  183868.936  ns/op
EventBenchmark.both                                  SCALA_PB         _1_K  avgt    5      9290.536 ±     441.561  ns/op
EventBenchmark.both                                  SCALA_PB         _2_K  avgt    5     18092.477 ±     587.953  ns/op
EventBenchmark.both                                  SCALA_PB         _4_K  avgt    5     33761.344 ±    2864.015  ns/op
EventBenchmark.both                                  SCALA_PB         _8_K  avgt    5     69262.702 ±    2690.826  ns/op
EventBenchmark.both                                  SCALA_PB        _64_K  avgt    5    746307.362 ±   36043.216  ns/op
EventBenchmark.both                                   JAVA_PB         _1_K  avgt    5      9807.256 ±     515.453  ns/op
EventBenchmark.both                                   JAVA_PB         _2_K  avgt    5     19245.382 ±     244.509  ns/op
EventBenchmark.both                                   JAVA_PB         _4_K  avgt    5     36818.358 ±    3842.607  ns/op
EventBenchmark.both                                   JAVA_PB         _8_K  avgt    5     73852.594 ±    1234.437  ns/op
EventBenchmark.both                                   JAVA_PB        _64_K  avgt    5    803943.330 ±   12249.193  ns/op
EventBenchmark.both                               JAVA_THRIFT         _1_K  avgt    5     11136.982 ±      23.889  ns/op
EventBenchmark.both                               JAVA_THRIFT         _2_K  avgt    5     21213.691 ±     978.278  ns/op
EventBenchmark.both                               JAVA_THRIFT         _4_K  avgt    5     42325.951 ±     396.693  ns/op
EventBenchmark.both                               JAVA_THRIFT         _8_K  avgt    5     92205.700 ±    4690.233  ns/op
EventBenchmark.both                               JAVA_THRIFT        _64_K  avgt    5   1006784.809 ±   53817.629  ns/op
EventBenchmark.both                              SERIALIZABLE         _1_K  avgt    5    147659.817 ±    9546.135  ns/op
EventBenchmark.both                              SERIALIZABLE         _2_K  avgt    5    265838.231 ±    7737.835  ns/op
EventBenchmark.both                              SERIALIZABLE         _4_K  avgt    5    621490.705 ±    9857.201  ns/op
EventBenchmark.both                              SERIALIZABLE         _8_K  avgt    5   1546101.307 ±   44186.866  ns/op
EventBenchmark.both                              SERIALIZABLE        _64_K  avgt    5  13061050.566 ± 1383102.849  ns/op
EventBenchmark.both                                 BOOPICKLE         _1_K  avgt    5      7221.284 ±     451.262  ns/op
EventBenchmark.both                                 BOOPICKLE         _2_K  avgt    5     13452.358 ±     144.475  ns/op
EventBenchmark.both                                 BOOPICKLE         _4_K  avgt    5     25020.299 ±     343.782  ns/op
EventBenchmark.both                                 BOOPICKLE         _8_K  avgt    5     47534.867 ±    1678.704  ns/op
EventBenchmark.both                                 BOOPICKLE        _64_K  avgt    5    490849.650 ±   59615.068  ns/op
EventBenchmark.both                                     CHILL         _1_K  avgt    5     65783.365 ±    3925.852  ns/op
EventBenchmark.both                                     CHILL         _2_K  avgt    5    131042.055 ±   23057.284  ns/op
EventBenchmark.both                                     CHILL         _4_K  avgt    5    240199.758 ±   42153.677  ns/op
EventBenchmark.both                                     CHILL         _8_K  avgt    5    585498.147 ±  124632.030  ns/op
EventBenchmark.both                                     CHILL        _64_K  avgt    5   5326039.084 ± 1429398.169  ns/op
EventBenchmark.both                                     CIRCE         _1_K  avgt    5    188989.489 ±    5211.233  ns/op
EventBenchmark.both                                     CIRCE         _2_K  avgt    5    287990.378 ±    7202.164  ns/op
EventBenchmark.both                                     CIRCE         _4_K  avgt    5    582552.997 ±   20522.179  ns/op
EventBenchmark.both                                     CIRCE         _8_K  avgt    5   1394840.495 ±  128946.463  ns/op
EventBenchmark.both                                     CIRCE        _64_K  avgt    5  12967598.144 ±  469584.418  ns/op
EventBenchmark.both                              UPICKLE_JSON         _1_K  avgt    5     51031.319 ±    5031.047  ns/op
EventBenchmark.both                              UPICKLE_JSON         _2_K  avgt    5     96183.466 ±    7520.388  ns/op
EventBenchmark.both                              UPICKLE_JSON         _4_K  avgt    5    222472.224 ±    5094.760  ns/op
EventBenchmark.both                              UPICKLE_JSON         _8_K  avgt    5    524692.076 ±   18568.686  ns/op
EventBenchmark.both                              UPICKLE_JSON        _64_K  avgt    5   5143585.953 ±  131312.119  ns/op
EventBenchmark.both                       UPICKLE_POOLED_JSON         _1_K  avgt    5     45111.326 ±     966.964  ns/op
EventBenchmark.both                       UPICKLE_POOLED_JSON         _2_K  avgt    5     89560.492 ±    2483.743  ns/op
EventBenchmark.both                       UPICKLE_POOLED_JSON         _4_K  avgt    5    208400.178 ±    5259.202  ns/op
EventBenchmark.both                       UPICKLE_POOLED_JSON         _8_K  avgt    5    515892.310 ±   37739.658  ns/op
EventBenchmark.both                       UPICKLE_POOLED_JSON        _64_K  avgt    5   4798800.493 ±  111181.197  ns/op
EventBenchmark.both                           UPICKLE_MSGPACK         _1_K  avgt    5     38513.273 ±     586.472  ns/op
EventBenchmark.both                           UPICKLE_MSGPACK         _2_K  avgt    5     75326.290 ±    6672.513  ns/op
EventBenchmark.both                           UPICKLE_MSGPACK         _4_K  avgt    5    177417.188 ±    7155.695  ns/op
EventBenchmark.both                           UPICKLE_MSGPACK         _8_K  avgt    5    437521.722 ±   43837.690  ns/op
EventBenchmark.both                           UPICKLE_MSGPACK        _64_K  avgt    5   3758118.025 ±   48209.195  ns/op
EventBenchmark.both                               CAP_N_PROTO         _1_K  avgt    5     62461.419 ±    2999.125  ns/op
EventBenchmark.both                               CAP_N_PROTO         _2_K  avgt    5    115185.196 ±    6966.317  ns/op
EventBenchmark.both                               CAP_N_PROTO         _4_K  avgt    5    237636.589 ±   38692.480  ns/op
EventBenchmark.both                               CAP_N_PROTO         _8_K  avgt    5    548119.856 ±   56281.768  ns/op
EventBenchmark.both                               CAP_N_PROTO        _64_K  avgt    5   5155562.945 ±  348418.217  ns/op
EventBenchmark.both                        CAP_N_PROTO_POOLED         _1_K  avgt    5     60960.605 ±    1905.034  ns/op
EventBenchmark.both                        CAP_N_PROTO_POOLED         _2_K  avgt    5    113073.242 ±    7132.668  ns/op
EventBenchmark.both                        CAP_N_PROTO_POOLED         _4_K  avgt    5    232963.089 ±   29526.024  ns/op
EventBenchmark.both                        CAP_N_PROTO_POOLED         _8_K  avgt    5    512278.200 ±   35918.960  ns/op
EventBenchmark.both                        CAP_N_PROTO_POOLED        _64_K  avgt    5   5136598.445 ±  332257.660  ns/op
EventBenchmark.deserialization                           JSON         _1_K  avgt    5     13306.193 ±     816.457  ns/op
EventBenchmark.deserialization                           JSON         _2_K  avgt    5     25849.851 ±    1155.613  ns/op
EventBenchmark.deserialization                           JSON         _4_K  avgt    5     53704.140 ±    2432.860  ns/op
EventBenchmark.deserialization                           JSON         _8_K  avgt    5    122646.619 ±    2140.244  ns/op
EventBenchmark.deserialization                           JSON        _64_K  avgt    5   1069224.909 ±   47571.510  ns/op
EventBenchmark.deserialization                           CBOR         _1_K  avgt    5     13658.107 ±     427.487  ns/op
EventBenchmark.deserialization                           CBOR         _2_K  avgt    5     27174.452 ±     959.404  ns/op
EventBenchmark.deserialization                           CBOR         _4_K  avgt    5     54100.675 ±    1468.004  ns/op
EventBenchmark.deserialization                           CBOR         _8_K  avgt    5    112791.710 ±    6461.134  ns/op
EventBenchmark.deserialization                           CBOR        _64_K  avgt    5   1119292.477 ±   59968.483  ns/op
EventBenchmark.deserialization                          SMILE         _1_K  avgt    5     13269.651 ±    1298.265  ns/op
EventBenchmark.deserialization                          SMILE         _2_K  avgt    5     25640.548 ±     811.390  ns/op
EventBenchmark.deserialization                          SMILE         _4_K  avgt    5     50565.733 ±    1306.054  ns/op
EventBenchmark.deserialization                          SMILE         _8_K  avgt    5    117923.876 ±    2953.169  ns/op
EventBenchmark.deserialization                          SMILE        _64_K  avgt    5   1112306.127 ±   37422.236  ns/op
EventBenchmark.deserialization                       SCALA_PB         _1_K  avgt    5      5965.924 ±     315.902  ns/op
EventBenchmark.deserialization                       SCALA_PB         _2_K  avgt    5     11138.092 ±     301.877  ns/op
EventBenchmark.deserialization                       SCALA_PB         _4_K  avgt    5     21076.149 ±     923.459  ns/op
EventBenchmark.deserialization                       SCALA_PB         _8_K  avgt    5     44730.362 ±     914.093  ns/op
EventBenchmark.deserialization                       SCALA_PB        _64_K  avgt    5    451546.074 ±   11341.861  ns/op
EventBenchmark.deserialization                        JAVA_PB         _1_K  avgt    5      4331.983 ±      89.302  ns/op
EventBenchmark.deserialization                        JAVA_PB         _2_K  avgt    5      9521.792 ±    1006.491  ns/op
EventBenchmark.deserialization                        JAVA_PB         _4_K  avgt    5     15841.001 ±     551.743  ns/op
EventBenchmark.deserialization                        JAVA_PB         _8_K  avgt    5     34625.350 ±    1939.008  ns/op
EventBenchmark.deserialization                        JAVA_PB        _64_K  avgt    5    364686.622 ±   18243.907  ns/op
EventBenchmark.deserialization                    JAVA_THRIFT         _1_K  avgt    5      4603.996 ±     312.709  ns/op
EventBenchmark.deserialization                    JAVA_THRIFT         _2_K  avgt    5      8868.487 ±     468.828  ns/op
EventBenchmark.deserialization                    JAVA_THRIFT         _4_K  avgt    5     16565.126 ±     187.591  ns/op
EventBenchmark.deserialization                    JAVA_THRIFT         _8_K  avgt    5     35493.616 ±    1031.950  ns/op
EventBenchmark.deserialization                    JAVA_THRIFT        _64_K  avgt    5    348574.854 ±   14878.422  ns/op
EventBenchmark.deserialization                   SERIALIZABLE         _1_K  avgt    5    116724.579 ±    7336.352  ns/op
EventBenchmark.deserialization                   SERIALIZABLE         _2_K  avgt    5    206478.962 ±    4762.753  ns/op
EventBenchmark.deserialization                   SERIALIZABLE         _4_K  avgt    5    509051.078 ±   50649.955  ns/op
EventBenchmark.deserialization                   SERIALIZABLE         _8_K  avgt    5   1252108.951 ±   34581.383  ns/op
EventBenchmark.deserialization                   SERIALIZABLE        _64_K  avgt    5  10261511.986 ±  224809.113  ns/op
EventBenchmark.deserialization                      BOOPICKLE         _1_K  avgt    5      2626.730 ±     196.647  ns/op
EventBenchmark.deserialization                      BOOPICKLE         _2_K  avgt    5      5291.834 ±      89.775  ns/op
EventBenchmark.deserialization                      BOOPICKLE         _4_K  avgt    5      9950.758 ±     628.430  ns/op
EventBenchmark.deserialization                      BOOPICKLE         _8_K  avgt    5     20675.680 ±    2139.680  ns/op
EventBenchmark.deserialization                      BOOPICKLE        _64_K  avgt    5    233233.545 ±    1374.644  ns/op
EventBenchmark.deserialization                          CHILL         _1_K  avgt    5     34266.932 ±    5471.324  ns/op
EventBenchmark.deserialization                          CHILL         _2_K  avgt    5     63003.503 ±   10894.228  ns/op
EventBenchmark.deserialization                          CHILL         _4_K  avgt    5    125570.750 ±   33599.789  ns/op
EventBenchmark.deserialization                          CHILL         _8_K  avgt    5    287997.231 ±   51473.211  ns/op
EventBenchmark.deserialization                          CHILL        _64_K  avgt    5   2587734.000 ±  737685.873  ns/op
EventBenchmark.deserialization                          CIRCE         _1_K  avgt    5    145824.045 ±   11587.717  ns/op
EventBenchmark.deserialization                          CIRCE         _2_K  avgt    5    225470.843 ±   16240.947  ns/op
EventBenchmark.deserialization                          CIRCE         _4_K  avgt    5    413592.247 ±   16623.865  ns/op
EventBenchmark.deserialization                          CIRCE         _8_K  avgt    5    989325.360 ±   72221.576  ns/op
EventBenchmark.deserialization                          CIRCE        _64_K  avgt    5   9183615.774 ±  156188.747  ns/op
EventBenchmark.deserialization                   UPICKLE_JSON         _1_K  avgt    5     25279.883 ±     429.686  ns/op
EventBenchmark.deserialization                   UPICKLE_JSON         _2_K  avgt    5     49422.144 ±     889.906  ns/op
EventBenchmark.deserialization                   UPICKLE_JSON         _4_K  avgt    5    113427.319 ±    6390.995  ns/op
EventBenchmark.deserialization                   UPICKLE_JSON         _8_K  avgt    5    277910.875 ±   15731.171  ns/op
EventBenchmark.deserialization                   UPICKLE_JSON        _64_K  avgt    5   2959526.200 ±   70188.192  ns/op
EventBenchmark.deserialization            UPICKLE_POOLED_JSON         _1_K  avgt    5     25442.576 ±     762.527  ns/op
EventBenchmark.deserialization            UPICKLE_POOLED_JSON         _2_K  avgt    5     50008.284 ±    4087.913  ns/op
EventBenchmark.deserialization            UPICKLE_POOLED_JSON         _4_K  avgt    5    117260.083 ±    8114.104  ns/op
EventBenchmark.deserialization            UPICKLE_POOLED_JSON         _8_K  avgt    5    277699.946 ±   20164.444  ns/op
EventBenchmark.deserialization            UPICKLE_POOLED_JSON        _64_K  avgt    5   2587030.694 ±   79157.542  ns/op
EventBenchmark.deserialization                UPICKLE_MSGPACK         _1_K  avgt    5     16340.224 ±     368.317  ns/op
EventBenchmark.deserialization                UPICKLE_MSGPACK         _2_K  avgt    5     32226.349 ±     790.535  ns/op
EventBenchmark.deserialization                UPICKLE_MSGPACK         _4_K  avgt    5     83271.425 ±   20555.402  ns/op
EventBenchmark.deserialization                UPICKLE_MSGPACK         _8_K  avgt    5    207015.191 ±    5930.546  ns/op
EventBenchmark.deserialization                UPICKLE_MSGPACK        _64_K  avgt    5   1983461.182 ±  122122.786  ns/op
EventBenchmark.deserialization                    CAP_N_PROTO         _1_K  avgt    5     23465.205 ±    3475.864  ns/op
EventBenchmark.deserialization                    CAP_N_PROTO         _2_K  avgt    5     44163.146 ±    4450.844  ns/op
EventBenchmark.deserialization                    CAP_N_PROTO         _4_K  avgt    5     86882.415 ±    1553.175  ns/op
EventBenchmark.deserialization                    CAP_N_PROTO         _8_K  avgt    5    198945.612 ±   26265.212  ns/op
EventBenchmark.deserialization                    CAP_N_PROTO        _64_K  avgt    5   2022287.730 ±  202361.747  ns/op
EventBenchmark.deserialization             CAP_N_PROTO_POOLED         _1_K  avgt    5     22958.598 ±      82.944  ns/op
EventBenchmark.deserialization             CAP_N_PROTO_POOLED         _2_K  avgt    5     42867.829 ±    1728.986  ns/op
EventBenchmark.deserialization             CAP_N_PROTO_POOLED         _4_K  avgt    5     85861.975 ±    4986.764  ns/op
EventBenchmark.deserialization             CAP_N_PROTO_POOLED         _8_K  avgt    5    195820.147 ±   16455.394  ns/op
EventBenchmark.deserialization             CAP_N_PROTO_POOLED        _64_K  avgt    5   2004384.958 ±  195405.300  ns/op
EventBenchmark.serialization                             JSON         _1_K  avgt    5      9814.837 ±     108.227  ns/op
EventBenchmark.serialization                             JSON         _2_K  avgt    5     19384.265 ±    1383.225  ns/op
EventBenchmark.serialization                             JSON         _4_K  avgt    5     39777.756 ±    1589.665  ns/op
EventBenchmark.serialization                             JSON         _8_K  avgt    5     87332.018 ±    4398.337  ns/op
EventBenchmark.serialization                             JSON        _64_K  avgt    5    723759.598 ±   18605.954  ns/op
EventBenchmark.serialization                             CBOR         _1_K  avgt    5      7569.245 ±     394.438  ns/op
EventBenchmark.serialization                             CBOR         _2_K  avgt    5     16408.181 ±    1011.190  ns/op
EventBenchmark.serialization                             CBOR         _4_K  avgt    5     34786.874 ±     583.535  ns/op
EventBenchmark.serialization                             CBOR         _8_K  avgt    5     65481.367 ±    3476.308  ns/op
EventBenchmark.serialization                             CBOR        _64_K  avgt    5    598726.326 ±   22300.068  ns/op
EventBenchmark.serialization                            SMILE         _1_K  avgt    5     10450.248 ±     437.370  ns/op
EventBenchmark.serialization                            SMILE         _2_K  avgt    5     17560.891 ±    1716.411  ns/op
EventBenchmark.serialization                            SMILE         _4_K  avgt    5     35008.956 ±    1565.934  ns/op
EventBenchmark.serialization                            SMILE         _8_K  avgt    5     76054.515 ±    4989.458  ns/op
EventBenchmark.serialization                            SMILE        _64_K  avgt    5    675837.409 ±  102940.930  ns/op
EventBenchmark.serialization                         SCALA_PB         _1_K  avgt    5      3117.201 ±      81.268  ns/op
EventBenchmark.serialization                         SCALA_PB         _2_K  avgt    5      6555.092 ±     610.152  ns/op
EventBenchmark.serialization                         SCALA_PB         _4_K  avgt    5     12672.458 ±     863.574  ns/op
EventBenchmark.serialization                         SCALA_PB         _8_K  avgt    5     23815.662 ±    1145.083  ns/op
EventBenchmark.serialization                         SCALA_PB        _64_K  avgt    5    248549.023 ±    3811.176  ns/op
EventBenchmark.serialization                          JAVA_PB         _1_K  avgt    5      4570.454 ±     149.916  ns/op
EventBenchmark.serialization                          JAVA_PB         _2_K  avgt    5     10179.486 ±     555.362  ns/op
EventBenchmark.serialization                          JAVA_PB         _4_K  avgt    5     19195.410 ±    2305.556  ns/op
EventBenchmark.serialization                          JAVA_PB         _8_K  avgt    5     37333.863 ±    1029.958  ns/op
EventBenchmark.serialization                          JAVA_PB        _64_K  avgt    5    416731.403 ±    3917.052  ns/op
EventBenchmark.serialization                      JAVA_THRIFT         _1_K  avgt    5      6075.434 ±      78.160  ns/op
EventBenchmark.serialization                      JAVA_THRIFT         _2_K  avgt    5     12719.361 ±    2375.117  ns/op
EventBenchmark.serialization                      JAVA_THRIFT         _4_K  avgt    5     24735.273 ±    1865.265  ns/op
EventBenchmark.serialization                      JAVA_THRIFT         _8_K  avgt    5     57574.274 ±    2766.453  ns/op
EventBenchmark.serialization                      JAVA_THRIFT        _64_K  avgt    5    599726.625 ±   10767.947  ns/op
EventBenchmark.serialization                     SERIALIZABLE         _1_K  avgt    5     28566.696 ±    1685.484  ns/op
EventBenchmark.serialization                     SERIALIZABLE         _2_K  avgt    5     48801.775 ±    1975.488  ns/op
EventBenchmark.serialization                     SERIALIZABLE         _4_K  avgt    5    111930.433 ±    1010.054  ns/op
EventBenchmark.serialization                     SERIALIZABLE         _8_K  avgt    5    254598.499 ±   24122.458  ns/op
EventBenchmark.serialization                     SERIALIZABLE        _64_K  avgt    5   2289671.393 ±   32504.177  ns/op
EventBenchmark.serialization                        BOOPICKLE         _1_K  avgt    5      4299.931 ±     641.842  ns/op
EventBenchmark.serialization                        BOOPICKLE         _2_K  avgt    5      7961.266 ±    1099.363  ns/op
EventBenchmark.serialization                        BOOPICKLE         _4_K  avgt    5     14327.639 ±    1269.685  ns/op
EventBenchmark.serialization                        BOOPICKLE         _8_K  avgt    5     26173.371 ±    1702.198  ns/op
EventBenchmark.serialization                        BOOPICKLE        _64_K  avgt    5    251071.422 ±   17696.914  ns/op
EventBenchmark.serialization                            CHILL         _1_K  avgt    5     35295.159 ±    5711.022  ns/op
EventBenchmark.serialization                            CHILL         _2_K  avgt    5     63861.153 ±    3498.471  ns/op
EventBenchmark.serialization                            CHILL         _4_K  avgt    5    121348.602 ±   20825.708  ns/op
EventBenchmark.serialization                            CHILL         _8_K  avgt    5    259927.946 ±   31498.600  ns/op
EventBenchmark.serialization                            CHILL        _64_K  avgt    5   2628234.120 ± 1224515.975  ns/op
EventBenchmark.serialization                            CIRCE         _1_K  avgt    5     39896.743 ±    1295.450  ns/op
EventBenchmark.serialization                            CIRCE         _2_K  avgt    5     71953.332 ±    3211.080  ns/op
EventBenchmark.serialization                            CIRCE         _4_K  avgt    5    155112.625 ±    7155.420  ns/op
EventBenchmark.serialization                            CIRCE         _8_K  avgt    5    359650.352 ±   13750.079  ns/op
EventBenchmark.serialization                            CIRCE        _64_K  avgt    5   3262608.721 ±   77809.965  ns/op
EventBenchmark.serialization                     UPICKLE_JSON         _1_K  avgt    5     22829.781 ±     511.917  ns/op
EventBenchmark.serialization                     UPICKLE_JSON         _2_K  avgt    5     38318.625 ±    2413.244  ns/op
EventBenchmark.serialization                     UPICKLE_JSON         _4_K  avgt    5    105951.333 ±    1557.805  ns/op
EventBenchmark.serialization                     UPICKLE_JSON         _8_K  avgt    5    248321.301 ±   12489.066  ns/op
EventBenchmark.serialization                     UPICKLE_JSON        _64_K  avgt    5   1809641.041 ±   79078.554  ns/op
EventBenchmark.serialization              UPICKLE_POOLED_JSON         _1_K  avgt    5     17401.247 ±    2023.231  ns/op
EventBenchmark.serialization              UPICKLE_POOLED_JSON         _2_K  avgt    5     34281.349 ±     551.759  ns/op
EventBenchmark.serialization              UPICKLE_POOLED_JSON         _4_K  avgt    5     77938.262 ±   10101.606  ns/op
EventBenchmark.serialization              UPICKLE_POOLED_JSON         _8_K  avgt    5    171845.683 ±    4352.986  ns/op
EventBenchmark.serialization              UPICKLE_POOLED_JSON        _64_K  avgt    5   1511549.431 ±   44588.915  ns/op
EventBenchmark.serialization                  UPICKLE_MSGPACK         _1_K  avgt    5     18993.413 ±     183.893  ns/op
EventBenchmark.serialization                  UPICKLE_MSGPACK         _2_K  avgt    5     33506.418 ±    2893.941  ns/op
EventBenchmark.serialization                  UPICKLE_MSGPACK         _4_K  avgt    5     86830.311 ±    1045.964  ns/op
EventBenchmark.serialization                  UPICKLE_MSGPACK         _8_K  avgt    5    191501.169 ±    1359.007  ns/op
EventBenchmark.serialization                  UPICKLE_MSGPACK        _64_K  avgt    5   1840832.414 ±   28874.064  ns/op
EventBenchmark.serialization                      CAP_N_PROTO         _1_K  avgt    5     37446.905 ±    6471.086  ns/op
EventBenchmark.serialization                      CAP_N_PROTO         _2_K  avgt    5     66745.767 ±    3041.817  ns/op
EventBenchmark.serialization                      CAP_N_PROTO         _4_K  avgt    5    135895.438 ±    8031.802  ns/op
EventBenchmark.serialization                      CAP_N_PROTO         _8_K  avgt    5    306502.833 ±   54505.935  ns/op
EventBenchmark.serialization                      CAP_N_PROTO        _64_K  avgt    5   2971040.597 ±  157539.543  ns/op
EventBenchmark.serialization               CAP_N_PROTO_POOLED         _1_K  avgt    5     35481.751 ±    5377.709  ns/op
EventBenchmark.serialization               CAP_N_PROTO_POOLED         _2_K  avgt    5     63611.290 ±    6307.956  ns/op
EventBenchmark.serialization               CAP_N_PROTO_POOLED         _4_K  avgt    5    135462.509 ±   14805.669  ns/op
EventBenchmark.serialization               CAP_N_PROTO_POOLED         _8_K  avgt    5    284918.265 ±   14747.693  ns/op
EventBenchmark.serialization               CAP_N_PROTO_POOLED        _64_K  avgt    5   2739500.485 ±  173891.279  ns/op
EventRawScalaPbBenchmark.both                 SCALA_PB_DIRECT         _1_K  avgt    5     11773.618 ±     265.638  ns/op
EventRawScalaPbBenchmark.both                 SCALA_PB_DIRECT         _2_K  avgt    5     32121.989 ±    3086.573  ns/op
EventRawScalaPbBenchmark.both                 SCALA_PB_DIRECT         _4_K  avgt    5     65077.371 ±    8049.965  ns/op
EventRawScalaPbBenchmark.both                 SCALA_PB_DIRECT         _8_K  avgt    5    122451.390 ±   15431.137  ns/op
EventRawScalaPbBenchmark.both                 SCALA_PB_DIRECT        _64_K  avgt    5    967420.974 ±   66969.732  ns/op
EventRawScalaPbBenchmark.deserialization      SCALA_PB_DIRECT         _1_K  avgt    5      3098.277 ±      83.408  ns/op
EventRawScalaPbBenchmark.deserialization      SCALA_PB_DIRECT         _2_K  avgt    5      6420.426 ±     750.690  ns/op
EventRawScalaPbBenchmark.deserialization      SCALA_PB_DIRECT         _4_K  avgt    5     12280.278 ±     532.807  ns/op
EventRawScalaPbBenchmark.deserialization      SCALA_PB_DIRECT         _8_K  avgt    5     23997.378 ±      87.510  ns/op
EventRawScalaPbBenchmark.deserialization      SCALA_PB_DIRECT        _64_K  avgt    5    242368.122 ±   33285.312  ns/op
EventRawScalaPbBenchmark.serialization        SCALA_PB_DIRECT         _1_K  avgt    5      7332.500 ±     774.317  ns/op
EventRawScalaPbBenchmark.serialization        SCALA_PB_DIRECT         _2_K  avgt    5     20926.720 ±    1890.916  ns/op
EventRawScalaPbBenchmark.serialization        SCALA_PB_DIRECT         _4_K  avgt    5     44984.398 ±    1434.153  ns/op
EventRawScalaPbBenchmark.serialization        SCALA_PB_DIRECT         _8_K  avgt    5     82194.569 ±    1173.295  ns/op
EventRawScalaPbBenchmark.serialization        SCALA_PB_DIRECT        _64_K  avgt    5    628626.378 ±   42383.126  ns/op
SiteBenchmark.both                                       JSON         _1_K  avgt    5     15535.264 ±    1280.088  ns/op
SiteBenchmark.both                                       JSON         _2_K  avgt    5     28494.739 ±    1350.411  ns/op
SiteBenchmark.both                                       JSON         _4_K  avgt    5     53372.591 ±    3483.397  ns/op
SiteBenchmark.both                                       JSON         _8_K  avgt    5    109936.268 ±   18466.997  ns/op
SiteBenchmark.both                                       JSON        _64_K  avgt    5    802113.301 ±  155758.038  ns/op
SiteBenchmark.both                                       CBOR         _1_K  avgt    5     12651.041 ±     206.500  ns/op
SiteBenchmark.both                                       CBOR         _2_K  avgt    5     21327.475 ±     516.496  ns/op
SiteBenchmark.both                                       CBOR         _4_K  avgt    5     41740.858 ±    4026.754  ns/op
SiteBenchmark.both                                       CBOR         _8_K  avgt    5     79075.361 ±    4612.737  ns/op
SiteBenchmark.both                                       CBOR        _64_K  avgt    5    630268.067 ±   14366.353  ns/op
SiteBenchmark.both                                      SMILE         _1_K  avgt    5     13980.512 ±     728.928  ns/op
SiteBenchmark.both                                      SMILE         _2_K  avgt    5     23387.794 ±     461.160  ns/op
SiteBenchmark.both                                      SMILE         _4_K  avgt    5     42921.545 ±     920.433  ns/op
SiteBenchmark.both                                      SMILE         _8_K  avgt    5     80476.954 ±    2305.738  ns/op
SiteBenchmark.both                                      SMILE        _64_K  avgt    5    564702.535 ±   93644.216  ns/op
SiteBenchmark.both                                   SCALA_PB         _1_K  avgt    5      5589.899 ±     491.425  ns/op
SiteBenchmark.both                                   SCALA_PB         _2_K  avgt    5     11380.645 ±     422.274  ns/op
SiteBenchmark.both                                   SCALA_PB         _4_K  avgt    5     20643.368 ±     355.122  ns/op
SiteBenchmark.both                                   SCALA_PB         _8_K  avgt    5     39993.020 ±    2335.137  ns/op
SiteBenchmark.both                                   SCALA_PB        _64_K  avgt    5    320066.685 ±    9562.314  ns/op
SiteBenchmark.both                                    JAVA_PB         _1_K  avgt    5      8902.959 ±     308.563  ns/op
SiteBenchmark.both                                    JAVA_PB         _2_K  avgt    5     15587.030 ±     249.973  ns/op
SiteBenchmark.both                                    JAVA_PB         _4_K  avgt    5     29861.444 ±     311.468  ns/op
SiteBenchmark.both                                    JAVA_PB         _8_K  avgt    5     56165.132 ±    1041.026  ns/op
SiteBenchmark.both                                    JAVA_PB        _64_K  avgt    5    547893.149 ±    2086.153  ns/op
SiteBenchmark.both                                JAVA_THRIFT         _1_K  avgt    5      8881.906 ±     704.500  ns/op
SiteBenchmark.both                                JAVA_THRIFT         _2_K  avgt    5     16389.032 ±    1091.000  ns/op
SiteBenchmark.both                                JAVA_THRIFT         _4_K  avgt    5     29179.438 ±     532.532  ns/op
SiteBenchmark.both                                JAVA_THRIFT         _8_K  avgt    5     57836.453 ±    1782.576  ns/op
SiteBenchmark.both                                JAVA_THRIFT        _64_K  avgt    5    585815.169 ±   18082.534  ns/op
SiteBenchmark.both                               SERIALIZABLE         _1_K  avgt    5    131177.705 ±    1532.474  ns/op
SiteBenchmark.both                               SERIALIZABLE         _2_K  avgt    5    180401.369 ±    5833.500  ns/op
SiteBenchmark.both                               SERIALIZABLE         _4_K  avgt    5    233921.787 ±    4349.689  ns/op
SiteBenchmark.both                               SERIALIZABLE         _8_K  avgt    5    344371.753 ±   17054.643  ns/op
SiteBenchmark.both                               SERIALIZABLE        _64_K  avgt    5   2027447.971 ±  247869.049  ns/op
SiteBenchmark.both                                  BOOPICKLE         _1_K  avgt    5      5277.121 ±     216.658  ns/op
SiteBenchmark.both                                  BOOPICKLE         _2_K  avgt    5      9680.638 ±    1220.089  ns/op
SiteBenchmark.both                                  BOOPICKLE         _4_K  avgt    5     17779.988 ±    2584.769  ns/op
SiteBenchmark.both                                  BOOPICKLE         _8_K  avgt    5     30978.387 ±    1168.346  ns/op
SiteBenchmark.both                                  BOOPICKLE        _64_K  avgt    5    291794.377 ±    7250.873  ns/op
SiteBenchmark.both                                      CHILL         _1_K  avgt    5     12332.007 ±     577.230  ns/op
SiteBenchmark.both                                      CHILL         _2_K  avgt    5     21437.486 ±     574.862  ns/op
SiteBenchmark.both                                      CHILL         _4_K  avgt    5     35067.120 ±     427.888  ns/op
SiteBenchmark.both                                      CHILL         _8_K  avgt    5     97831.686 ±   27758.026  ns/op
SiteBenchmark.both                                      CHILL        _64_K  avgt    5    743978.879 ±    8896.181  ns/op
SiteBenchmark.both                                      CIRCE         _1_K  avgt    5     43473.032 ±     431.160  ns/op
SiteBenchmark.both                                      CIRCE         _2_K  avgt    5     79421.904 ±    1249.791  ns/op
SiteBenchmark.both                                      CIRCE         _4_K  avgt    5    175875.810 ±    1636.296  ns/op
SiteBenchmark.both                                      CIRCE         _8_K  avgt    5    406402.910 ±    9484.115  ns/op
SiteBenchmark.both                                      CIRCE        _64_K  avgt    5   3339672.880 ±  206511.100  ns/op
SiteBenchmark.both                               UPICKLE_JSON         _1_K  avgt    5     33610.284 ±    1095.937  ns/op
SiteBenchmark.both                               UPICKLE_JSON         _2_K  avgt    5     64605.484 ±    3887.379  ns/op
SiteBenchmark.both                               UPICKLE_JSON         _4_K  avgt    5    140676.875 ±    3188.008  ns/op
SiteBenchmark.both                               UPICKLE_JSON         _8_K  avgt    5    314961.295 ±    5462.730  ns/op
SiteBenchmark.both                               UPICKLE_JSON        _64_K  avgt    5   2479134.306 ±   87235.427  ns/op
SiteBenchmark.both                        UPICKLE_POOLED_JSON         _1_K  avgt    5     31644.258 ±     861.845  ns/op
SiteBenchmark.both                        UPICKLE_POOLED_JSON         _2_K  avgt    5     60579.032 ±    3334.261  ns/op
SiteBenchmark.both                        UPICKLE_POOLED_JSON         _4_K  avgt    5    135923.937 ±    7545.412  ns/op
SiteBenchmark.both                        UPICKLE_POOLED_JSON         _8_K  avgt    5    315146.931 ±   19436.967  ns/op
SiteBenchmark.both                        UPICKLE_POOLED_JSON        _64_K  avgt    5   2395447.247 ±   34421.900  ns/op
SiteBenchmark.both                            UPICKLE_MSGPACK         _1_K  avgt    5     23394.246 ±     894.811  ns/op
SiteBenchmark.both                            UPICKLE_MSGPACK         _2_K  avgt    5     43713.264 ±    1012.588  ns/op
SiteBenchmark.both                            UPICKLE_MSGPACK         _4_K  avgt    5     97592.330 ±    2570.912  ns/op
SiteBenchmark.both                            UPICKLE_MSGPACK         _8_K  avgt    5    229112.291 ±   27768.411  ns/op
SiteBenchmark.both                            UPICKLE_MSGPACK        _64_K  avgt    5   1931981.001 ±   69448.148  ns/op
SiteBenchmark.both                                CAP_N_PROTO         _1_K  avgt    5     18719.285 ±     136.782  ns/op
SiteBenchmark.both                                CAP_N_PROTO         _2_K  avgt    5     34063.686 ±     137.199  ns/op
SiteBenchmark.both                                CAP_N_PROTO         _4_K  avgt    5     62607.694 ±    2253.098  ns/op
SiteBenchmark.both                                CAP_N_PROTO         _8_K  avgt    5    127934.382 ±    4745.081  ns/op
SiteBenchmark.both                                CAP_N_PROTO        _64_K  avgt    5   1314078.112 ±   95354.854  ns/op
SiteBenchmark.both                         CAP_N_PROTO_POOLED         _1_K  avgt    5     18978.964 ±     113.267  ns/op
SiteBenchmark.both                         CAP_N_PROTO_POOLED         _2_K  avgt    5     33932.442 ±     136.259  ns/op
SiteBenchmark.both                         CAP_N_PROTO_POOLED         _4_K  avgt    5     64404.125 ±    4866.553  ns/op
SiteBenchmark.both                         CAP_N_PROTO_POOLED         _8_K  avgt    5    128599.606 ±    8008.813  ns/op
SiteBenchmark.both                         CAP_N_PROTO_POOLED        _64_K  avgt    5   1284953.297 ±   84620.604  ns/op
SiteBenchmark.deserialization                            JSON         _1_K  avgt    5      8927.520 ±     155.260  ns/op
SiteBenchmark.deserialization                            JSON         _2_K  avgt    5     16388.154 ±     264.724  ns/op
SiteBenchmark.deserialization                            JSON         _4_K  avgt    5     29920.102 ±     300.994  ns/op
SiteBenchmark.deserialization                            JSON         _8_K  avgt    5     66725.519 ±    3511.365  ns/op
SiteBenchmark.deserialization                            JSON        _64_K  avgt    5    478215.021 ±   11428.452  ns/op
SiteBenchmark.deserialization                            CBOR         _1_K  avgt    5      8011.769 ±     738.033  ns/op
SiteBenchmark.deserialization                            CBOR         _2_K  avgt    5     13003.172 ±    1216.097  ns/op
SiteBenchmark.deserialization                            CBOR         _4_K  avgt    5     25393.877 ±     687.533  ns/op
SiteBenchmark.deserialization                            CBOR         _8_K  avgt    5     51771.755 ±    1501.525  ns/op
SiteBenchmark.deserialization                            CBOR        _64_K  avgt    5    406790.490 ±    5674.583  ns/op
SiteBenchmark.deserialization                           SMILE         _1_K  avgt    5      8234.594 ±     485.814  ns/op
SiteBenchmark.deserialization                           SMILE         _2_K  avgt    5     14483.089 ±     328.090  ns/op
SiteBenchmark.deserialization                           SMILE         _4_K  avgt    5     24686.012 ±     619.502  ns/op
SiteBenchmark.deserialization                           SMILE         _8_K  avgt    5     46748.809 ±    1218.252  ns/op
SiteBenchmark.deserialization                           SMILE        _64_K  avgt    5    351607.829 ±   19129.442  ns/op
SiteBenchmark.deserialization                        SCALA_PB         _1_K  avgt    5      3004.193 ±     239.133  ns/op
SiteBenchmark.deserialization                        SCALA_PB         _2_K  avgt    5      5848.443 ±     735.789  ns/op
SiteBenchmark.deserialization                        SCALA_PB         _4_K  avgt    5     10144.741 ±     755.180  ns/op
SiteBenchmark.deserialization                        SCALA_PB         _8_K  avgt    5     21043.619 ±     876.129  ns/op
SiteBenchmark.deserialization                        SCALA_PB        _64_K  avgt    5    183330.580 ±    1199.887  ns/op
SiteBenchmark.deserialization                         JAVA_PB         _1_K  avgt    5      4520.138 ±      47.407  ns/op
SiteBenchmark.deserialization                         JAVA_PB         _2_K  avgt    5      8646.860 ±     558.339  ns/op
SiteBenchmark.deserialization                         JAVA_PB         _4_K  avgt    5     15170.843 ±     115.315  ns/op
SiteBenchmark.deserialization                         JAVA_PB         _8_K  avgt    5     29296.506 ±     700.968  ns/op
SiteBenchmark.deserialization                         JAVA_PB        _64_K  avgt    5    271394.150 ±   42472.148  ns/op
SiteBenchmark.deserialization                     JAVA_THRIFT         _1_K  avgt    5      4195.535 ±     277.187  ns/op
SiteBenchmark.deserialization                     JAVA_THRIFT         _2_K  avgt    5      7706.397 ±     318.831  ns/op
SiteBenchmark.deserialization                     JAVA_THRIFT         _4_K  avgt    5     14406.181 ±     942.522  ns/op
SiteBenchmark.deserialization                     JAVA_THRIFT         _8_K  avgt    5     24415.585 ±    2558.440  ns/op
SiteBenchmark.deserialization                     JAVA_THRIFT        _64_K  avgt    5    211790.764 ±   13511.267  ns/op
SiteBenchmark.deserialization                    SERIALIZABLE         _1_K  avgt    5    100052.475 ±    5810.898  ns/op
SiteBenchmark.deserialization                    SERIALIZABLE         _2_K  avgt    5    133549.142 ±    6558.131  ns/op
SiteBenchmark.deserialization                    SERIALIZABLE         _4_K  avgt    5    158651.099 ±    2913.663  ns/op
SiteBenchmark.deserialization                    SERIALIZABLE         _8_K  avgt    5    200505.762 ±   14081.138  ns/op
SiteBenchmark.deserialization                    SERIALIZABLE        _64_K  avgt    5    846827.818 ±   17520.915  ns/op
SiteBenchmark.deserialization                       BOOPICKLE         _1_K  avgt    5      2304.869 ±      96.307  ns/op
SiteBenchmark.deserialization                       BOOPICKLE         _2_K  avgt    5      4514.210 ±      33.207  ns/op
SiteBenchmark.deserialization                       BOOPICKLE         _4_K  avgt    5      8221.952 ±      50.707  ns/op
SiteBenchmark.deserialization                       BOOPICKLE         _8_K  avgt    5     15923.911 ±     164.862  ns/op
SiteBenchmark.deserialization                       BOOPICKLE        _64_K  avgt    5    162190.870 ±   11325.501  ns/op
SiteBenchmark.deserialization                           CHILL         _1_K  avgt    5      5892.790 ±     159.071  ns/op
SiteBenchmark.deserialization                           CHILL         _2_K  avgt    5     10993.784 ±     837.154  ns/op
SiteBenchmark.deserialization                           CHILL         _4_K  avgt    5     21683.343 ±    5335.696  ns/op
SiteBenchmark.deserialization                           CHILL         _8_K  avgt    5     31057.621 ±     989.125  ns/op
SiteBenchmark.deserialization                           CHILL        _64_K  avgt    5    261855.782 ±   52749.042  ns/op
SiteBenchmark.deserialization                           CIRCE         _1_K  avgt    5     22799.523 ±     524.001  ns/op
SiteBenchmark.deserialization                           CIRCE         _2_K  avgt    5     40223.150 ±     779.094  ns/op
SiteBenchmark.deserialization                           CIRCE         _4_K  avgt    5     91802.202 ±    2636.600  ns/op
SiteBenchmark.deserialization                           CIRCE         _8_K  avgt    5    217292.387 ±     967.578  ns/op
SiteBenchmark.deserialization                           CIRCE        _64_K  avgt    5   1661718.799 ±  184207.384  ns/op
SiteBenchmark.deserialization                    UPICKLE_JSON         _1_K  avgt    5     18684.761 ±    1321.008  ns/op
SiteBenchmark.deserialization                    UPICKLE_JSON         _2_K  avgt    5     37033.311 ±    2682.169  ns/op
SiteBenchmark.deserialization                    UPICKLE_JSON         _4_K  avgt    5     85765.965 ±    4774.621  ns/op
SiteBenchmark.deserialization                    UPICKLE_JSON         _8_K  avgt    5    192502.855 ±   12704.937  ns/op
SiteBenchmark.deserialization                    UPICKLE_JSON        _64_K  avgt    5   1570522.629 ±   72017.374  ns/op
SiteBenchmark.deserialization             UPICKLE_POOLED_JSON         _1_K  avgt    5     19404.891 ±     341.102  ns/op
SiteBenchmark.deserialization             UPICKLE_POOLED_JSON         _2_K  avgt    5     36428.052 ±    1020.355  ns/op
SiteBenchmark.deserialization             UPICKLE_POOLED_JSON         _4_K  avgt    5     86615.358 ±    1965.825  ns/op
SiteBenchmark.deserialization             UPICKLE_POOLED_JSON         _8_K  avgt    5    196743.292 ±   11023.776  ns/op
SiteBenchmark.deserialization             UPICKLE_POOLED_JSON        _64_K  avgt    5   1594414.980 ±   73542.766  ns/op
SiteBenchmark.deserialization                 UPICKLE_MSGPACK         _1_K  avgt    5     11527.420 ±     248.448  ns/op
SiteBenchmark.deserialization                 UPICKLE_MSGPACK         _2_K  avgt    5     22855.599 ±     547.936  ns/op
SiteBenchmark.deserialization                 UPICKLE_MSGPACK         _4_K  avgt    5     50391.380 ±    3706.370  ns/op
SiteBenchmark.deserialization                 UPICKLE_MSGPACK         _8_K  avgt    5    121416.417 ±    6685.217  ns/op
SiteBenchmark.deserialization                 UPICKLE_MSGPACK        _64_K  avgt    5   1009594.246 ±   16189.169  ns/op
SiteBenchmark.deserialization                     CAP_N_PROTO         _1_K  avgt    5      8526.488 ±      57.711  ns/op
SiteBenchmark.deserialization                     CAP_N_PROTO         _2_K  avgt    5     15996.844 ±     329.839  ns/op
SiteBenchmark.deserialization                     CAP_N_PROTO         _4_K  avgt    5     29647.658 ±    2800.346  ns/op
SiteBenchmark.deserialization                     CAP_N_PROTO         _8_K  avgt    5     63997.469 ±    9446.086  ns/op
SiteBenchmark.deserialization                     CAP_N_PROTO        _64_K  avgt    5    621533.412 ±   23467.040  ns/op
SiteBenchmark.deserialization              CAP_N_PROTO_POOLED         _1_K  avgt    5      8886.022 ±      80.815  ns/op
SiteBenchmark.deserialization              CAP_N_PROTO_POOLED         _2_K  avgt    5     16251.742 ±     137.789  ns/op
SiteBenchmark.deserialization              CAP_N_PROTO_POOLED         _4_K  avgt    5     29781.783 ±    1098.249  ns/op
SiteBenchmark.deserialization              CAP_N_PROTO_POOLED         _8_K  avgt    5     63084.633 ±     959.686  ns/op
SiteBenchmark.deserialization              CAP_N_PROTO_POOLED        _64_K  avgt    5    618654.157 ±   49454.571  ns/op
SiteBenchmark.serialization                              JSON         _1_K  avgt    5      5212.814 ±      54.378  ns/op
SiteBenchmark.serialization                              JSON         _2_K  avgt    5     10590.640 ±     579.942  ns/op
SiteBenchmark.serialization                              JSON         _4_K  avgt    5     19956.478 ±    1721.271  ns/op
SiteBenchmark.serialization                              JSON         _8_K  avgt    5     39956.113 ±    4111.123  ns/op
SiteBenchmark.serialization                              JSON        _64_K  avgt    5    294132.968 ±    8383.348  ns/op
SiteBenchmark.serialization                              CBOR         _1_K  avgt    5      3360.764 ±     412.847  ns/op
SiteBenchmark.serialization                              CBOR         _2_K  avgt    5      6632.185 ±     210.527  ns/op
SiteBenchmark.serialization                              CBOR         _4_K  avgt    5     13523.371 ±     329.982  ns/op
SiteBenchmark.serialization                              CBOR         _8_K  avgt    5     25165.392 ±    3338.384  ns/op
SiteBenchmark.serialization                              CBOR        _64_K  avgt    5    216559.974 ±   14853.438  ns/op
SiteBenchmark.serialization                             SMILE         _1_K  avgt    5      4308.297 ±     154.766  ns/op
SiteBenchmark.serialization                             SMILE         _2_K  avgt    5      8610.581 ±     870.301  ns/op
SiteBenchmark.serialization                             SMILE         _4_K  avgt    5     15202.389 ±     463.323  ns/op
SiteBenchmark.serialization                             SMILE         _8_K  avgt    5     27359.506 ±    2998.428  ns/op
SiteBenchmark.serialization                             SMILE        _64_K  avgt    5    212114.176 ±   16196.144  ns/op
SiteBenchmark.serialization                          SCALA_PB         _1_K  avgt    5      2343.714 ±      35.787  ns/op
SiteBenchmark.serialization                          SCALA_PB         _2_K  avgt    5      5567.217 ±     581.016  ns/op
SiteBenchmark.serialization                          SCALA_PB         _4_K  avgt    5      9814.592 ±     132.120  ns/op
SiteBenchmark.serialization                          SCALA_PB         _8_K  avgt    5     18049.315 ±    2744.882  ns/op
SiteBenchmark.serialization                          SCALA_PB        _64_K  avgt    5    147705.079 ±    8353.648  ns/op
SiteBenchmark.serialization                           JAVA_PB         _1_K  avgt    5      3829.363 ±      92.256  ns/op
SiteBenchmark.serialization                           JAVA_PB         _2_K  avgt    5      7103.478 ±      63.453  ns/op
SiteBenchmark.serialization                           JAVA_PB         _4_K  avgt    5     13514.599 ±    2265.736  ns/op
SiteBenchmark.serialization                           JAVA_PB         _8_K  avgt    5     25360.710 ±    2304.430  ns/op
SiteBenchmark.serialization                           JAVA_PB        _64_K  avgt    5    270239.474 ±    1659.245  ns/op
SiteBenchmark.serialization                       JAVA_THRIFT         _1_K  avgt    5      3897.085 ±      20.146  ns/op
SiteBenchmark.serialization                       JAVA_THRIFT         _2_K  avgt    5      7859.196 ±     514.811  ns/op
SiteBenchmark.serialization                       JAVA_THRIFT         _4_K  avgt    5     16029.849 ±     395.089  ns/op
SiteBenchmark.serialization                       JAVA_THRIFT         _8_K  avgt    5     37350.068 ±     345.978  ns/op
SiteBenchmark.serialization                       JAVA_THRIFT        _64_K  avgt    5    356025.153 ±    5788.547  ns/op
SiteBenchmark.serialization                      SERIALIZABLE         _1_K  avgt    5     28201.695 ±    1097.301  ns/op
SiteBenchmark.serialization                      SERIALIZABLE         _2_K  avgt    5     38810.488 ±    1226.977  ns/op
SiteBenchmark.serialization                      SERIALIZABLE         _4_K  avgt    5     65021.354 ±    9183.339  ns/op
SiteBenchmark.serialization                      SERIALIZABLE         _8_K  avgt    5    125525.137 ±    6933.197  ns/op
SiteBenchmark.serialization                      SERIALIZABLE        _64_K  avgt    5   1042118.210 ±   75250.987  ns/op
SiteBenchmark.serialization                         BOOPICKLE         _1_K  avgt    5      2866.420 ±      54.736  ns/op
SiteBenchmark.serialization                         BOOPICKLE         _2_K  avgt    5      4663.149 ±      37.379  ns/op
SiteBenchmark.serialization                         BOOPICKLE         _4_K  avgt    5      7765.119 ±     279.483  ns/op
SiteBenchmark.serialization                         BOOPICKLE         _8_K  avgt    5     13467.287 ±     176.025  ns/op
SiteBenchmark.serialization                         BOOPICKLE        _64_K  avgt    5    126957.419 ±   10630.883  ns/op
SiteBenchmark.serialization                             CHILL         _1_K  avgt    5      6373.171 ±    1091.291  ns/op
SiteBenchmark.serialization                             CHILL         _2_K  avgt    5     10574.272 ±    4141.399  ns/op
SiteBenchmark.serialization                             CHILL         _4_K  avgt    5     21660.776 ±   13580.258  ns/op
SiteBenchmark.serialization                             CHILL         _8_K  avgt    5     44896.488 ±   57791.805  ns/op
SiteBenchmark.serialization                             CHILL        _64_K  avgt    5    495217.776 ±   11761.564  ns/op
SiteBenchmark.serialization                             CIRCE         _1_K  avgt    5     19342.027 ±    1431.393  ns/op
SiteBenchmark.serialization                             CIRCE         _2_K  avgt    5     36920.010 ±     601.636  ns/op
SiteBenchmark.serialization                             CIRCE         _4_K  avgt    5     82156.752 ±   12151.951  ns/op
SiteBenchmark.serialization                             CIRCE         _8_K  avgt    5    177245.678 ±    1495.794  ns/op
SiteBenchmark.serialization                             CIRCE        _64_K  avgt    5   1518388.612 ±   46313.776  ns/op
SiteBenchmark.serialization                      UPICKLE_JSON         _1_K  avgt    5     11581.721 ±     680.460  ns/op
SiteBenchmark.serialization                      UPICKLE_JSON         _2_K  avgt    5     21722.901 ±    1881.602  ns/op
SiteBenchmark.serialization                      UPICKLE_JSON         _4_K  avgt    5     47774.217 ±    1263.310  ns/op
SiteBenchmark.serialization                      UPICKLE_JSON         _8_K  avgt    5    107924.171 ±   10815.680  ns/op
SiteBenchmark.serialization                      UPICKLE_JSON        _64_K  avgt    5    806826.368 ±   32775.590  ns/op
SiteBenchmark.serialization               UPICKLE_POOLED_JSON         _1_K  avgt    5     10312.705 ±     919.273  ns/op
SiteBenchmark.serialization               UPICKLE_POOLED_JSON         _2_K  avgt    5     19868.543 ±    3430.323  ns/op
SiteBenchmark.serialization               UPICKLE_POOLED_JSON         _4_K  avgt    5     41941.375 ±    1751.266  ns/op
SiteBenchmark.serialization               UPICKLE_POOLED_JSON         _8_K  avgt    5     89737.245 ±    1851.806  ns/op
SiteBenchmark.serialization               UPICKLE_POOLED_JSON        _64_K  avgt    5    751885.086 ±    7961.939  ns/op
SiteBenchmark.serialization                   UPICKLE_MSGPACK         _1_K  avgt    5     10458.280 ±     104.204  ns/op
SiteBenchmark.serialization                   UPICKLE_MSGPACK         _2_K  avgt    5     20335.333 ±     936.618  ns/op
SiteBenchmark.serialization                   UPICKLE_MSGPACK         _4_K  avgt    5     44023.254 ±    1149.063  ns/op
SiteBenchmark.serialization                   UPICKLE_MSGPACK         _8_K  avgt    5     97602.023 ±    8399.263  ns/op
SiteBenchmark.serialization                   UPICKLE_MSGPACK        _64_K  avgt    5    871086.244 ±   21810.013  ns/op
SiteBenchmark.serialization                       CAP_N_PROTO         _1_K  avgt    5      9283.611 ±      30.857  ns/op
SiteBenchmark.serialization                       CAP_N_PROTO         _2_K  avgt    5     17864.990 ±    2122.820  ns/op
SiteBenchmark.serialization                       CAP_N_PROTO         _4_K  avgt    5     32631.176 ±     902.140  ns/op
SiteBenchmark.serialization                       CAP_N_PROTO         _8_K  avgt    5     63936.704 ±    2730.509  ns/op
SiteBenchmark.serialization                       CAP_N_PROTO        _64_K  avgt    5    637571.141 ±   51026.092  ns/op
SiteBenchmark.serialization                CAP_N_PROTO_POOLED         _1_K  avgt    5      9246.972 ±     552.398  ns/op
SiteBenchmark.serialization                CAP_N_PROTO_POOLED         _2_K  avgt    5     16527.216 ±      80.563  ns/op
SiteBenchmark.serialization                CAP_N_PROTO_POOLED         _4_K  avgt    5     32155.938 ±    2379.451  ns/op
SiteBenchmark.serialization                CAP_N_PROTO_POOLED         _8_K  avgt    5     63129.948 ±    1505.485  ns/op
SiteBenchmark.serialization                CAP_N_PROTO_POOLED        _64_K  avgt    5    645118.814 ±   25449.798  ns/op
SiteRawScalaPbBenchmark.both                  SCALA_PB_DIRECT         _1_K  avgt    5      3943.886 ±      42.610  ns/op
SiteRawScalaPbBenchmark.both                  SCALA_PB_DIRECT         _2_K  avgt    5      8204.654 ±    1139.612  ns/op
SiteRawScalaPbBenchmark.both                  SCALA_PB_DIRECT         _4_K  avgt    5     16693.770 ±     936.957  ns/op
SiteRawScalaPbBenchmark.both                  SCALA_PB_DIRECT         _8_K  avgt    5     25025.857 ±    4787.339  ns/op
SiteRawScalaPbBenchmark.both                  SCALA_PB_DIRECT        _64_K  avgt    5    237333.060 ±   26398.100  ns/op
SiteRawScalaPbBenchmark.deserialization       SCALA_PB_DIRECT         _1_K  avgt    5      2440.266 ±       5.543  ns/op
SiteRawScalaPbBenchmark.deserialization       SCALA_PB_DIRECT         _2_K  avgt    5      4993.195 ±      46.721  ns/op
SiteRawScalaPbBenchmark.deserialization       SCALA_PB_DIRECT         _4_K  avgt    5     10023.749 ±      41.005  ns/op
SiteRawScalaPbBenchmark.deserialization       SCALA_PB_DIRECT         _8_K  avgt    5     15745.836 ±      59.382  ns/op
SiteRawScalaPbBenchmark.deserialization       SCALA_PB_DIRECT        _64_K  avgt    5    153926.447 ±    1064.039  ns/op
SiteRawScalaPbBenchmark.serialization         SCALA_PB_DIRECT         _1_K  avgt    5      1142.942 ±      28.078  ns/op
SiteRawScalaPbBenchmark.serialization         SCALA_PB_DIRECT         _2_K  avgt    5      2721.505 ±      64.510  ns/op
SiteRawScalaPbBenchmark.serialization         SCALA_PB_DIRECT         _4_K  avgt    5      5352.978 ±     905.916  ns/op
SiteRawScalaPbBenchmark.serialization         SCALA_PB_DIRECT         _8_K  avgt    5      8420.702 ±     355.956  ns/op
SiteRawScalaPbBenchmark.serialization         SCALA_PB_DIRECT        _64_K  avgt    5     70724.357 ±    7664.595  ns/op

Benchmark result is saved to /static/data/charts/scala-serialization-2022/jdk8.json
