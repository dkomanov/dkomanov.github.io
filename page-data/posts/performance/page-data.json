{"componentChunkName":"component---src-templates-blog-by-tag-js","path":"/posts/performance","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"This post is not about a Magical Solution that I found or some performances issues in JDK or in Scala. Here I want to describe my findings…","fields":{"slug":"/p/replacing-hash-set-with-sorted-array-in-java/"},"frontmatter":{"date":"August 15, 2022","title":"Replacing HashSet with Sorted Array and Binary Search in Java?","description":"An attempt to replace HashSet with sorted array and binary search for memory optimization. Including off-heap storage."}}},{"node":{"excerpt":"Yet another post about performance and microbenchmarks. Beware of the results. I was wondering about performance of Scala collections and…","fields":{"slug":"/p/map-performance-java-vs-scala/"},"frontmatter":{"date":"August 02, 2022","title":"Map Performance: Java vs Scala","description":"A microbenchmark of Map.get and Set.contains performance for different JDK and Scala versions"}}},{"node":{"excerpt":"Yet another post about performance and microbenchmarks. Beware of the results. There is a method in String class, called regionMatches…","fields":{"slug":"/p/benchmarking-string-regionmatches/"},"frontmatter":{"date":"April 24, 2022","title":"Benchmarking String.regionMatches","description":"A simple just for fun benchmark reveals some bizarre performance of regionMatches method"}}},{"node":{"excerpt":"Performance comparison between different kinds of string concatenation/formatting in Java/Scala String concatenation is a basic building…","fields":{"slug":"/p/scala-string-interpolation-performance/"},"frontmatter":{"date":"December 05, 2016","title":"Scala: String Interpolation Performance","description":"Performance comparison between different kinds of string concatenation/formatting in Java/Scala..."}}},{"node":{"excerpt":"Yet another post about performance and microbenchmarks. Yes, I know. Very small JMH benchmark: And the result: Wow. Apparently, JVM doesn’t…","fields":{"slug":"/p/scala-stringbuilder-vs-java-stringbuilder-performance/"},"frontmatter":{"date":"December 03, 2016","title":"Scala StringBuilder vs Java StringBuilder Performance","description":"O_O performance benchmark of StringBuilder wrapper in Scala..."}}},{"node":{"excerpt":"I’ve just created charts. There I’ve put my recent benchmark results from the\nScala Serialization article. Things changed: Results gathered…","fields":{"slug":"/p/scala-serialization-updated/"},"frontmatter":{"date":"June 26, 2016","title":"Scala Serialization Updated","description":"Short update on Scala Serialization post..."}}},{"node":{"excerpt":"UPD: Recent benchmark charts are here. It’s common to use JSON as the main format of serialized data.\nIt’s very convenient to use it both on…","fields":{"slug":"/p/scala-serialization/"},"frontmatter":{"date":"June 12, 2016","title":"Scala Serialization","description":"Performance comparison of popular serialization libraries for Scala..."}}},{"node":{"excerpt":"I doubt a bit, but then I decided to try to submit a patch to JDK with\nthe performance improvement. I’ve read couple articles,\ncloned code…","fields":{"slug":"/p/lets-continue-with-uuid-fromstring/"},"frontmatter":{"date":"November 16, 2015","title":"Let’s continue with UUID.fromString","description":"Everything is invented before us: my attempt to contribute UUID.fromString to JDK9..."}}},{"node":{"excerpt":"I spent some time on optimizing UUID.fromString\nfunction and I want to share my experience about it. TL;DR — we will improve\nit’s…","fields":{"slug":"/p/micro-optimization-for-uuid-fromstring-in-7-steps/"},"frontmatter":{"date":"November 05, 2015","title":"Micro-optimization for UUID.fromString in 7 steps","description":"A sequence of 7 micro-optimizations for parsing UUID from String to make it really fast!"}}}]}},"pageContext":{"tag":"performance"}},"staticQueryHashes":["3675711862"]}