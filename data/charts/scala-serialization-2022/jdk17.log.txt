# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 0.00% complete, ETA 03:12:30
# Fork: 1 of 1
# Warmup Iteration   1: 32181.157 ns/op
# Warmup Iteration   2: 27406.146 ns/op
Iteration   1: 27365.389 ns/op
Iteration   2: 27360.516 ns/op
Iteration   3: 27588.503 ns/op
Iteration   4: 27358.689 ns/op
Iteration   5: 27486.408 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  27431.901 ±(99.9%) 396.330 ns/op [Average]
  (min, avg, max) = (27358.689, 27431.901, 27588.503), stdev = 102.926
  CI (99.9%): [27035.570, 27828.231] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 0.30% complete, ETA 03:26:06
# Fork: 1 of 1
# Warmup Iteration   1: 66553.174 ns/op
# Warmup Iteration   2: 54545.170 ns/op
Iteration   1: 53375.058 ns/op
Iteration   2: 53141.628 ns/op
Iteration   3: 53167.793 ns/op
Iteration   4: 53810.806 ns/op
Iteration   5: 53445.401 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  53388.137 ±(99.9%) 1039.349 ns/op [Average]
  (min, avg, max) = (53141.628, 53388.137, 53810.806), stdev = 269.916
  CI (99.9%): [52348.788, 54427.486] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 0.61% complete, ETA 03:25:41
# Fork: 1 of 1
# Warmup Iteration   1: 128751.627 ns/op
# Warmup Iteration   2: 108402.903 ns/op
Iteration   1: 106009.207 ns/op
Iteration   2: 105775.071 ns/op
Iteration   3: 108090.248 ns/op
Iteration   4: 106063.637 ns/op
Iteration   5: 107237.874 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  106635.207 ±(99.9%) 3821.051 ns/op [Average]
  (min, avg, max) = (105775.071, 106635.207, 108090.248), stdev = 992.315
  CI (99.9%): [102814.156, 110456.258] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 0.91% complete, ETA 03:25:15
# Fork: 1 of 1
# Warmup Iteration   1: 302177.553 ns/op
# Warmup Iteration   2: 236242.371 ns/op
Iteration   1: 233002.212 ns/op
Iteration   2: 230900.689 ns/op
Iteration   3: 233726.571 ns/op
Iteration   4: 230815.129 ns/op
Iteration   5: 232653.974 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  232219.715 ±(99.9%) 5014.785 ns/op [Average]
  (min, avg, max) = (230815.129, 232219.715, 233726.571), stdev = 1302.324
  CI (99.9%): [227204.930, 237234.500] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 1.21% complete, ETA 03:24:26
# Fork: 1 of 1
# Warmup Iteration   1: 2538495.795 ns/op
# Warmup Iteration   2: 2199923.866 ns/op
Iteration   1: 2179724.391 ns/op
Iteration   2: 2181991.139 ns/op
Iteration   3: 2186692.280 ns/op
Iteration   4: 2181341.046 ns/op
Iteration   5: 2194616.515 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  2184873.074 ±(99.9%) 23226.586 ns/op [Average]
  (min, avg, max) = (2179724.391, 2184873.074, 2194616.515), stdev = 6031.871
  CI (99.9%): [2161646.489, 2208099.660] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 1.52% complete, ETA 03:23:58
# Fork: 1 of 1
# Warmup Iteration   1: 28006.270 ns/op
# Warmup Iteration   2: 24110.986 ns/op
Iteration   1: 24106.117 ns/op
Iteration   2: 24100.151 ns/op
Iteration   3: 24010.836 ns/op
Iteration   4: 23983.130 ns/op
Iteration   5: 23847.680 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  24009.583 ±(99.9%) 405.851 ns/op [Average]
  (min, avg, max) = (23847.680, 24009.583, 24106.117), stdev = 105.398
  CI (99.9%): [23603.731, 24415.434] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 1.82% complete, ETA 03:23:14
# Fork: 1 of 1
# Warmup Iteration   1: 54356.107 ns/op
# Warmup Iteration   2: 45764.479 ns/op
Iteration   1: 45165.303 ns/op
Iteration   2: 44599.585 ns/op
Iteration   3: 44802.317 ns/op
Iteration   4: 44991.361 ns/op
Iteration   5: 44834.276 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  44878.568 ±(99.9%) 818.084 ns/op [Average]
  (min, avg, max) = (44599.585, 44878.568, 45165.303), stdev = 212.454
  CI (99.9%): [44060.484, 45696.653] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 2.12% complete, ETA 03:22:35
# Fork: 1 of 1
# Warmup Iteration   1: 98554.584 ns/op
# Warmup Iteration   2: 87222.237 ns/op
Iteration   1: 85956.339 ns/op
Iteration   2: 86461.382 ns/op
Iteration   3: 86767.782 ns/op
Iteration   4: 86799.533 ns/op
Iteration   5: 86153.335 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  86427.674 ±(99.9%) 1431.108 ns/op [Average]
  (min, avg, max) = (85956.339, 86427.674, 86799.533), stdev = 371.654
  CI (99.9%): [84996.567, 87858.782] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 2.42% complete, ETA 03:21:55
# Fork: 1 of 1
# Warmup Iteration   1: 211106.749 ns/op
# Warmup Iteration   2: 175608.579 ns/op
Iteration   1: 176680.141 ns/op
Iteration   2: 174340.834 ns/op
Iteration   3: 175921.847 ns/op
Iteration   4: 174686.626 ns/op
Iteration   5: 174609.606 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  175247.811 ±(99.9%) 3874.988 ns/op [Average]
  (min, avg, max) = (174340.834, 175247.811, 176680.141), stdev = 1006.322
  CI (99.9%): [171372.823, 179122.798] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 2.73% complete, ETA 03:21:21
# Fork: 1 of 1
# Warmup Iteration   1: 2140194.704 ns/op
# Warmup Iteration   2: 1843715.273 ns/op
Iteration   1: 1835811.440 ns/op
Iteration   2: 1826047.903 ns/op
Iteration   3: 1827728.949 ns/op
Iteration   4: 1841703.778 ns/op
Iteration   5: 1838676.026 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1833993.619 ±(99.9%) 26332.356 ns/op [Average]
  (min, avg, max) = (1826047.903, 1833993.619, 1841703.778), stdev = 6838.429
  CI (99.9%): [1807661.263, 1860325.976] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 3.03% complete, ETA 03:20:41
# Fork: 1 of 1
# Warmup Iteration   1: 29526.626 ns/op
# Warmup Iteration   2: 24684.394 ns/op
Iteration   1: 24340.365 ns/op
Iteration   2: 24529.841 ns/op
Iteration   3: 24378.626 ns/op
Iteration   4: 24406.537 ns/op
Iteration   5: 25027.108 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  24536.496 ±(99.9%) 1090.868 ns/op [Average]
  (min, avg, max) = (24340.365, 24536.496, 25027.108), stdev = 283.295
  CI (99.9%): [23445.627, 25627.364] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 3.33% complete, ETA 03:20:03
# Fork: 1 of 1
# Warmup Iteration   1: 56439.039 ns/op
# Warmup Iteration   2: 47486.021 ns/op
Iteration   1: 46900.830 ns/op
Iteration   2: 46784.116 ns/op
Iteration   3: 46709.540 ns/op
Iteration   4: 46784.147 ns/op
Iteration   5: 46733.189 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  46782.364 ±(99.9%) 284.023 ns/op [Average]
  (min, avg, max) = (46709.540, 46782.364, 46900.830), stdev = 73.760
  CI (99.9%): [46498.341, 47066.387] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 3.64% complete, ETA 03:19:25
# Fork: 1 of 1
# Warmup Iteration   1: 123841.504 ns/op
# Warmup Iteration   2: 103075.847 ns/op
Iteration   1: 102060.494 ns/op
Iteration   2: 102423.787 ns/op
Iteration   3: 102517.523 ns/op
Iteration   4: 101869.663 ns/op
Iteration   5: 101759.044 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  102126.102 ±(99.9%) 1286.691 ns/op [Average]
  (min, avg, max) = (101759.044, 102126.102, 102517.523), stdev = 334.150
  CI (99.9%): [100839.411, 103412.794] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 3.94% complete, ETA 03:18:50
# Fork: 1 of 1
# Warmup Iteration   1: 274645.362 ns/op
# Warmup Iteration   2: 224589.209 ns/op
Iteration   1: 226822.003 ns/op
Iteration   2: 226601.269 ns/op
Iteration   3: 226032.373 ns/op
Iteration   4: 227189.947 ns/op
Iteration   5: 225693.198 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  226467.758 ±(99.9%) 2321.889 ns/op [Average]
  (min, avg, max) = (225693.198, 226467.758, 227189.947), stdev = 602.987
  CI (99.9%): [224145.869, 228789.647] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 4.24% complete, ETA 03:18:12
# Fork: 1 of 1
# Warmup Iteration   1: 2335422.836 ns/op
# Warmup Iteration   2: 1947968.413 ns/op
Iteration   1: 1941240.001 ns/op
Iteration   2: 1955301.944 ns/op
Iteration   3: 1992059.846 ns/op
Iteration   4: 1938762.126 ns/op
Iteration   5: 1940624.009 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1953597.585 ±(99.9%) 86604.500 ns/op [Average]
  (min, avg, max) = (1938762.126, 1953597.585, 1992059.846), stdev = 22490.914
  CI (99.9%): [1866993.085, 2040202.085] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 4.55% complete, ETA 03:17:34
# Fork: 1 of 1
# Warmup Iteration   1: 12351.055 ns/op
# Warmup Iteration   2: 10841.754 ns/op
Iteration   1: 11009.881 ns/op
Iteration   2: 11006.315 ns/op
Iteration   3: 11035.503 ns/op
Iteration   4: 11040.842 ns/op
Iteration   5: 11021.647 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  11022.838 ±(99.9%) 58.615 ns/op [Average]
  (min, avg, max) = (11006.315, 11022.838, 11040.842), stdev = 15.222
  CI (99.9%): [10964.223, 11081.453] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 4.85% complete, ETA 03:16:53
# Fork: 1 of 1
# Warmup Iteration   1: 23360.330 ns/op
# Warmup Iteration   2: 21163.789 ns/op
Iteration   1: 21092.166 ns/op
Iteration   2: 20988.014 ns/op
Iteration   3: 20890.870 ns/op
Iteration   4: 21051.396 ns/op
Iteration   5: 20988.001 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  21002.089 ±(99.9%) 293.959 ns/op [Average]
  (min, avg, max) = (20890.870, 21002.089, 21092.166), stdev = 76.340
  CI (99.9%): [20708.130, 21296.048] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 5.15% complete, ETA 03:16:12
# Fork: 1 of 1
# Warmup Iteration   1: 41006.110 ns/op
# Warmup Iteration   2: 36841.568 ns/op
Iteration   1: 36464.786 ns/op
Iteration   2: 36669.288 ns/op
Iteration   3: 36576.163 ns/op
Iteration   4: 36289.757 ns/op
Iteration   5: 36377.633 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  36475.525 ±(99.9%) 583.598 ns/op [Average]
  (min, avg, max) = (36289.757, 36475.525, 36669.288), stdev = 151.559
  CI (99.9%): [35891.927, 37059.124] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 5.45% complete, ETA 03:15:37
# Fork: 1 of 1
# Warmup Iteration   1: 78366.997 ns/op
# Warmup Iteration   2: 68394.365 ns/op
Iteration   1: 68213.670 ns/op
Iteration   2: 68702.283 ns/op
Iteration   3: 68366.044 ns/op
Iteration   4: 68217.564 ns/op
Iteration   5: 69181.651 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  68536.242 ±(99.9%) 1586.140 ns/op [Average]
  (min, avg, max) = (68213.670, 68536.242, 69181.651), stdev = 411.916
  CI (99.9%): [66950.102, 70122.383] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 5.76% complete, ETA 03:14:56
# Fork: 1 of 1
# Warmup Iteration   1: 709356.992 ns/op
# Warmup Iteration   2: 635645.666 ns/op
Iteration   1: 626464.579 ns/op
Iteration   2: 624572.010 ns/op
Iteration   3: 628511.767 ns/op
Iteration   4: 625398.937 ns/op
Iteration   5: 634805.826 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  627950.624 ±(99.9%) 15811.470 ns/op [Average]
  (min, avg, max) = (624572.010, 627950.624, 634805.826), stdev = 4106.189
  CI (99.9%): [612139.154, 643762.094] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 6.06% complete, ETA 03:14:18
# Fork: 1 of 1
# Warmup Iteration   1: 7336.654 ns/op
# Warmup Iteration   2: 6325.250 ns/op
Iteration   1: 6373.186 ns/op
Iteration   2: 6262.135 ns/op
Iteration   3: 6263.135 ns/op
Iteration   4: 6261.724 ns/op
Iteration   5: 6258.018 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  6283.640 ±(99.9%) 192.900 ns/op [Average]
  (min, avg, max) = (6258.018, 6283.640, 6373.186), stdev = 50.095
  CI (99.9%): [6090.740, 6476.539] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 6.36% complete, ETA 03:13:41
# Fork: 1 of 1
# Warmup Iteration   1: 14998.667 ns/op
# Warmup Iteration   2: 12689.948 ns/op
Iteration   1: 12438.251 ns/op
Iteration   2: 12408.864 ns/op
Iteration   3: 12391.675 ns/op
Iteration   4: 12406.017 ns/op
Iteration   5: 12498.898 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  12428.741 ±(99.9%) 164.475 ns/op [Average]
  (min, avg, max) = (12391.675, 12428.741, 12498.898), stdev = 42.714
  CI (99.9%): [12264.266, 12593.216] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 6.67% complete, ETA 03:13:01
# Fork: 1 of 1
# Warmup Iteration   1: 28096.623 ns/op
# Warmup Iteration   2: 23572.079 ns/op
Iteration   1: 23429.444 ns/op
Iteration   2: 23586.942 ns/op
Iteration   3: 23859.374 ns/op
Iteration   4: 23402.492 ns/op
Iteration   5: 23423.552 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  23540.361 ±(99.9%) 742.919 ns/op [Average]
  (min, avg, max) = (23402.492, 23540.361, 23859.374), stdev = 192.934
  CI (99.9%): [22797.442, 24283.280] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 6.97% complete, ETA 03:12:22
# Fork: 1 of 1
# Warmup Iteration   1: 61376.317 ns/op
# Warmup Iteration   2: 51861.981 ns/op
Iteration   1: 51639.214 ns/op
Iteration   2: 51599.820 ns/op
Iteration   3: 51568.664 ns/op
Iteration   4: 51937.458 ns/op
Iteration   5: 52214.323 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  51791.896 ±(99.9%) 1071.403 ns/op [Average]
  (min, avg, max) = (51568.664, 51791.896, 52214.323), stdev = 278.240
  CI (99.9%): [50720.492, 52863.299] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 7.27% complete, ETA 03:11:45
# Fork: 1 of 1
# Warmup Iteration   1: 582805.237 ns/op
# Warmup Iteration   2: 489489.786 ns/op
Iteration   1: 490024.455 ns/op
Iteration   2: 491346.591 ns/op
Iteration   3: 492100.768 ns/op
Iteration   4: 490841.449 ns/op
Iteration   5: 492748.043 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  491412.261 ±(99.9%) 4090.799 ns/op [Average]
  (min, avg, max) = (490024.455, 491412.261, 492748.043), stdev = 1062.367
  CI (99.9%): [487321.462, 495503.060] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 7.58% complete, ETA 03:11:07
# Fork: 1 of 1
# Warmup Iteration   1: 13208.419 ns/op
# Warmup Iteration   2: 11385.357 ns/op
Iteration   1: 11457.538 ns/op
Iteration   2: 11520.726 ns/op
Iteration   3: 11483.616 ns/op
Iteration   4: 11423.016 ns/op
Iteration   5: 11545.092 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  11485.997 ±(99.9%) 187.464 ns/op [Average]
  (min, avg, max) = (11423.016, 11485.997, 11545.092), stdev = 48.684
  CI (99.9%): [11298.534, 11673.461] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 7.88% complete, ETA 03:10:29
# Fork: 1 of 1
# Warmup Iteration   1: 25102.346 ns/op
# Warmup Iteration   2: 21681.114 ns/op
Iteration   1: 21584.969 ns/op
Iteration   2: 21643.810 ns/op
Iteration   3: 21610.858 ns/op
Iteration   4: 21661.269 ns/op
Iteration   5: 21531.811 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  21606.543 ±(99.9%) 196.842 ns/op [Average]
  (min, avg, max) = (21531.811, 21606.543, 21661.269), stdev = 51.119
  CI (99.9%): [21409.702, 21803.385] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 8.18% complete, ETA 03:09:51
# Fork: 1 of 1
# Warmup Iteration   1: 48472.778 ns/op
# Warmup Iteration   2: 42250.476 ns/op
Iteration   1: 42517.088 ns/op
Iteration   2: 42199.085 ns/op
Iteration   3: 42299.638 ns/op
Iteration   4: 42450.864 ns/op
Iteration   5: 42195.022 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  42332.340 ±(99.9%) 564.163 ns/op [Average]
  (min, avg, max) = (42195.022, 42332.340, 42517.088), stdev = 146.511
  CI (99.9%): [41768.177, 42896.503] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 8.48% complete, ETA 03:09:14
# Fork: 1 of 1
# Warmup Iteration   1: 106379.605 ns/op
# Warmup Iteration   2: 93383.536 ns/op
Iteration   1: 94477.041 ns/op
Iteration   2: 94054.136 ns/op
Iteration   3: 96225.530 ns/op
Iteration   4: 93134.563 ns/op
Iteration   5: 93414.072 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  94261.068 ±(99.9%) 4690.438 ns/op [Average]
  (min, avg, max) = (93134.563, 94261.068, 96225.530), stdev = 1218.092
  CI (99.9%): [89570.630, 98951.506] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 8.79% complete, ETA 03:08:36
# Fork: 1 of 1
# Warmup Iteration   1: 1068573.704 ns/op
# Warmup Iteration   2: 941466.016 ns/op
Iteration   1: 944980.312 ns/op
Iteration   2: 941419.535 ns/op
Iteration   3: 942427.489 ns/op
Iteration   4: 941496.593 ns/op
Iteration   5: 944361.846 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  942937.155 ±(99.9%) 6339.656 ns/op [Average]
  (min, avg, max) = (941419.535, 942937.155, 944980.312), stdev = 1646.389
  CI (99.9%): [936597.499, 949276.811] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 9.09% complete, ETA 03:07:58
# Fork: 1 of 1
# Warmup Iteration   1: 161622.512 ns/op
# Warmup Iteration   2: 138664.099 ns/op
Iteration   1: 131247.662 ns/op
Iteration   2: 131141.519 ns/op
Iteration   3: 133219.163 ns/op
Iteration   4: 131314.632 ns/op
Iteration   5: 131070.548 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  131598.705 ±(99.9%) 3506.932 ns/op [Average]
  (min, avg, max) = (131070.548, 131598.705, 133219.163), stdev = 910.739
  CI (99.9%): [128091.773, 135105.637] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 9.39% complete, ETA 03:07:19
# Fork: 1 of 1
# Warmup Iteration   1: 288083.810 ns/op
# Warmup Iteration   2: 251417.833 ns/op
Iteration   1: 243441.260 ns/op
Iteration   2: 238792.330 ns/op
Iteration   3: 238611.118 ns/op
Iteration   4: 242201.556 ns/op
Iteration   5: 238856.567 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  240380.566 ±(99.9%) 8751.190 ns/op [Average]
  (min, avg, max) = (238611.118, 240380.566, 243441.260), stdev = 2272.656
  CI (99.9%): [231629.376, 249131.756] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 9.70% complete, ETA 03:06:41
# Fork: 1 of 1
# Warmup Iteration   1: 675000.786 ns/op
# Warmup Iteration   2: 572934.469 ns/op
Iteration   1: 554367.060 ns/op
Iteration   2: 555234.752 ns/op
Iteration   3: 555338.590 ns/op
Iteration   4: 559640.558 ns/op
Iteration   5: 563434.757 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  557603.143 ±(99.9%) 14834.789 ns/op [Average]
  (min, avg, max) = (554367.060, 557603.143, 563434.757), stdev = 3852.548
  CI (99.9%): [542768.354, 572437.933] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 10.00% complete, ETA 03:06:02
# Fork: 1 of 1
# Warmup Iteration   1: 1736145.191 ns/op
# Warmup Iteration   2: 1441339.137 ns/op
Iteration   1: 1398438.921 ns/op
Iteration   2: 1410534.019 ns/op
Iteration   3: 1393332.628 ns/op
Iteration   4: 1419536.690 ns/op
Iteration   5: 1415869.106 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1407542.273 ±(99.9%) 43349.160 ns/op [Average]
  (min, avg, max) = (1393332.628, 1407542.273, 1419536.690), stdev = 11257.639
  CI (99.9%): [1364193.113, 1450891.433] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 10.30% complete, ETA 03:05:24
# Fork: 1 of 1
# Warmup Iteration   1: 14456707.225 ns/op
# Warmup Iteration   2: 12343982.377 ns/op
Iteration   1: 11955457.567 ns/op
Iteration   2: 11893680.053 ns/op
Iteration   3: 11960419.618 ns/op
Iteration   4: 11918789.318 ns/op
Iteration   5: 11891835.009 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  11924036.313 ±(99.9%) 126207.718 ns/op [Average]
  (min, avg, max) = (11891835.009, 11924036.313, 11960419.618), stdev = 32775.744
  CI (99.9%): [11797828.595, 12050244.031] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 10.61% complete, ETA 03:04:47
# Fork: 1 of 1
# Warmup Iteration   1: 6940.863 ns/op
# Warmup Iteration   2: 6293.281 ns/op
Iteration   1: 6297.209 ns/op
Iteration   2: 6249.565 ns/op
Iteration   3: 6493.990 ns/op
Iteration   4: 6304.304 ns/op
Iteration   5: 6294.807 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  6327.975 ±(99.9%) 366.905 ns/op [Average]
  (min, avg, max) = (6249.565, 6327.975, 6493.990), stdev = 95.284
  CI (99.9%): [5961.071, 6694.880] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 10.91% complete, ETA 03:04:08
# Fork: 1 of 1
# Warmup Iteration   1: 13423.378 ns/op
# Warmup Iteration   2: 11676.994 ns/op
Iteration   1: 11632.392 ns/op
Iteration   2: 11633.712 ns/op
Iteration   3: 11656.805 ns/op
Iteration   4: 11585.368 ns/op
Iteration   5: 11629.256 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  11627.507 ±(99.9%) 100.033 ns/op [Average]
  (min, avg, max) = (11585.368, 11627.507, 11656.805), stdev = 25.978
  CI (99.9%): [11527.474, 11727.540] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 11.21% complete, ETA 03:03:30
# Fork: 1 of 1
# Warmup Iteration   1: 24446.102 ns/op
# Warmup Iteration   2: 20482.782 ns/op
Iteration   1: 20352.707 ns/op
Iteration   2: 20013.273 ns/op
Iteration   3: 20088.498 ns/op
Iteration   4: 20017.333 ns/op
Iteration   5: 20075.659 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  20109.494 ±(99.9%) 539.400 ns/op [Average]
  (min, avg, max) = (20013.273, 20109.494, 20352.707), stdev = 140.080
  CI (99.9%): [19570.094, 20648.894] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 11.52% complete, ETA 03:02:53
# Fork: 1 of 1
# Warmup Iteration   1: 44666.176 ns/op
# Warmup Iteration   2: 42204.032 ns/op
Iteration   1: 39490.131 ns/op
Iteration   2: 39500.685 ns/op
Iteration   3: 39809.549 ns/op
Iteration   4: 41236.011 ns/op
Iteration   5: 40376.271 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  40082.529 ±(99.9%) 2843.226 ns/op [Average]
  (min, avg, max) = (39490.131, 40082.529, 41236.011), stdev = 738.377
  CI (99.9%): [37239.304, 42925.755] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 11.82% complete, ETA 03:02:14
# Fork: 1 of 1
# Warmup Iteration   1: 441506.512 ns/op
# Warmup Iteration   2: 406735.318 ns/op
Iteration   1: 404216.888 ns/op
Iteration   2: 398050.402 ns/op
Iteration   3: 397470.656 ns/op
Iteration   4: 406084.597 ns/op
Iteration   5: 399441.954 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  401052.899 ±(99.9%) 14885.044 ns/op [Average]
  (min, avg, max) = (397470.656, 401052.899, 406084.597), stdev = 3865.599
  CI (99.9%): [386167.855, 415937.944] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 12.12% complete, ETA 03:01:37
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 12.42% complete, ETA 02:56:52
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 12.73% complete, ETA 02:52:21
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 13.03% complete, ETA 02:48:02
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 13.33% complete, ETA 02:43:55
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_both_jmhTest.both_AverageTime(EventBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 13.64% complete, ETA 02:39:58
# Fork: 1 of 1
# Warmup Iteration   1: 11559.576 ns/op
# Warmup Iteration   2: 10355.339 ns/op
Iteration   1: 10303.077 ns/op
Iteration   2: 10369.461 ns/op
Iteration   3: 10293.255 ns/op
Iteration   4: 10371.816 ns/op
Iteration   5: 10314.316 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  10330.385 ±(99.9%) 144.412 ns/op [Average]
  (min, avg, max) = (10293.255, 10330.385, 10371.816), stdev = 37.503
  CI (99.9%): [10185.973, 10474.798] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 13.94% complete, ETA 02:39:48
# Fork: 1 of 1
# Warmup Iteration   1: 22158.906 ns/op
# Warmup Iteration   2: 19284.294 ns/op
Iteration   1: 19228.752 ns/op
Iteration   2: 19245.905 ns/op
Iteration   3: 19277.858 ns/op
Iteration   4: 19181.235 ns/op
Iteration   5: 19368.741 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  19260.498 ±(99.9%) 269.004 ns/op [Average]
  (min, avg, max) = (19181.235, 19260.498, 19368.741), stdev = 69.859
  CI (99.9%): [18991.494, 19529.502] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 14.24% complete, ETA 02:39:36
# Fork: 1 of 1
# Warmup Iteration   1: 42940.360 ns/op
# Warmup Iteration   2: 39265.584 ns/op
Iteration   1: 39453.686 ns/op
Iteration   2: 38604.161 ns/op
Iteration   3: 38055.939 ns/op
Iteration   4: 38894.666 ns/op
Iteration   5: 38053.039 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  38612.298 ±(99.9%) 2286.223 ns/op [Average]
  (min, avg, max) = (38053.039, 38612.298, 39453.686), stdev = 593.725
  CI (99.9%): [36326.075, 40898.521] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 14.55% complete, ETA 02:39:23
# Fork: 1 of 1
# Warmup Iteration   1: 89268.724 ns/op
# Warmup Iteration   2: 78455.877 ns/op
Iteration   1: 78226.032 ns/op
Iteration   2: 78156.760 ns/op
Iteration   3: 78110.708 ns/op
Iteration   4: 78045.861 ns/op
Iteration   5: 78141.333 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  78136.139 ±(99.9%) 253.454 ns/op [Average]
  (min, avg, max) = (78045.861, 78136.139, 78226.032), stdev = 65.821
  CI (99.9%): [77882.685, 78389.592] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 14.85% complete, ETA 02:39:10
# Fork: 1 of 1
# Warmup Iteration   1: 837433.188 ns/op
# Warmup Iteration   2: 783460.841 ns/op
Iteration   1: 784659.125 ns/op
Iteration   2: 782232.366 ns/op
Iteration   3: 780086.049 ns/op
Iteration   4: 789113.140 ns/op
Iteration   5: 798161.063 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  786850.348 ±(99.9%) 27562.075 ns/op [Average]
  (min, avg, max) = (780086.049, 786850.348, 798161.063), stdev = 7157.783
  CI (99.9%): [759288.273, 814412.424] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 15.15% complete, ETA 02:38:56
# Fork: 1 of 1
# Warmup Iteration   1: 205229.417 ns/op
# Warmup Iteration   2: 177420.351 ns/op
Iteration   1: 176267.294 ns/op
Iteration   2: 178224.088 ns/op
Iteration   3: 177546.781 ns/op
Iteration   4: 175268.645 ns/op
Iteration   5: 176238.059 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  176708.974 ±(99.9%) 4510.713 ns/op [Average]
  (min, avg, max) = (175268.645, 176708.974, 178224.088), stdev = 1171.418
  CI (99.9%): [172198.260, 181219.687] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 15.45% complete, ETA 02:38:42
# Fork: 1 of 1
# Warmup Iteration   1: 319900.441 ns/op
# Warmup Iteration   2: 274600.638 ns/op
Iteration   1: 275047.919 ns/op
Iteration   2: 272404.014 ns/op
Iteration   3: 281556.375 ns/op
Iteration   4: 272509.427 ns/op
Iteration   5: 272975.018 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  274898.551 ±(99.9%) 14910.936 ns/op [Average]
  (min, avg, max) = (272404.014, 274898.551, 281556.375), stdev = 3872.323
  CI (99.9%): [259987.614, 289809.487] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 15.76% complete, ETA 02:38:27
# Fork: 1 of 1
# Warmup Iteration   1: 663816.597 ns/op
# Warmup Iteration   2: 531652.303 ns/op
Iteration   1: 534898.262 ns/op
Iteration   2: 539031.027 ns/op
Iteration   3: 541373.635 ns/op
Iteration   4: 532560.250 ns/op
Iteration   5: 528181.575 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  535208.950 ±(99.9%) 20110.884 ns/op [Average]
  (min, avg, max) = (528181.575, 535208.950, 541373.635), stdev = 5222.733
  CI (99.9%): [515098.065, 555319.834] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 16.06% complete, ETA 02:38:12
# Fork: 1 of 1
# Warmup Iteration   1: 1506423.324 ns/op
# Warmup Iteration   2: 1237113.978 ns/op
Iteration   1: 1240296.830 ns/op
Iteration   2: 1249617.742 ns/op
Iteration   3: 1240515.181 ns/op
Iteration   4: 1222086.141 ns/op
Iteration   5: 1225191.146 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  1235541.408 ±(99.9%) 44477.345 ns/op [Average]
  (min, avg, max) = (1222086.141, 1235541.408, 1249617.742), stdev = 11550.625
  CI (99.9%): [1191064.063, 1280018.753] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 16.36% complete, ETA 02:37:55
# Fork: 1 of 1
# Warmup Iteration   1: 13474399.057 ns/op
# Warmup Iteration   2: 11415647.817 ns/op
Iteration   1: 11532044.521 ns/op
Iteration   2: 11614320.842 ns/op
Iteration   3: 11447533.402 ns/op
Iteration   4: 11389309.976 ns/op
Iteration   5: 11566444.273 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.both":
  11509930.603 ±(99.9%) 349873.376 ns/op [Average]
  (min, avg, max) = (11389309.976, 11509930.603, 11614320.842), stdev = 90861.005
  CI (99.9%): [11160057.227, 11859803.979] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 16.67% complete, ETA 02:37:40
# Fork: 1 of 1
# Warmup Iteration   1: 16578.778 ns/op
# Warmup Iteration   2: 14876.862 ns/op
Iteration   1: 14546.810 ns/op
Iteration   2: 14584.077 ns/op
Iteration   3: 14533.708 ns/op
Iteration   4: 14693.965 ns/op
Iteration   5: 14549.911 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  14581.694 ±(99.9%) 252.064 ns/op [Average]
  (min, avg, max) = (14533.708, 14581.694, 14693.965), stdev = 65.460
  CI (99.9%): [14329.630, 14833.759] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 16.97% complete, ETA 02:37:20
# Fork: 1 of 1
# Warmup Iteration   1: 31757.792 ns/op
# Warmup Iteration   2: 28567.861 ns/op
Iteration   1: 28327.732 ns/op
Iteration   2: 28404.606 ns/op
Iteration   3: 28537.368 ns/op
Iteration   4: 28391.370 ns/op
Iteration   5: 28252.028 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  28382.621 ±(99.9%) 406.484 ns/op [Average]
  (min, avg, max) = (28252.028, 28382.621, 28537.368), stdev = 105.563
  CI (99.9%): [27976.137, 28789.105] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 17.27% complete, ETA 02:37:01
# Fork: 1 of 1
# Warmup Iteration   1: 65789.722 ns/op
# Warmup Iteration   2: 59434.918 ns/op
Iteration   1: 58756.400 ns/op
Iteration   2: 58636.329 ns/op
Iteration   3: 58419.795 ns/op
Iteration   4: 58640.356 ns/op
Iteration   5: 59032.195 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  58697.015 ±(99.9%) 860.203 ns/op [Average]
  (min, avg, max) = (58419.795, 58697.015, 59032.195), stdev = 223.392
  CI (99.9%): [57836.812, 59557.218] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 17.58% complete, ETA 02:36:41
# Fork: 1 of 1
# Warmup Iteration   1: 147045.050 ns/op
# Warmup Iteration   2: 133529.234 ns/op
Iteration   1: 131790.563 ns/op
Iteration   2: 133144.694 ns/op
Iteration   3: 131672.585 ns/op
Iteration   4: 132642.274 ns/op
Iteration   5: 132687.880 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  132387.599 ±(99.9%) 2432.252 ns/op [Average]
  (min, avg, max) = (131672.585, 132387.599, 133144.694), stdev = 631.648
  CI (99.9%): [129955.347, 134819.851] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 17.88% complete, ETA 02:36:20
# Fork: 1 of 1
# Warmup Iteration   1: 1362042.333 ns/op
# Warmup Iteration   2: 1182405.545 ns/op
Iteration   1: 1187863.899 ns/op
Iteration   2: 1198861.487 ns/op
Iteration   3: 1173578.128 ns/op
Iteration   4: 1173302.858 ns/op
Iteration   5: 1174563.324 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1181633.939 ±(99.9%) 43899.765 ns/op [Average]
  (min, avg, max) = (1173302.858, 1181633.939, 1198861.487), stdev = 11400.630
  CI (99.9%): [1137734.174, 1225533.705] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 18.18% complete, ETA 02:35:59
# Fork: 1 of 1
# Warmup Iteration   1: 16198.667 ns/op
# Warmup Iteration   2: 14350.879 ns/op
Iteration   1: 14331.152 ns/op
Iteration   2: 14214.270 ns/op
Iteration   3: 14415.264 ns/op
Iteration   4: 14249.046 ns/op
Iteration   5: 14777.759 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  14397.498 ±(99.9%) 871.571 ns/op [Average]
  (min, avg, max) = (14214.270, 14397.498, 14777.759), stdev = 226.344
  CI (99.9%): [13525.927, 15269.069] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 18.48% complete, ETA 02:35:37
# Fork: 1 of 1
# Warmup Iteration   1: 29046.212 ns/op
# Warmup Iteration   2: 26952.315 ns/op
Iteration   1: 26786.308 ns/op
Iteration   2: 26755.866 ns/op
Iteration   3: 26744.955 ns/op
Iteration   4: 27189.015 ns/op
Iteration   5: 26774.732 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  26850.175 ±(99.9%) 731.998 ns/op [Average]
  (min, avg, max) = (26744.955, 26850.175, 27189.015), stdev = 190.098
  CI (99.9%): [26118.177, 27582.173] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 18.79% complete, ETA 02:35:15
# Fork: 1 of 1
# Warmup Iteration   1: 55789.503 ns/op
# Warmup Iteration   2: 50435.167 ns/op
Iteration   1: 49783.367 ns/op
Iteration   2: 50283.578 ns/op
Iteration   3: 49784.387 ns/op
Iteration   4: 49643.886 ns/op
Iteration   5: 49727.355 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  49844.515 ±(99.9%) 970.540 ns/op [Average]
  (min, avg, max) = (49643.886, 49844.515, 50283.578), stdev = 252.046
  CI (99.9%): [48873.975, 50815.055] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 19.09% complete, ETA 02:34:52
# Fork: 1 of 1
# Warmup Iteration   1: 118275.043 ns/op
# Warmup Iteration   2: 109720.152 ns/op
Iteration   1: 105720.541 ns/op
Iteration   2: 105731.777 ns/op
Iteration   3: 106752.023 ns/op
Iteration   4: 106754.432 ns/op
Iteration   5: 105902.306 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  106172.216 ±(99.9%) 2061.083 ns/op [Average]
  (min, avg, max) = (105720.541, 106172.216, 106754.432), stdev = 535.257
  CI (99.9%): [104111.132, 108233.299] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 19.39% complete, ETA 02:34:28
# Fork: 1 of 1
# Warmup Iteration   1: 1257882.021 ns/op
# Warmup Iteration   2: 1148091.171 ns/op
Iteration   1: 1098223.374 ns/op
Iteration   2: 1097955.580 ns/op
Iteration   3: 1098432.459 ns/op
Iteration   4: 1099397.901 ns/op
Iteration   5: 1091590.098 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1097119.883 ±(99.9%) 12086.181 ns/op [Average]
  (min, avg, max) = (1091590.098, 1097119.883, 1099397.901), stdev = 3138.743
  CI (99.9%): [1085033.702, 1109206.064] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 19.70% complete, ETA 02:34:05
# Fork: 1 of 1
# Warmup Iteration   1: 15464.240 ns/op
# Warmup Iteration   2: 14175.894 ns/op
Iteration   1: 13890.220 ns/op
Iteration   2: 13837.050 ns/op
Iteration   3: 13731.126 ns/op
Iteration   4: 13722.015 ns/op
Iteration   5: 13765.979 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  13789.278 ±(99.9%) 278.475 ns/op [Average]
  (min, avg, max) = (13722.015, 13789.278, 13890.220), stdev = 72.319
  CI (99.9%): [13510.803, 14067.754] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 20.00% complete, ETA 02:33:42
# Fork: 1 of 1
# Warmup Iteration   1: 29667.866 ns/op
# Warmup Iteration   2: 26283.852 ns/op
Iteration   1: 25870.803 ns/op
Iteration   2: 25877.161 ns/op
Iteration   3: 25868.316 ns/op
Iteration   4: 26111.798 ns/op
Iteration   5: 25929.245 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  25931.465 ±(99.9%) 399.899 ns/op [Average]
  (min, avg, max) = (25868.316, 25931.465, 26111.798), stdev = 103.853
  CI (99.9%): [25531.565, 26331.364] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 20.30% complete, ETA 02:33:17
# Fork: 1 of 1
# Warmup Iteration   1: 61482.944 ns/op
# Warmup Iteration   2: 53400.643 ns/op
Iteration   1: 52793.974 ns/op
Iteration   2: 53037.693 ns/op
Iteration   3: 53031.579 ns/op
Iteration   4: 53052.597 ns/op
Iteration   5: 53208.135 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  53024.796 ±(99.9%) 570.744 ns/op [Average]
  (min, avg, max) = (52793.974, 53024.796, 53208.135), stdev = 148.220
  CI (99.9%): [52454.052, 53595.540] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 20.61% complete, ETA 02:32:52
# Fork: 1 of 1
# Warmup Iteration   1: 125728.058 ns/op
# Warmup Iteration   2: 113682.909 ns/op
Iteration   1: 115425.451 ns/op
Iteration   2: 113257.715 ns/op
Iteration   3: 113282.714 ns/op
Iteration   4: 113814.131 ns/op
Iteration   5: 113901.162 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  113936.235 ±(99.9%) 3401.549 ns/op [Average]
  (min, avg, max) = (113257.715, 113936.235, 115425.451), stdev = 883.372
  CI (99.9%): [110534.685, 117337.784] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 20.91% complete, ETA 02:32:27
# Fork: 1 of 1
# Warmup Iteration   1: 1233250.128 ns/op
# Warmup Iteration   2: 1098418.192 ns/op
Iteration   1: 1091021.264 ns/op
Iteration   2: 1091511.481 ns/op
Iteration   3: 1092343.662 ns/op
Iteration   4: 1091123.330 ns/op
Iteration   5: 1090386.362 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1091277.220 ±(99.9%) 2773.400 ns/op [Average]
  (min, avg, max) = (1090386.362, 1091277.220, 1092343.662), stdev = 720.243
  CI (99.9%): [1088503.819, 1094050.620] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 21.21% complete, ETA 02:32:02
# Fork: 1 of 1
# Warmup Iteration   1: 5582.016 ns/op
# Warmup Iteration   2: 5286.798 ns/op
Iteration   1: 5274.620 ns/op
Iteration   2: 5220.355 ns/op
Iteration   3: 5231.404 ns/op
Iteration   4: 5365.781 ns/op
Iteration   5: 5290.923 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  5276.617 ±(99.9%) 222.611 ns/op [Average]
  (min, avg, max) = (5220.355, 5276.617, 5365.781), stdev = 57.811
  CI (99.9%): [5054.006, 5499.228] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 21.52% complete, ETA 02:31:36
# Fork: 1 of 1
# Warmup Iteration   1: 10519.716 ns/op
# Warmup Iteration   2: 9504.264 ns/op
Iteration   1: 9736.613 ns/op
Iteration   2: 9732.632 ns/op
Iteration   3: 9495.090 ns/op
Iteration   4: 9698.419 ns/op
Iteration   5: 9629.394 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  9658.430 ±(99.9%) 388.614 ns/op [Average]
  (min, avg, max) = (9495.090, 9658.430, 9736.613), stdev = 100.922
  CI (99.9%): [9269.816, 10047.043] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 21.82% complete, ETA 02:31:10
# Fork: 1 of 1
# Warmup Iteration   1: 19188.676 ns/op
# Warmup Iteration   2: 17893.639 ns/op
Iteration   1: 17734.232 ns/op
Iteration   2: 17593.096 ns/op
Iteration   3: 17642.011 ns/op
Iteration   4: 17627.602 ns/op
Iteration   5: 17662.901 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  17651.968 ±(99.9%) 202.348 ns/op [Average]
  (min, avg, max) = (17593.096, 17651.968, 17734.232), stdev = 52.549
  CI (99.9%): [17449.620, 17854.317] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 22.12% complete, ETA 02:30:43
# Fork: 1 of 1
# Warmup Iteration   1: 42334.698 ns/op
# Warmup Iteration   2: 40222.811 ns/op
Iteration   1: 39814.503 ns/op
Iteration   2: 39601.382 ns/op
Iteration   3: 39569.261 ns/op
Iteration   4: 39482.651 ns/op
Iteration   5: 40025.626 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  39698.685 ±(99.9%) 846.252 ns/op [Average]
  (min, avg, max) = (39482.651, 39698.685, 40025.626), stdev = 219.769
  CI (99.9%): [38852.433, 40544.937] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 22.42% complete, ETA 02:30:16
# Fork: 1 of 1
# Warmup Iteration   1: 413827.209 ns/op
# Warmup Iteration   2: 391525.868 ns/op
Iteration   1: 387907.762 ns/op
Iteration   2: 395344.231 ns/op
Iteration   3: 390011.100 ns/op
Iteration   4: 384564.233 ns/op
Iteration   5: 386554.730 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  388876.411 ±(99.9%) 15881.698 ns/op [Average]
  (min, avg, max) = (384564.233, 388876.411, 395344.231), stdev = 4124.427
  CI (99.9%): [372994.713, 404758.110] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 22.73% complete, ETA 02:29:48
# Fork: 1 of 1
# Warmup Iteration   1: 3212.889 ns/op
# Warmup Iteration   2: 2960.266 ns/op
Iteration   1: 2935.205 ns/op
Iteration   2: 2935.049 ns/op
Iteration   3: 2940.861 ns/op
Iteration   4: 2970.253 ns/op
Iteration   5: 2967.803 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2949.834 ±(99.9%) 68.151 ns/op [Average]
  (min, avg, max) = (2935.049, 2949.834, 2970.253), stdev = 17.699
  CI (99.9%): [2881.683, 3017.985] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 23.03% complete, ETA 02:29:21
# Fork: 1 of 1
# Warmup Iteration   1: 6741.440 ns/op
# Warmup Iteration   2: 5979.918 ns/op
Iteration   1: 5942.026 ns/op
Iteration   2: 5888.032 ns/op
Iteration   3: 5907.858 ns/op
Iteration   4: 5883.728 ns/op
Iteration   5: 5885.724 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  5901.474 ±(99.9%) 94.888 ns/op [Average]
  (min, avg, max) = (5883.728, 5901.474, 5942.026), stdev = 24.642
  CI (99.9%): [5806.586, 5996.362] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 23.33% complete, ETA 02:28:53
# Fork: 1 of 1
# Warmup Iteration   1: 13615.605 ns/op
# Warmup Iteration   2: 12344.368 ns/op
Iteration   1: 12101.093 ns/op
Iteration   2: 12140.064 ns/op
Iteration   3: 12117.734 ns/op
Iteration   4: 12117.768 ns/op
Iteration   5: 12116.561 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  12118.644 ±(99.9%) 53.522 ns/op [Average]
  (min, avg, max) = (12101.093, 12118.644, 12140.064), stdev = 13.899
  CI (99.9%): [12065.122, 12172.166] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 23.64% complete, ETA 02:28:24
# Fork: 1 of 1
# Warmup Iteration   1: 30480.031 ns/op
# Warmup Iteration   2: 27380.667 ns/op
Iteration   1: 27010.012 ns/op
Iteration   2: 27169.926 ns/op
Iteration   3: 27207.984 ns/op
Iteration   4: 27420.472 ns/op
Iteration   5: 27062.719 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  27174.223 ±(99.9%) 612.468 ns/op [Average]
  (min, avg, max) = (27010.012, 27174.223, 27420.472), stdev = 159.056
  CI (99.9%): [26561.755, 27786.691] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 23.94% complete, ETA 02:27:56
# Fork: 1 of 1
# Warmup Iteration   1: 284503.977 ns/op
# Warmup Iteration   2: 255276.816 ns/op
Iteration   1: 258691.482 ns/op
Iteration   2: 251402.653 ns/op
Iteration   3: 251529.741 ns/op
Iteration   4: 253327.854 ns/op
Iteration   5: 251481.666 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  253286.679 ±(99.9%) 12040.276 ns/op [Average]
  (min, avg, max) = (251402.653, 253286.679, 258691.482), stdev = 3126.821
  CI (99.9%): [241246.403, 265326.955] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 24.24% complete, ETA 02:27:27
# Fork: 1 of 1
# Warmup Iteration   1: 4635.702 ns/op
# Warmup Iteration   2: 4177.673 ns/op
Iteration   1: 4137.488 ns/op
Iteration   2: 4171.789 ns/op
Iteration   3: 4122.079 ns/op
Iteration   4: 4195.728 ns/op
Iteration   5: 4121.720 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  4149.761 ±(99.9%) 126.273 ns/op [Average]
  (min, avg, max) = (4121.720, 4149.761, 4195.728), stdev = 32.793
  CI (99.9%): [4023.487, 4276.034] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 24.55% complete, ETA 02:26:58
# Fork: 1 of 1
# Warmup Iteration   1: 8308.448 ns/op
# Warmup Iteration   2: 7744.246 ns/op
Iteration   1: 7654.777 ns/op
Iteration   2: 7869.552 ns/op
Iteration   3: 7657.682 ns/op
Iteration   4: 7694.771 ns/op
Iteration   5: 7642.669 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  7703.890 ±(99.9%) 364.402 ns/op [Average]
  (min, avg, max) = (7642.669, 7703.890, 7869.552), stdev = 94.634
  CI (99.9%): [7339.488, 8068.292] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 24.85% complete, ETA 02:26:29
# Fork: 1 of 1
# Warmup Iteration   1: 17153.826 ns/op
# Warmup Iteration   2: 15095.288 ns/op
Iteration   1: 14688.729 ns/op
Iteration   2: 14696.565 ns/op
Iteration   3: 14678.346 ns/op
Iteration   4: 14718.451 ns/op
Iteration   5: 14752.531 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  14706.925 ±(99.9%) 113.381 ns/op [Average]
  (min, avg, max) = (14678.346, 14706.925, 14752.531), stdev = 29.445
  CI (99.9%): [14593.543, 14820.306] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 25.15% complete, ETA 02:26:00
# Fork: 1 of 1
# Warmup Iteration   1: 33979.728 ns/op
# Warmup Iteration   2: 31235.414 ns/op
Iteration   1: 30556.902 ns/op
Iteration   2: 30577.322 ns/op
Iteration   3: 31323.532 ns/op
Iteration   4: 30849.035 ns/op
Iteration   5: 30639.006 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  30789.159 ±(99.9%) 1233.565 ns/op [Average]
  (min, avg, max) = (30556.902, 30789.159, 31323.532), stdev = 320.353
  CI (99.9%): [29555.594, 32022.724] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 25.45% complete, ETA 02:25:30
# Fork: 1 of 1
# Warmup Iteration   1: 349705.646 ns/op
# Warmup Iteration   2: 306463.740 ns/op
Iteration   1: 316011.483 ns/op
Iteration   2: 310114.043 ns/op
Iteration   3: 310807.414 ns/op
Iteration   4: 309161.021 ns/op
Iteration   5: 309815.774 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  311181.947 ±(99.9%) 10642.639 ns/op [Average]
  (min, avg, max) = (309161.021, 311181.947, 316011.483), stdev = 2763.859
  CI (99.9%): [300539.308, 321824.586] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 25.76% complete, ETA 02:25:01
# Fork: 1 of 1
# Warmup Iteration   1: 116760.235 ns/op
# Warmup Iteration   2: 105225.576 ns/op
Iteration   1: 104143.772 ns/op
Iteration   2: 104873.829 ns/op
Iteration   3: 104468.850 ns/op
Iteration   4: 104413.902 ns/op
Iteration   5: 105041.205 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  104588.311 ±(99.9%) 1400.250 ns/op [Average]
  (min, avg, max) = (104143.772, 104588.311, 105041.205), stdev = 363.641
  CI (99.9%): [103188.061, 105988.562] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 26.06% complete, ETA 02:24:31
# Fork: 1 of 1
# Warmup Iteration   1: 217391.451 ns/op
# Warmup Iteration   2: 193876.346 ns/op
Iteration   1: 193450.743 ns/op
Iteration   2: 192967.936 ns/op
Iteration   3: 193462.073 ns/op
Iteration   4: 193246.272 ns/op
Iteration   5: 192673.333 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  193160.071 ±(99.9%) 1301.489 ns/op [Average]
  (min, avg, max) = (192673.333, 193160.071, 193462.073), stdev = 337.993
  CI (99.9%): [191858.582, 194461.560] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 26.36% complete, ETA 02:24:01
# Fork: 1 of 1
# Warmup Iteration   1: 501704.047 ns/op
# Warmup Iteration   2: 447206.335 ns/op
Iteration   1: 446996.394 ns/op
Iteration   2: 447926.022 ns/op
Iteration   3: 449632.581 ns/op
Iteration   4: 448634.888 ns/op
Iteration   5: 449189.358 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  448475.849 ±(99.9%) 4021.810 ns/op [Average]
  (min, avg, max) = (446996.394, 448475.849, 449632.581), stdev = 1044.451
  CI (99.9%): [444454.039, 452497.659] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 26.67% complete, ETA 02:23:31
# Fork: 1 of 1
# Warmup Iteration   1: 1245129.824 ns/op
# Warmup Iteration   2: 1109882.496 ns/op
Iteration   1: 1111821.391 ns/op
Iteration   2: 1110701.049 ns/op
Iteration   3: 1119133.457 ns/op
Iteration   4: 1107399.740 ns/op
Iteration   5: 1108372.316 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  1111485.591 ±(99.9%) 17813.628 ns/op [Average]
  (min, avg, max) = (1107399.740, 1111485.591, 1119133.457), stdev = 4626.143
  CI (99.9%): [1093671.963, 1129299.219] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 26.97% complete, ETA 02:23:00
# Fork: 1 of 1
# Warmup Iteration   1: 10798666.114 ns/op
# Warmup Iteration   2: 9295307.793 ns/op
Iteration   1: 9299107.328 ns/op
Iteration   2: 9299377.188 ns/op
Iteration   3: 9311397.967 ns/op
Iteration   4: 9306308.684 ns/op
Iteration   5: 9368906.990 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  9317019.631 ±(99.9%) 113426.335 ns/op [Average]
  (min, avg, max) = (9299107.328, 9317019.631, 9368906.990), stdev = 29456.459
  CI (99.9%): [9203593.296, 9430445.966] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 27.27% complete, ETA 02:22:30
# Fork: 1 of 1
# Warmup Iteration   1: 2608.897 ns/op
# Warmup Iteration   2: 2455.919 ns/op
Iteration   1: 2451.010 ns/op
Iteration   2: 2503.139 ns/op
Iteration   3: 2444.182 ns/op
Iteration   4: 2466.506 ns/op
Iteration   5: 2443.347 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  2461.637 ±(99.9%) 96.233 ns/op [Average]
  (min, avg, max) = (2443.347, 2461.637, 2503.139), stdev = 24.991
  CI (99.9%): [2365.404, 2557.870] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 27.58% complete, ETA 02:22:00
# Fork: 1 of 1
# Warmup Iteration   1: 5224.308 ns/op
# Warmup Iteration   2: 4830.331 ns/op
Iteration   1: 4916.385 ns/op
Iteration   2: 4873.017 ns/op
Iteration   3: 4844.648 ns/op
Iteration   4: 4859.267 ns/op
Iteration   5: 4926.026 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  4883.869 ±(99.9%) 137.439 ns/op [Average]
  (min, avg, max) = (4844.648, 4883.869, 4926.026), stdev = 35.692
  CI (99.9%): [4746.430, 5021.308] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 27.88% complete, ETA 02:21:29
# Fork: 1 of 1
# Warmup Iteration   1: 9442.527 ns/op
# Warmup Iteration   2: 8983.056 ns/op
Iteration   1: 8896.731 ns/op
Iteration   2: 8904.587 ns/op
Iteration   3: 8956.939 ns/op
Iteration   4: 8854.267 ns/op
Iteration   5: 8896.596 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  8901.824 ±(99.9%) 140.960 ns/op [Average]
  (min, avg, max) = (8854.267, 8901.824, 8956.939), stdev = 36.607
  CI (99.9%): [8760.864, 9042.785] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 28.18% complete, ETA 02:20:58
# Fork: 1 of 1
# Warmup Iteration   1: 18659.668 ns/op
# Warmup Iteration   2: 17907.724 ns/op
Iteration   1: 17702.051 ns/op
Iteration   2: 17572.975 ns/op
Iteration   3: 17437.911 ns/op
Iteration   4: 17779.001 ns/op
Iteration   5: 17409.182 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  17580.224 ±(99.9%) 620.644 ns/op [Average]
  (min, avg, max) = (17409.182, 17580.224, 17779.001), stdev = 161.179
  CI (99.9%): [16959.580, 18200.868] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 28.48% complete, ETA 02:20:27
# Fork: 1 of 1
# Warmup Iteration   1: 205110.629 ns/op
# Warmup Iteration   2: 192448.112 ns/op
Iteration   1: 192414.200 ns/op
Iteration   2: 192741.168 ns/op
Iteration   3: 193612.174 ns/op
Iteration   4: 195092.308 ns/op
Iteration   5: 192993.367 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  193370.643 ±(99.9%) 4073.240 ns/op [Average]
  (min, avg, max) = (192414.200, 193370.643, 195092.308), stdev = 1057.808
  CI (99.9%): [189297.403, 197443.884] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 28.79% complete, ETA 02:19:55
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 29.09% complete, ETA 02:17:59
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 29.39% complete, ETA 02:16:05
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 29.70% complete, ETA 02:14:12
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 30.00% complete, ETA 02:12:22
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_deserialization_jmhTest.deserialization_AverageTime(EventBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 30.30% complete, ETA 02:10:35
# Fork: 1 of 1
# Warmup Iteration   1: 6935.977 ns/op
# Warmup Iteration   2: 6401.241 ns/op
Iteration   1: 6369.206 ns/op
Iteration   2: 6363.630 ns/op
Iteration   3: 6386.828 ns/op
Iteration   4: 6366.435 ns/op
Iteration   5: 6395.691 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  6376.358 ±(99.9%) 54.286 ns/op [Average]
  (min, avg, max) = (6363.630, 6376.358, 6395.691), stdev = 14.098
  CI (99.9%): [6322.072, 6430.644] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 30.61% complete, ETA 02:10:09
# Fork: 1 of 1
# Warmup Iteration   1: 14170.835 ns/op
# Warmup Iteration   2: 12833.893 ns/op
Iteration   1: 12566.599 ns/op
Iteration   2: 12886.318 ns/op
Iteration   3: 12566.210 ns/op
Iteration   4: 12592.695 ns/op
Iteration   5: 12572.119 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  12636.788 ±(99.9%) 538.744 ns/op [Average]
  (min, avg, max) = (12566.210, 12636.788, 12886.318), stdev = 139.910
  CI (99.9%): [12098.045, 13175.532] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 30.91% complete, ETA 02:09:42
# Fork: 1 of 1
# Warmup Iteration   1: 27816.219 ns/op
# Warmup Iteration   2: 26362.035 ns/op
Iteration   1: 26207.631 ns/op
Iteration   2: 26204.619 ns/op
Iteration   3: 26209.361 ns/op
Iteration   4: 26190.229 ns/op
Iteration   5: 26057.371 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  26173.842 ±(99.9%) 252.391 ns/op [Average]
  (min, avg, max) = (26057.371, 26173.842, 26209.361), stdev = 65.545
  CI (99.9%): [25921.451, 26426.233] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 31.21% complete, ETA 02:09:15
# Fork: 1 of 1
# Warmup Iteration   1: 61914.671 ns/op
# Warmup Iteration   2: 67343.240 ns/op
Iteration   1: 67403.860 ns/op
Iteration   2: 69470.086 ns/op
Iteration   3: 65966.387 ns/op
Iteration   4: 66872.708 ns/op
Iteration   5: 66865.121 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  67315.632 ±(99.9%) 5046.056 ns/op [Average]
  (min, avg, max) = (65966.387, 67315.632, 69470.086), stdev = 1310.445
  CI (99.9%): [62269.577, 72361.688] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 31.52% complete, ETA 02:08:48
# Fork: 1 of 1
# Warmup Iteration   1: 577295.618 ns/op
# Warmup Iteration   2: 553609.570 ns/op
Iteration   1: 547976.952 ns/op
Iteration   2: 553272.265 ns/op
Iteration   3: 565367.261 ns/op
Iteration   4: 567153.036 ns/op
Iteration   5: 552991.099 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  557352.123 ±(99.9%) 32437.986 ns/op [Average]
  (min, avg, max) = (547976.952, 557352.123, 567153.036), stdev = 8424.042
  CI (99.9%): [524914.137, 589790.108] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 31.82% complete, ETA 02:08:21
# Fork: 1 of 1
# Warmup Iteration   1: 158095.971 ns/op
# Warmup Iteration   2: 143127.890 ns/op
Iteration   1: 143180.807 ns/op
Iteration   2: 143989.841 ns/op
Iteration   3: 152846.706 ns/op
Iteration   4: 147779.895 ns/op
Iteration   5: 145318.907 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  146623.231 ±(99.9%) 14982.395 ns/op [Average]
  (min, avg, max) = (143180.807, 146623.231, 152846.706), stdev = 3890.880
  CI (99.9%): [131640.837, 161605.626] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 32.12% complete, ETA 02:07:54
# Fork: 1 of 1
# Warmup Iteration   1: 227577.228 ns/op
# Warmup Iteration   2: 200892.419 ns/op
Iteration   1: 205697.757 ns/op
Iteration   2: 200730.157 ns/op
Iteration   3: 200921.776 ns/op
Iteration   4: 199186.924 ns/op
Iteration   5: 201689.670 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  201645.257 ±(99.9%) 9398.443 ns/op [Average]
  (min, avg, max) = (199186.924, 201645.257, 205697.757), stdev = 2440.746
  CI (99.9%): [192246.813, 211043.700] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 32.42% complete, ETA 02:07:27
# Fork: 1 of 1
# Warmup Iteration   1: 438560.122 ns/op
# Warmup Iteration   2: 393344.798 ns/op
Iteration   1: 395917.589 ns/op
Iteration   2: 389135.652 ns/op
Iteration   3: 389338.005 ns/op
Iteration   4: 390442.187 ns/op
Iteration   5: 388979.232 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  390762.533 ±(99.9%) 11314.181 ns/op [Average]
  (min, avg, max) = (388979.232, 390762.533, 395917.589), stdev = 2938.257
  CI (99.9%): [379448.352, 402076.714] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 32.73% complete, ETA 02:07:00
# Fork: 1 of 1
# Warmup Iteration   1: 1021932.921 ns/op
# Warmup Iteration   2: 906940.373 ns/op
Iteration   1: 904048.360 ns/op
Iteration   2: 888586.438 ns/op
Iteration   3: 893085.450 ns/op
Iteration   4: 919553.085 ns/op
Iteration   5: 895914.474 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  900237.561 ±(99.9%) 46892.643 ns/op [Average]
  (min, avg, max) = (888586.438, 900237.561, 919553.085), stdev = 12177.870
  CI (99.9%): [853344.919, 947130.204] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 33.03% complete, ETA 02:06:33
# Fork: 1 of 1
# Warmup Iteration   1: 9549890.547 ns/op
# Warmup Iteration   2: 8780899.165 ns/op
Iteration   1: 8789449.785 ns/op
Iteration   2: 8938626.717 ns/op
Iteration   3: 8832200.721 ns/op
Iteration   4: 8893593.176 ns/op
Iteration   5: 8723503.781 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.deserialization":
  8835474.836 ±(99.9%) 326082.672 ns/op [Average]
  (min, avg, max) = (8723503.781, 8835474.836, 8938626.717), stdev = 84682.634
  CI (99.9%): [8509392.164, 9161557.508] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 33.33% complete, ETA 02:06:06
# Fork: 1 of 1
# Warmup Iteration   1: 11968.336 ns/op
# Warmup Iteration   2: 10340.199 ns/op
Iteration   1: 10259.464 ns/op
Iteration   2: 10228.120 ns/op
Iteration   3: 10224.534 ns/op
Iteration   4: 10363.432 ns/op
Iteration   5: 10221.119 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  10259.334 ±(99.9%) 231.697 ns/op [Average]
  (min, avg, max) = (10221.119, 10259.334, 10363.432), stdev = 60.171
  CI (99.9%): [10027.637, 10491.031] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 33.64% complete, ETA 02:05:38
# Fork: 1 of 1
# Warmup Iteration   1: 24699.965 ns/op
# Warmup Iteration   2: 21948.860 ns/op
Iteration   1: 22192.968 ns/op
Iteration   2: 21971.846 ns/op
Iteration   3: 21937.333 ns/op
Iteration   4: 22103.708 ns/op
Iteration   5: 22570.399 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  22155.251 ±(99.9%) 977.095 ns/op [Average]
  (min, avg, max) = (21937.333, 22155.251, 22570.399), stdev = 253.749
  CI (99.9%): [21178.155, 23132.346] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 33.94% complete, ETA 02:05:10
# Fork: 1 of 1
# Warmup Iteration   1: 47934.386 ns/op
# Warmup Iteration   2: 45198.953 ns/op
Iteration   1: 44623.846 ns/op
Iteration   2: 44284.210 ns/op
Iteration   3: 44638.996 ns/op
Iteration   4: 45032.146 ns/op
Iteration   5: 44589.893 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  44633.818 ±(99.9%) 1024.131 ns/op [Average]
  (min, avg, max) = (44284.210, 44633.818, 45032.146), stdev = 265.964
  CI (99.9%): [43609.687, 45657.949] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 34.24% complete, ETA 02:04:42
# Fork: 1 of 1
# Warmup Iteration   1: 95357.854 ns/op
# Warmup Iteration   2: 89579.102 ns/op
Iteration   1: 88269.498 ns/op
Iteration   2: 88584.452 ns/op
Iteration   3: 88520.457 ns/op
Iteration   4: 88852.451 ns/op
Iteration   5: 87954.354 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  88436.242 ±(99.9%) 1309.089 ns/op [Average]
  (min, avg, max) = (87954.354, 88436.242, 88852.451), stdev = 339.966
  CI (99.9%): [87127.153, 89745.332] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 34.55% complete, ETA 02:04:14
# Fork: 1 of 1
# Warmup Iteration   1: 928823.536 ns/op
# Warmup Iteration   2: 848603.621 ns/op
Iteration   1: 848636.206 ns/op
Iteration   2: 847971.768 ns/op
Iteration   3: 854702.411 ns/op
Iteration   4: 852029.054 ns/op
Iteration   5: 846602.571 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  849988.402 ±(99.9%) 12734.114 ns/op [Average]
  (min, avg, max) = (846602.571, 849988.402, 854702.411), stdev = 3307.009
  CI (99.9%): [837254.287, 862722.516] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 34.85% complete, ETA 02:03:45
# Fork: 1 of 1
# Warmup Iteration   1: 8666.445 ns/op
# Warmup Iteration   2: 7781.912 ns/op
Iteration   1: 7725.243 ns/op
Iteration   2: 7713.169 ns/op
Iteration   3: 7728.987 ns/op
Iteration   4: 7839.994 ns/op
Iteration   5: 7782.755 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  7758.029 ±(99.9%) 204.306 ns/op [Average]
  (min, avg, max) = (7713.169, 7758.029, 7839.994), stdev = 53.058
  CI (99.9%): [7553.723, 7962.336] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 35.15% complete, ETA 02:03:16
# Fork: 1 of 1
# Warmup Iteration   1: 16103.419 ns/op
# Warmup Iteration   2: 15084.097 ns/op
Iteration   1: 15093.624 ns/op
Iteration   2: 14900.410 ns/op
Iteration   3: 14954.077 ns/op
Iteration   4: 15021.400 ns/op
Iteration   5: 15119.988 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  15017.900 ±(99.9%) 355.250 ns/op [Average]
  (min, avg, max) = (14900.410, 15017.900, 15119.988), stdev = 92.257
  CI (99.9%): [14662.650, 15373.150] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 35.45% complete, ETA 02:02:47
# Fork: 1 of 1
# Warmup Iteration   1: 35430.267 ns/op
# Warmup Iteration   2: 31769.482 ns/op
Iteration   1: 31644.927 ns/op
Iteration   2: 31703.876 ns/op
Iteration   3: 31921.924 ns/op
Iteration   4: 32302.535 ns/op
Iteration   5: 31959.670 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  31906.587 ±(99.9%) 999.288 ns/op [Average]
  (min, avg, max) = (31644.927, 31906.587, 32302.535), stdev = 259.512
  CI (99.9%): [30907.298, 32905.875] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 35.76% complete, ETA 02:02:18
# Fork: 1 of 1
# Warmup Iteration   1: 71706.896 ns/op
# Warmup Iteration   2: 66356.039 ns/op
Iteration   1: 66311.603 ns/op
Iteration   2: 63834.108 ns/op
Iteration   3: 63818.540 ns/op
Iteration   4: 64572.528 ns/op
Iteration   5: 63314.336 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  64370.223 ±(99.9%) 4522.071 ns/op [Average]
  (min, avg, max) = (63314.336, 64370.223, 66311.603), stdev = 1174.367
  CI (99.9%): [59848.153, 68892.294] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 36.06% complete, ETA 02:01:48
# Fork: 1 of 1
# Warmup Iteration   1: 698593.129 ns/op
# Warmup Iteration   2: 637116.728 ns/op
Iteration   1: 637043.715 ns/op
Iteration   2: 639983.046 ns/op
Iteration   3: 636984.030 ns/op
Iteration   4: 634972.704 ns/op
Iteration   5: 633807.340 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  636558.167 ±(99.9%) 9077.164 ns/op [Average]
  (min, avg, max) = (633807.340, 636558.167, 639983.046), stdev = 2357.311
  CI (99.9%): [627481.003, 645635.331] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 36.36% complete, ETA 02:01:19
# Fork: 1 of 1
# Warmup Iteration   1: 12544.630 ns/op
# Warmup Iteration   2: 10875.277 ns/op
Iteration   1: 10821.509 ns/op
Iteration   2: 10728.910 ns/op
Iteration   3: 10732.546 ns/op
Iteration   4: 10755.105 ns/op
Iteration   5: 10955.240 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  10798.662 ±(99.9%) 366.178 ns/op [Average]
  (min, avg, max) = (10728.910, 10798.662, 10955.240), stdev = 95.095
  CI (99.9%): [10432.484, 11164.840] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 36.67% complete, ETA 02:00:49
# Fork: 1 of 1
# Warmup Iteration   1: 22496.322 ns/op
# Warmup Iteration   2: 20882.596 ns/op
Iteration   1: 20592.389 ns/op
Iteration   2: 20586.559 ns/op
Iteration   3: 20522.444 ns/op
Iteration   4: 20304.991 ns/op
Iteration   5: 20602.551 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  20521.787 ±(99.9%) 482.115 ns/op [Average]
  (min, avg, max) = (20304.991, 20521.787, 20602.551), stdev = 125.204
  CI (99.9%): [20039.672, 21003.902] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 36.97% complete, ETA 02:00:19
# Fork: 1 of 1
# Warmup Iteration   1: 44014.592 ns/op
# Warmup Iteration   2: 37752.854 ns/op
Iteration   1: 37882.846 ns/op
Iteration   2: 38014.552 ns/op
Iteration   3: 37721.798 ns/op
Iteration   4: 37586.357 ns/op
Iteration   5: 37534.880 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  37748.087 ±(99.9%) 773.656 ns/op [Average]
  (min, avg, max) = (37534.880, 37748.087, 38014.552), stdev = 200.916
  CI (99.9%): [36974.431, 38521.742] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 37.27% complete, ETA 01:59:50
# Fork: 1 of 1
# Warmup Iteration   1: 103981.605 ns/op
# Warmup Iteration   2: 98783.323 ns/op
Iteration   1: 97753.330 ns/op
Iteration   2: 96894.714 ns/op
Iteration   3: 98098.630 ns/op
Iteration   4: 96042.256 ns/op
Iteration   5: 97998.808 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  97357.547 ±(99.9%) 3368.636 ns/op [Average]
  (min, avg, max) = (96042.256, 97357.547, 98098.630), stdev = 874.824
  CI (99.9%): [93988.912, 100726.183] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 37.58% complete, ETA 01:59:20
# Fork: 1 of 1
# Warmup Iteration   1: 977580.381 ns/op
# Warmup Iteration   2: 935350.597 ns/op
Iteration   1: 932699.033 ns/op
Iteration   2: 937153.313 ns/op
Iteration   3: 934611.594 ns/op
Iteration   4: 947673.230 ns/op
Iteration   5: 929016.993 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  936230.833 ±(99.9%) 27154.170 ns/op [Average]
  (min, avg, max) = (929016.993, 936230.833, 947673.230), stdev = 7051.852
  CI (99.9%): [909076.663, 963385.002] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 37.88% complete, ETA 01:58:50
# Fork: 1 of 1
# Warmup Iteration   1: 5589.280 ns/op
# Warmup Iteration   2: 5308.233 ns/op
Iteration   1: 5247.656 ns/op
Iteration   2: 5242.434 ns/op
Iteration   3: 5333.379 ns/op
Iteration   4: 5248.480 ns/op
Iteration   5: 5245.874 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  5263.564 ±(99.9%) 150.547 ns/op [Average]
  (min, avg, max) = (5242.434, 5263.564, 5333.379), stdev = 39.097
  CI (99.9%): [5113.018, 5414.111] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 38.18% complete, ETA 01:58:19
# Fork: 1 of 1
# Warmup Iteration   1: 12078.243 ns/op
# Warmup Iteration   2: 11028.354 ns/op
Iteration   1: 11023.238 ns/op
Iteration   2: 10954.130 ns/op
Iteration   3: 10989.898 ns/op
Iteration   4: 10943.757 ns/op
Iteration   5: 10971.316 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  10976.468 ±(99.9%) 121.209 ns/op [Average]
  (min, avg, max) = (10943.757, 10976.468, 11023.238), stdev = 31.477
  CI (99.9%): [10855.259, 11097.676] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 38.48% complete, ETA 01:57:49
# Fork: 1 of 1
# Warmup Iteration   1: 18476.120 ns/op
# Warmup Iteration   2: 16876.565 ns/op
Iteration   1: 16606.458 ns/op
Iteration   2: 16603.947 ns/op
Iteration   3: 16709.378 ns/op
Iteration   4: 16810.896 ns/op
Iteration   5: 16683.037 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  16682.743 ±(99.9%) 328.779 ns/op [Average]
  (min, avg, max) = (16603.947, 16682.743, 16810.896), stdev = 85.383
  CI (99.9%): [16353.964, 17011.522] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 38.79% complete, ETA 01:57:18
# Fork: 1 of 1
# Warmup Iteration   1: 32717.281 ns/op
# Warmup Iteration   2: 30367.356 ns/op
Iteration   1: 29884.228 ns/op
Iteration   2: 29832.561 ns/op
Iteration   3: 30126.767 ns/op
Iteration   4: 29884.148 ns/op
Iteration   5: 30015.809 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  29948.703 ±(99.9%) 463.771 ns/op [Average]
  (min, avg, max) = (29832.561, 29948.703, 30126.767), stdev = 120.440
  CI (99.9%): [29484.931, 30412.474] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 39.09% complete, ETA 01:56:47
# Fork: 1 of 1
# Warmup Iteration   1: 263838.199 ns/op
# Warmup Iteration   2: 241842.527 ns/op
Iteration   1: 243473.543 ns/op
Iteration   2: 240243.125 ns/op
Iteration   3: 237695.069 ns/op
Iteration   4: 242796.630 ns/op
Iteration   5: 237217.667 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  240285.207 ±(99.9%) 10991.736 ns/op [Average]
  (min, avg, max) = (237217.667, 240285.207, 243473.543), stdev = 2854.519
  CI (99.9%): [229293.471, 251276.943] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 39.39% complete, ETA 01:56:17
# Fork: 1 of 1
# Warmup Iteration   1: 2927.625 ns/op
# Warmup Iteration   2: 2680.164 ns/op
Iteration   1: 2688.981 ns/op
Iteration   2: 2685.565 ns/op
Iteration   3: 2776.526 ns/op
Iteration   4: 2666.926 ns/op
Iteration   5: 2646.899 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  2692.979 ±(99.9%) 191.113 ns/op [Average]
  (min, avg, max) = (2646.899, 2692.979, 2776.526), stdev = 49.631
  CI (99.9%): [2501.867, 2884.092] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 39.70% complete, ETA 01:55:46
# Fork: 1 of 1
# Warmup Iteration   1: 6138.923 ns/op
# Warmup Iteration   2: 5580.938 ns/op
Iteration   1: 5548.977 ns/op
Iteration   2: 5588.055 ns/op
Iteration   3: 5607.988 ns/op
Iteration   4: 5582.990 ns/op
Iteration   5: 5547.016 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  5575.005 ±(99.9%) 101.565 ns/op [Average]
  (min, avg, max) = (5547.016, 5575.005, 5607.988), stdev = 26.376
  CI (99.9%): [5473.441, 5676.570] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 40.00% complete, ETA 01:55:15
# Fork: 1 of 1
# Warmup Iteration   1: 11964.984 ns/op
# Warmup Iteration   2: 11010.604 ns/op
Iteration   1: 11012.534 ns/op
Iteration   2: 10856.694 ns/op
Iteration   3: 10846.828 ns/op
Iteration   4: 10891.297 ns/op
Iteration   5: 10903.557 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  10902.182 ±(99.9%) 254.194 ns/op [Average]
  (min, avg, max) = (10846.828, 10902.182, 11012.534), stdev = 66.013
  CI (99.9%): [10647.988, 11156.376] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 40.30% complete, ETA 01:54:44
# Fork: 1 of 1
# Warmup Iteration   1: 25132.742 ns/op
# Warmup Iteration   2: 22501.519 ns/op
Iteration   1: 22205.269 ns/op
Iteration   2: 22262.691 ns/op
Iteration   3: 22201.669 ns/op
Iteration   4: 22180.252 ns/op
Iteration   5: 22216.502 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  22213.277 ±(99.9%) 117.770 ns/op [Average]
  (min, avg, max) = (22180.252, 22213.277, 22262.691), stdev = 30.584
  CI (99.9%): [22095.507, 22331.047] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 40.61% complete, ETA 01:54:13
# Fork: 1 of 1
# Warmup Iteration   1: 226932.376 ns/op
# Warmup Iteration   2: 203461.781 ns/op
Iteration   1: 203411.131 ns/op
Iteration   2: 203616.543 ns/op
Iteration   3: 203753.530 ns/op
Iteration   4: 204751.327 ns/op
Iteration   5: 204134.925 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  203933.491 ±(99.9%) 2033.137 ns/op [Average]
  (min, avg, max) = (203411.131, 203933.491, 204751.327), stdev = 527.999
  CI (99.9%): [201900.354, 205966.628] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 40.91% complete, ETA 01:53:42
# Fork: 1 of 1
# Warmup Iteration   1: 7103.626 ns/op
# Warmup Iteration   2: 6473.838 ns/op
Iteration   1: 6453.998 ns/op
Iteration   2: 6442.027 ns/op
Iteration   3: 6508.322 ns/op
Iteration   4: 6649.078 ns/op
Iteration   5: 6442.902 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  6499.266 ±(99.9%) 339.141 ns/op [Average]
  (min, avg, max) = (6442.027, 6499.266, 6649.078), stdev = 88.074
  CI (99.9%): [6160.124, 6838.407] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 41.21% complete, ETA 01:53:10
# Fork: 1 of 1
# Warmup Iteration   1: 13866.186 ns/op
# Warmup Iteration   2: 12626.576 ns/op
Iteration   1: 12536.256 ns/op
Iteration   2: 12574.889 ns/op
Iteration   3: 12560.669 ns/op
Iteration   4: 12591.011 ns/op
Iteration   5: 12519.737 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  12556.512 ±(99.9%) 110.733 ns/op [Average]
  (min, avg, max) = (12519.737, 12556.512, 12591.011), stdev = 28.757
  CI (99.9%): [12445.779, 12667.246] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 41.52% complete, ETA 01:52:39
# Fork: 1 of 1
# Warmup Iteration   1: 28442.638 ns/op
# Warmup Iteration   2: 26179.898 ns/op
Iteration   1: 26072.505 ns/op
Iteration   2: 25930.300 ns/op
Iteration   3: 25931.269 ns/op
Iteration   4: 25920.705 ns/op
Iteration   5: 25965.431 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  25964.042 ±(99.9%) 242.444 ns/op [Average]
  (min, avg, max) = (25920.705, 25964.042, 26072.505), stdev = 62.962
  CI (99.9%): [25721.598, 26206.486] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 41.82% complete, ETA 01:52:07
# Fork: 1 of 1
# Warmup Iteration   1: 65994.195 ns/op
# Warmup Iteration   2: 60577.503 ns/op
Iteration   1: 59720.377 ns/op
Iteration   2: 60081.071 ns/op
Iteration   3: 59517.213 ns/op
Iteration   4: 59443.519 ns/op
Iteration   5: 59973.124 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  59747.061 ±(99.9%) 1069.112 ns/op [Average]
  (min, avg, max) = (59443.519, 59747.061, 60081.071), stdev = 277.645
  CI (99.9%): [58677.949, 60816.173] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 42.12% complete, ETA 01:51:35
# Fork: 1 of 1
# Warmup Iteration   1: 665366.312 ns/op
# Warmup Iteration   2: 610465.723 ns/op
Iteration   1: 612837.823 ns/op
Iteration   2: 612633.995 ns/op
Iteration   3: 612966.305 ns/op
Iteration   4: 611961.215 ns/op
Iteration   5: 610303.131 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  612140.494 ±(99.9%) 4226.868 ns/op [Average]
  (min, avg, max) = (610303.131, 612140.494, 612966.305), stdev = 1097.704
  CI (99.9%): [607913.626, 616367.361] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 42.42% complete, ETA 01:51:04
# Fork: 1 of 1
# Warmup Iteration   1: 30651.627 ns/op
# Warmup Iteration   2: 27221.397 ns/op
Iteration   1: 26433.055 ns/op
Iteration   2: 26452.747 ns/op
Iteration   3: 26944.478 ns/op
Iteration   4: 26774.124 ns/op
Iteration   5: 26435.838 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  26608.048 ±(99.9%) 913.593 ns/op [Average]
  (min, avg, max) = (26433.055, 26608.048, 26944.478), stdev = 237.257
  CI (99.9%): [25694.456, 27521.641] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 42.73% complete, ETA 01:50:32
# Fork: 1 of 1
# Warmup Iteration   1: 55465.324 ns/op
# Warmup Iteration   2: 47089.003 ns/op
Iteration   1: 44595.191 ns/op
Iteration   2: 44724.406 ns/op
Iteration   3: 44625.971 ns/op
Iteration   4: 44841.188 ns/op
Iteration   5: 44654.486 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  44688.248 ±(99.9%) 377.167 ns/op [Average]
  (min, avg, max) = (44595.191, 44688.248, 44841.188), stdev = 97.949
  CI (99.9%): [44311.082, 45065.415] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 43.03% complete, ETA 01:50:00
# Fork: 1 of 1
# Warmup Iteration   1: 119189.240 ns/op
# Warmup Iteration   2: 108578.340 ns/op
Iteration   1: 105764.265 ns/op
Iteration   2: 104832.130 ns/op
Iteration   3: 104575.409 ns/op
Iteration   4: 104231.211 ns/op
Iteration   5: 104263.336 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  104733.270 ±(99.9%) 2412.842 ns/op [Average]
  (min, avg, max) = (104231.211, 104733.270, 105764.265), stdev = 626.607
  CI (99.9%): [102320.429, 107146.112] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 43.33% complete, ETA 01:49:28
# Fork: 1 of 1
# Warmup Iteration   1: 267641.187 ns/op
# Warmup Iteration   2: 242269.545 ns/op
Iteration   1: 235535.788 ns/op
Iteration   2: 234118.172 ns/op
Iteration   3: 234471.405 ns/op
Iteration   4: 234635.044 ns/op
Iteration   5: 234130.391 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  234578.160 ±(99.9%) 2231.855 ns/op [Average]
  (min, avg, max) = (234118.172, 234578.160, 235535.788), stdev = 579.606
  CI (99.9%): [232346.305, 236810.015] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 43.64% complete, ETA 01:48:56
# Fork: 1 of 1
# Warmup Iteration   1: 2429464.910 ns/op
# Warmup Iteration   2: 2258842.155 ns/op
Iteration   1: 2129233.010 ns/op
Iteration   2: 2122790.324 ns/op
Iteration   3: 2120892.464 ns/op
Iteration   4: 2114324.308 ns/op
Iteration   5: 2113214.116 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  2120090.844 ±(99.9%) 25254.127 ns/op [Average]
  (min, avg, max) = (2113214.116, 2120090.844, 2129233.010), stdev = 6558.417
  CI (99.9%): [2094836.717, 2145344.972] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 43.94% complete, ETA 01:48:24
# Fork: 1 of 1
# Warmup Iteration   1: 3934.671 ns/op
# Warmup Iteration   2: 3565.441 ns/op
Iteration   1: 3531.168 ns/op
Iteration   2: 3544.617 ns/op
Iteration   3: 3593.217 ns/op
Iteration   4: 3557.159 ns/op
Iteration   5: 3540.495 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  3553.331 ±(99.9%) 93.083 ns/op [Average]
  (min, avg, max) = (3531.168, 3553.331, 3593.217), stdev = 24.173
  CI (99.9%): [3460.248, 3646.414] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 44.24% complete, ETA 01:47:52
# Fork: 1 of 1
# Warmup Iteration   1: 6855.687 ns/op
# Warmup Iteration   2: 6401.359 ns/op
Iteration   1: 6073.083 ns/op
Iteration   2: 6125.398 ns/op
Iteration   3: 6035.850 ns/op
Iteration   4: 6094.544 ns/op
Iteration   5: 6030.222 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  6071.819 ±(99.9%) 154.181 ns/op [Average]
  (min, avg, max) = (6030.222, 6071.819, 6125.398), stdev = 40.040
  CI (99.9%): [5917.639, 6226.000] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 44.55% complete, ETA 01:47:19
# Fork: 1 of 1
# Warmup Iteration   1: 12962.163 ns/op
# Warmup Iteration   2: 11463.028 ns/op
Iteration   1: 11423.415 ns/op
Iteration   2: 11373.554 ns/op
Iteration   3: 11388.431 ns/op
Iteration   4: 11461.755 ns/op
Iteration   5: 11432.748 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  11415.981 ±(99.9%) 136.016 ns/op [Average]
  (min, avg, max) = (11373.554, 11415.981, 11461.755), stdev = 35.323
  CI (99.9%): [11279.965, 11551.996] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 44.85% complete, ETA 01:46:47
# Fork: 1 of 1
# Warmup Iteration   1: 25946.480 ns/op
# Warmup Iteration   2: 22944.091 ns/op
Iteration   1: 22197.974 ns/op
Iteration   2: 22273.583 ns/op
Iteration   3: 22185.300 ns/op
Iteration   4: 22193.428 ns/op
Iteration   5: 22208.298 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  22211.716 ±(99.9%) 136.960 ns/op [Average]
  (min, avg, max) = (22185.300, 22211.716, 22273.583), stdev = 35.568
  CI (99.9%): [22074.757, 22348.676] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 45.15% complete, ETA 01:46:14
# Fork: 1 of 1
# Warmup Iteration   1: 222712.970 ns/op
# Warmup Iteration   2: 207600.600 ns/op
Iteration   1: 210367.641 ns/op
Iteration   2: 207745.246 ns/op
Iteration   3: 209327.451 ns/op
Iteration   4: 209498.047 ns/op
Iteration   5: 210491.071 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  209485.891 ±(99.9%) 4237.005 ns/op [Average]
  (min, avg, max) = (207745.246, 209485.891, 210491.071), stdev = 1100.337
  CI (99.9%): [205248.886, 213722.896] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 45.45% complete, ETA 01:45:42
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 45.76% complete, ETA 01:44:28
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 46.06% complete, ETA 01:43:15
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 46.36% complete, ETA 01:42:03
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 46.67% complete, ETA 01:40:51
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:21)
	at com.komanov.serialization.jmh.EventBenchmark.$anonfun$setup$3(Benchmarks.scala:70)
	at scala.collection.immutable.List.map(List.scala:246)
	at scala.collection.immutable.List.map(List.scala:79)
	at com.komanov.serialization.jmh.EventBenchmark.setup(Benchmarks.scala:70)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest._jmh_tryInit_f_eventbenchmark0_0(EventBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.EventBenchmark_serialization_jmhTest.serialization_AverageTime(EventBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 20 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 46.97% complete, ETA 01:39:41
# Fork: 1 of 1
# Warmup Iteration   1: 3141.532 ns/op
# Warmup Iteration   2: 2725.749 ns/op
Iteration   1: 2754.381 ns/op
Iteration   2: 2765.828 ns/op
Iteration   3: 2760.224 ns/op
Iteration   4: 2756.868 ns/op
Iteration   5: 2754.320 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  2758.324 ±(99.9%) 18.629 ns/op [Average]
  (min, avg, max) = (2754.320, 2758.324, 2765.828), stdev = 4.838
  CI (99.9%): [2739.695, 2776.953] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 47.27% complete, ETA 01:39:10
# Fork: 1 of 1
# Warmup Iteration   1: 6133.855 ns/op
# Warmup Iteration   2: 5465.047 ns/op
Iteration   1: 5402.236 ns/op
Iteration   2: 5385.566 ns/op
Iteration   3: 5428.150 ns/op
Iteration   4: 5383.803 ns/op
Iteration   5: 5418.486 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  5403.648 ±(99.9%) 75.635 ns/op [Average]
  (min, avg, max) = (5383.803, 5403.648, 5428.150), stdev = 19.642
  CI (99.9%): [5328.013, 5479.283] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 47.58% complete, ETA 01:38:40
# Fork: 1 of 1
# Warmup Iteration   1: 12954.692 ns/op
# Warmup Iteration   2: 11568.532 ns/op
Iteration   1: 11859.936 ns/op
Iteration   2: 11870.939 ns/op
Iteration   3: 11944.980 ns/op
Iteration   4: 11821.871 ns/op
Iteration   5: 11714.989 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  11842.543 ±(99.9%) 323.887 ns/op [Average]
  (min, avg, max) = (11714.989, 11842.543, 11944.980), stdev = 84.112
  CI (99.9%): [11518.656, 12166.430] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 47.88% complete, ETA 01:38:09
# Fork: 1 of 1
# Warmup Iteration   1: 19880.097 ns/op
# Warmup Iteration   2: 18171.743 ns/op
Iteration   1: 18201.817 ns/op
Iteration   2: 18255.007 ns/op
Iteration   3: 18275.344 ns/op
Iteration   4: 18201.494 ns/op
Iteration   5: 18186.432 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  18224.019 ±(99.9%) 149.230 ns/op [Average]
  (min, avg, max) = (18186.432, 18224.019, 18275.344), stdev = 38.754
  CI (99.9%): [18074.789, 18373.248] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 48.18% complete, ETA 01:37:38
# Fork: 1 of 1
# Warmup Iteration   1: 236224.089 ns/op
# Warmup Iteration   2: 218930.814 ns/op
Iteration   1: 222779.707 ns/op
Iteration   2: 216054.039 ns/op
Iteration   3: 216046.467 ns/op
Iteration   4: 216181.289 ns/op
Iteration   5: 216779.540 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  217568.208 ±(99.9%) 11278.126 ns/op [Average]
  (min, avg, max) = (216046.467, 217568.208, 222779.707), stdev = 2928.893
  CI (99.9%): [206290.083, 228846.334] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 48.48% complete, ETA 01:37:07
# Fork: 1 of 1
# Warmup Iteration   1: 30337.518 ns/op
# Warmup Iteration   2: 28281.815 ns/op
Iteration   1: 27263.177 ns/op
Iteration   2: 27371.504 ns/op
Iteration   3: 27782.986 ns/op
Iteration   4: 27428.575 ns/op
Iteration   5: 27168.104 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  27402.869 ±(99.9%) 904.619 ns/op [Average]
  (min, avg, max) = (27168.104, 27402.869, 27782.986), stdev = 234.927
  CI (99.9%): [26498.251, 28307.488] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 48.79% complete, ETA 01:36:37
# Fork: 1 of 1
# Warmup Iteration   1: 64802.628 ns/op
# Warmup Iteration   2: 58213.137 ns/op
Iteration   1: 57433.569 ns/op
Iteration   2: 57909.647 ns/op
Iteration   3: 57484.229 ns/op
Iteration   4: 57389.957 ns/op
Iteration   5: 57398.999 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  57523.280 ±(99.9%) 843.794 ns/op [Average]
  (min, avg, max) = (57389.957, 57523.280, 57909.647), stdev = 219.131
  CI (99.9%): [56679.486, 58367.074] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 49.09% complete, ETA 01:36:06
# Fork: 1 of 1
# Warmup Iteration   1: 135222.448 ns/op
# Warmup Iteration   2: 117821.927 ns/op
Iteration   1: 118897.049 ns/op
Iteration   2: 121477.978 ns/op
Iteration   3: 118890.569 ns/op
Iteration   4: 118272.544 ns/op
Iteration   5: 119914.462 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  119490.520 ±(99.9%) 4842.225 ns/op [Average]
  (min, avg, max) = (118272.544, 119490.520, 121477.978), stdev = 1257.510
  CI (99.9%): [114648.296, 124332.745] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 49.39% complete, ETA 01:35:35
# Fork: 1 of 1
# Warmup Iteration   1: 292413.820 ns/op
# Warmup Iteration   2: 258845.513 ns/op
Iteration   1: 259785.384 ns/op
Iteration   2: 256598.366 ns/op
Iteration   3: 256512.931 ns/op
Iteration   4: 260885.715 ns/op
Iteration   5: 257163.841 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  258189.247 ±(99.9%) 7751.898 ns/op [Average]
  (min, avg, max) = (256512.931, 258189.247, 260885.715), stdev = 2013.143
  CI (99.9%): [250437.349, 265941.146] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.EventBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 49.70% complete, ETA 01:35:04
# Fork: 1 of 1
# Warmup Iteration   1: 3028284.814 ns/op
# Warmup Iteration   2: 2747535.216 ns/op
Iteration   1: 2717369.763 ns/op
Iteration   2: 2732452.961 ns/op
Iteration   3: 2715345.159 ns/op
Iteration   4: 2705979.890 ns/op
Iteration   5: 2710112.214 ns/op


Result "com.komanov.serialization.jmh.EventBenchmark.serialization":
  2716251.998 ±(99.9%) 38877.972 ns/op [Average]
  (min, avg, max) = (2705979.890, 2716251.998, 2732452.961), stdev = 10096.486
  CI (99.9%): [2677374.026, 2755129.970] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 50.00% complete, ETA 01:34:34
# Fork: 1 of 1
# Warmup Iteration   1: 19056.178 ns/op
# Warmup Iteration   2: 16272.352 ns/op
Iteration   1: 16121.588 ns/op
Iteration   2: 16141.397 ns/op
Iteration   3: 16140.354 ns/op
Iteration   4: 16146.063 ns/op
Iteration   5: 16130.244 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  16135.929 ±(99.9%) 38.030 ns/op [Average]
  (min, avg, max) = (16121.588, 16135.929, 16146.063), stdev = 9.876
  CI (99.9%): [16097.900, 16173.959] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 50.30% complete, ETA 01:34:02
# Fork: 1 of 1
# Warmup Iteration   1: 36296.849 ns/op
# Warmup Iteration   2: 29954.741 ns/op
Iteration   1: 29626.917 ns/op
Iteration   2: 29640.367 ns/op
Iteration   3: 29784.951 ns/op
Iteration   4: 29794.899 ns/op
Iteration   5: 29629.505 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  29695.328 ±(99.9%) 333.365 ns/op [Average]
  (min, avg, max) = (29626.917, 29695.328, 29794.899), stdev = 86.574
  CI (99.9%): [29361.962, 30028.693] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 50.61% complete, ETA 01:33:31
# Fork: 1 of 1
# Warmup Iteration   1: 78262.008 ns/op
# Warmup Iteration   2: 54245.928 ns/op
Iteration   1: 54021.533 ns/op
Iteration   2: 54284.318 ns/op
Iteration   3: 54214.195 ns/op
Iteration   4: 54330.518 ns/op
Iteration   5: 54036.769 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  54177.467 ±(99.9%) 545.590 ns/op [Average]
  (min, avg, max) = (54021.533, 54177.467, 54330.518), stdev = 141.688
  CI (99.9%): [53631.877, 54723.057] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 50.91% complete, ETA 01:32:59
# Fork: 1 of 1
# Warmup Iteration   1: 180479.840 ns/op
# Warmup Iteration   2: 107134.195 ns/op
Iteration   1: 107058.703 ns/op
Iteration   2: 106750.195 ns/op
Iteration   3: 107897.056 ns/op
Iteration   4: 106933.128 ns/op
Iteration   5: 107672.483 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  107262.313 ±(99.9%) 1909.103 ns/op [Average]
  (min, avg, max) = (106750.195, 107262.313, 107897.056), stdev = 495.788
  CI (99.9%): [105353.211, 109171.416] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 51.21% complete, ETA 01:32:28
# Fork: 1 of 1
# Warmup Iteration   1: 985536.573 ns/op
# Warmup Iteration   2: 845106.080 ns/op
Iteration   1: 824558.055 ns/op
Iteration   2: 824306.893 ns/op
Iteration   3: 831565.526 ns/op
Iteration   4: 823909.794 ns/op
Iteration   5: 824721.064 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  825812.266 ±(99.9%) 12440.219 ns/op [Average]
  (min, avg, max) = (823909.794, 825812.266, 831565.526), stdev = 3230.685
  CI (99.9%): [813372.047, 838252.486] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 51.52% complete, ETA 01:31:56
# Fork: 1 of 1
# Warmup Iteration   1: 14313.771 ns/op
# Warmup Iteration   2: 12631.813 ns/op
Iteration   1: 12546.266 ns/op
Iteration   2: 12538.412 ns/op
Iteration   3: 12628.630 ns/op
Iteration   4: 12683.515 ns/op
Iteration   5: 12567.390 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  12592.843 ±(99.9%) 238.010 ns/op [Average]
  (min, avg, max) = (12538.412, 12592.843, 12683.515), stdev = 61.811
  CI (99.9%): [12354.832, 12830.853] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 51.82% complete, ETA 01:31:25
# Fork: 1 of 1
# Warmup Iteration   1: 26058.444 ns/op
# Warmup Iteration   2: 21036.033 ns/op
Iteration   1: 21050.182 ns/op
Iteration   2: 21003.119 ns/op
Iteration   3: 21003.597 ns/op
Iteration   4: 21034.136 ns/op
Iteration   5: 21117.993 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  21041.805 ±(99.9%) 181.534 ns/op [Average]
  (min, avg, max) = (21003.119, 21041.805, 21117.993), stdev = 47.144
  CI (99.9%): [20860.271, 21223.339] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 52.12% complete, ETA 01:30:53
# Fork: 1 of 1
# Warmup Iteration   1: 55880.199 ns/op
# Warmup Iteration   2: 40363.412 ns/op
Iteration   1: 40201.112 ns/op
Iteration   2: 40046.408 ns/op
Iteration   3: 40043.267 ns/op
Iteration   4: 40014.756 ns/op
Iteration   5: 40162.668 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  40093.642 ±(99.9%) 318.150 ns/op [Average]
  (min, avg, max) = (40014.756, 40093.642, 40201.112), stdev = 82.623
  CI (99.9%): [39775.492, 40411.792] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 52.42% complete, ETA 01:30:21
# Fork: 1 of 1
# Warmup Iteration   1: 96463.067 ns/op
# Warmup Iteration   2: 84104.840 ns/op
Iteration   1: 83085.103 ns/op
Iteration   2: 82754.266 ns/op
Iteration   3: 83185.044 ns/op
Iteration   4: 82528.139 ns/op
Iteration   5: 82495.941 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  82809.699 ±(99.9%) 1213.906 ns/op [Average]
  (min, avg, max) = (82495.941, 82809.699, 83185.044), stdev = 315.248
  CI (99.9%): [81595.792, 84023.605] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 52.73% complete, ETA 01:29:49
# Fork: 1 of 1
# Warmup Iteration   1: 825634.595 ns/op
# Warmup Iteration   2: 660416.356 ns/op
Iteration   1: 656924.339 ns/op
Iteration   2: 660221.674 ns/op
Iteration   3: 668333.109 ns/op
Iteration   4: 668505.129 ns/op
Iteration   5: 657522.467 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  662301.344 ±(99.9%) 22031.608 ns/op [Average]
  (min, avg, max) = (656924.339, 662301.344, 668505.129), stdev = 5721.539
  CI (99.9%): [640269.736, 684332.951] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 53.03% complete, ETA 01:29:18
# Fork: 1 of 1
# Warmup Iteration   1: 16394.969 ns/op
# Warmup Iteration   2: 13835.443 ns/op
Iteration   1: 13800.169 ns/op
Iteration   2: 13789.210 ns/op
Iteration   3: 13790.409 ns/op
Iteration   4: 13810.997 ns/op
Iteration   5: 13783.291 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  13794.815 ±(99.9%) 41.924 ns/op [Average]
  (min, avg, max) = (13783.291, 13794.815, 13810.997), stdev = 10.888
  CI (99.9%): [13752.891, 13836.739] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 53.33% complete, ETA 01:28:46
# Fork: 1 of 1
# Warmup Iteration   1: 29415.003 ns/op
# Warmup Iteration   2: 23294.759 ns/op
Iteration   1: 23407.391 ns/op
Iteration   2: 23261.097 ns/op
Iteration   3: 23208.850 ns/op
Iteration   4: 23696.929 ns/op
Iteration   5: 23984.003 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  23511.654 ±(99.9%) 1251.874 ns/op [Average]
  (min, avg, max) = (23208.850, 23511.654, 23984.003), stdev = 325.108
  CI (99.9%): [22259.780, 24763.528] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 53.64% complete, ETA 01:28:13
# Fork: 1 of 1
# Warmup Iteration   1: 56999.070 ns/op
# Warmup Iteration   2: 41190.778 ns/op
Iteration   1: 40147.430 ns/op
Iteration   2: 40136.827 ns/op
Iteration   3: 40148.928 ns/op
Iteration   4: 40385.653 ns/op
Iteration   5: 40537.480 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  40271.264 ±(99.9%) 700.378 ns/op [Average]
  (min, avg, max) = (40136.827, 40271.264, 40537.480), stdev = 181.886
  CI (99.9%): [39570.885, 40971.642] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 53.94% complete, ETA 01:27:41
# Fork: 1 of 1
# Warmup Iteration   1: 102986.793 ns/op
# Warmup Iteration   2: 80970.088 ns/op
Iteration   1: 80374.556 ns/op
Iteration   2: 80405.204 ns/op
Iteration   3: 80311.208 ns/op
Iteration   4: 81141.882 ns/op
Iteration   5: 81006.879 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  80647.946 ±(99.9%) 1515.833 ns/op [Average]
  (min, avg, max) = (80311.208, 80647.946, 81141.882), stdev = 393.657
  CI (99.9%): [79132.113, 82163.779] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 54.24% complete, ETA 01:27:09
# Fork: 1 of 1
# Warmup Iteration   1: 719169.510 ns/op
# Warmup Iteration   2: 583281.906 ns/op
Iteration   1: 577364.767 ns/op
Iteration   2: 577493.409 ns/op
Iteration   3: 578211.800 ns/op
Iteration   4: 582732.884 ns/op
Iteration   5: 589256.942 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  581011.960 ±(99.9%) 19678.299 ns/op [Average]
  (min, avg, max) = (577364.767, 581011.960, 589256.942), stdev = 5110.392
  CI (99.9%): [561333.661, 600690.260] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 54.55% complete, ETA 01:26:37
# Fork: 1 of 1
# Warmup Iteration   1: 9095.624 ns/op
# Warmup Iteration   2: 7359.890 ns/op
Iteration   1: 7326.758 ns/op
Iteration   2: 7330.679 ns/op
Iteration   3: 7379.629 ns/op
Iteration   4: 7334.534 ns/op
Iteration   5: 7344.358 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  7343.192 ±(99.9%) 82.376 ns/op [Average]
  (min, avg, max) = (7326.758, 7343.192, 7379.629), stdev = 21.393
  CI (99.9%): [7260.816, 7425.567] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 54.85% complete, ETA 01:26:05
# Fork: 1 of 1
# Warmup Iteration   1: 25711.229 ns/op
# Warmup Iteration   2: 18642.990 ns/op
Iteration   1: 18588.614 ns/op
Iteration   2: 18645.757 ns/op
Iteration   3: 18688.167 ns/op
Iteration   4: 18592.479 ns/op
Iteration   5: 18642.546 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  18631.513 ±(99.9%) 159.909 ns/op [Average]
  (min, avg, max) = (18588.614, 18631.513, 18688.167), stdev = 41.528
  CI (99.9%): [18471.604, 18791.422] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 55.15% complete, ETA 01:25:33
# Fork: 1 of 1
# Warmup Iteration   1: 37303.355 ns/op
# Warmup Iteration   2: 27074.550 ns/op
Iteration   1: 26835.427 ns/op
Iteration   2: 26860.296 ns/op
Iteration   3: 27047.450 ns/op
Iteration   4: 27062.393 ns/op
Iteration   5: 27023.479 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  26965.809 ±(99.9%) 419.402 ns/op [Average]
  (min, avg, max) = (26835.427, 26965.809, 27062.393), stdev = 108.917
  CI (99.9%): [26546.407, 27385.211] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 55.45% complete, ETA 01:25:00
# Fork: 1 of 1
# Warmup Iteration   1: 55971.456 ns/op
# Warmup Iteration   2: 41219.471 ns/op
Iteration   1: 41483.976 ns/op
Iteration   2: 40982.175 ns/op
Iteration   3: 41106.949 ns/op
Iteration   4: 41048.158 ns/op
Iteration   5: 41122.288 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  41148.709 ±(99.9%) 752.330 ns/op [Average]
  (min, avg, max) = (40982.175, 41148.709, 41483.976), stdev = 195.378
  CI (99.9%): [40396.379, 41901.040] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 55.76% complete, ETA 01:24:28
# Fork: 1 of 1
# Warmup Iteration   1: 369990.848 ns/op
# Warmup Iteration   2: 290172.204 ns/op
Iteration   1: 289280.164 ns/op
Iteration   2: 289683.648 ns/op
Iteration   3: 290092.824 ns/op
Iteration   4: 289112.485 ns/op
Iteration   5: 289223.670 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  289478.558 ±(99.9%) 1561.437 ns/op [Average]
  (min, avg, max) = (289112.485, 289478.558, 290092.824), stdev = 405.500
  CI (99.9%): [287917.121, 291039.995] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 56.06% complete, ETA 01:23:55
# Fork: 1 of 1
# Warmup Iteration   1: 9947.836 ns/op
# Warmup Iteration   2: 8113.200 ns/op
Iteration   1: 8047.345 ns/op
Iteration   2: 8037.785 ns/op
Iteration   3: 8034.224 ns/op
Iteration   4: 8043.318 ns/op
Iteration   5: 8047.124 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  8041.960 ±(99.9%) 22.353 ns/op [Average]
  (min, avg, max) = (8034.224, 8041.960, 8047.345), stdev = 5.805
  CI (99.9%): [8019.607, 8064.312] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 56.36% complete, ETA 01:23:23
# Fork: 1 of 1
# Warmup Iteration   1: 17079.910 ns/op
# Warmup Iteration   2: 13262.168 ns/op
Iteration   1: 13249.774 ns/op
Iteration   2: 13552.071 ns/op
Iteration   3: 13200.599 ns/op
Iteration   4: 13196.400 ns/op
Iteration   5: 13281.860 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  13296.141 ±(99.9%) 567.662 ns/op [Average]
  (min, avg, max) = (13196.400, 13296.141, 13552.071), stdev = 147.420
  CI (99.9%): [12728.479, 13863.803] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 56.67% complete, ETA 01:22:50
# Fork: 1 of 1
# Warmup Iteration   1: 27302.799 ns/op
# Warmup Iteration   2: 21225.437 ns/op
Iteration   1: 21003.461 ns/op
Iteration   2: 20963.525 ns/op
Iteration   3: 20973.885 ns/op
Iteration   4: 21087.999 ns/op
Iteration   5: 21468.571 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  21099.488 ±(99.9%) 816.477 ns/op [Average]
  (min, avg, max) = (20963.525, 21099.488, 21468.571), stdev = 212.036
  CI (99.9%): [20283.012, 21915.965] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 56.97% complete, ETA 01:22:17
# Fork: 1 of 1
# Warmup Iteration   1: 61774.219 ns/op
# Warmup Iteration   2: 46201.964 ns/op
Iteration   1: 46236.796 ns/op
Iteration   2: 45823.463 ns/op
Iteration   3: 46341.987 ns/op
Iteration   4: 46205.119 ns/op
Iteration   5: 45822.323 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  46085.938 ±(99.9%) 944.997 ns/op [Average]
  (min, avg, max) = (45822.323, 46085.938, 46341.987), stdev = 245.413
  CI (99.9%): [45140.941, 47030.935] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 57.27% complete, ETA 01:21:45
# Fork: 1 of 1
# Warmup Iteration   1: 436717.229 ns/op
# Warmup Iteration   2: 348262.203 ns/op
Iteration   1: 348520.598 ns/op
Iteration   2: 346743.949 ns/op
Iteration   3: 348397.436 ns/op
Iteration   4: 348341.370 ns/op
Iteration   5: 346839.880 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  347768.647 ±(99.9%) 3444.891 ns/op [Average]
  (min, avg, max) = (346743.949, 347768.647, 348520.598), stdev = 894.627
  CI (99.9%): [344323.756, 351213.537] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 57.58% complete, ETA 01:21:12
# Fork: 1 of 1
# Warmup Iteration   1: 11130.797 ns/op
# Warmup Iteration   2: 9529.616 ns/op
Iteration   1: 9527.119 ns/op
Iteration   2: 9497.846 ns/op
Iteration   3: 9495.279 ns/op
Iteration   4: 9510.075 ns/op
Iteration   5: 9480.643 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  9502.192 ±(99.9%) 67.098 ns/op [Average]
  (min, avg, max) = (9480.643, 9502.192, 9527.119), stdev = 17.425
  CI (99.9%): [9435.095, 9569.290] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 57.88% complete, ETA 01:20:39
# Fork: 1 of 1
# Warmup Iteration   1: 18718.039 ns/op
# Warmup Iteration   2: 16030.392 ns/op
Iteration   1: 16022.556 ns/op
Iteration   2: 16018.016 ns/op
Iteration   3: 15911.882 ns/op
Iteration   4: 15791.854 ns/op
Iteration   5: 15850.341 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  15918.930 ±(99.9%) 392.023 ns/op [Average]
  (min, avg, max) = (15791.854, 15918.930, 16022.556), stdev = 101.807
  CI (99.9%): [15526.906, 16310.953] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 58.18% complete, ETA 01:20:06
# Fork: 1 of 1
# Warmup Iteration   1: 39238.327 ns/op
# Warmup Iteration   2: 31952.550 ns/op
Iteration   1: 31935.630 ns/op
Iteration   2: 32248.983 ns/op
Iteration   3: 31927.958 ns/op
Iteration   4: 32148.687 ns/op
Iteration   5: 31966.088 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  32045.469 ±(99.9%) 558.830 ns/op [Average]
  (min, avg, max) = (31927.958, 32045.469, 32248.983), stdev = 145.126
  CI (99.9%): [31486.639, 32604.299] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 58.48% complete, ETA 01:19:33
# Fork: 1 of 1
# Warmup Iteration   1: 78013.393 ns/op
# Warmup Iteration   2: 64456.392 ns/op
Iteration   1: 63935.501 ns/op
Iteration   2: 64423.067 ns/op
Iteration   3: 63905.386 ns/op
Iteration   4: 64015.087 ns/op
Iteration   5: 63824.179 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  64020.644 ±(99.9%) 905.327 ns/op [Average]
  (min, avg, max) = (63824.179, 64020.644, 64423.067), stdev = 235.110
  CI (99.9%): [63115.317, 64925.971] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 58.79% complete, ETA 01:19:00
# Fork: 1 of 1
# Warmup Iteration   1: 643309.305 ns/op
# Warmup Iteration   2: 556312.452 ns/op
Iteration   1: 553085.093 ns/op
Iteration   2: 556398.013 ns/op
Iteration   3: 562020.058 ns/op
Iteration   4: 553757.158 ns/op
Iteration   5: 554675.410 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  555987.146 ±(99.9%) 13840.943 ns/op [Average]
  (min, avg, max) = (553085.093, 555987.146, 562020.058), stdev = 3594.449
  CI (99.9%): [542146.203, 569828.089] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 59.09% complete, ETA 01:18:27
# Fork: 1 of 1
# Warmup Iteration   1: 161570.954 ns/op
# Warmup Iteration   2: 132211.624 ns/op
Iteration   1: 130512.635 ns/op
Iteration   2: 128876.745 ns/op
Iteration   3: 129037.559 ns/op
Iteration   4: 128824.478 ns/op
Iteration   5: 128886.030 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  129227.489 ±(99.9%) 2783.212 ns/op [Average]
  (min, avg, max) = (128824.478, 129227.489, 130512.635), stdev = 722.791
  CI (99.9%): [126444.277, 132010.701] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 59.39% complete, ETA 01:17:54
# Fork: 1 of 1
# Warmup Iteration   1: 217091.434 ns/op
# Warmup Iteration   2: 173041.917 ns/op
Iteration   1: 170611.146 ns/op
Iteration   2: 172753.207 ns/op
Iteration   3: 170223.686 ns/op
Iteration   4: 169959.252 ns/op
Iteration   5: 171232.722 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  170956.003 ±(99.9%) 4285.839 ns/op [Average]
  (min, avg, max) = (169959.252, 170956.003, 172753.207), stdev = 1113.019
  CI (99.9%): [166670.163, 175241.842] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 59.70% complete, ETA 01:17:21
# Fork: 1 of 1
# Warmup Iteration   1: 272681.356 ns/op
# Warmup Iteration   2: 226640.399 ns/op
Iteration   1: 225777.678 ns/op
Iteration   2: 224333.004 ns/op
Iteration   3: 224995.696 ns/op
Iteration   4: 224714.603 ns/op
Iteration   5: 223703.592 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  224704.914 ±(99.9%) 2968.016 ns/op [Average]
  (min, avg, max) = (223703.592, 224704.914, 225777.678), stdev = 770.784
  CI (99.9%): [221736.899, 227672.930] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 60.00% complete, ETA 01:16:48
# Fork: 1 of 1
# Warmup Iteration   1: 436799.496 ns/op
# Warmup Iteration   2: 356444.038 ns/op
Iteration   1: 351484.858 ns/op
Iteration   2: 352110.105 ns/op
Iteration   3: 351355.464 ns/op
Iteration   4: 351222.813 ns/op
Iteration   5: 350671.094 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  351368.867 ±(99.9%) 1992.765 ns/op [Average]
  (min, avg, max) = (350671.094, 351368.867, 352110.105), stdev = 517.515
  CI (99.9%): [349376.102, 353361.632] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 60.30% complete, ETA 01:16:15
# Fork: 1 of 1
# Warmup Iteration   1: 2576720.813 ns/op
# Warmup Iteration   2: 2193635.965 ns/op
Iteration   1: 2158008.223 ns/op
Iteration   2: 2157629.011 ns/op
Iteration   3: 2167182.038 ns/op
Iteration   4: 2159947.743 ns/op
Iteration   5: 2152731.513 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  2159099.706 ±(99.9%) 20188.487 ns/op [Average]
  (min, avg, max) = (2152731.513, 2159099.706, 2167182.038), stdev = 5242.886
  CI (99.9%): [2138911.218, 2179288.193] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 60.61% complete, ETA 01:15:41
# Fork: 1 of 1
# Warmup Iteration   1: 5296.604 ns/op
# Warmup Iteration   2: 4673.753 ns/op
Iteration   1: 4614.757 ns/op
Iteration   2: 4617.702 ns/op
Iteration   3: 4631.022 ns/op
Iteration   4: 4649.200 ns/op
Iteration   5: 4614.886 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  4625.513 ±(99.9%) 57.149 ns/op [Average]
  (min, avg, max) = (4614.757, 4625.513, 4649.200), stdev = 14.841
  CI (99.9%): [4568.365, 4682.662] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 60.91% complete, ETA 01:15:08
# Fork: 1 of 1
# Warmup Iteration   1: 9505.926 ns/op
# Warmup Iteration   2: 8258.151 ns/op
Iteration   1: 8258.598 ns/op
Iteration   2: 8460.952 ns/op
Iteration   3: 8254.211 ns/op
Iteration   4: 8305.963 ns/op
Iteration   5: 8409.505 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  8337.846 ±(99.9%) 358.036 ns/op [Average]
  (min, avg, max) = (8254.211, 8337.846, 8460.952), stdev = 92.981
  CI (99.9%): [7979.810, 8695.882] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 61.21% complete, ETA 01:14:35
# Fork: 1 of 1
# Warmup Iteration   1: 16779.058 ns/op
# Warmup Iteration   2: 14448.186 ns/op
Iteration   1: 14404.674 ns/op
Iteration   2: 14563.216 ns/op
Iteration   3: 14369.681 ns/op
Iteration   4: 14439.081 ns/op
Iteration   5: 14562.859 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  14467.902 ±(99.9%) 347.505 ns/op [Average]
  (min, avg, max) = (14369.681, 14467.902, 14563.216), stdev = 90.246
  CI (99.9%): [14120.397, 14815.407] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 61.52% complete, ETA 01:14:01
# Fork: 1 of 1
# Warmup Iteration   1: 32072.757 ns/op
# Warmup Iteration   2: 27373.208 ns/op
Iteration   1: 27160.505 ns/op
Iteration   2: 27001.828 ns/op
Iteration   3: 27154.854 ns/op
Iteration   4: 27401.654 ns/op
Iteration   5: 26976.831 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  27139.134 ±(99.9%) 652.386 ns/op [Average]
  (min, avg, max) = (26976.831, 27139.134, 27401.654), stdev = 169.423
  CI (99.9%): [26486.748, 27791.521] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 61.82% complete, ETA 01:13:28
# Fork: 1 of 1
# Warmup Iteration   1: 275234.385 ns/op
# Warmup Iteration   2: 242238.056 ns/op
Iteration   1: 251042.647 ns/op
Iteration   2: 242043.995 ns/op
Iteration   3: 245774.033 ns/op
Iteration   4: 242189.195 ns/op
Iteration   5: 246172.429 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  245444.460 ±(99.9%) 14166.258 ns/op [Average]
  (min, avg, max) = (242043.995, 245444.460, 251042.647), stdev = 3678.932
  CI (99.9%): [231278.202, 259610.718] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 62.12% complete, ETA 01:12:54
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 62.42% complete, ETA 01:12:00
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 62.73% complete, ETA 01:11:06
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 63.03% complete, ETA 01:10:12
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 63.33% complete, ETA 01:09:19
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_both_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_both_jmhTest.both_AverageTime(SiteBenchmark_both_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 63.64% complete, ETA 01:08:26
# Fork: 1 of 1
# Warmup Iteration   1: 7772.593 ns/op
# Warmup Iteration   2: 6553.822 ns/op
Iteration   1: 6491.795 ns/op
Iteration   2: 6490.789 ns/op
Iteration   3: 6486.745 ns/op
Iteration   4: 6480.765 ns/op
Iteration   5: 6484.250 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  6486.869 ±(99.9%) 17.621 ns/op [Average]
  (min, avg, max) = (6480.765, 6486.869, 6491.795), stdev = 4.576
  CI (99.9%): [6469.248, 6504.489] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 63.94% complete, ETA 01:07:54
# Fork: 1 of 1
# Warmup Iteration   1: 15720.696 ns/op
# Warmup Iteration   2: 13403.694 ns/op
Iteration   1: 13223.952 ns/op
Iteration   2: 13201.370 ns/op
Iteration   3: 13204.300 ns/op
Iteration   4: 13214.267 ns/op
Iteration   5: 13211.593 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  13211.096 ±(99.9%) 34.244 ns/op [Average]
  (min, avg, max) = (13201.370, 13211.096, 13223.952), stdev = 8.893
  CI (99.9%): [13176.853, 13245.340] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 64.24% complete, ETA 01:07:22
# Fork: 1 of 1
# Warmup Iteration   1: 29892.846 ns/op
# Warmup Iteration   2: 25327.009 ns/op
Iteration   1: 25053.273 ns/op
Iteration   2: 25083.705 ns/op
Iteration   3: 25099.456 ns/op
Iteration   4: 25080.112 ns/op
Iteration   5: 25098.187 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  25082.946 ±(99.9%) 71.883 ns/op [Average]
  (min, avg, max) = (25053.273, 25082.946, 25099.456), stdev = 18.668
  CI (99.9%): [25011.063, 25154.830] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 64.55% complete, ETA 01:06:49
# Fork: 1 of 1
# Warmup Iteration   1: 62697.569 ns/op
# Warmup Iteration   2: 47900.209 ns/op
Iteration   1: 47837.726 ns/op
Iteration   2: 47796.666 ns/op
Iteration   3: 47815.945 ns/op
Iteration   4: 47757.074 ns/op
Iteration   5: 48164.638 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  47874.410 ±(99.9%) 635.087 ns/op [Average]
  (min, avg, max) = (47757.074, 47874.410, 48164.638), stdev = 164.930
  CI (99.9%): [47239.323, 48509.497] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 64.85% complete, ETA 01:06:17
# Fork: 1 of 1
# Warmup Iteration   1: 435583.834 ns/op
# Warmup Iteration   2: 381690.146 ns/op
Iteration   1: 378998.864 ns/op
Iteration   2: 387864.266 ns/op
Iteration   3: 380087.587 ns/op
Iteration   4: 384403.085 ns/op
Iteration   5: 386656.246 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  383602.010 ±(99.9%) 15120.463 ns/op [Average]
  (min, avg, max) = (378998.864, 383602.010, 387864.266), stdev = 3926.736
  CI (99.9%): [368481.547, 398722.473] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 65.15% complete, ETA 01:05:44
# Fork: 1 of 1
# Warmup Iteration   1: 56621.415 ns/op
# Warmup Iteration   2: 41673.456 ns/op
Iteration   1: 41076.742 ns/op
Iteration   2: 40974.225 ns/op
Iteration   3: 41454.517 ns/op
Iteration   4: 40701.184 ns/op
Iteration   5: 40641.737 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  40969.681 ±(99.9%) 1256.907 ns/op [Average]
  (min, avg, max) = (40641.737, 40969.681, 41454.517), stdev = 326.415
  CI (99.9%): [39712.774, 42226.588] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 65.45% complete, ETA 01:05:12
# Fork: 1 of 1
# Warmup Iteration   1: 101169.394 ns/op
# Warmup Iteration   2: 76667.115 ns/op
Iteration   1: 74159.524 ns/op
Iteration   2: 73680.600 ns/op
Iteration   3: 74937.177 ns/op
Iteration   4: 76231.118 ns/op
Iteration   5: 75857.827 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  74973.249 ±(99.9%) 4173.601 ns/op [Average]
  (min, avg, max) = (73680.600, 74973.249, 76231.118), stdev = 1083.871
  CI (99.9%): [70799.649, 79146.850] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 65.76% complete, ETA 01:04:39
# Fork: 1 of 1
# Warmup Iteration   1: 234575.185 ns/op
# Warmup Iteration   2: 170601.686 ns/op
Iteration   1: 170572.079 ns/op
Iteration   2: 172228.355 ns/op
Iteration   3: 169300.430 ns/op
Iteration   4: 170008.098 ns/op
Iteration   5: 170335.199 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  170488.832 ±(99.9%) 4173.945 ns/op [Average]
  (min, avg, max) = (169300.430, 170488.832, 172228.355), stdev = 1083.960
  CI (99.9%): [166314.888, 174662.777] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 66.06% complete, ETA 01:04:07
# Fork: 1 of 1
# Warmup Iteration   1: 494672.690 ns/op
# Warmup Iteration   2: 376192.925 ns/op
Iteration   1: 372466.081 ns/op
Iteration   2: 370519.450 ns/op
Iteration   3: 377301.763 ns/op
Iteration   4: 370049.688 ns/op
Iteration   5: 371718.848 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  372411.166 ±(99.9%) 11152.821 ns/op [Average]
  (min, avg, max) = (370049.688, 372411.166, 377301.763), stdev = 2896.352
  CI (99.9%): [361258.345, 383563.988] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.both
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 66.36% complete, ETA 01:03:34
# Fork: 1 of 1
# Warmup Iteration   1: 3843551.672 ns/op
# Warmup Iteration   2: 3077658.798 ns/op
Iteration   1: 3046079.765 ns/op
Iteration   2: 3018214.194 ns/op
Iteration   3: 3030095.983 ns/op
Iteration   4: 3053853.716 ns/op
Iteration   5: 3045013.979 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.both":
  3038651.527 ±(99.9%) 55053.704 ns/op [Average]
  (min, avg, max) = (3018214.194, 3038651.527, 3053853.716), stdev = 14297.272
  CI (99.9%): [2983597.823, 3093705.232] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 66.67% complete, ETA 01:03:01
# Fork: 1 of 1
# Warmup Iteration   1: 10815.693 ns/op
# Warmup Iteration   2: 9105.986 ns/op
Iteration   1: 8995.139 ns/op
Iteration   2: 8964.953 ns/op
Iteration   3: 8962.449 ns/op
Iteration   4: 8963.120 ns/op
Iteration   5: 9102.996 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8997.732 ±(99.9%) 232.674 ns/op [Average]
  (min, avg, max) = (8962.449, 8997.732, 9102.996), stdev = 60.425
  CI (99.9%): [8765.057, 9230.406] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 66.97% complete, ETA 01:02:29
# Fork: 1 of 1
# Warmup Iteration   1: 19119.529 ns/op
# Warmup Iteration   2: 16736.648 ns/op
Iteration   1: 16783.158 ns/op
Iteration   2: 16666.732 ns/op
Iteration   3: 16668.269 ns/op
Iteration   4: 16723.078 ns/op
Iteration   5: 16656.094 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  16699.466 ±(99.9%) 206.358 ns/op [Average]
  (min, avg, max) = (16656.094, 16699.466, 16783.158), stdev = 53.590
  CI (99.9%): [16493.108, 16905.824] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 67.27% complete, ETA 01:01:56
# Fork: 1 of 1
# Warmup Iteration   1: 37213.999 ns/op
# Warmup Iteration   2: 31261.926 ns/op
Iteration   1: 31252.084 ns/op
Iteration   2: 31292.909 ns/op
Iteration   3: 31479.319 ns/op
Iteration   4: 31499.881 ns/op
Iteration   5: 31322.979 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  31369.435 ±(99.9%) 434.271 ns/op [Average]
  (min, avg, max) = (31252.084, 31369.435, 31499.881), stdev = 112.779
  CI (99.9%): [30935.164, 31803.705] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 67.58% complete, ETA 01:01:23
# Fork: 1 of 1
# Warmup Iteration   1: 76874.869 ns/op
# Warmup Iteration   2: 65306.767 ns/op
Iteration   1: 64662.404 ns/op
Iteration   2: 64687.478 ns/op
Iteration   3: 65360.433 ns/op
Iteration   4: 64689.949 ns/op
Iteration   5: 65384.220 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  64956.897 ±(99.9%) 1461.241 ns/op [Average]
  (min, avg, max) = (64662.404, 64956.897, 65384.220), stdev = 379.480
  CI (99.9%): [63495.656, 66418.138] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 67.88% complete, ETA 01:00:50
# Fork: 1 of 1
# Warmup Iteration   1: 614189.026 ns/op
# Warmup Iteration   2: 510148.487 ns/op
Iteration   1: 514883.069 ns/op
Iteration   2: 518349.418 ns/op
Iteration   3: 510899.173 ns/op
Iteration   4: 514986.121 ns/op
Iteration   5: 510594.575 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  513942.471 ±(99.9%) 12457.469 ns/op [Average]
  (min, avg, max) = (510594.575, 513942.471, 518349.418), stdev = 3235.165
  CI (99.9%): [501485.003, 526399.940] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 68.18% complete, ETA 01:00:17
# Fork: 1 of 1
# Warmup Iteration   1: 8317.801 ns/op
# Warmup Iteration   2: 7633.415 ns/op
Iteration   1: 7647.145 ns/op
Iteration   2: 7633.562 ns/op
Iteration   3: 7572.864 ns/op
Iteration   4: 7634.534 ns/op
Iteration   5: 7633.913 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  7624.403 ±(99.9%) 113.095 ns/op [Average]
  (min, avg, max) = (7572.864, 7624.403, 7647.145), stdev = 29.370
  CI (99.9%): [7511.309, 7737.498] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 68.48% complete, ETA 00:59:44
# Fork: 1 of 1
# Warmup Iteration   1: 15612.360 ns/op
# Warmup Iteration   2: 13738.981 ns/op
Iteration   1: 13615.792 ns/op
Iteration   2: 13602.561 ns/op
Iteration   3: 13613.080 ns/op
Iteration   4: 13641.472 ns/op
Iteration   5: 13758.987 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  13646.379 ±(99.9%) 248.576 ns/op [Average]
  (min, avg, max) = (13602.561, 13646.379, 13758.987), stdev = 64.554
  CI (99.9%): [13397.803, 13894.955] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 68.79% complete, ETA 00:59:11
# Fork: 1 of 1
# Warmup Iteration   1: 27662.939 ns/op
# Warmup Iteration   2: 24602.246 ns/op
Iteration   1: 24254.634 ns/op
Iteration   2: 24200.177 ns/op
Iteration   3: 24341.397 ns/op
Iteration   4: 24720.459 ns/op
Iteration   5: 24210.653 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  24345.464 ±(99.9%) 835.178 ns/op [Average]
  (min, avg, max) = (24200.177, 24345.464, 24720.459), stdev = 216.893
  CI (99.9%): [23510.286, 25180.642] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 69.09% complete, ETA 00:58:38
# Fork: 1 of 1
# Warmup Iteration   1: 60159.697 ns/op
# Warmup Iteration   2: 52483.984 ns/op
Iteration   1: 52693.479 ns/op
Iteration   2: 52541.834 ns/op
Iteration   3: 52479.255 ns/op
Iteration   4: 52450.281 ns/op
Iteration   5: 52809.841 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  52594.938 ±(99.9%) 587.213 ns/op [Average]
  (min, avg, max) = (52450.281, 52594.938, 52809.841), stdev = 152.497
  CI (99.9%): [52007.725, 53182.151] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 69.39% complete, ETA 00:58:04
# Fork: 1 of 1
# Warmup Iteration   1: 482878.534 ns/op
# Warmup Iteration   2: 430320.519 ns/op
Iteration   1: 429621.900 ns/op
Iteration   2: 428296.240 ns/op
Iteration   3: 434662.338 ns/op
Iteration   4: 427899.868 ns/op
Iteration   5: 428358.836 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  429767.836 ±(99.9%) 10825.999 ns/op [Average]
  (min, avg, max) = (427899.868, 429767.836, 434662.338), stdev = 2811.478
  CI (99.9%): [418941.837, 440593.836] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 69.70% complete, ETA 00:57:31
# Fork: 1 of 1
# Warmup Iteration   1: 9400.881 ns/op
# Warmup Iteration   2: 8414.680 ns/op
Iteration   1: 8453.696 ns/op
Iteration   2: 8380.047 ns/op
Iteration   3: 8376.782 ns/op
Iteration   4: 8536.234 ns/op
Iteration   5: 8442.221 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8437.796 ±(99.9%) 251.179 ns/op [Average]
  (min, avg, max) = (8376.782, 8437.796, 8536.234), stdev = 65.230
  CI (99.9%): [8186.617, 8688.975] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 70.00% complete, ETA 00:56:58
# Fork: 1 of 1
# Warmup Iteration   1: 16257.746 ns/op
# Warmup Iteration   2: 13853.958 ns/op
Iteration   1: 13685.832 ns/op
Iteration   2: 13755.554 ns/op
Iteration   3: 13858.640 ns/op
Iteration   4: 13682.611 ns/op
Iteration   5: 13777.077 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  13751.943 ±(99.9%) 280.375 ns/op [Average]
  (min, avg, max) = (13682.611, 13751.943, 13858.640), stdev = 72.813
  CI (99.9%): [13471.567, 14032.318] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 70.30% complete, ETA 00:56:25
# Fork: 1 of 1
# Warmup Iteration   1: 28540.113 ns/op
# Warmup Iteration   2: 25325.311 ns/op
Iteration   1: 24803.219 ns/op
Iteration   2: 25008.308 ns/op
Iteration   3: 24898.030 ns/op
Iteration   4: 25160.654 ns/op
Iteration   5: 24705.115 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  24915.065 ±(99.9%) 683.114 ns/op [Average]
  (min, avg, max) = (24705.115, 24915.065, 25160.654), stdev = 177.402
  CI (99.9%): [24231.952, 25598.179] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 70.61% complete, ETA 00:55:51
# Fork: 1 of 1
# Warmup Iteration   1: 59179.768 ns/op
# Warmup Iteration   2: 47731.182 ns/op
Iteration   1: 48898.277 ns/op
Iteration   2: 48073.812 ns/op
Iteration   3: 47425.562 ns/op
Iteration   4: 47433.544 ns/op
Iteration   5: 47419.453 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  47850.130 ±(99.9%) 2501.386 ns/op [Average]
  (min, avg, max) = (47419.453, 47850.130, 48898.277), stdev = 649.602
  CI (99.9%): [45348.744, 50351.516] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 70.91% complete, ETA 00:55:18
# Fork: 1 of 1
# Warmup Iteration   1: 413507.103 ns/op
# Warmup Iteration   2: 368786.574 ns/op
Iteration   1: 365561.136 ns/op
Iteration   2: 366672.690 ns/op
Iteration   3: 365130.617 ns/op
Iteration   4: 365041.942 ns/op
Iteration   5: 361071.077 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  364695.492 ±(99.9%) 8192.102 ns/op [Average]
  (min, avg, max) = (361071.077, 364695.492, 366672.690), stdev = 2127.463
  CI (99.9%): [356503.390, 372887.595] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 71.21% complete, ETA 00:54:45
# Fork: 1 of 1
# Warmup Iteration   1: 2592.934 ns/op
# Warmup Iteration   2: 2241.006 ns/op
Iteration   1: 2177.047 ns/op
Iteration   2: 2190.248 ns/op
Iteration   3: 2169.174 ns/op
Iteration   4: 2195.947 ns/op
Iteration   5: 2200.168 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  2186.517 ±(99.9%) 50.194 ns/op [Average]
  (min, avg, max) = (2169.174, 2186.517, 2200.168), stdev = 13.035
  CI (99.9%): [2136.323, 2236.711] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 71.52% complete, ETA 00:54:11
# Fork: 1 of 1
# Warmup Iteration   1: 5012.533 ns/op
# Warmup Iteration   2: 4462.310 ns/op
Iteration   1: 4467.577 ns/op
Iteration   2: 4524.240 ns/op
Iteration   3: 4519.218 ns/op
Iteration   4: 4541.671 ns/op
Iteration   5: 4445.401 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  4499.621 ±(99.9%) 157.887 ns/op [Average]
  (min, avg, max) = (4445.401, 4499.621, 4541.671), stdev = 41.003
  CI (99.9%): [4341.734, 4657.509] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 71.82% complete, ETA 00:53:38
# Fork: 1 of 1
# Warmup Iteration   1: 9693.989 ns/op
# Warmup Iteration   2: 8430.638 ns/op
Iteration   1: 8228.049 ns/op
Iteration   2: 8334.806 ns/op
Iteration   3: 8192.499 ns/op
Iteration   4: 8198.350 ns/op
Iteration   5: 8258.331 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8242.407 ±(99.9%) 223.114 ns/op [Average]
  (min, avg, max) = (8192.499, 8242.407, 8334.806), stdev = 57.942
  CI (99.9%): [8019.293, 8465.521] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 72.12% complete, ETA 00:53:04
# Fork: 1 of 1
# Warmup Iteration   1: 18145.346 ns/op
# Warmup Iteration   2: 15706.904 ns/op
Iteration   1: 15489.360 ns/op
Iteration   2: 15497.986 ns/op
Iteration   3: 15509.101 ns/op
Iteration   4: 15704.040 ns/op
Iteration   5: 15770.118 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  15594.121 ±(99.9%) 511.216 ns/op [Average]
  (min, avg, max) = (15489.360, 15594.121, 15770.118), stdev = 132.761
  CI (99.9%): [15082.904, 16105.337] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 72.42% complete, ETA 00:52:31
# Fork: 1 of 1
# Warmup Iteration   1: 134543.268 ns/op
# Warmup Iteration   2: 111306.170 ns/op
Iteration   1: 112028.192 ns/op
Iteration   2: 110951.674 ns/op
Iteration   3: 111239.337 ns/op
Iteration   4: 112323.800 ns/op
Iteration   5: 111064.912 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  111521.583 ±(99.9%) 2368.390 ns/op [Average]
  (min, avg, max) = (110951.674, 111521.583, 112323.800), stdev = 615.063
  CI (99.9%): [109153.193, 113889.973] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 72.73% complete, ETA 00:51:57
# Fork: 1 of 1
# Warmup Iteration   1: 5553.989 ns/op
# Warmup Iteration   2: 5133.806 ns/op
Iteration   1: 5002.112 ns/op
Iteration   2: 5074.696 ns/op
Iteration   3: 5042.681 ns/op
Iteration   4: 5046.971 ns/op
Iteration   5: 5054.680 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  5044.228 ±(99.9%) 102.264 ns/op [Average]
  (min, avg, max) = (5002.112, 5044.228, 5074.696), stdev = 26.558
  CI (99.9%): [4941.964, 5146.492] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 73.03% complete, ETA 00:51:24
# Fork: 1 of 1
# Warmup Iteration   1: 8948.545 ns/op
# Warmup Iteration   2: 8197.680 ns/op
Iteration   1: 8086.041 ns/op
Iteration   2: 8087.703 ns/op
Iteration   3: 8150.779 ns/op
Iteration   4: 8083.398 ns/op
Iteration   5: 8089.493 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8099.483 ±(99.9%) 110.756 ns/op [Average]
  (min, avg, max) = (8083.398, 8099.483, 8150.779), stdev = 28.763
  CI (99.9%): [7988.727, 8210.239] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 73.33% complete, ETA 00:50:50
# Fork: 1 of 1
# Warmup Iteration   1: 14777.930 ns/op
# Warmup Iteration   2: 13492.622 ns/op
Iteration   1: 13361.864 ns/op
Iteration   2: 13295.190 ns/op
Iteration   3: 13406.091 ns/op
Iteration   4: 13607.790 ns/op
Iteration   5: 13289.531 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  13392.093 ±(99.9%) 500.376 ns/op [Average]
  (min, avg, max) = (13289.531, 13392.093, 13607.790), stdev = 129.946
  CI (99.9%): [12891.717, 13892.469] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 73.64% complete, ETA 00:50:16
# Fork: 1 of 1
# Warmup Iteration   1: 30273.294 ns/op
# Warmup Iteration   2: 27358.414 ns/op
Iteration   1: 27208.655 ns/op
Iteration   2: 27235.876 ns/op
Iteration   3: 27242.420 ns/op
Iteration   4: 27520.146 ns/op
Iteration   5: 27342.721 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  27309.964 ±(99.9%) 492.988 ns/op [Average]
  (min, avg, max) = (27208.655, 27309.964, 27520.146), stdev = 128.028
  CI (99.9%): [26816.975, 27802.952] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 73.94% complete, ETA 00:49:43
# Fork: 1 of 1
# Warmup Iteration   1: 232071.263 ns/op
# Warmup Iteration   2: 204417.708 ns/op
Iteration   1: 201387.517 ns/op
Iteration   2: 200208.776 ns/op
Iteration   3: 201178.889 ns/op
Iteration   4: 200251.410 ns/op
Iteration   5: 206068.508 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  201819.020 ±(99.9%) 9373.846 ns/op [Average]
  (min, avg, max) = (200208.776, 201819.020, 206068.508), stdev = 2434.358
  CI (99.9%): [192445.174, 211192.866] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 74.24% complete, ETA 00:49:09
# Fork: 1 of 1
# Warmup Iteration   1: 5108.349 ns/op
# Warmup Iteration   2: 4459.445 ns/op
Iteration   1: 4536.927 ns/op
Iteration   2: 4537.824 ns/op
Iteration   3: 4469.762 ns/op
Iteration   4: 4477.687 ns/op
Iteration   5: 4487.797 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  4501.999 ±(99.9%) 126.770 ns/op [Average]
  (min, avg, max) = (4469.762, 4501.999, 4537.824), stdev = 32.922
  CI (99.9%): [4375.230, 4628.769] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 74.55% complete, ETA 00:48:35
# Fork: 1 of 1
# Warmup Iteration   1: 7225.687 ns/op
# Warmup Iteration   2: 6296.908 ns/op
Iteration   1: 6407.941 ns/op
Iteration   2: 6238.105 ns/op
Iteration   3: 6234.184 ns/op
Iteration   4: 6239.578 ns/op
Iteration   5: 6255.707 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  6275.103 ±(99.9%) 287.689 ns/op [Average]
  (min, avg, max) = (6234.184, 6275.103, 6407.941), stdev = 74.712
  CI (99.9%): [5987.414, 6562.792] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 74.85% complete, ETA 00:48:02
# Fork: 1 of 1
# Warmup Iteration   1: 12334.696 ns/op
# Warmup Iteration   2: 10804.092 ns/op
Iteration   1: 10787.258 ns/op
Iteration   2: 10908.419 ns/op
Iteration   3: 10808.200 ns/op
Iteration   4: 10826.398 ns/op
Iteration   5: 10823.214 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  10830.698 ±(99.9%) 177.591 ns/op [Average]
  (min, avg, max) = (10787.258, 10830.698, 10908.419), stdev = 46.120
  CI (99.9%): [10653.106, 11008.289] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 75.15% complete, ETA 00:47:28
# Fork: 1 of 1
# Warmup Iteration   1: 27430.115 ns/op
# Warmup Iteration   2: 24155.166 ns/op
Iteration   1: 23946.734 ns/op
Iteration   2: 24253.079 ns/op
Iteration   3: 23913.017 ns/op
Iteration   4: 24073.146 ns/op
Iteration   5: 23978.250 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  24032.845 ±(99.9%) 526.855 ns/op [Average]
  (min, avg, max) = (23913.017, 24032.845, 24253.079), stdev = 136.822
  CI (99.9%): [23505.991, 24559.700] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 75.45% complete, ETA 00:46:54
# Fork: 1 of 1
# Warmup Iteration   1: 204137.598 ns/op
# Warmup Iteration   2: 178947.652 ns/op
Iteration   1: 178790.934 ns/op
Iteration   2: 176680.321 ns/op
Iteration   3: 176296.956 ns/op
Iteration   4: 176647.929 ns/op
Iteration   5: 176348.481 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  176952.924 ±(99.9%) 4011.541 ns/op [Average]
  (min, avg, max) = (176296.956, 176952.924, 178790.934), stdev = 1041.785
  CI (99.9%): [172941.383, 180964.465] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 75.76% complete, ETA 00:46:20
# Fork: 1 of 1
# Warmup Iteration   1: 110921.557 ns/op
# Warmup Iteration   2: 96143.767 ns/op
Iteration   1: 96239.261 ns/op
Iteration   2: 96073.425 ns/op
Iteration   3: 96157.957 ns/op
Iteration   4: 96736.468 ns/op
Iteration   5: 96330.544 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  96307.531 ±(99.9%) 993.652 ns/op [Average]
  (min, avg, max) = (96073.425, 96307.531, 96736.468), stdev = 258.048
  CI (99.9%): [95313.879, 97301.183] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 76.06% complete, ETA 00:45:46
# Fork: 1 of 1
# Warmup Iteration   1: 150517.650 ns/op
# Warmup Iteration   2: 130206.723 ns/op
Iteration   1: 130764.264 ns/op
Iteration   2: 130065.012 ns/op
Iteration   3: 130396.206 ns/op
Iteration   4: 130551.200 ns/op
Iteration   5: 130858.324 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  130527.001 ±(99.9%) 1213.405 ns/op [Average]
  (min, avg, max) = (130065.012, 130527.001, 130858.324), stdev = 315.117
  CI (99.9%): [129313.596, 131740.406] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 76.36% complete, ETA 00:45:12
# Fork: 1 of 1
# Warmup Iteration   1: 181609.857 ns/op
# Warmup Iteration   2: 159322.670 ns/op
Iteration   1: 159810.929 ns/op
Iteration   2: 159002.440 ns/op
Iteration   3: 158636.143 ns/op
Iteration   4: 160151.801 ns/op
Iteration   5: 160040.508 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  159528.364 ±(99.9%) 2585.574 ns/op [Average]
  (min, avg, max) = (158636.143, 159528.364, 160151.801), stdev = 671.465
  CI (99.9%): [156942.790, 162113.938] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 76.67% complete, ETA 00:44:38
# Fork: 1 of 1
# Warmup Iteration   1: 250340.233 ns/op
# Warmup Iteration   2: 224023.123 ns/op
Iteration   1: 221767.397 ns/op
Iteration   2: 220874.821 ns/op
Iteration   3: 221129.547 ns/op
Iteration   4: 222779.836 ns/op
Iteration   5: 221026.198 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  221515.560 ±(99.9%) 3020.267 ns/op [Average]
  (min, avg, max) = (220874.821, 221515.560, 222779.836), stdev = 784.354
  CI (99.9%): [218495.292, 224535.827] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 76.97% complete, ETA 00:44:04
# Fork: 1 of 1
# Warmup Iteration   1: 1250065.542 ns/op
# Warmup Iteration   2: 1086359.763 ns/op
Iteration   1: 1084862.457 ns/op
Iteration   2: 1093306.443 ns/op
Iteration   3: 1082695.344 ns/op
Iteration   4: 1095215.385 ns/op
Iteration   5: 1095405.797 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  1090297.085 ±(99.9%) 23316.793 ns/op [Average]
  (min, avg, max) = (1082695.344, 1090297.085, 1095405.797), stdev = 6055.297
  CI (99.9%): [1066980.292, 1113613.878] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 77.27% complete, ETA 00:43:30
# Fork: 1 of 1
# Warmup Iteration   1: 2202.393 ns/op
# Warmup Iteration   2: 2017.228 ns/op
Iteration   1: 2012.830 ns/op
Iteration   2: 2011.622 ns/op
Iteration   3: 2002.858 ns/op
Iteration   4: 2027.778 ns/op
Iteration   5: 2002.766 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  2011.571 ±(99.9%) 39.349 ns/op [Average]
  (min, avg, max) = (2002.766, 2011.571, 2027.778), stdev = 10.219
  CI (99.9%): [1972.221, 2050.920] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 77.58% complete, ETA 00:42:56
# Fork: 1 of 1
# Warmup Iteration   1: 4291.948 ns/op
# Warmup Iteration   2: 3929.409 ns/op
Iteration   1: 3918.550 ns/op
Iteration   2: 3931.042 ns/op
Iteration   3: 3940.262 ns/op
Iteration   4: 3911.932 ns/op
Iteration   5: 3913.745 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  3923.106 ±(99.9%) 46.788 ns/op [Average]
  (min, avg, max) = (3911.932, 3923.106, 3940.262), stdev = 12.151
  CI (99.9%): [3876.318, 3969.894] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 77.88% complete, ETA 00:42:22
# Fork: 1 of 1
# Warmup Iteration   1: 7584.216 ns/op
# Warmup Iteration   2: 7042.291 ns/op
Iteration   1: 6936.774 ns/op
Iteration   2: 6939.079 ns/op
Iteration   3: 7033.819 ns/op
Iteration   4: 7062.630 ns/op
Iteration   5: 6934.390 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  6981.338 ±(99.9%) 238.448 ns/op [Average]
  (min, avg, max) = (6934.390, 6981.338, 7062.630), stdev = 61.924
  CI (99.9%): [6742.890, 7219.787] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 78.18% complete, ETA 00:41:48
# Fork: 1 of 1
# Warmup Iteration   1: 14340.758 ns/op
# Warmup Iteration   2: 13171.443 ns/op
Iteration   1: 12988.553 ns/op
Iteration   2: 12989.054 ns/op
Iteration   3: 13108.396 ns/op
Iteration   4: 13099.147 ns/op
Iteration   5: 13181.038 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  13073.237 ±(99.9%) 320.938 ns/op [Average]
  (min, avg, max) = (12988.553, 13073.237, 13181.038), stdev = 83.347
  CI (99.9%): [12752.299, 13394.176] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 78.48% complete, ETA 00:41:14
# Fork: 1 of 1
# Warmup Iteration   1: 131631.279 ns/op
# Warmup Iteration   2: 120216.790 ns/op
Iteration   1: 121382.560 ns/op
Iteration   2: 121279.485 ns/op
Iteration   3: 121110.445 ns/op
Iteration   4: 120483.126 ns/op
Iteration   5: 119638.462 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  120778.816 ±(99.9%) 2798.676 ns/op [Average]
  (min, avg, max) = (119638.462, 120778.816, 121382.560), stdev = 726.807
  CI (99.9%): [117980.140, 123577.491] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 78.79% complete, ETA 00:40:40
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 79.09% complete, ETA 00:39:56
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 79.39% complete, ETA 00:39:13
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 79.70% complete, ETA 00:38:31
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 80.00% complete, ETA 00:37:48
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_deserialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_deserialization_jmhTest.deserialization_AverageTime(SiteBenchmark_deserialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 80.30% complete, ETA 00:37:06
# Fork: 1 of 1
# Warmup Iteration   1: 4383.826 ns/op
# Warmup Iteration   2: 3990.189 ns/op
Iteration   1: 3930.897 ns/op
Iteration   2: 3956.508 ns/op
Iteration   3: 4057.781 ns/op
Iteration   4: 3990.076 ns/op
Iteration   5: 3951.299 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  3977.312 ±(99.9%) 191.586 ns/op [Average]
  (min, avg, max) = (3930.897, 3977.312, 4057.781), stdev = 49.754
  CI (99.9%): [3785.726, 4168.898] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 80.61% complete, ETA 00:36:32
# Fork: 1 of 1
# Warmup Iteration   1: 9200.594 ns/op
# Warmup Iteration   2: 8317.955 ns/op
Iteration   1: 8267.089 ns/op
Iteration   2: 8266.345 ns/op
Iteration   3: 8290.837 ns/op
Iteration   4: 8265.631 ns/op
Iteration   5: 8275.085 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  8272.997 ±(99.9%) 41.115 ns/op [Average]
  (min, avg, max) = (8265.631, 8272.997, 8290.837), stdev = 10.678
  CI (99.9%): [8231.882, 8314.113] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 80.91% complete, ETA 00:35:59
# Fork: 1 of 1
# Warmup Iteration   1: 18768.250 ns/op
# Warmup Iteration   2: 16519.742 ns/op
Iteration   1: 16552.042 ns/op
Iteration   2: 16379.908 ns/op
Iteration   3: 16671.673 ns/op
Iteration   4: 16408.212 ns/op
Iteration   5: 16437.481 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  16489.863 ±(99.9%) 465.362 ns/op [Average]
  (min, avg, max) = (16379.908, 16489.863, 16671.673), stdev = 120.853
  CI (99.9%): [16024.501, 16955.225] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 81.21% complete, ETA 00:35:25
# Fork: 1 of 1
# Warmup Iteration   1: 35080.927 ns/op
# Warmup Iteration   2: 31416.330 ns/op
Iteration   1: 31271.794 ns/op
Iteration   2: 31295.846 ns/op
Iteration   3: 31451.719 ns/op
Iteration   4: 31303.821 ns/op
Iteration   5: 31275.152 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  31319.666 ±(99.9%) 288.989 ns/op [Average]
  (min, avg, max) = (31271.794, 31319.666, 31451.719), stdev = 75.049
  CI (99.9%): [31030.678, 31608.655] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 81.52% complete, ETA 00:34:52
# Fork: 1 of 1
# Warmup Iteration   1: 265521.702 ns/op
# Warmup Iteration   2: 240966.882 ns/op
Iteration   1: 243508.773 ns/op
Iteration   2: 240719.867 ns/op
Iteration   3: 240391.553 ns/op
Iteration   4: 238965.880 ns/op
Iteration   5: 239704.668 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  240658.148 ±(99.9%) 6662.237 ns/op [Average]
  (min, avg, max) = (238965.880, 240658.148, 243508.773), stdev = 1730.162
  CI (99.9%): [233995.911, 247320.385] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 81.82% complete, ETA 00:34:18
# Fork: 1 of 1
# Warmup Iteration   1: 28728.744 ns/op
# Warmup Iteration   2: 22875.026 ns/op
Iteration   1: 22757.965 ns/op
Iteration   2: 22772.455 ns/op
Iteration   3: 22718.071 ns/op
Iteration   4: 22830.373 ns/op
Iteration   5: 22708.832 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  22757.539 ±(99.9%) 187.238 ns/op [Average]
  (min, avg, max) = (22708.832, 22757.539, 22830.373), stdev = 48.625
  CI (99.9%): [22570.301, 22944.777] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 82.12% complete, ETA 00:33:45
# Fork: 1 of 1
# Warmup Iteration   1: 49534.662 ns/op
# Warmup Iteration   2: 40085.540 ns/op
Iteration   1: 39689.266 ns/op
Iteration   2: 39827.580 ns/op
Iteration   3: 39817.712 ns/op
Iteration   4: 39684.627 ns/op
Iteration   5: 39903.987 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  39784.634 ±(99.9%) 366.723 ns/op [Average]
  (min, avg, max) = (39684.627, 39784.634, 39903.987), stdev = 95.237
  CI (99.9%): [39417.912, 40151.357] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 82.42% complete, ETA 00:33:11
# Fork: 1 of 1
# Warmup Iteration   1: 116275.207 ns/op
# Warmup Iteration   2: 92327.055 ns/op
Iteration   1: 92472.151 ns/op
Iteration   2: 91760.631 ns/op
Iteration   3: 93857.225 ns/op
Iteration   4: 91838.756 ns/op
Iteration   5: 92502.746 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  92486.302 ±(99.9%) 3236.498 ns/op [Average]
  (min, avg, max) = (91760.631, 92486.302, 93857.225), stdev = 840.508
  CI (99.9%): [89249.804, 95722.800] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 82.73% complete, ETA 00:32:37
# Fork: 1 of 1
# Warmup Iteration   1: 263575.471 ns/op
# Warmup Iteration   2: 209873.655 ns/op
Iteration   1: 207664.715 ns/op
Iteration   2: 207654.447 ns/op
Iteration   3: 207791.419 ns/op
Iteration   4: 207644.310 ns/op
Iteration   5: 209355.952 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  208022.169 ±(99.9%) 2880.266 ns/op [Average]
  (min, avg, max) = (207644.310, 208022.169, 209355.952), stdev = 747.996
  CI (99.9%): [205141.902, 210902.435] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.deserialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 83.03% complete, ETA 00:32:04
# Fork: 1 of 1
# Warmup Iteration   1: 1930334.483 ns/op
# Warmup Iteration   2: 1646527.072 ns/op
Iteration   1: 1615918.971 ns/op
Iteration   2: 1620543.389 ns/op
Iteration   3: 1609554.776 ns/op
Iteration   4: 1604201.203 ns/op
Iteration   5: 1629507.582 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.deserialization":
  1615945.184 ±(99.9%) 37720.651 ns/op [Average]
  (min, avg, max) = (1604201.203, 1615945.184, 1629507.582), stdev = 9795.933
  CI (99.9%): [1578224.533, 1653665.835] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _1_K)

# Run progress: 83.33% complete, ETA 00:31:30
# Fork: 1 of 1
# Warmup Iteration   1: 7384.209 ns/op
# Warmup Iteration   2: 5824.780 ns/op
Iteration   1: 5805.158 ns/op
Iteration   2: 5826.845 ns/op
Iteration   3: 5804.572 ns/op
Iteration   4: 5807.876 ns/op
Iteration   5: 5867.815 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  5822.453 ±(99.9%) 103.830 ns/op [Average]
  (min, avg, max) = (5804.572, 5822.453, 5867.815), stdev = 26.964
  CI (99.9%): [5718.623, 5926.284] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _2_K)

# Run progress: 83.64% complete, ETA 00:30:56
# Fork: 1 of 1
# Warmup Iteration   1: 14739.761 ns/op
# Warmup Iteration   2: 11802.617 ns/op
Iteration   1: 11613.406 ns/op
Iteration   2: 11777.140 ns/op
Iteration   3: 11603.466 ns/op
Iteration   4: 11623.883 ns/op
Iteration   5: 11747.971 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  11673.173 ±(99.9%) 317.909 ns/op [Average]
  (min, avg, max) = (11603.466, 11673.173, 11777.140), stdev = 82.560
  CI (99.9%): [11355.264, 11991.082] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _4_K)

# Run progress: 83.94% complete, ETA 00:30:23
# Fork: 1 of 1
# Warmup Iteration   1: 23814.670 ns/op
# Warmup Iteration   2: 21409.932 ns/op
Iteration   1: 21239.420 ns/op
Iteration   2: 21103.140 ns/op
Iteration   3: 21115.669 ns/op
Iteration   4: 21566.331 ns/op
Iteration   5: 21436.854 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  21292.283 ±(99.9%) 783.881 ns/op [Average]
  (min, avg, max) = (21103.140, 21292.283, 21566.331), stdev = 203.571
  CI (99.9%): [20508.402, 22076.163] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _8_K)

# Run progress: 84.24% complete, ETA 00:29:49
# Fork: 1 of 1
# Warmup Iteration   1: 49611.454 ns/op
# Warmup Iteration   2: 39896.008 ns/op
Iteration   1: 39275.843 ns/op
Iteration   2: 39550.419 ns/op
Iteration   3: 39445.589 ns/op
Iteration   4: 39397.358 ns/op
Iteration   5: 39250.855 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  39384.013 ±(99.9%) 475.879 ns/op [Average]
  (min, avg, max) = (39250.855, 39384.013, 39550.419), stdev = 123.584
  CI (99.9%): [38908.133, 39859.892] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSON, inputType = _64_K)

# Run progress: 84.55% complete, ETA 00:29:15
# Fork: 1 of 1
# Warmup Iteration   1: 376329.893 ns/op
# Warmup Iteration   2: 302275.362 ns/op
Iteration   1: 302180.706 ns/op
Iteration   2: 302180.268 ns/op
Iteration   3: 302135.423 ns/op
Iteration   4: 300931.289 ns/op
Iteration   5: 301059.653 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  301697.468 ±(99.9%) 2474.812 ns/op [Average]
  (min, avg, max) = (300931.289, 301697.468, 302180.706), stdev = 642.701
  CI (99.9%): [299222.656, 304172.280] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _1_K)

# Run progress: 84.85% complete, ETA 00:28:41
# Fork: 1 of 1
# Warmup Iteration   1: 3924.797 ns/op
# Warmup Iteration   2: 3458.524 ns/op
Iteration   1: 3437.677 ns/op
Iteration   2: 3420.863 ns/op
Iteration   3: 3454.059 ns/op
Iteration   4: 3424.339 ns/op
Iteration   5: 3423.658 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  3432.119 ±(99.9%) 53.462 ns/op [Average]
  (min, avg, max) = (3420.863, 3432.119, 3454.059), stdev = 13.884
  CI (99.9%): [3378.657, 3485.581] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _2_K)

# Run progress: 85.15% complete, ETA 00:28:07
# Fork: 1 of 1
# Warmup Iteration   1: 7462.055 ns/op
# Warmup Iteration   2: 6736.398 ns/op
Iteration   1: 6688.014 ns/op
Iteration   2: 6710.514 ns/op
Iteration   3: 6697.445 ns/op
Iteration   4: 6687.165 ns/op
Iteration   5: 6689.322 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  6694.492 ±(99.9%) 37.915 ns/op [Average]
  (min, avg, max) = (6687.165, 6694.492, 6710.514), stdev = 9.846
  CI (99.9%): [6656.577, 6732.407] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _4_K)

# Run progress: 85.45% complete, ETA 00:27:33
# Fork: 1 of 1
# Warmup Iteration   1: 16792.277 ns/op
# Warmup Iteration   2: 13509.005 ns/op
Iteration   1: 13593.161 ns/op
Iteration   2: 13520.308 ns/op
Iteration   3: 13517.793 ns/op
Iteration   4: 13460.751 ns/op
Iteration   5: 13477.584 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  13513.919 ±(99.9%) 197.119 ns/op [Average]
  (min, avg, max) = (13460.751, 13513.919, 13593.161), stdev = 51.191
  CI (99.9%): [13316.800, 13711.039] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _8_K)

# Run progress: 85.76% complete, ETA 00:26:59
# Fork: 1 of 1
# Warmup Iteration   1: 27886.131 ns/op
# Warmup Iteration   2: 25047.429 ns/op
Iteration   1: 24983.235 ns/op
Iteration   2: 25089.862 ns/op
Iteration   3: 25204.414 ns/op
Iteration   4: 25038.585 ns/op
Iteration   5: 25041.501 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  25071.519 ±(99.9%) 320.884 ns/op [Average]
  (min, avg, max) = (24983.235, 25071.519, 25204.414), stdev = 83.333
  CI (99.9%): [24750.635, 25392.404] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CBOR, inputType = _64_K)

# Run progress: 86.06% complete, ETA 00:26:25
# Fork: 1 of 1
# Warmup Iteration   1: 252776.616 ns/op
# Warmup Iteration   2: 215815.734 ns/op
Iteration   1: 214610.256 ns/op
Iteration   2: 214916.098 ns/op
Iteration   3: 216051.477 ns/op
Iteration   4: 215310.378 ns/op
Iteration   5: 214988.391 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  215175.320 ±(99.9%) 2115.514 ns/op [Average]
  (min, avg, max) = (214610.256, 215175.320, 216051.477), stdev = 549.392
  CI (99.9%): [213059.806, 217290.834] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _1_K)

# Run progress: 86.36% complete, ETA 00:25:51
# Fork: 1 of 1
# Warmup Iteration   1: 5317.510 ns/op
# Warmup Iteration   2: 4430.358 ns/op
Iteration   1: 4379.092 ns/op
Iteration   2: 4354.758 ns/op
Iteration   3: 4353.640 ns/op
Iteration   4: 4388.658 ns/op
Iteration   5: 4362.100 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  4367.650 ±(99.9%) 59.825 ns/op [Average]
  (min, avg, max) = (4353.640, 4367.650, 4388.658), stdev = 15.536
  CI (99.9%): [4307.824, 4427.475] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _2_K)

# Run progress: 86.67% complete, ETA 00:25:17
# Fork: 1 of 1
# Warmup Iteration   1: 9704.781 ns/op
# Warmup Iteration   2: 8178.772 ns/op
Iteration   1: 8177.100 ns/op
Iteration   2: 8166.774 ns/op
Iteration   3: 8207.405 ns/op
Iteration   4: 8170.870 ns/op
Iteration   5: 8166.128 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  8177.655 ±(99.9%) 66.213 ns/op [Average]
  (min, avg, max) = (8166.128, 8177.655, 8207.405), stdev = 17.195
  CI (99.9%): [8111.443, 8243.868] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _4_K)

# Run progress: 86.97% complete, ETA 00:24:43
# Fork: 1 of 1
# Warmup Iteration   1: 19949.062 ns/op
# Warmup Iteration   2: 15437.768 ns/op
Iteration   1: 15340.580 ns/op
Iteration   2: 15286.872 ns/op
Iteration   3: 15246.331 ns/op
Iteration   4: 15296.042 ns/op
Iteration   5: 15395.976 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  15313.160 ±(99.9%) 220.030 ns/op [Average]
  (min, avg, max) = (15246.331, 15313.160, 15395.976), stdev = 57.141
  CI (99.9%): [15093.130, 15533.190] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _8_K)

# Run progress: 87.27% complete, ETA 00:24:09
# Fork: 1 of 1
# Warmup Iteration   1: 34855.734 ns/op
# Warmup Iteration   2: 27844.295 ns/op
Iteration   1: 28010.088 ns/op
Iteration   2: 27967.216 ns/op
Iteration   3: 27926.757 ns/op
Iteration   4: 27938.120 ns/op
Iteration   5: 27894.387 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  27947.314 ±(99.9%) 168.343 ns/op [Average]
  (min, avg, max) = (27894.387, 27947.314, 28010.088), stdev = 43.718
  CI (99.9%): [27778.971, 28115.656] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SMILE, inputType = _64_K)

# Run progress: 87.58% complete, ETA 00:23:35
# Fork: 1 of 1
# Warmup Iteration   1: 274995.590 ns/op
# Warmup Iteration   2: 213629.895 ns/op
Iteration   1: 214335.337 ns/op
Iteration   2: 213500.107 ns/op
Iteration   3: 214079.109 ns/op
Iteration   4: 213211.994 ns/op
Iteration   5: 214147.952 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  213854.900 ±(99.9%) 1832.775 ns/op [Average]
  (min, avg, max) = (213211.994, 213854.900, 214335.337), stdev = 475.966
  CI (99.9%): [212022.124, 215687.675] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _1_K)

# Run progress: 87.88% complete, ETA 00:23:01
# Fork: 1 of 1
# Warmup Iteration   1: 7253.780 ns/op
# Warmup Iteration   2: 6682.007 ns/op
Iteration   1: 6625.383 ns/op
Iteration   2: 6625.097 ns/op
Iteration   3: 6642.211 ns/op
Iteration   4: 6664.385 ns/op
Iteration   5: 6621.281 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  6635.671 ±(99.9%) 69.204 ns/op [Average]
  (min, avg, max) = (6621.281, 6635.671, 6664.385), stdev = 17.972
  CI (99.9%): [6566.467, 6704.875] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _2_K)

# Run progress: 88.18% complete, ETA 00:22:27
# Fork: 1 of 1
# Warmup Iteration   1: 15125.922 ns/op
# Warmup Iteration   2: 13440.565 ns/op
Iteration   1: 13408.878 ns/op
Iteration   2: 13438.069 ns/op
Iteration   3: 13398.927 ns/op
Iteration   4: 13413.234 ns/op
Iteration   5: 13407.620 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  13413.346 ±(99.9%) 56.850 ns/op [Average]
  (min, avg, max) = (13398.927, 13413.346, 13438.069), stdev = 14.764
  CI (99.9%): [13356.495, 13470.196] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _4_K)

# Run progress: 88.48% complete, ETA 00:21:53
# Fork: 1 of 1
# Warmup Iteration   1: 22154.934 ns/op
# Warmup Iteration   2: 18423.132 ns/op
Iteration   1: 18295.736 ns/op
Iteration   2: 18278.982 ns/op
Iteration   3: 18257.851 ns/op
Iteration   4: 18338.908 ns/op
Iteration   5: 18268.767 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  18288.049 ±(99.9%) 121.945 ns/op [Average]
  (min, avg, max) = (18257.851, 18288.049, 18338.908), stdev = 31.669
  CI (99.9%): [18166.104, 18409.993] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _8_K)

# Run progress: 88.79% complete, ETA 00:21:19
# Fork: 1 of 1
# Warmup Iteration   1: 33603.226 ns/op
# Warmup Iteration   2: 28535.384 ns/op
Iteration   1: 28293.656 ns/op
Iteration   2: 28261.223 ns/op
Iteration   3: 28288.421 ns/op
Iteration   4: 28348.450 ns/op
Iteration   5: 28429.153 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  28324.181 ±(99.9%) 256.742 ns/op [Average]
  (min, avg, max) = (28261.223, 28324.181, 28429.153), stdev = 66.675
  CI (99.9%): [28067.438, 28580.923] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SCALA_PB, inputType = _64_K)

# Run progress: 89.09% complete, ETA 00:20:44
# Fork: 1 of 1
# Warmup Iteration   1: 185851.419 ns/op
# Warmup Iteration   2: 166049.699 ns/op
Iteration   1: 165318.736 ns/op
Iteration   2: 163938.345 ns/op
Iteration   3: 163929.110 ns/op
Iteration   4: 163585.870 ns/op
Iteration   5: 162961.029 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  163946.618 ±(99.9%) 3326.189 ns/op [Average]
  (min, avg, max) = (162961.029, 163946.618, 165318.736), stdev = 863.801
  CI (99.9%): [160620.430, 167272.807] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _1_K)

# Run progress: 89.39% complete, ETA 00:20:10
# Fork: 1 of 1
# Warmup Iteration   1: 3299.627 ns/op
# Warmup Iteration   2: 2820.229 ns/op
Iteration   1: 2800.738 ns/op
Iteration   2: 2792.419 ns/op
Iteration   3: 2789.137 ns/op
Iteration   4: 2810.500 ns/op
Iteration   5: 2802.769 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  2799.113 ±(99.9%) 32.787 ns/op [Average]
  (min, avg, max) = (2789.137, 2799.113, 2810.500), stdev = 8.515
  CI (99.9%): [2766.326, 2831.899] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _2_K)

# Run progress: 89.70% complete, ETA 00:19:36
# Fork: 1 of 1
# Warmup Iteration   1: 5908.758 ns/op
# Warmup Iteration   2: 5062.090 ns/op
Iteration   1: 4987.160 ns/op
Iteration   2: 4982.042 ns/op
Iteration   3: 5045.073 ns/op
Iteration   4: 5012.954 ns/op
Iteration   5: 4975.894 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  5000.625 ±(99.9%) 110.029 ns/op [Average]
  (min, avg, max) = (4975.894, 5000.625, 5045.073), stdev = 28.574
  CI (99.9%): [4890.596, 5110.653] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _4_K)

# Run progress: 90.00% complete, ETA 00:19:02
# Fork: 1 of 1
# Warmup Iteration   1: 10090.107 ns/op
# Warmup Iteration   2: 8499.228 ns/op
Iteration   1: 8371.740 ns/op
Iteration   2: 8417.730 ns/op
Iteration   3: 8410.388 ns/op
Iteration   4: 8372.564 ns/op
Iteration   5: 8405.184 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  8395.521 ±(99.9%) 83.927 ns/op [Average]
  (min, avg, max) = (8371.740, 8395.521, 8417.730), stdev = 21.796
  CI (99.9%): [8311.594, 8479.448] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _8_K)

# Run progress: 90.30% complete, ETA 00:18:27
# Fork: 1 of 1
# Warmup Iteration   1: 21588.215 ns/op
# Warmup Iteration   2: 17888.056 ns/op
Iteration   1: 17825.357 ns/op
Iteration   2: 17804.271 ns/op
Iteration   3: 17907.426 ns/op
Iteration   4: 17784.537 ns/op
Iteration   5: 17802.607 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  17824.840 ±(99.9%) 186.293 ns/op [Average]
  (min, avg, max) = (17784.537, 17824.840, 17907.426), stdev = 48.380
  CI (99.9%): [17638.547, 18011.132] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_PB, inputType = _64_K)

# Run progress: 90.61% complete, ETA 00:17:53
# Fork: 1 of 1
# Warmup Iteration   1: 166668.381 ns/op
# Warmup Iteration   2: 142004.626 ns/op
Iteration   1: 142311.077 ns/op
Iteration   2: 146797.618 ns/op
Iteration   3: 142180.754 ns/op
Iteration   4: 142037.503 ns/op
Iteration   5: 142057.699 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  143076.930 ±(99.9%) 8020.167 ns/op [Average]
  (min, avg, max) = (142037.503, 143076.930, 146797.618), stdev = 2082.812
  CI (99.9%): [135056.763, 151097.098] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _1_K)

# Run progress: 90.91% complete, ETA 00:17:19
# Fork: 1 of 1
# Warmup Iteration   1: 5103.155 ns/op
# Warmup Iteration   2: 4781.381 ns/op
Iteration   1: 4706.247 ns/op
Iteration   2: 4680.558 ns/op
Iteration   3: 4715.150 ns/op
Iteration   4: 4682.834 ns/op
Iteration   5: 4774.571 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  4711.872 ±(99.9%) 146.594 ns/op [Average]
  (min, avg, max) = (4680.558, 4711.872, 4774.571), stdev = 38.070
  CI (99.9%): [4565.278, 4858.466] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _2_K)

# Run progress: 91.21% complete, ETA 00:16:44
# Fork: 1 of 1
# Warmup Iteration   1: 10647.934 ns/op
# Warmup Iteration   2: 9315.670 ns/op
Iteration   1: 9280.324 ns/op
Iteration   2: 9314.239 ns/op
Iteration   3: 9295.284 ns/op
Iteration   4: 9283.387 ns/op
Iteration   5: 9316.219 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  9297.890 ±(99.9%) 64.690 ns/op [Average]
  (min, avg, max) = (9280.324, 9297.890, 9316.219), stdev = 16.800
  CI (99.9%): [9233.200, 9362.581] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _4_K)

# Run progress: 91.52% complete, ETA 00:16:10
# Fork: 1 of 1
# Warmup Iteration   1: 21050.263 ns/op
# Warmup Iteration   2: 19287.415 ns/op
Iteration   1: 19253.320 ns/op
Iteration   2: 19132.895 ns/op
Iteration   3: 19137.050 ns/op
Iteration   4: 19097.705 ns/op
Iteration   5: 19131.174 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  19150.429 ±(99.9%) 229.619 ns/op [Average]
  (min, avg, max) = (19097.705, 19150.429, 19253.320), stdev = 59.631
  CI (99.9%): [18920.809, 19380.048] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _8_K)

# Run progress: 91.82% complete, ETA 00:15:36
# Fork: 1 of 1
# Warmup Iteration   1: 44019.423 ns/op
# Warmup Iteration   2: 39646.810 ns/op
Iteration   1: 39883.403 ns/op
Iteration   2: 39891.448 ns/op
Iteration   3: 39551.399 ns/op
Iteration   4: 40009.964 ns/op
Iteration   5: 39736.084 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  39814.460 ±(99.9%) 678.649 ns/op [Average]
  (min, avg, max) = (39551.399, 39814.460, 40009.964), stdev = 176.243
  CI (99.9%): [39135.811, 40493.109] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JAVA_THRIFT, inputType = _64_K)

# Run progress: 92.12% complete, ETA 00:15:01
# Fork: 1 of 1
# Warmup Iteration   1: 438641.504 ns/op
# Warmup Iteration   2: 374991.351 ns/op
Iteration   1: 376327.282 ns/op
Iteration   2: 374173.867 ns/op
Iteration   3: 373992.867 ns/op
Iteration   4: 377244.609 ns/op
Iteration   5: 381790.153 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  376705.756 ±(99.9%) 12185.164 ns/op [Average]
  (min, avg, max) = (373992.867, 376705.756, 381790.153), stdev = 3164.448
  CI (99.9%): [364520.592, 388890.919] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _1_K)

# Run progress: 92.42% complete, ETA 00:14:27
# Fork: 1 of 1
# Warmup Iteration   1: 31559.605 ns/op
# Warmup Iteration   2: 27375.798 ns/op
Iteration   1: 26740.583 ns/op
Iteration   2: 26459.625 ns/op
Iteration   3: 26569.272 ns/op
Iteration   4: 26483.543 ns/op
Iteration   5: 26520.056 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  26554.616 ±(99.9%) 430.806 ns/op [Average]
  (min, avg, max) = (26459.625, 26554.616, 26740.583), stdev = 111.879
  CI (99.9%): [26123.810, 26985.421] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _2_K)

# Run progress: 92.73% complete, ETA 00:13:52
# Fork: 1 of 1
# Warmup Iteration   1: 47311.923 ns/op
# Warmup Iteration   2: 42478.000 ns/op
Iteration   1: 40536.144 ns/op
Iteration   2: 40693.753 ns/op
Iteration   3: 40594.869 ns/op
Iteration   4: 41513.074 ns/op
Iteration   5: 41326.157 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  40932.799 ±(99.9%) 1743.586 ns/op [Average]
  (min, avg, max) = (40536.144, 40932.799, 41513.074), stdev = 452.804
  CI (99.9%): [39189.214, 42676.385] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _4_K)

# Run progress: 93.03% complete, ETA 00:13:18
# Fork: 1 of 1
# Warmup Iteration   1: 66288.705 ns/op
# Warmup Iteration   2: 58779.258 ns/op
Iteration   1: 56823.534 ns/op
Iteration   2: 57202.364 ns/op
Iteration   3: 57361.377 ns/op
Iteration   4: 56805.231 ns/op
Iteration   5: 56842.158 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  57006.933 ±(99.9%) 991.668 ns/op [Average]
  (min, avg, max) = (56805.231, 57006.933, 57361.377), stdev = 257.533
  CI (99.9%): [56015.264, 57998.601] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _8_K)

# Run progress: 93.33% complete, ETA 00:12:43
# Fork: 1 of 1
# Warmup Iteration   1: 130419.374 ns/op
# Warmup Iteration   2: 122000.854 ns/op
Iteration   1: 115975.612 ns/op
Iteration   2: 116660.186 ns/op
Iteration   3: 116622.028 ns/op
Iteration   4: 117303.902 ns/op
Iteration   5: 116553.529 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  116623.051 ±(99.9%) 1815.273 ns/op [Average]
  (min, avg, max) = (115975.612, 116623.051, 117303.902), stdev = 471.421
  CI (99.9%): [114807.778, 118438.324] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = SERIALIZABLE, inputType = _64_K)

# Run progress: 93.64% complete, ETA 00:12:09
# Fork: 1 of 1
# Warmup Iteration   1: 1065796.136 ns/op
# Warmup Iteration   2: 964379.690 ns/op
Iteration   1: 937966.772 ns/op
Iteration   2: 932835.859 ns/op
Iteration   3: 942901.428 ns/op
Iteration   4: 944487.005 ns/op
Iteration   5: 939575.364 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  939553.286 ±(99.9%) 17560.898 ns/op [Average]
  (min, avg, max) = (932835.859, 939553.286, 944487.005), stdev = 4560.509
  CI (99.9%): [921992.388, 957114.183] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _1_K)

# Run progress: 93.94% complete, ETA 00:11:34
# Fork: 1 of 1
# Warmup Iteration   1: 2693.887 ns/op
# Warmup Iteration   2: 2400.935 ns/op
Iteration   1: 2428.056 ns/op
Iteration   2: 2417.433 ns/op
Iteration   3: 2435.548 ns/op
Iteration   4: 2409.624 ns/op
Iteration   5: 2393.703 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  2416.873 ±(99.9%) 62.789 ns/op [Average]
  (min, avg, max) = (2393.703, 2416.873, 2435.548), stdev = 16.306
  CI (99.9%): [2354.084, 2479.661] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _2_K)

# Run progress: 94.24% complete, ETA 00:11:00
# Fork: 1 of 1
# Warmup Iteration   1: 4166.527 ns/op
# Warmup Iteration   2: 3789.478 ns/op
Iteration   1: 3772.280 ns/op
Iteration   2: 3747.470 ns/op
Iteration   3: 3766.643 ns/op
Iteration   4: 3757.463 ns/op
Iteration   5: 3775.350 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  3763.841 ±(99.9%) 43.914 ns/op [Average]
  (min, avg, max) = (3747.470, 3763.841, 3775.350), stdev = 11.404
  CI (99.9%): [3719.927, 3807.755] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _4_K)

# Run progress: 94.55% complete, ETA 00:10:25
# Fork: 1 of 1
# Warmup Iteration   1: 6925.079 ns/op
# Warmup Iteration   2: 6238.553 ns/op
Iteration   1: 6239.030 ns/op
Iteration   2: 6222.073 ns/op
Iteration   3: 6222.857 ns/op
Iteration   4: 6250.811 ns/op
Iteration   5: 6404.595 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  6267.873 ±(99.9%) 297.897 ns/op [Average]
  (min, avg, max) = (6222.073, 6267.873, 6404.595), stdev = 77.363
  CI (99.9%): [5969.976, 6565.770] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _8_K)

# Run progress: 94.85% complete, ETA 00:09:50
# Fork: 1 of 1
# Warmup Iteration   1: 13577.269 ns/op
# Warmup Iteration   2: 12400.328 ns/op
Iteration   1: 12428.926 ns/op
Iteration   2: 12337.808 ns/op
Iteration   3: 12338.770 ns/op
Iteration   4: 12578.145 ns/op
Iteration   5: 12407.151 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  12418.160 ±(99.9%) 378.224 ns/op [Average]
  (min, avg, max) = (12337.808, 12418.160, 12578.145), stdev = 98.224
  CI (99.9%): [12039.936, 12796.384] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = BOOPICKLE, inputType = _64_K)

# Run progress: 95.15% complete, ETA 00:09:16
# Fork: 1 of 1
# Warmup Iteration   1: 129965.408 ns/op
# Warmup Iteration   2: 122211.570 ns/op
Iteration   1: 119926.900 ns/op
Iteration   2: 119507.169 ns/op
Iteration   3: 119741.687 ns/op
Iteration   4: 119925.482 ns/op
Iteration   5: 119787.962 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  119777.840 ±(99.9%) 663.300 ns/op [Average]
  (min, avg, max) = (119507.169, 119777.840, 119926.900), stdev = 172.257
  CI (99.9%): [119114.540, 120441.140] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _1_K)

# Run progress: 95.45% complete, ETA 00:08:41
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _2_K)

# Run progress: 95.76% complete, ETA 00:08:05
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _4_K)

# Run progress: 96.06% complete, ETA 00:07:29
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _8_K)

# Run progress: 96.36% complete, ETA 00:06:53
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CHILL, inputType = _64_K)

# Run progress: 96.67% complete, ETA 00:06:18
# Fork: 1 of 1
# Warmup Iteration   1: <failure>

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more

java.lang.RuntimeException: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:44)
	at com.twitter.chill.KryoPool.toBytesWithoutClass(KryoPool.java:125)
	at com.komanov.serialization.converters.ChillConverter$.toByteArray(ChillConverter.scala:13)
	at com.komanov.serialization.jmh.SiteBenchmark.setup(Benchmarks.scala:34)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest._jmh_tryInit_f_sitebenchmark0_0(SiteBenchmark_serialization_jmhTest.java:341)
	at com.komanov.serialization.jmh.generated.SiteBenchmark_serialization_jmhTest.serialization_AverageTime(SiteBenchmark_serialization_jmhTest.java:138)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:453)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:437)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field protected transient int java.util.AbstractList.modCount accessible: module java.base does not "opens java.util" to unnamed module @594c619b
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
	at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
	at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
	at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.buildValidFields(FieldSerializer.java:283)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:218)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:157)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:150)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:134)
	at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:130)
	at com.twitter.chill.ScalaCollectionsRegistrar.useField$1(ScalaKryoInstantiator.scala:112)
	at com.twitter.chill.ScalaCollectionsRegistrar.apply(ScalaKryoInstantiator.scala:117)
	at com.twitter.chill.AllScalaRegistrar_0_9_2.apply(ScalaKryoInstantiator.scala:188)
	at com.twitter.chill.AllScalaRegistrar_0_9_5.apply(ScalaKryoInstantiator.scala:213)
	at com.twitter.chill.AllScalaRegistrar.apply(ScalaKryoInstantiator.scala:288)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:99)
	at com.twitter.chill.ScalaKryoInstantiator.newKryo(ScalaKryoInstantiator.scala:95)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:59)
	at com.twitter.chill.KryoPool$2.newInstance(KryoPool.java:57)
	at com.twitter.chill.ResourcePool.borrow(ResourcePool.java:37)
	... 17 more




# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _1_K)

# Run progress: 96.97% complete, ETA 00:05:42
# Fork: 1 of 1
# Warmup Iteration   1: 2505.269 ns/op
# Warmup Iteration   2: 2140.564 ns/op
Iteration   1: 2137.581 ns/op
Iteration   2: 2129.877 ns/op
Iteration   3: 2157.176 ns/op
Iteration   4: 2138.778 ns/op
Iteration   5: 2142.100 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  2141.102 ±(99.9%) 38.659 ns/op [Average]
  (min, avg, max) = (2129.877, 2141.102, 2157.176), stdev = 10.040
  CI (99.9%): [2102.443, 2179.761] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _2_K)

# Run progress: 97.27% complete, ETA 00:05:08
# Fork: 1 of 1
# Warmup Iteration   1: 4884.513 ns/op
# Warmup Iteration   2: 4292.601 ns/op
Iteration   1: 4341.364 ns/op
Iteration   2: 4266.584 ns/op
Iteration   3: 4265.518 ns/op
Iteration   4: 4279.330 ns/op
Iteration   5: 4299.632 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  4290.486 ±(99.9%) 121.637 ns/op [Average]
  (min, avg, max) = (4265.518, 4290.486, 4341.364), stdev = 31.589
  CI (99.9%): [4168.849, 4412.123] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _4_K)

# Run progress: 97.58% complete, ETA 00:04:34
# Fork: 1 of 1
# Warmup Iteration   1: 10519.613 ns/op
# Warmup Iteration   2: 8306.388 ns/op
Iteration   1: 8363.208 ns/op
Iteration   2: 8365.247 ns/op
Iteration   3: 8295.540 ns/op
Iteration   4: 8297.348 ns/op
Iteration   5: 8294.421 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  8323.153 ±(99.9%) 144.467 ns/op [Average]
  (min, avg, max) = (8294.421, 8323.153, 8365.247), stdev = 37.518
  CI (99.9%): [8178.686, 8467.619] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _8_K)

# Run progress: 97.88% complete, ETA 00:04:00
# Fork: 1 of 1
# Warmup Iteration   1: 18893.171 ns/op
# Warmup Iteration   2: 14728.591 ns/op
Iteration   1: 14563.255 ns/op
Iteration   2: 14508.663 ns/op
Iteration   3: 14538.384 ns/op
Iteration   4: 14761.301 ns/op
Iteration   5: 14513.442 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  14577.009 ±(99.9%) 405.492 ns/op [Average]
  (min, avg, max) = (14508.663, 14577.009, 14761.301), stdev = 105.305
  CI (99.9%): [14171.517, 14982.501] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = JSONITER, inputType = _64_K)

# Run progress: 98.18% complete, ETA 00:03:25
# Fork: 1 of 1
# Warmup Iteration   1: 148998.436 ns/op
# Warmup Iteration   2: 136909.772 ns/op
Iteration   1: 135454.271 ns/op
Iteration   2: 135350.271 ns/op
Iteration   3: 137002.207 ns/op
Iteration   4: 137016.446 ns/op
Iteration   5: 135035.621 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  135971.763 ±(99.9%) 3695.209 ns/op [Average]
  (min, avg, max) = (135035.621, 135971.763, 137016.446), stdev = 959.634
  CI (99.9%): [132276.554, 139666.973] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _1_K)

# Run progress: 98.48% complete, ETA 00:02:51
# Fork: 1 of 1
# Warmup Iteration   1: 19034.897 ns/op
# Warmup Iteration   2: 17120.953 ns/op
Iteration   1: 16751.206 ns/op
Iteration   2: 16702.145 ns/op
Iteration   3: 16879.902 ns/op
Iteration   4: 17117.539 ns/op
Iteration   5: 16607.353 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  16811.629 ±(99.9%) 759.486 ns/op [Average]
  (min, avg, max) = (16607.353, 16811.629, 17117.539), stdev = 197.236
  CI (99.9%): [16052.143, 17571.115] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _2_K)

# Run progress: 98.79% complete, ETA 00:02:17
# Fork: 1 of 1
# Warmup Iteration   1: 36259.197 ns/op
# Warmup Iteration   2: 32535.149 ns/op
Iteration   1: 32084.835 ns/op
Iteration   2: 31976.295 ns/op
Iteration   3: 31728.471 ns/op
Iteration   4: 32460.779 ns/op
Iteration   5: 32747.232 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  32199.522 ±(99.9%) 1555.958 ns/op [Average]
  (min, avg, max) = (31728.471, 32199.522, 32747.232), stdev = 404.077
  CI (99.9%): [30643.564, 33755.480] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _4_K)

# Run progress: 99.09% complete, ETA 00:01:43
# Fork: 1 of 1
# Warmup Iteration   1: 81723.222 ns/op
# Warmup Iteration   2: 71842.361 ns/op
Iteration   1: 70658.296 ns/op
Iteration   2: 71422.172 ns/op
Iteration   3: 70611.372 ns/op
Iteration   4: 71814.383 ns/op
Iteration   5: 72903.148 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  71481.874 ±(99.9%) 3637.892 ns/op [Average]
  (min, avg, max) = (70611.372, 71481.874, 72903.148), stdev = 944.749
  CI (99.9%): [67843.983, 75119.766] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _8_K)

# Run progress: 99.39% complete, ETA 00:01:08
# Fork: 1 of 1
# Warmup Iteration   1: 181818.194 ns/op
# Warmup Iteration   2: 165356.119 ns/op
Iteration   1: 162005.376 ns/op
Iteration   2: 164243.519 ns/op
Iteration   3: 164833.808 ns/op
Iteration   4: 164288.418 ns/op
Iteration   5: 165142.618 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  164102.748 ±(99.9%) 4743.111 ns/op [Average]
  (min, avg, max) = (162005.376, 164102.748, 165142.618), stdev = 1231.771
  CI (99.9%): [159359.637, 168845.859] (assumes normal distribution)


# JMH version: 1.20
# VM version: JDK 17.0.4, VM 17.0.4+8-Ubuntu-122.04
# VM invoker: /usr/lib/jvm/java-17-openjdk-amd64/bin/java
# VM options: -Xmx2G
# Warmup: 2 iterations, 5 s each
# Measurement: 5 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 2 threads, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.komanov.serialization.jmh.SiteBenchmark.serialization
# Parameters: (converterType = CIRCE, inputType = _64_K)

# Run progress: 99.70% complete, ETA 00:00:34
# Fork: 1 of 1
# Warmup Iteration   1: 1523964.856 ns/op
# Warmup Iteration   2: 1390028.386 ns/op
Iteration   1: 1378152.733 ns/op
Iteration   2: 1368637.253 ns/op
Iteration   3: 1371711.819 ns/op
Iteration   4: 1376899.899 ns/op
Iteration   5: 1383319.095 ns/op


Result "com.komanov.serialization.jmh.SiteBenchmark.serialization":
  1375744.160 ±(99.9%) 22060.233 ns/op [Average]
  (min, avg, max) = (1368637.253, 1375744.160, 1383319.095), stdev = 5728.972
  CI (99.9%): [1353683.927, 1397804.393] (assumes normal distribution)


# Run complete. Total time: 03:09:03

Benchmark                       (converterType)  (inputType)  Mode  Cnt         Score        Error  Units
EventBenchmark.both                        JSON         _1_K  avgt    5     27431.901 ±    396.330  ns/op
EventBenchmark.both                        JSON         _2_K  avgt    5     53388.137 ±   1039.349  ns/op
EventBenchmark.both                        JSON         _4_K  avgt    5    106635.207 ±   3821.051  ns/op
EventBenchmark.both                        JSON         _8_K  avgt    5    232219.715 ±   5014.785  ns/op
EventBenchmark.both                        JSON        _64_K  avgt    5   2184873.074 ±  23226.586  ns/op
EventBenchmark.both                        CBOR         _1_K  avgt    5     24009.583 ±    405.851  ns/op
EventBenchmark.both                        CBOR         _2_K  avgt    5     44878.568 ±    818.084  ns/op
EventBenchmark.both                        CBOR         _4_K  avgt    5     86427.674 ±   1431.108  ns/op
EventBenchmark.both                        CBOR         _8_K  avgt    5    175247.811 ±   3874.988  ns/op
EventBenchmark.both                        CBOR        _64_K  avgt    5   1833993.619 ±  26332.356  ns/op
EventBenchmark.both                       SMILE         _1_K  avgt    5     24536.496 ±   1090.868  ns/op
EventBenchmark.both                       SMILE         _2_K  avgt    5     46782.364 ±    284.023  ns/op
EventBenchmark.both                       SMILE         _4_K  avgt    5    102126.102 ±   1286.691  ns/op
EventBenchmark.both                       SMILE         _8_K  avgt    5    226467.758 ±   2321.889  ns/op
EventBenchmark.both                       SMILE        _64_K  avgt    5   1953597.585 ±  86604.500  ns/op
EventBenchmark.both                    SCALA_PB         _1_K  avgt    5     11022.838 ±     58.615  ns/op
EventBenchmark.both                    SCALA_PB         _2_K  avgt    5     21002.089 ±    293.959  ns/op
EventBenchmark.both                    SCALA_PB         _4_K  avgt    5     36475.525 ±    583.598  ns/op
EventBenchmark.both                    SCALA_PB         _8_K  avgt    5     68536.242 ±   1586.140  ns/op
EventBenchmark.both                    SCALA_PB        _64_K  avgt    5    627950.624 ±  15811.470  ns/op
EventBenchmark.both                     JAVA_PB         _1_K  avgt    5      6283.640 ±    192.900  ns/op
EventBenchmark.both                     JAVA_PB         _2_K  avgt    5     12428.741 ±    164.475  ns/op
EventBenchmark.both                     JAVA_PB         _4_K  avgt    5     23540.361 ±    742.919  ns/op
EventBenchmark.both                     JAVA_PB         _8_K  avgt    5     51791.896 ±   1071.403  ns/op
EventBenchmark.both                     JAVA_PB        _64_K  avgt    5    491412.261 ±   4090.799  ns/op
EventBenchmark.both                 JAVA_THRIFT         _1_K  avgt    5     11485.997 ±    187.464  ns/op
EventBenchmark.both                 JAVA_THRIFT         _2_K  avgt    5     21606.543 ±    196.842  ns/op
EventBenchmark.both                 JAVA_THRIFT         _4_K  avgt    5     42332.340 ±    564.163  ns/op
EventBenchmark.both                 JAVA_THRIFT         _8_K  avgt    5     94261.068 ±   4690.438  ns/op
EventBenchmark.both                 JAVA_THRIFT        _64_K  avgt    5    942937.155 ±   6339.656  ns/op
EventBenchmark.both                SERIALIZABLE         _1_K  avgt    5    131598.705 ±   3506.932  ns/op
EventBenchmark.both                SERIALIZABLE         _2_K  avgt    5    240380.566 ±   8751.190  ns/op
EventBenchmark.both                SERIALIZABLE         _4_K  avgt    5    557603.143 ±  14834.789  ns/op
EventBenchmark.both                SERIALIZABLE         _8_K  avgt    5   1407542.273 ±  43349.160  ns/op
EventBenchmark.both                SERIALIZABLE        _64_K  avgt    5  11924036.313 ± 126207.718  ns/op
EventBenchmark.both                   BOOPICKLE         _1_K  avgt    5      6327.975 ±    366.905  ns/op
EventBenchmark.both                   BOOPICKLE         _2_K  avgt    5     11627.507 ±    100.033  ns/op
EventBenchmark.both                   BOOPICKLE         _4_K  avgt    5     20109.494 ±    539.400  ns/op
EventBenchmark.both                   BOOPICKLE         _8_K  avgt    5     40082.529 ±   2843.226  ns/op
EventBenchmark.both                   BOOPICKLE        _64_K  avgt    5    401052.899 ±  14885.044  ns/op
EventBenchmark.both                    JSONITER         _1_K  avgt    5     10330.385 ±    144.412  ns/op
EventBenchmark.both                    JSONITER         _2_K  avgt    5     19260.498 ±    269.004  ns/op
EventBenchmark.both                    JSONITER         _4_K  avgt    5     38612.298 ±   2286.223  ns/op
EventBenchmark.both                    JSONITER         _8_K  avgt    5     78136.139 ±    253.454  ns/op
EventBenchmark.both                    JSONITER        _64_K  avgt    5    786850.348 ±  27562.075  ns/op
EventBenchmark.both                       CIRCE         _1_K  avgt    5    176708.974 ±   4510.713  ns/op
EventBenchmark.both                       CIRCE         _2_K  avgt    5    274898.551 ±  14910.936  ns/op
EventBenchmark.both                       CIRCE         _4_K  avgt    5    535208.950 ±  20110.884  ns/op
EventBenchmark.both                       CIRCE         _8_K  avgt    5   1235541.408 ±  44477.345  ns/op
EventBenchmark.both                       CIRCE        _64_K  avgt    5  11509930.603 ± 349873.376  ns/op
EventBenchmark.deserialization             JSON         _1_K  avgt    5     14581.694 ±    252.064  ns/op
EventBenchmark.deserialization             JSON         _2_K  avgt    5     28382.621 ±    406.484  ns/op
EventBenchmark.deserialization             JSON         _4_K  avgt    5     58697.015 ±    860.203  ns/op
EventBenchmark.deserialization             JSON         _8_K  avgt    5    132387.599 ±   2432.252  ns/op
EventBenchmark.deserialization             JSON        _64_K  avgt    5   1181633.939 ±  43899.765  ns/op
EventBenchmark.deserialization             CBOR         _1_K  avgt    5     14397.498 ±    871.571  ns/op
EventBenchmark.deserialization             CBOR         _2_K  avgt    5     26850.175 ±    731.998  ns/op
EventBenchmark.deserialization             CBOR         _4_K  avgt    5     49844.515 ±    970.540  ns/op
EventBenchmark.deserialization             CBOR         _8_K  avgt    5    106172.216 ±   2061.083  ns/op
EventBenchmark.deserialization             CBOR        _64_K  avgt    5   1097119.883 ±  12086.181  ns/op
EventBenchmark.deserialization            SMILE         _1_K  avgt    5     13789.278 ±    278.475  ns/op
EventBenchmark.deserialization            SMILE         _2_K  avgt    5     25931.465 ±    399.899  ns/op
EventBenchmark.deserialization            SMILE         _4_K  avgt    5     53024.796 ±    570.744  ns/op
EventBenchmark.deserialization            SMILE         _8_K  avgt    5    113936.235 ±   3401.549  ns/op
EventBenchmark.deserialization            SMILE        _64_K  avgt    5   1091277.220 ±   2773.400  ns/op
EventBenchmark.deserialization         SCALA_PB         _1_K  avgt    5      5276.617 ±    222.611  ns/op
EventBenchmark.deserialization         SCALA_PB         _2_K  avgt    5      9658.430 ±    388.614  ns/op
EventBenchmark.deserialization         SCALA_PB         _4_K  avgt    5     17651.968 ±    202.348  ns/op
EventBenchmark.deserialization         SCALA_PB         _8_K  avgt    5     39698.685 ±    846.252  ns/op
EventBenchmark.deserialization         SCALA_PB        _64_K  avgt    5    388876.411 ±  15881.698  ns/op
EventBenchmark.deserialization          JAVA_PB         _1_K  avgt    5      2949.834 ±     68.151  ns/op
EventBenchmark.deserialization          JAVA_PB         _2_K  avgt    5      5901.474 ±     94.888  ns/op
EventBenchmark.deserialization          JAVA_PB         _4_K  avgt    5     12118.644 ±     53.522  ns/op
EventBenchmark.deserialization          JAVA_PB         _8_K  avgt    5     27174.223 ±    612.468  ns/op
EventBenchmark.deserialization          JAVA_PB        _64_K  avgt    5    253286.679 ±  12040.276  ns/op
EventBenchmark.deserialization      JAVA_THRIFT         _1_K  avgt    5      4149.761 ±    126.273  ns/op
EventBenchmark.deserialization      JAVA_THRIFT         _2_K  avgt    5      7703.890 ±    364.402  ns/op
EventBenchmark.deserialization      JAVA_THRIFT         _4_K  avgt    5     14706.925 ±    113.381  ns/op
EventBenchmark.deserialization      JAVA_THRIFT         _8_K  avgt    5     30789.159 ±   1233.565  ns/op
EventBenchmark.deserialization      JAVA_THRIFT        _64_K  avgt    5    311181.947 ±  10642.639  ns/op
EventBenchmark.deserialization     SERIALIZABLE         _1_K  avgt    5    104588.311 ±   1400.250  ns/op
EventBenchmark.deserialization     SERIALIZABLE         _2_K  avgt    5    193160.071 ±   1301.489  ns/op
EventBenchmark.deserialization     SERIALIZABLE         _4_K  avgt    5    448475.849 ±   4021.810  ns/op
EventBenchmark.deserialization     SERIALIZABLE         _8_K  avgt    5   1111485.591 ±  17813.628  ns/op
EventBenchmark.deserialization     SERIALIZABLE        _64_K  avgt    5   9317019.631 ± 113426.335  ns/op
EventBenchmark.deserialization        BOOPICKLE         _1_K  avgt    5      2461.637 ±     96.233  ns/op
EventBenchmark.deserialization        BOOPICKLE         _2_K  avgt    5      4883.869 ±    137.439  ns/op
EventBenchmark.deserialization        BOOPICKLE         _4_K  avgt    5      8901.824 ±    140.960  ns/op
EventBenchmark.deserialization        BOOPICKLE         _8_K  avgt    5     17580.224 ±    620.644  ns/op
EventBenchmark.deserialization        BOOPICKLE        _64_K  avgt    5    193370.643 ±   4073.240  ns/op
EventBenchmark.deserialization         JSONITER         _1_K  avgt    5      6376.358 ±     54.286  ns/op
EventBenchmark.deserialization         JSONITER         _2_K  avgt    5     12636.788 ±    538.744  ns/op
EventBenchmark.deserialization         JSONITER         _4_K  avgt    5     26173.842 ±    252.391  ns/op
EventBenchmark.deserialization         JSONITER         _8_K  avgt    5     67315.632 ±   5046.056  ns/op
EventBenchmark.deserialization         JSONITER        _64_K  avgt    5    557352.123 ±  32437.986  ns/op
EventBenchmark.deserialization            CIRCE         _1_K  avgt    5    146623.231 ±  14982.395  ns/op
EventBenchmark.deserialization            CIRCE         _2_K  avgt    5    201645.257 ±   9398.443  ns/op
EventBenchmark.deserialization            CIRCE         _4_K  avgt    5    390762.533 ±  11314.181  ns/op
EventBenchmark.deserialization            CIRCE         _8_K  avgt    5    900237.561 ±  46892.643  ns/op
EventBenchmark.deserialization            CIRCE        _64_K  avgt    5   8835474.836 ± 326082.672  ns/op
EventBenchmark.serialization               JSON         _1_K  avgt    5     10259.334 ±    231.697  ns/op
EventBenchmark.serialization               JSON         _2_K  avgt    5     22155.251 ±    977.095  ns/op
EventBenchmark.serialization               JSON         _4_K  avgt    5     44633.818 ±   1024.131  ns/op
EventBenchmark.serialization               JSON         _8_K  avgt    5     88436.242 ±   1309.089  ns/op
EventBenchmark.serialization               JSON        _64_K  avgt    5    849988.402 ±  12734.114  ns/op
EventBenchmark.serialization               CBOR         _1_K  avgt    5      7758.029 ±    204.306  ns/op
EventBenchmark.serialization               CBOR         _2_K  avgt    5     15017.900 ±    355.250  ns/op
EventBenchmark.serialization               CBOR         _4_K  avgt    5     31906.587 ±    999.288  ns/op
EventBenchmark.serialization               CBOR         _8_K  avgt    5     64370.223 ±   4522.071  ns/op
EventBenchmark.serialization               CBOR        _64_K  avgt    5    636558.167 ±   9077.164  ns/op
EventBenchmark.serialization              SMILE         _1_K  avgt    5     10798.662 ±    366.178  ns/op
EventBenchmark.serialization              SMILE         _2_K  avgt    5     20521.787 ±    482.115  ns/op
EventBenchmark.serialization              SMILE         _4_K  avgt    5     37748.087 ±    773.656  ns/op
EventBenchmark.serialization              SMILE         _8_K  avgt    5     97357.547 ±   3368.636  ns/op
EventBenchmark.serialization              SMILE        _64_K  avgt    5    936230.833 ±  27154.170  ns/op
EventBenchmark.serialization           SCALA_PB         _1_K  avgt    5      5263.564 ±    150.547  ns/op
EventBenchmark.serialization           SCALA_PB         _2_K  avgt    5     10976.468 ±    121.209  ns/op
EventBenchmark.serialization           SCALA_PB         _4_K  avgt    5     16682.743 ±    328.779  ns/op
EventBenchmark.serialization           SCALA_PB         _8_K  avgt    5     29948.703 ±    463.771  ns/op
EventBenchmark.serialization           SCALA_PB        _64_K  avgt    5    240285.207 ±  10991.736  ns/op
EventBenchmark.serialization            JAVA_PB         _1_K  avgt    5      2692.979 ±    191.113  ns/op
EventBenchmark.serialization            JAVA_PB         _2_K  avgt    5      5575.005 ±    101.565  ns/op
EventBenchmark.serialization            JAVA_PB         _4_K  avgt    5     10902.182 ±    254.194  ns/op
EventBenchmark.serialization            JAVA_PB         _8_K  avgt    5     22213.277 ±    117.770  ns/op
EventBenchmark.serialization            JAVA_PB        _64_K  avgt    5    203933.491 ±   2033.137  ns/op
EventBenchmark.serialization        JAVA_THRIFT         _1_K  avgt    5      6499.266 ±    339.141  ns/op
EventBenchmark.serialization        JAVA_THRIFT         _2_K  avgt    5     12556.512 ±    110.733  ns/op
EventBenchmark.serialization        JAVA_THRIFT         _4_K  avgt    5     25964.042 ±    242.444  ns/op
EventBenchmark.serialization        JAVA_THRIFT         _8_K  avgt    5     59747.061 ±   1069.112  ns/op
EventBenchmark.serialization        JAVA_THRIFT        _64_K  avgt    5    612140.494 ±   4226.868  ns/op
EventBenchmark.serialization       SERIALIZABLE         _1_K  avgt    5     26608.048 ±    913.593  ns/op
EventBenchmark.serialization       SERIALIZABLE         _2_K  avgt    5     44688.248 ±    377.167  ns/op
EventBenchmark.serialization       SERIALIZABLE         _4_K  avgt    5    104733.270 ±   2412.842  ns/op
EventBenchmark.serialization       SERIALIZABLE         _8_K  avgt    5    234578.160 ±   2231.855  ns/op
EventBenchmark.serialization       SERIALIZABLE        _64_K  avgt    5   2120090.844 ±  25254.127  ns/op
EventBenchmark.serialization          BOOPICKLE         _1_K  avgt    5      3553.331 ±     93.083  ns/op
EventBenchmark.serialization          BOOPICKLE         _2_K  avgt    5      6071.819 ±    154.181  ns/op
EventBenchmark.serialization          BOOPICKLE         _4_K  avgt    5     11415.981 ±    136.016  ns/op
EventBenchmark.serialization          BOOPICKLE         _8_K  avgt    5     22211.716 ±    136.960  ns/op
EventBenchmark.serialization          BOOPICKLE        _64_K  avgt    5    209485.891 ±   4237.005  ns/op
EventBenchmark.serialization           JSONITER         _1_K  avgt    5      2758.324 ±     18.629  ns/op
EventBenchmark.serialization           JSONITER         _2_K  avgt    5      5403.648 ±     75.635  ns/op
EventBenchmark.serialization           JSONITER         _4_K  avgt    5     11842.543 ±    323.887  ns/op
EventBenchmark.serialization           JSONITER         _8_K  avgt    5     18224.019 ±    149.230  ns/op
EventBenchmark.serialization           JSONITER        _64_K  avgt    5    217568.208 ±  11278.126  ns/op
EventBenchmark.serialization              CIRCE         _1_K  avgt    5     27402.869 ±    904.619  ns/op
EventBenchmark.serialization              CIRCE         _2_K  avgt    5     57523.280 ±    843.794  ns/op
EventBenchmark.serialization              CIRCE         _4_K  avgt    5    119490.520 ±   4842.225  ns/op
EventBenchmark.serialization              CIRCE         _8_K  avgt    5    258189.247 ±   7751.898  ns/op
EventBenchmark.serialization              CIRCE        _64_K  avgt    5   2716251.998 ±  38877.972  ns/op
SiteBenchmark.both                         JSON         _1_K  avgt    5     16135.929 ±     38.030  ns/op
SiteBenchmark.both                         JSON         _2_K  avgt    5     29695.328 ±    333.365  ns/op
SiteBenchmark.both                         JSON         _4_K  avgt    5     54177.467 ±    545.590  ns/op
SiteBenchmark.both                         JSON         _8_K  avgt    5    107262.313 ±   1909.103  ns/op
SiteBenchmark.both                         JSON        _64_K  avgt    5    825812.266 ±  12440.219  ns/op
SiteBenchmark.both                         CBOR         _1_K  avgt    5     12592.843 ±    238.010  ns/op
SiteBenchmark.both                         CBOR         _2_K  avgt    5     21041.805 ±    181.534  ns/op
SiteBenchmark.both                         CBOR         _4_K  avgt    5     40093.642 ±    318.150  ns/op
SiteBenchmark.both                         CBOR         _8_K  avgt    5     82809.699 ±   1213.906  ns/op
SiteBenchmark.both                         CBOR        _64_K  avgt    5    662301.344 ±  22031.608  ns/op
SiteBenchmark.both                        SMILE         _1_K  avgt    5     13794.815 ±     41.924  ns/op
SiteBenchmark.both                        SMILE         _2_K  avgt    5     23511.654 ±   1251.874  ns/op
SiteBenchmark.both                        SMILE         _4_K  avgt    5     40271.264 ±    700.378  ns/op
SiteBenchmark.both                        SMILE         _8_K  avgt    5     80647.946 ±   1515.833  ns/op
SiteBenchmark.both                        SMILE        _64_K  avgt    5    581011.960 ±  19678.299  ns/op
SiteBenchmark.both                     SCALA_PB         _1_K  avgt    5      7343.192 ±     82.376  ns/op
SiteBenchmark.both                     SCALA_PB         _2_K  avgt    5     18631.513 ±    159.909  ns/op
SiteBenchmark.both                     SCALA_PB         _4_K  avgt    5     26965.809 ±    419.402  ns/op
SiteBenchmark.both                     SCALA_PB         _8_K  avgt    5     41148.709 ±    752.330  ns/op
SiteBenchmark.both                     SCALA_PB        _64_K  avgt    5    289478.558 ±   1561.437  ns/op
SiteBenchmark.both                      JAVA_PB         _1_K  avgt    5      8041.960 ±     22.353  ns/op
SiteBenchmark.both                      JAVA_PB         _2_K  avgt    5     13296.141 ±    567.662  ns/op
SiteBenchmark.both                      JAVA_PB         _4_K  avgt    5     21099.488 ±    816.477  ns/op
SiteBenchmark.both                      JAVA_PB         _8_K  avgt    5     46085.938 ±    944.997  ns/op
SiteBenchmark.both                      JAVA_PB        _64_K  avgt    5    347768.647 ±   3444.891  ns/op
SiteBenchmark.both                  JAVA_THRIFT         _1_K  avgt    5      9502.192 ±     67.098  ns/op
SiteBenchmark.both                  JAVA_THRIFT         _2_K  avgt    5     15918.930 ±    392.023  ns/op
SiteBenchmark.both                  JAVA_THRIFT         _4_K  avgt    5     32045.469 ±    558.830  ns/op
SiteBenchmark.both                  JAVA_THRIFT         _8_K  avgt    5     64020.644 ±    905.327  ns/op
SiteBenchmark.both                  JAVA_THRIFT        _64_K  avgt    5    555987.146 ±  13840.943  ns/op
SiteBenchmark.both                 SERIALIZABLE         _1_K  avgt    5    129227.489 ±   2783.212  ns/op
SiteBenchmark.both                 SERIALIZABLE         _2_K  avgt    5    170956.003 ±   4285.839  ns/op
SiteBenchmark.both                 SERIALIZABLE         _4_K  avgt    5    224704.914 ±   2968.016  ns/op
SiteBenchmark.both                 SERIALIZABLE         _8_K  avgt    5    351368.867 ±   1992.765  ns/op
SiteBenchmark.both                 SERIALIZABLE        _64_K  avgt    5   2159099.706 ±  20188.487  ns/op
SiteBenchmark.both                    BOOPICKLE         _1_K  avgt    5      4625.513 ±     57.149  ns/op
SiteBenchmark.both                    BOOPICKLE         _2_K  avgt    5      8337.846 ±    358.036  ns/op
SiteBenchmark.both                    BOOPICKLE         _4_K  avgt    5     14467.902 ±    347.505  ns/op
SiteBenchmark.both                    BOOPICKLE         _8_K  avgt    5     27139.134 ±    652.386  ns/op
SiteBenchmark.both                    BOOPICKLE        _64_K  avgt    5    245444.460 ±  14166.258  ns/op
SiteBenchmark.both                     JSONITER         _1_K  avgt    5      6486.869 ±     17.621  ns/op
SiteBenchmark.both                     JSONITER         _2_K  avgt    5     13211.096 ±     34.244  ns/op
SiteBenchmark.both                     JSONITER         _4_K  avgt    5     25082.946 ±     71.883  ns/op
SiteBenchmark.both                     JSONITER         _8_K  avgt    5     47874.410 ±    635.087  ns/op
SiteBenchmark.both                     JSONITER        _64_K  avgt    5    383602.010 ±  15120.463  ns/op
SiteBenchmark.both                        CIRCE         _1_K  avgt    5     40969.681 ±   1256.907  ns/op
SiteBenchmark.both                        CIRCE         _2_K  avgt    5     74973.249 ±   4173.601  ns/op
SiteBenchmark.both                        CIRCE         _4_K  avgt    5    170488.832 ±   4173.945  ns/op
SiteBenchmark.both                        CIRCE         _8_K  avgt    5    372411.166 ±  11152.821  ns/op
SiteBenchmark.both                        CIRCE        _64_K  avgt    5   3038651.527 ±  55053.704  ns/op
SiteBenchmark.deserialization              JSON         _1_K  avgt    5      8997.732 ±    232.674  ns/op
SiteBenchmark.deserialization              JSON         _2_K  avgt    5     16699.466 ±    206.358  ns/op
SiteBenchmark.deserialization              JSON         _4_K  avgt    5     31369.435 ±    434.271  ns/op
SiteBenchmark.deserialization              JSON         _8_K  avgt    5     64956.897 ±   1461.241  ns/op
SiteBenchmark.deserialization              JSON        _64_K  avgt    5    513942.471 ±  12457.469  ns/op
SiteBenchmark.deserialization              CBOR         _1_K  avgt    5      7624.403 ±    113.095  ns/op
SiteBenchmark.deserialization              CBOR         _2_K  avgt    5     13646.379 ±    248.576  ns/op
SiteBenchmark.deserialization              CBOR         _4_K  avgt    5     24345.464 ±    835.178  ns/op
SiteBenchmark.deserialization              CBOR         _8_K  avgt    5     52594.938 ±    587.213  ns/op
SiteBenchmark.deserialization              CBOR        _64_K  avgt    5    429767.836 ±  10825.999  ns/op
SiteBenchmark.deserialization             SMILE         _1_K  avgt    5      8437.796 ±    251.179  ns/op
SiteBenchmark.deserialization             SMILE         _2_K  avgt    5     13751.943 ±    280.375  ns/op
SiteBenchmark.deserialization             SMILE         _4_K  avgt    5     24915.065 ±    683.114  ns/op
SiteBenchmark.deserialization             SMILE         _8_K  avgt    5     47850.130 ±   2501.386  ns/op
SiteBenchmark.deserialization             SMILE        _64_K  avgt    5    364695.492 ±   8192.102  ns/op
SiteBenchmark.deserialization          SCALA_PB         _1_K  avgt    5      2186.517 ±     50.194  ns/op
SiteBenchmark.deserialization          SCALA_PB         _2_K  avgt    5      4499.621 ±    157.887  ns/op
SiteBenchmark.deserialization          SCALA_PB         _4_K  avgt    5      8242.407 ±    223.114  ns/op
SiteBenchmark.deserialization          SCALA_PB         _8_K  avgt    5     15594.121 ±    511.216  ns/op
SiteBenchmark.deserialization          SCALA_PB        _64_K  avgt    5    111521.583 ±   2368.390  ns/op
SiteBenchmark.deserialization           JAVA_PB         _1_K  avgt    5      5044.228 ±    102.264  ns/op
SiteBenchmark.deserialization           JAVA_PB         _2_K  avgt    5      8099.483 ±    110.756  ns/op
SiteBenchmark.deserialization           JAVA_PB         _4_K  avgt    5     13392.093 ±    500.376  ns/op
SiteBenchmark.deserialization           JAVA_PB         _8_K  avgt    5     27309.964 ±    492.988  ns/op
SiteBenchmark.deserialization           JAVA_PB        _64_K  avgt    5    201819.020 ±   9373.846  ns/op
SiteBenchmark.deserialization       JAVA_THRIFT         _1_K  avgt    5      4501.999 ±    126.770  ns/op
SiteBenchmark.deserialization       JAVA_THRIFT         _2_K  avgt    5      6275.103 ±    287.689  ns/op
SiteBenchmark.deserialization       JAVA_THRIFT         _4_K  avgt    5     10830.698 ±    177.591  ns/op
SiteBenchmark.deserialization       JAVA_THRIFT         _8_K  avgt    5     24032.845 ±    526.855  ns/op
SiteBenchmark.deserialization       JAVA_THRIFT        _64_K  avgt    5    176952.924 ±   4011.541  ns/op
SiteBenchmark.deserialization      SERIALIZABLE         _1_K  avgt    5     96307.531 ±    993.652  ns/op
SiteBenchmark.deserialization      SERIALIZABLE         _2_K  avgt    5    130527.001 ±   1213.405  ns/op
SiteBenchmark.deserialization      SERIALIZABLE         _4_K  avgt    5    159528.364 ±   2585.574  ns/op
SiteBenchmark.deserialization      SERIALIZABLE         _8_K  avgt    5    221515.560 ±   3020.267  ns/op
SiteBenchmark.deserialization      SERIALIZABLE        _64_K  avgt    5   1090297.085 ±  23316.793  ns/op
SiteBenchmark.deserialization         BOOPICKLE         _1_K  avgt    5      2011.571 ±     39.349  ns/op
SiteBenchmark.deserialization         BOOPICKLE         _2_K  avgt    5      3923.106 ±     46.788  ns/op
SiteBenchmark.deserialization         BOOPICKLE         _4_K  avgt    5      6981.338 ±    238.448  ns/op
SiteBenchmark.deserialization         BOOPICKLE         _8_K  avgt    5     13073.237 ±    320.938  ns/op
SiteBenchmark.deserialization         BOOPICKLE        _64_K  avgt    5    120778.816 ±   2798.676  ns/op
SiteBenchmark.deserialization          JSONITER         _1_K  avgt    5      3977.312 ±    191.586  ns/op
SiteBenchmark.deserialization          JSONITER         _2_K  avgt    5      8272.997 ±     41.115  ns/op
SiteBenchmark.deserialization          JSONITER         _4_K  avgt    5     16489.863 ±    465.362  ns/op
SiteBenchmark.deserialization          JSONITER         _8_K  avgt    5     31319.666 ±    288.989  ns/op
SiteBenchmark.deserialization          JSONITER        _64_K  avgt    5    240658.148 ±   6662.237  ns/op
SiteBenchmark.deserialization             CIRCE         _1_K  avgt    5     22757.539 ±    187.238  ns/op
SiteBenchmark.deserialization             CIRCE         _2_K  avgt    5     39784.634 ±    366.723  ns/op
SiteBenchmark.deserialization             CIRCE         _4_K  avgt    5     92486.302 ±   3236.498  ns/op
SiteBenchmark.deserialization             CIRCE         _8_K  avgt    5    208022.169 ±   2880.266  ns/op
SiteBenchmark.deserialization             CIRCE        _64_K  avgt    5   1615945.184 ±  37720.651  ns/op
SiteBenchmark.serialization                JSON         _1_K  avgt    5      5822.453 ±    103.830  ns/op
SiteBenchmark.serialization                JSON         _2_K  avgt    5     11673.173 ±    317.909  ns/op
SiteBenchmark.serialization                JSON         _4_K  avgt    5     21292.283 ±    783.881  ns/op
SiteBenchmark.serialization                JSON         _8_K  avgt    5     39384.013 ±    475.879  ns/op
SiteBenchmark.serialization                JSON        _64_K  avgt    5    301697.468 ±   2474.812  ns/op
SiteBenchmark.serialization                CBOR         _1_K  avgt    5      3432.119 ±     53.462  ns/op
SiteBenchmark.serialization                CBOR         _2_K  avgt    5      6694.492 ±     37.915  ns/op
SiteBenchmark.serialization                CBOR         _4_K  avgt    5     13513.919 ±    197.119  ns/op
SiteBenchmark.serialization                CBOR         _8_K  avgt    5     25071.519 ±    320.884  ns/op
SiteBenchmark.serialization                CBOR        _64_K  avgt    5    215175.320 ±   2115.514  ns/op
SiteBenchmark.serialization               SMILE         _1_K  avgt    5      4367.650 ±     59.825  ns/op
SiteBenchmark.serialization               SMILE         _2_K  avgt    5      8177.655 ±     66.213  ns/op
SiteBenchmark.serialization               SMILE         _4_K  avgt    5     15313.160 ±    220.030  ns/op
SiteBenchmark.serialization               SMILE         _8_K  avgt    5     27947.314 ±    168.343  ns/op
SiteBenchmark.serialization               SMILE        _64_K  avgt    5    213854.900 ±   1832.775  ns/op
SiteBenchmark.serialization            SCALA_PB         _1_K  avgt    5      6635.671 ±     69.204  ns/op
SiteBenchmark.serialization            SCALA_PB         _2_K  avgt    5     13413.346 ±     56.850  ns/op
SiteBenchmark.serialization            SCALA_PB         _4_K  avgt    5     18288.049 ±    121.945  ns/op
SiteBenchmark.serialization            SCALA_PB         _8_K  avgt    5     28324.181 ±    256.742  ns/op
SiteBenchmark.serialization            SCALA_PB        _64_K  avgt    5    163946.618 ±   3326.189  ns/op
SiteBenchmark.serialization             JAVA_PB         _1_K  avgt    5      2799.113 ±     32.787  ns/op
SiteBenchmark.serialization             JAVA_PB         _2_K  avgt    5      5000.625 ±    110.029  ns/op
SiteBenchmark.serialization             JAVA_PB         _4_K  avgt    5      8395.521 ±     83.927  ns/op
SiteBenchmark.serialization             JAVA_PB         _8_K  avgt    5     17824.840 ±    186.293  ns/op
SiteBenchmark.serialization             JAVA_PB        _64_K  avgt    5    143076.930 ±   8020.167  ns/op
SiteBenchmark.serialization         JAVA_THRIFT         _1_K  avgt    5      4711.872 ±    146.594  ns/op
SiteBenchmark.serialization         JAVA_THRIFT         _2_K  avgt    5      9297.890 ±     64.690  ns/op
SiteBenchmark.serialization         JAVA_THRIFT         _4_K  avgt    5     19150.429 ±    229.619  ns/op
SiteBenchmark.serialization         JAVA_THRIFT         _8_K  avgt    5     39814.460 ±    678.649  ns/op
SiteBenchmark.serialization         JAVA_THRIFT        _64_K  avgt    5    376705.756 ±  12185.164  ns/op
SiteBenchmark.serialization        SERIALIZABLE         _1_K  avgt    5     26554.616 ±    430.806  ns/op
SiteBenchmark.serialization        SERIALIZABLE         _2_K  avgt    5     40932.799 ±   1743.586  ns/op
SiteBenchmark.serialization        SERIALIZABLE         _4_K  avgt    5     57006.933 ±    991.668  ns/op
SiteBenchmark.serialization        SERIALIZABLE         _8_K  avgt    5    116623.051 ±   1815.273  ns/op
SiteBenchmark.serialization        SERIALIZABLE        _64_K  avgt    5    939553.286 ±  17560.898  ns/op
SiteBenchmark.serialization           BOOPICKLE         _1_K  avgt    5      2416.873 ±     62.789  ns/op
SiteBenchmark.serialization           BOOPICKLE         _2_K  avgt    5      3763.841 ±     43.914  ns/op
SiteBenchmark.serialization           BOOPICKLE         _4_K  avgt    5      6267.873 ±    297.897  ns/op
SiteBenchmark.serialization           BOOPICKLE         _8_K  avgt    5     12418.160 ±    378.224  ns/op
SiteBenchmark.serialization           BOOPICKLE        _64_K  avgt    5    119777.840 ±    663.300  ns/op
SiteBenchmark.serialization            JSONITER         _1_K  avgt    5      2141.102 ±     38.659  ns/op
SiteBenchmark.serialization            JSONITER         _2_K  avgt    5      4290.486 ±    121.637  ns/op
SiteBenchmark.serialization            JSONITER         _4_K  avgt    5      8323.153 ±    144.467  ns/op
SiteBenchmark.serialization            JSONITER         _8_K  avgt    5     14577.009 ±    405.492  ns/op
SiteBenchmark.serialization            JSONITER        _64_K  avgt    5    135971.763 ±   3695.209  ns/op
SiteBenchmark.serialization               CIRCE         _1_K  avgt    5     16811.629 ±    759.486  ns/op
SiteBenchmark.serialization               CIRCE         _2_K  avgt    5     32199.522 ±   1555.958  ns/op
SiteBenchmark.serialization               CIRCE         _4_K  avgt    5     71481.874 ±   3637.892  ns/op
SiteBenchmark.serialization               CIRCE         _8_K  avgt    5    164102.748 ±   4743.111  ns/op
SiteBenchmark.serialization               CIRCE        _64_K  avgt    5   1375744.160 ±  22060.233  ns/op

Benchmark result is saved to /static/data/charts/scala-serialization-2022/jdk17.json
