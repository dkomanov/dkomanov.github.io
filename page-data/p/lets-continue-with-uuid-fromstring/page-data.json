{"componentChunkName":"component---src-templates-blog-post-js","path":"/p/lets-continue-with-uuid-fromstring/","webpackCompilationHash":"9ce77ac5d7300494cd70","result":{"data":{"markdownRemark":{"id":"706c0129-99da-50d1-bea4-823b01ef0c28","excerpt":"I doubt a bit, but then I decided to try to submit a patch to JDK with\nthe performance improvement. I’ve read couple articles,\ncloned code and realized that…","html":"<p>I doubt a bit, but then I decided to try to submit a patch to JDK with\nthe performance improvement. I’ve read couple <a href=\"http://openjdk.java.net/contribute/\">articles</a>,\ncloned <a href=\"https://github.com/dkomanov/scala-junk/blob/master/src/main/scala/com/komanov/uuid/UuidJavaFinalUtils.java\">code</a> and realized that <em>fromString</em>\nimplementation has been changed in JDK9 :)</p>\n<p>The actual implementation of the <em>fromString</em> in JDK9 was\n<a href=\"http://hg.openjdk.java.net/jdk9/jdk9/jdk/rev/3b298c230549\">made</a> in the previous year\n(for this <a href=\"https://bugs.openjdk.java.net/browse/JDK-8006627\">issue</a>). So, let’s see what’s inside.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> <span class=\"token number\">36</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UUID string too large\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> dash1 <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dash2 <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> dash1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dash3 <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> dash2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dash4 <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> dash3 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> dash5 <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> dash4 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dash4 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> dash5 <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid UUID string: \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">long</span> mostSigBits <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> dash1<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0</span>xffffffffL<span class=\"token punctuation\">;</span>\nmostSigBits <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\nmostSigBits <span class=\"token operator\">|=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> dash1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dash2<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0</span>xffffL<span class=\"token punctuation\">;</span>\nmostSigBits <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\nmostSigBits <span class=\"token operator\">|=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> dash2 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dash3<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0</span>xffffL<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> leastSigBits <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> dash3 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> dash4<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0</span>xffffL<span class=\"token punctuation\">;</span>\nleastSigBits <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">48</span><span class=\"token punctuation\">;</span>\nleastSigBits <span class=\"token operator\">|=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> dash4 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0</span>xffffffffffffL<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token function\">UUID</span><span class=\"token punctuation\">(</span>mostSigBits<span class=\"token punctuation\">,</span> leastSigBits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As we can see, an implementation is almost like my implementation <a href=\"https://github.com/dkomanov/scala-junk/blob/master/src/main/scala/com/komanov/uuid/UuidJava3Utils.java\">Step 3</a>.\nIn JDK9 was introduced the overload of <em>parseLong</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> <span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> endIndex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radix<span class=\"token punctuation\">)</span></code></pre></div>\n<p>So, in the actual implementation of the <em>fromString</em> no allocation is performed\n(besides the creation of the new UUID class instance). And it should be ~2.5\ntimes faster than the previous implementation, or maybe even faster if JIT is\noptimizing JDKs code more aggressively.</p>\n<p>I think if I would submit an improvement by myself, I would make the same thing.\nBecause it’s strange to have specific implementation of generic functions\n<em>parseLong</em> and Character.<em>digit</em> just for this class (more code — more support,\nmore tests, more questions within a code review).</p>\n<p>The time table for JDK9 will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Version    | Avg time, ns | Gain to previous | Gain to original\nOriginal   |   130        | 0                | 0\nStep 0     |   548        | -418             | -418\nStep 1     |   529        |                  | -399\nStep 2     |   247        | 282 (53%)        | -117\nStep 3     |   126        | 121 (49%)        | 4 (1%)\nStep 4     |   101        | 25 (20%)         | 29 (22%)\nStep 5     |   109        | -8 (-8%)         | 21 (16%)\nFinal      |    78        | 31 (28%)         | 52 (40%)</code></pre></div>\n<p>Don’t forget, that performance in JDK9 will change many times prior to release\n(this test is performed with jdk-9-ea-bin-b91-linux-x64–04<em>nov</em>2015, the final\nrelease <a href=\"http://openjdk.java.net/projects/jdk9/\">will be</a> in September 2017). And after test\nyou may realize that the “final” solution is faster but not really faster, just 40%.</p>\n<p>Originally posted on <a href=\"https://medium.com/@dkomanov/let-s-continue-with-uuid-fromstring-5d65778e22c9\">Medium</a>.</p>","fields":{"slug":"/p/lets-continue-with-uuid-fromstring/"},"frontmatter":{"rawDate":"2015-11-16T00:00:00.000Z","date":"November 16, 2015","title":"Let’s continue with UUID.fromString","description":"Everything is invented before us: my attempt to contribute UUID.fromString to JDK9...","tags":["java","jdk9","performance"],"canonicalUrl":"https://medium.com/@dkomanov/let-s-continue-with-uuid-fromstring-5d65778e22c9","cover":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/p/lets-continue-with-uuid-fromstring/","previous":{"fields":{"slug":"/p/micro-optimization-for-uuid-fromstring-in-7-steps/"}},"next":{"fields":{"slug":"/p/scala-how-to-return-a-result-code-in-a-concise-way/"}}}}}