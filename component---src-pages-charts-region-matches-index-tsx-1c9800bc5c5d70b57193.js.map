{"version":3,"file":"component---src-pages-charts-region-matches-index-tsx-1c9800bc5c5d70b57193.js","mappings":"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","sources":["webpack://komanov.com/./src/pages/charts/region-matches/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'gatsby';\nimport { JmhBenchmarkRun } from '../../..';\nimport { ChartAndTable, JmhChartPage, TimeUnits } from '../../../components';\nimport { loadJson } from '../../../util';\n\nconst jdks = ['openjdk-17', 'openjdk-11', 'openjdk-8'];\n\ntype MethodName =\n  | 'regionMatches'\n  | 'substringEquals'\n  | 'startsWith'\n  | 'endsWith';\n\nconst xDesc = (values: MethodName[]) => {\n  return {\n    title: 'Method',\n    prop: 'what',\n    values,\n  };\n};\n\nconst yDesc = {\n  title: 'JDK',\n  prop: 'jdk',\n  values: jdks,\n};\n\nconst RegionMatchesImpl = ({ jmhList }: { jmhList: any }) => {\n  const [extractor, extractorSet] = useState({ func: null });\n\n  return (\n    <div className=\"markdown\">\n      <h3>Introduction</h3>\n\n      <p>\n        Here are benchmarking results for{' '}\n        <Link to=\"/p/benchmarking-string-regionmatches\">\n          &laquo;Benchmarking String.regionMatches&raquo;\n        </Link>{' '}\n        blog post.\n      </p>\n\n      <p>\n        The performance tests are performed via{' '}\n        <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">JMH</a>. The\n        configuration of a hardware is Intel® Core™ i7-1165G7 @ 2.80GHz × 8 (4\n        core + 4 HT) with 16 GB RAM.\n      </p>\n\n      <h3>Charts</h3>\n\n      <TimeUnits onChange={(func: any) => extractorSet({ func })} />\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.where === 'begin'}\n        title=\"Matching at the beginning of the string, nanos\"\n        xDesc={xDesc(['regionMatches', 'substringEquals', 'startsWith'])}\n        yDesc={yDesc}\n      />\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.where === 'end'}\n        title=\"Matching at the end of the string, nanos\"\n        xDesc={xDesc(['regionMatches', 'substringEquals', 'endsWith'])}\n        yDesc={yDesc}\n      />\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.where === 'middle'}\n        title=\"Matching in the middle, nanos\"\n        xDesc={xDesc(['regionMatches', 'substringEquals'])}\n        yDesc={yDesc}\n      />\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.where === 'middle2Sides'}\n        title=\"Matching in the middle (substring for needle), nanos\"\n        xDesc={xDesc(['regionMatches', 'substringEquals'])}\n        yDesc={yDesc}\n      />\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        title=\"Everything in a single chart, nanos\"\n        xDesc={{\n          title: 'Method',\n          prop: 'method',\n          values: [\n            'begin_regionMatches',\n            'begin_substringEquals',\n            'begin_startsWith',\n            'middle_regionMatches',\n            'middle_substringEquals',\n            'middle2Sides_regionMatches',\n            'middle2Sides_substringEquals',\n            'end_regionMatches',\n            'end_substringEquals',\n            'end_endsWith',\n          ],\n        }}\n        yDesc={yDesc}\n      />\n\n      <p>\n        Full JMH logs:{' '}\n        <a href={`/data/charts/region-matches/jdk8.log.txt`}>openjdk-8</a>,{' '}\n        <a href={`/data/charts/region-matches/jdk11.log.txt`}>openjdk-11</a>,{' '}\n        <a href={`/data/charts/region-matches/jdk17.log.txt`}>openjdk-17</a>.\n      </p>\n    </div>\n  );\n};\n\nfunction exportDimensions(benchmark: string, params: any) {\n  //'com.komanov.str.jmh.RegionMatchesBenchmarks.begin_regionMatches'\n\n  const method = benchmark.substring(benchmark.lastIndexOf('.') + 1);\n  const [where, what, ...other] = method.split('_');\n  if (!where || !what || other.length > 0) {\n    throw new Error('Expected 2 parts in a benchmark: ' + benchmark);\n  }\n\n  const { jdk } = params;\n\n  return {\n    method,\n    what,\n    where,\n    jdk,\n  };\n}\n\nconst fetchAndCombineResults = () => {\n  return Promise.all([\n    loadJson('/data/charts/region-matches/jdk8.json'),\n    loadJson('/data/charts/region-matches/jdk11.json'),\n    loadJson('/data/charts/region-matches/jdk17.json'),\n  ]).then((values: any[]) => {\n    function setJdk(index: number, jdk: string) {\n      const list: JmhBenchmarkRun[] = values[index].data;\n      list.forEach((v) => (v.params = { jdk }));\n      return list;\n    }\n\n    return {\n      data: [\n        ...setJdk(0, 'openjdk-8'),\n        ...setJdk(1, 'openjdk-11'),\n        ...setJdk(2, 'openjdk-17'),\n      ],\n    };\n  });\n};\n\nconst RegionMatches = JmhChartPage(RegionMatchesImpl, {\n  fetchFunc: fetchAndCombineResults,\n  exportDimensionsFunc: exportDimensions,\n  headerText: 'Benchmarking String.regionMatches (Charts)',\n});\n\nexport default RegionMatches;\n"],"names":["xDesc","values","title","prop","yDesc","RegionMatches","JmhChartPage","jmhList","useState","func","extractor","extractorSet","React","className","Link","to","href","TimeUnits","onChange","ChartAndTable","dataTable","filter","p","where","fetchFunc","Promise","all","loadJson","then","setJdk","index","jdk","list","data","forEach","v","params","exportDimensionsFunc","benchmark","method","substring","lastIndexOf","split","what","other","length","Error","headerText"],"sourceRoot":""}