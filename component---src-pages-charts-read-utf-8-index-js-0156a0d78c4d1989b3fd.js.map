{"version":3,"sources":["webpack:///./src/pages/charts/read-utf8/index.js"],"names":["runs","date","comment","currentRunDate","xDesc","title","prop","values","name","value","yDesc","map","v","toString","CharacterTypes","props","items","label","default","render","onChange","this","React","Component","ReadLinesImpl","handleRunChange","refetch","state","extractor","inputType","show10k","jmhList","href","setState","chartType","dataTable","filter","d","lineLength","ReadUtf8","JmhChartPage","fetchFunc","loadJson","exportDimensionsFunc","benchmark","params","split","method","otherBenchmark","length","Error","headerText"],"mappings":"sPAIA,IAAMA,EAAO,CACX,CACEC,KAAM,aACNC,QACE,4BACE,gEAIJC,EAAiBH,EAAK,GAAGC,KAEvBG,EAAQ,CACZC,MAAO,SACPC,KAAM,SACNC,OAAQ,CACN,CACEC,KAAM,iBACNC,MAAO,WAET,CACED,KAAM,eACNC,MAAO,qBAET,CACED,KAAM,sBACNC,MAAO,uBAET,CACED,KAAM,yBACNC,MAAO,uBAET,CACED,KAAM,wBACNC,MAAO,sBAET,CACED,KAAM,gCACNC,MAAO,8BAET,CACED,KAAM,+BACNC,MAAO,6BAET,CACED,KAAM,yCACNC,MAAO,uCAET,CACED,KAAM,wCACNC,MAAO,wCAKPC,EAAQ,CACZL,MAAO,cACPC,KAAM,aACNC,OAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,KAAOI,KAAI,SAAAC,GAAC,OAAIA,EAAEC,SAAS,QAGrDC,E,YACJ,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAEKC,MAAQ,CACX,CACEC,MAAO,aACPR,MAAO,SAET,CACEQ,MAAO,mBACPR,MAAO,oBAET,CACEQ,MAAO,YACPR,MAAO,QACPS,SAAS,IAfI,E,0BAoBnBC,OAAA,WAAU,IACDC,EAAYC,KAAKN,MAAjBK,SACP,OACE,kBAAC,IAAD,CAAQH,MAAM,eAAeG,SAAUA,EAAUJ,MAAOK,KAAKL,S,GAxBtCM,IAAMC,WA6B7BC,E,YACJ,WAAYT,GAAQ,IAAD,SACjB,cAAMA,IAAN,MA4DFU,gBAAkB,SAAAxB,GAChBE,EAAiBF,EACjB,EAAKc,MAAMW,WA5DX,EAAKC,MAAQ,GAHI,E,0BAMnBR,OAAA,WAAU,IAAD,SACiCE,KAAKM,MAAtCC,EADA,EACAA,UAAWC,EADX,EACWA,UAAWC,EADtB,EACsBA,QACtBC,EAAWV,KAAKN,MAAhBgB,QAEP,OACE,6BACE,4CAEA,0HAC2G,IAD3G,iGAE6G,IAF7G,6DAMA,mHAEM,uBAAGC,KAAK,oDAAR,OAFN,gHAMA,kBAAC,IAAD,CAAWhC,KAAMA,EAAMoB,SAAUC,KAAKI,kBACtC,kBAAC,IAAD,CAAWL,SAAU,SAAAQ,GAAS,OAAI,EAAKK,SAAS,CAACL,iBACjD,kBAACd,EAAD,CAAgBM,SAAU,SAAAS,GAAS,OAAI,EAAKI,SAAS,CAACJ,iBACtD,kBAAC,IAAD,CAAQZ,MAAM,WAAWD,MAAO,CAC9B,CACEC,MAAO,MACPR,OAAO,GAET,CACEQ,MAAO,KACPR,OAAO,EACPS,SAAS,IAEVE,SAAU,SAAAU,GAAO,OAAI,EAAKG,SAAS,CAACH,eAEvC,qCAEA,kBAAC,IAAD,CACEI,UAAU,MACVC,UAAWJ,EACXH,UAAWA,EACXQ,OAAQ,SAAAC,GAAC,OAAIA,EAAER,YAAcA,IAA+B,UAAjBQ,EAAEC,YAA0BR,IACvEzB,MAAM,cACND,MAAOA,EACPM,MAAOA,IAGT,8CACkB,uBAAGsB,KAAI,8BAAgC7B,EAAhC,YAAP,QADlB,O,GAtDoBmB,IAAMC,WAmFlC,IAAMgB,EAAWC,YACfhB,EACA,CACEiB,UAAW,kBAAMC,YAAS,8BAA8BvC,EAA/B,UACzBwC,qBAnBJ,SAA0BC,EAAWC,GAAQ,MAGLD,EAAUE,MAAM,sBAA7CC,EAHkC,KAGvBC,EAHuB,WAI3C,IAAKD,GAAUC,EAAeC,OAAS,EACrC,MAAM,IAAIC,MAAM,oCAAsCN,GAGxD,MAAO,CACLG,SACAlB,UAAWgB,EAAOhB,UAClBS,WAAYO,EAAOP,aASnBa,WAAY,kDAIDZ","file":"component---src-pages-charts-read-utf-8-index-js-0156a0d78c4d1989b3fd.js","sourcesContent":["import React from 'react';\nimport {Changelog, ChartAndTable, Choose, JmhChartPage, TimeUnits} from '../../../components';\nimport {loadJson} from '../../../util';\n\nconst runs = [\n  {\n    date: '2017-12-25',\n    comment:\n      <ul>\n        <li>Initial version of benchmark.</li>\n      </ul>,\n  },\n];\nlet currentRunDate = runs[0].date;\n\nconst xDesc = {\n  title: 'Method',\n  prop: 'method',\n  values: [\n    {\n      name: 'Charset.decode',\n      value: 'charset',\n    },\n    {\n      name: 'localMethods',\n      value: 'localMethodsScala',\n    },\n    {\n      name: 'localMethodsIndices',\n      value: 'localMethodsIndices',\n    },\n    {\n      name: 'sequentialLoop (Scala)',\n      value: 'sequentialLoopScala',\n    },\n    {\n      name: 'sequentialLoop (Java)',\n      value: 'sequentialLoopJava',\n    },\n    {\n      name: 'changeIndexInsideLoop (Scala)',\n      value: 'changeIndexInsideLoopScala',\n    },\n    {\n      name: 'changeIndexInsideLoop (Java)',\n      value: 'changeIndexInsideLoopJava',\n    },\n    {\n      name: 'changeIndexInsideLoopByteMagic (Scala)',\n      value: 'changeIndexInsideLoopByteMagicScala',\n    },\n    {\n      name: 'changeIndexInsideLoopByteMagic (Java)',\n      value: 'changeIndexInsideLoopByteMagicJava',\n    },\n  ],\n};\n\nconst yDesc = {\n  title: 'Line Length',\n  prop: 'lineLength',\n  values: [0, 1, 2, 5, 10, 100, 10000].map(v => v.toString(10)),\n};\n\nclass CharacterTypes extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.items = [\n      {\n        label: 'ASCII only',\n        value: 'ASCII',\n      },\n      {\n        label: 'Single char only',\n        value: 'SINGLE_CHAR_ONLY',\n      },\n      {\n        label: 'All chars',\n        value: 'MIXED',\n        default: true,\n      },\n    ];\n  }\n\n  render() {\n    const {onChange} = this.props;\n    return (\n      <Choose label=\"Characters: \" onChange={onChange} items={this.items}/>\n    );\n  }\n}\n\nclass ReadLinesImpl extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    const {extractor, inputType, show10k} = this.state;\n    const {jmhList} = this.props;\n\n    return (\n      <div>\n        <h3>Introduction</h3>\n\n        <p>\n          The legend for tests. &laquo;Line Length&raquo; is amount of Unicode-symbols (do not confuse with char),{' '}\n          &laquo;Characters&raquo; is typo of characters in string: ASCII (single byte for UTF-8), single chars only{' '}\n          (all symbols represented as a single char) and all chars.\n        </p>\n\n        <p>\n          Please notice, that unlike the article, here the performance tests are performed\n          via <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">JMH</a>.\n          The configuration of a hardware is Intel® Core™ i7–5600U CPU @ 2.60GHz × 4 (2 core + 2 HT) with 16 GB RAM.\n        </p>\n\n        <Changelog runs={runs} onChange={this.handleRunChange}/>\n        <TimeUnits onChange={extractor => this.setState({extractor})}/>\n        <CharacterTypes onChange={inputType => this.setState({inputType})}/>\n        <Choose label=\"Show 10k\" items={[\n          {\n            label: 'Yes',\n            value: true,\n          },\n          {\n            label: 'No',\n            value: false,\n            default: true,\n          },\n        ]} onChange={show10k => this.setState({show10k})}/>\n\n        <h3>Chart</h3>\n\n        <ChartAndTable\n          chartType=\"Bar\"\n          dataTable={jmhList}\n          extractor={extractor}\n          filter={d => d.inputType === inputType && (d.lineLength !== '10000' || show10k)}\n          title=\"time, nanos\"\n          xDesc={xDesc}\n          yDesc={yDesc}\n        />\n\n        <p>\n          Full JMH log is <a href={`/data/charts/read-utf8/jmh_${currentRunDate}.log.txt`}>here</a>.\n        </p>\n\n      </div>\n    );\n  }\n\n  handleRunChange = date => {\n    currentRunDate = date;\n    this.props.refetch();\n  };\n}\n\nfunction exportDimensions(benchmark, params) {\n  //'com.komanov.readlines.jmh.ReadUtf8Benchmark.changeIndexInsideLoopByteMagicJava'\n\n  const [, method, ...otherBenchmark] = benchmark.split('ReadUtf8Benchmark.');\n  if (!method || otherBenchmark.length > 0) {\n    throw new Error('Expected 2 parts in a benchmark: ' + benchmark);\n  }\n\n  return {\n    method,\n    inputType: params.inputType,\n    lineLength: params.lineLength,\n  };\n}\n\nconst ReadUtf8 = JmhChartPage(\n  ReadLinesImpl,\n  {\n    fetchFunc: () => loadJson(`/data/charts/read-utf8/jmh_${currentRunDate}.json`),\n    exportDimensionsFunc: exportDimensions,\n    headerText: 'Exploring UTF-8 Decoding Performance (Charts)',\n  },\n);\n\nexport default ReadUtf8;\n"],"sourceRoot":""}