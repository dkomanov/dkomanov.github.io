{"componentChunkName":"component---src-templates-blog-post-js","path":"/p/small-design-issues/","webpackCompilationHash":"46ba80ba06f542f28baf","result":{"data":{"markdownRemark":{"id":"ec77c482-c4ec-5644-bbe0-0531fbbf2a1e","excerpt":"Recently I’ve found that I cannot use anonymous matching function with specs2\nMockito’s answers function. I wanted to do something like this: But compiler…","html":"<p>Recently I’ve found that I cannot use anonymous matching function with specs2\nMockito’s <a href=\"https://etorreborre.github.io/specs2/guide/SPECS2-3.6.1/org.specs2.guide.UseMockito.html#callbacks\">answers</a> function. I wanted to do something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">mock<span class=\"token punctuation\">.</span>getValue<span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">)</span> answers <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">case</span> i<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">=></span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But compiler issued an error that argument type of anonymous function should be\nfully known. A small “investigation” showed that answers function has 2 overloads:\nAny => T and (Any, Any) => T. In this case the only thing you may do it’s use\nregular pattern matching:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">mock<span class=\"token punctuation\">.</span>getValue<span class=\"token punctuation\">(</span>any<span class=\"token punctuation\">)</span> answers <span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">case</span> i<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token keyword\">=></span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And it could be the end of a story but IDEA highlighted it with a warning/suggestion\nto convert it to an anonymous pattern matching function. After conversion I’ve got\nthe same non-compilable code. So I decided to <a href=\"https://github.com/etorreborre/specs2/pull/388\">introduce</a> a new method (responds)\nto a specs2 Mockito library that allow me to use anonymous p-m function.\nAnd in a couple days it was merged.</p>\n<p>It’s hard to predict how your library will be used. An overloading always\nseemed to me as a good and pretty thing. But in Scala world it could be not so\ngood as in Java/C#/C++ worlds. And thanks to IDEA’s bug that forced me to\ncontribute a little to specs2 :)</p>\n<p>Related links:</p>\n<ul>\n<li><a href=\"https://etorreborre.github.io/specs2/guide/SPECS2-3.6.1/org.specs2.guide.UseMockito.html#callbacks\">A documentation on mockito wrapper</a></li>\n<li><a href=\"https://github.com/etorreborre/specs2/pull/388\">Pull request to specs2 with responds method</a></li>\n<li><a href=\"https://youtrack.jetbrains.com/issue/SCL-8869\">IDEA inspection’s issue</a></li>\n<li><a href=\"https://pixabay.com/en/pisa-leaning-tower-of-pisa-tower-1998120/\">Cover image</a></li>\n</ul>","fields":{"slug":"/p/small-design-issues/"},"frontmatter":{"rawDate":"2015-09-10","date":"September 10, 2015","title":"Small design issues","description":"Learning about function overloading in Scala on a real case with specs2 Mockito wrapper...","tags":["scala","specs2","testing"],"canonicalUrl":null,"cover":{"publicURL":"/static/cover-7913f38b3d8df1d606abd2864717ad03.jpg"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/p/small-design-issues/","previous":{"fields":{"slug":"/p/about-ulpan/"}},"next":{"fields":{"slug":"/p/testing-asynchronous-code/"}}}}}