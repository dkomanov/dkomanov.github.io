{"version":3,"sources":["webpack:///./src/pages/charts/read-lines/index.js"],"names":["runs","date","comment","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","currentRunDate","currentHardDriveType","xDesc","title","prop","values","name","value","yDesc","map","v","toString","LineCounts","props","_this","_React$Component","call","this","items","label","default","render","onChange","_components__WEBPACK_IMPORTED_MODULE_6__","React","Component","HardDriveTypes","_this2","_React$Component2","CpuTokens","_this3","_React$Component3","parseInt","multiple","ReadLinesImpl","_this4","_React$Component4","handleRunChange","refetch","handleHardDriveTypeChange","hdt","state","_this5","_this$state","lineCount","cpuTokensMap","jmhList","href","setState","chartType","dataTable","extractor","pm","Math","floor","score","filter","d","cpuTokens","options","hAxis","logScale","ReadLines","JmhChartPage","fetchFunc","loadJson","exportDimensionsFunc","benchmark","params","_benchmark$split","split","method","otherBenchmark","slice","length","Error","headerText"],"mappings":"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","file":"component---src-pages-charts-read-lines-index-js-5e4066d3580ed7086ee0.js","sourcesContent":["import React from 'react';\nimport {Changelog, ChartAndTable, Choose, JmhChartPage} from '../../../components';\nimport {loadJson} from '../../../util';\n\nconst runs = [\n  {\n    date: '2017-12-17',\n    comment:\n      <ul>\n        <li>Initial version of benchmark.</li>\n      </ul>,\n  },\n];\nlet currentRunDate = runs[0].date;\nlet currentHardDriveType = 'ssd';\n\nconst xDesc = {\n  title: 'Method',\n  prop: 'method',\n  values: [\n    {\n      name: 'CPU only',\n      value: 'baseline',\n    },\n    {\n      name: 'Files.readAllLines',\n      value: 'filesReadLines',\n    },\n    {\n      name: 'Files.readAllBytes',\n      value: 'filesReadBytes',\n    },\n    {\n      name: 'Files.readAllBytes2',\n      value: 'filesReadBytes2',\n    },\n    {\n      name: 'BufferedReader inline',\n      value: 'forEachInline',\n    },\n    {\n      name: 'BufferedReader func',\n      value: 'forEachIndirect',\n    },\n    {\n      name: 'Files.lines',\n      value: 'forEachJava',\n    },\n  ],\n};\n\nconst yDesc = {\n  title: 'CPU cycles',\n  prop: 'cpuTokens',\n  values: [0, 10, 25, 50, 100, 250, 500, 1000].map(v => v.toString(10)),\n};\n\nclass LineCounts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // \"1\", \"10\", \"100\", \"1000\", \"10000\", \"100000\", \"1000000\"\n    this.items = [1, 10, 100, 1000, 10000, 100000, 1000000].map(v => {\n      return {\n        label: v.toString(10),\n        value: v,\n        default: v === 1000,\n      };\n    });\n  }\n\n  render() {\n    const {onChange} = this.props;\n    return (\n      <Choose label=\"Line count: \" onChange={onChange} items={this.items}/>\n    );\n  }\n}\n\nclass HardDriveTypes extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.items = [\n      {\n        label: 'SSD',\n        value: 'ssd',\n        default: true,\n      },\n      {\n        label: 'HDD',\n        value: 'hdd',\n      },\n    ];\n  }\n\n  render() {\n    const {onChange} = this.props;\n    return (\n      <Choose label=\"Hard Drive Type: \" onChange={onChange} items={this.items}/>\n    );\n  }\n}\n\nclass CpuTokens extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.items = yDesc.values.map(v => {\n      return {\n        label: v,\n        value: v,\n        default: parseInt(v, 10) <= 100,\n      };\n    });\n  }\n\n  render() {\n    const {onChange} = this.props;\n    return (\n      <Choose multiple label=\"CPU cycles: \" onChange={onChange} items={this.items}/>\n    );\n  }\n}\n\nclass ReadLinesImpl extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  render() {\n    const {lineCount, cpuTokensMap} = this.state;\n    const {jmhList} = this.props;\n\n    return (\n      <div>\n        <h3>Introduction</h3>\n\n        <p>\n          The legend for tests. &laquo;Line count&raquo; is how many lines of different size are in a file,{' '}\n          &laquo;CPU cycles&raquo; is how many abstract cycles spent for each line (modeling file processing).\n        </p>\n\n        <p>\n          Please notice, that unlike the article, here the performance tests are performed\n          via <a href=\"http://openjdk.java.net/projects/code-tools/jmh/\">JMH</a>.\n          The configuration of a hardware is Intel® Core™ i7–5600U CPU @ 2.60GHz × 4 (2 core + 2 HT) with 16 GB RAM.\n        </p>\n\n        <Changelog runs={runs} onChange={this.handleRunChange}/>\n        <HardDriveTypes onChange={this.handleHardDriveTypeChange}/>\n        <LineCounts onChange={lineCount => this.setState({lineCount})}/>\n        <CpuTokens onChange={cpuTokensMap => this.setState({cpuTokensMap})}/>\n\n        <h3>Chart</h3>\n\n        <ChartAndTable\n          chartType=\"Bar\"\n          dataTable={jmhList}\n          extractor={pm => Math.floor(pm.score / 1000)}\n          filter={d => d.lineCount === lineCount && cpuTokensMap[d.cpuTokens] === true}\n          title=\"time, usec\"\n          xDesc={xDesc}\n          yDesc={yDesc}\n          options={{\n            hAxis: {\n              logScale: false,\n            },\n          }}\n        />\n\n        <p>\n          Full JMH log is <a href={`/data/charts/read-lines/jmh_${currentRunDate}.log.txt`}>here</a>.\n        </p>\n\n      </div>\n    );\n  }\n\n  handleRunChange = date => {\n    currentRunDate = date;\n    this.props.refetch();\n  };\n\n  handleHardDriveTypeChange = hdt => {\n    currentHardDriveType = hdt;\n    this.props.refetch();\n  };\n}\n\nfunction exportDimensions(benchmark, params) {\n  //'com.komanov.readlines.jmh.ReadLinesBenchmark.forEachIndirect'\n\n  const [, method, ...otherBenchmark] = benchmark.split('ReadLinesBenchmark.');\n  if (!method || otherBenchmark.length > 0) {\n    throw new Error('Expected 2 parts in a benchmark: ' + benchmark);\n  }\n\n  return {\n    method,\n    cpuTokens: params.cpuTokens,\n    lineCount: parseInt(params.lineCount, 10),\n  };\n}\n\nconst ReadLines = JmhChartPage(\n  ReadLinesImpl,\n  {\n    fetchFunc: () => loadJson(`/data/charts/read-lines/jmh_${currentRunDate}_${currentHardDriveType}.json`),\n    exportDimensionsFunc: exportDimensions,\n    headerText: 'Exploring readLine Performance (Charts)',\n  },\n);\n\nexport default ReadLines;\n"],"sourceRoot":""}