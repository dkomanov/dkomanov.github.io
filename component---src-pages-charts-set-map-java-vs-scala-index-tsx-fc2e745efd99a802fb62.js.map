{"version":3,"file":"component---src-pages-charts-set-map-java-vs-scala-index-tsx-fc2e745efd99a802fb62.js","mappings":"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","sources":["webpack://komanov.com/./src/pages/charts/set-map-java-vs-scala/index.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'gatsby';\nimport { JmhBenchmarkRun } from '../../..';\nimport {\n  ChartAndTable,\n  Choose,\n  JmhChartComponentProps,\n  JmhChartPage,\n  TimeUnits,\n} from '../../../components';\nimport { loadJson } from '../../../util';\n\ntype ScalaVersion = '2.12' | '2.13';\ntype ScalaVersionDir = '2-12' | '2-13';\ntype JdkVersion = 'openjdk-17' | 'openjdk-11' | 'openjdk-8';\nconst jdks: JdkVersion[] = ['openjdk-17', 'openjdk-11', 'openjdk-8'];\nconst scalas: ScalaVersion[] = ['2.12', '2.13'];\n\nconst xDesc = (kind: 'Set' | 'Map') => {\n  return {\n    title: 'Collection',\n    prop: 'method',\n    values: [\n      {\n        name: `java.util.Hash${kind}`,\n        value: `java${kind}`,\n      },\n      {\n        name: `WrappedHash${kind}`,\n        value: `javaWrapped${kind}`,\n      },\n      {\n        name: `immutable.${kind}`,\n        value: `scala${kind}`,\n      },\n      {\n        name: `mutable.${kind}`,\n        value: `scalaMutable${kind}`,\n      },\n    ],\n  };\n};\n\nconst yDesc = {\n  title: 'JDK',\n  prop: 'jdk',\n  values: jdks,\n};\n\nconst yDescScala = {\n  title: 'scala version',\n  prop: 'scala',\n  values: scalas,\n};\n\nconst SetMapJavaVsScalaImpl = ({ jmhList }: JmhChartComponentProps) => {\n  const [scalaVersion, scalaVersionSet] = useState<ScalaVersion>('2.13');\n  const [size, sizeSet] = useState('1000000');\n  const [extractor, extractorSet] = useState({ func: null });\n\n  return (\n    <div className=\"markdown\">\n      <h3>Introduction</h3>\n\n      <p>\n        Here are benchmarking results for{' '}\n        <Link to=\"/p/map-performance-java-vs-scala\">\n          &laquo;Map Performance: Java vs Scala&raquo;\n        </Link>{' '}\n        blog post.\n      </p>\n\n      <p>\n        The performance tests are performed via{' '}\n        <a href=\"https://github.com/openjdk/jmh\">JMH</a>. The configuration of a\n        hardware is Intel® Core™ i7-1165G7 @ 2.80GHz × 8 (4 core + 4 HT) with 16\n        GB RAM.\n      </p>\n\n      <h3>Charts</h3>\n\n      <Choose\n        label=\"Collection size:\"\n        items={[\n          {\n            label: '1000',\n            value: '1000',\n          },\n          {\n            label: '10000',\n            value: '10000',\n          },\n          {\n            label: '100000',\n            value: '100000',\n          },\n          {\n            label: '1000000',\n            value: '1000000',\n            default: true,\n          },\n        ]}\n        onChange={(value: string) => sizeSet(value)}\n      />\n      <Choose\n        label=\"Scala version:\"\n        items={scalas.map((v) => ({\n          label: v,\n          value: v,\n          default: v === '2.13',\n        }))}\n        onChange={(value: ScalaVersion) => scalaVersionSet(value)}\n      />\n      <TimeUnits onChange={(func: any) => extractorSet({ func })} />\n\n      <h4>Map Lookup Performance</h4>\n\n      <p>\n        Benchmarks for java.util.HashMap vs Map.asJava vs immutable.Map vs\n        mutable.Map.\n      </p>\n\n      <h5>openjdk-17: 2.12 vs 2.13</h5>\n\n      <p>\n        Comparing performance of Map between scala 2.12 and 2.13, using\n        openjdk-17.\n      </p>\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.what === 'hit' && p.size === size}\n        title=\"Map successful lookup (hit) -- openjdk-17, nanos\"\n        xDesc={xDesc('Map')}\n        yDesc={yDescScala}\n      />\n\n      <h5>All JDKs</h5>\n\n      <p>\n        Comparing performance of Map for different versions of JDK: openjdk-8 vs\n        openjdk-11 vs openjdk-17. Use switcher above to change scala version.\n      </p>\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) =>\n          p.scala === scalaVersion && p.what === 'hit' && p.size === size\n        }\n        title=\"Map successful lookup (hit), nanos\"\n        xDesc={xDesc('Map')}\n        yDesc={yDesc}\n      />\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) =>\n          p.scala === scalaVersion && p.what === 'miss' && p.size === size\n        }\n        title=\"Map failed lookup (miss), nanos\"\n        xDesc={xDesc('Map')}\n        yDesc={yDesc}\n      />\n\n      <h4>Set Lookup Performance</h4>\n\n      <p>\n        Same benchmark but for Set. Notice that HashSet internally uses HashMap,\n        so the performance, supposedly, should be the same.\n      </p>\n\n      <h5>openjdk-17: 2.12 vs 2.13</h5>\n\n      <p>\n        Comparing performance of Set between scala 2.12 and 2.13, using\n        openjdk-17.\n      </p>\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) => p.what === 'hit' && p.size === size}\n        title=\"Set successful lookup (hit) -- openjdk-17, nanos\"\n        xDesc={xDesc('Set')}\n        yDesc={yDescScala}\n      />\n\n      <h5>All JDKs</h5>\n\n      <p>\n        Comparing performance of Set for different versions of JDK: openjdk-8 vs\n        openjdk-11 vs openjdk-17. Use switcher above to change scala version.\n      </p>\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) =>\n          p.scala === scalaVersion && p.what === 'hit' && p.size === size\n        }\n        title=\"Set successful lookup (hit), nanos\"\n        xDesc={xDesc('Set')}\n        yDesc={yDesc}\n      />\n\n      <ChartAndTable\n        dataTable={jmhList}\n        extractor={extractor.func}\n        filter={(p: any) =>\n          p.scala === scalaVersion && p.what === 'miss' && p.size === size\n        }\n        title=\"Set failed lookup (miss), nanos\"\n        xDesc={xDesc('Set')}\n        yDesc={yDesc}\n      />\n\n      <p>\n        Full JMH logs:\n        <a href={filePath('2-12', 'jdk8.log.txt')}>\n          openjdk-8 (scala 2.12)\n        </a>,{' '}\n        <a href={filePath('2-12', 'jdk11.log.txt')}>openjdk-11 (scala 2.12)</a>,{' '}\n        <a href={filePath('2-12', 'jdk17.log.txt')}>openjdk-17 (scala 2.12)</a>,{' '}\n        <a href={filePath('2-13', 'jdk8.log.txt')}>openjdk-8 (scala 2.13)</a>,{' '}\n        <a href={filePath('2-13', 'jdk11.log.txt')}>openjdk-11 (scala 2.13)</a>,{' '}\n        <a href={filePath('2-13', 'jdk17.log.txt')}>openjdk-17 (scala 2.13)</a>.\n      </p>\n    </div>\n  );\n};\n\nfunction exportDimensions(benchmark: string, params: any) {\n  //'com.komanov.collection.jmh.SetMapJavaVsScalaBenchmarks.javaMapHit'\n\n  const method = benchmark.substring(benchmark.lastIndexOf('.') + 1);\n  const hit = method.endsWith('Hit');\n  const name = method.substring(0, method.length - (hit ? 3 : 4));\n\n  return {\n    method: name,\n    what: hit ? 'hit' : 'miss',\n    ...params,\n  };\n}\n\nconst filePath = (scala: ScalaVersionDir, name: string) =>\n  `/data/charts/set-map-java-vs-scala-${scala}/${name}`;\n\nconst fetchAndCombineResults = () => {\n  return Promise.all([\n    loadJson(filePath('2-12', 'jdk8.json')),\n    loadJson(filePath('2-12', 'jdk11.json')),\n    loadJson(filePath('2-12', 'jdk17.json')),\n    loadJson(filePath('2-13', 'jdk8.json')),\n    loadJson(filePath('2-13', 'jdk11.json')),\n    loadJson(filePath('2-13', 'jdk17.json')),\n  ]).then((values: any[]) => {\n    function setJdk(index: number, jdk: JdkVersion, scala: ScalaVersion) {\n      const list: JmhBenchmarkRun[] = values[index].data;\n      list.forEach((v) => (v.params = { jdk, scala, ...v.params }));\n      return list;\n    }\n\n    return {\n      data: [\n        ...setJdk(0, 'openjdk-8', '2.12'),\n        ...setJdk(1, 'openjdk-11', '2.12'),\n        ...setJdk(2, 'openjdk-17', '2.12'),\n        ...setJdk(3, 'openjdk-8', '2.13'),\n        ...setJdk(4, 'openjdk-11', '2.13'),\n        ...setJdk(5, 'openjdk-17', '2.13'),\n      ],\n    };\n  });\n};\n\nconst SetMapJavaVsScala = JmhChartPage(SetMapJavaVsScalaImpl, {\n  fetchFunc: fetchAndCombineResults,\n  exportDimensionsFunc: exportDimensions,\n  headerText: 'Set/Map lookup performance: Java vs Scala (Charts)',\n});\n\nexport default SetMapJavaVsScala;\n"],"names":["scalas","xDesc","kind","title","prop","values","name","value","yDesc","yDescScala","filePath","scala","SetMapJavaVsScala","JmhChartPage","jmhList","useState","scalaVersion","scalaVersionSet","size","sizeSet","func","extractor","extractorSet","React","className","Link","to","href","Choose","label","items","default","onChange","map","v","TimeUnits","ChartAndTable","dataTable","filter","p","what","fetchFunc","Promise","all","loadJson","then","setJdk","index","jdk","list","data","forEach","params","exportDimensionsFunc","benchmark","method","substring","lastIndexOf","hit","endsWith","length","headerText"],"sourceRoot":""}