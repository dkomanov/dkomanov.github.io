{"version":3,"file":"component---src-pages-charts-java-compression-index-tsx-e2fcb3cad10b7bb622d2.js","mappings":"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","sources":["webpack://komanov.com/./src/pages/charts/java-compression/CompressionRatio.tsx","webpack://komanov.com/./src/pages/charts/java-compression/RealData.tsx","webpack://komanov.com/./src/pages/charts/java-compression/index.tsx"],"sourcesContent":["import React from 'react';\nimport { StatelessChoose } from '../../../components';\n\nexport const AllCompressionRatios = [\n  {\n    name: 'low',\n    value: 'LOW_COMPRESSION_1_3',\n  },\n  {\n    name: 'medium',\n    value: 'MEDIUM_COMPRESSION_2_1',\n  },\n  {\n    name: 'high',\n    value: 'HIGH_COMPRESSION_3_4',\n  },\n  {\n    name: 'extra',\n    value: 'EXTRA_HIGH_COMPRESSION_6_2',\n  },\n];\n\nexport const DefaultCompressionRatio = 'MEDIUM_COMPRESSION_2_1';\n\nexport const sideBySide = (lists: any[][]): any[] => {\n  if (lists.length <= 0) {\n    throw new Error('empty array');\n  }\n  if (lists.find((v) => v.length !== lists[0].length)) {\n    throw new Error('different lengths');\n  }\n\n  const r = [];\n  for (let i = 0; i < lists[0].length; ++i) {\n    for (let j = 0; j < lists.length; ++j) {\n      r.push(lists[j][i]);\n    }\n  }\n  return r;\n};\n\nexport const comparisonValues = (name: string, value: string) => {\n  return AllCompressionRatios.slice()\n    .reverse()\n    .map((r) => ({ name: `${name} [${r.name}]`, value: `${value}-${r.value}` }));\n};\n\nexport const CompressionRatioChooseComponent = ({ value, onChange }: { value: string; onChange: (value: string) => any }) => {\n  return (\n    <StatelessChoose\n      label=\"Compression Ratio:\"\n      value={value}\n      items={AllCompressionRatios.map((i) => ({\n        label: i.name,\n        value: i.value,\n      }))}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default CompressionRatioChooseComponent;\n","import React from 'react';\nimport { StatelessChoose } from '../../../components';\nimport { JmhAxisDescriptor } from '../../../util/jmh';\n\nexport const RealLengthDesc: JmhAxisDescriptor = {\n  title: 'Real Input Size',\n  prop: 'length',\n  values: [\n    '298',\n    '420',\n    '531',\n    '538',\n    '686',\n    '34011',\n    '42223',\n    '51771',\n    '62830',\n    '81207',\n    '94417',\n    '607930',\n    '751048',\n    '781196',\n    '866049',\n    '904172',\n    '1075724',\n    '1293080',\n    '1448911',\n    '1599048',\n    '4072805',\n    '4287156',\n  ],\n};\n\nexport type RealDataset = 'all' | '34011-94417' | '607930-4287156';\nexport const DefaultRealDataset: RealDataset = '607930-4287156';\nconst AllRealDatasets: RealDataset[] = ['all', '34011-94417', '607930-4287156'];\n\nexport const filterByDataset = (dataset: RealDataset, p: any) =>\n  dataset === 'all' ||\n  (dataset === '34011-94417' ? inBetween(p.length, 34011, 94417) : inBetween(p.length, 607930, 4287156));\n\nfunction inBetween(v: any, from: number, to: number) {\n  const num = parseInt(v);\n  return from <= num && num <= to;\n}\n\nexport const DatasetChooseComponent = ({\n  dataset,\n  datasetSet,\n}: {\n  dataset: RealDataset;\n  datasetSet: (v: any) => any;\n}) => (\n  <StatelessChoose\n    label=\"Data set:\"\n    items={AllRealDatasets.map((v) => ({ label: v, value: v }))}\n    value={dataset}\n    onChange={datasetSet}\n  />\n);\n\nexport default DatasetChooseComponent;\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport {\n  ChartAndTable2,\n  ChooseSlider,\n  Jdks,\n  JdkVersion,\n  JmhChartComponentProps,\n  JmhChartPage,\n  StatelessChoose,\n  TimeUnits,\n} from '../../../components';\nimport { loadJson } from '../../../util';\nimport { EmptyJmhExtractorFuncHolder, JmhAxisDescriptor } from '../../../util/jmh';\nimport {\n  CompressionRatioChooseComponent,\n  comparisonValues,\n  DefaultCompressionRatio,\n  sideBySide,\n} from './CompressionRatio';\nimport { DefaultRealDataset, filterByDataset, DatasetChooseComponent, RealLengthDesc } from './RealData';\n\nconst AllActions = [\n  {\n    label: 'decode',\n    value: 'decode',\n  },\n  {\n    label: 'encode',\n    value: 'encode',\n  },\n  {\n    label: 'encode + brotli_11',\n    value: 'encode-all',\n  },\n];\n\nconst AlgorithmDesc: JmhAxisDescriptor = {\n  title: 'Compression Algorithm',\n  prop: 'algorithm',\n  values: [\n    'gzip',\n    'deflate',\n    'deflateWithSize',\n    'snappy',\n    'zstd',\n    'brotli_0',\n    'brotli_6',\n    'brotli_11',\n    'lz4_fast',\n    'lz4_high9',\n    'lz4_high17',\n  ],\n};\n\nconst getChooseItemsForLength = (desc: JmhAxisDescriptor, defaultValue: string) => {\n  return desc.values.map((i) => {\n    return {\n      label: i as string,\n      value: i as string,\n      default: i === defaultValue,\n    };\n  });\n};\n\nconst StubLengthDesc: JmhAxisDescriptor = {\n  title: 'Stub Input Size',\n  prop: 'length',\n  values: [\n    '1024',\n    '2048',\n    '3072',\n    '4096',\n    '5120',\n    '6144',\n    '7168',\n    '8192',\n    '9216',\n    '10240',\n    '20480',\n    '30720',\n    '40960',\n    '51200',\n    '61440',\n    '71680',\n    '81920',\n    '92160',\n    '102400',\n  ],\n};\n\nfunction generateThroughputNormalizer() {\n  const r = [];\n  for (let i = 1; i <= 9; ++i) {\n    r.push({\n      label: `${i}00 MB/s`,\n      value: (i * 100 * 1024 * 1024).toString(),\n    });\n  }\n  for (let i = 1; i < 5; ++i) {\n    r.push({\n      label: `${i} GB/s`,\n      value: (i * 1024 * 1024 * 1024).toString(),\n    });\n  }\n\n  r.push({\n    label: 'no limit',\n    value: (1024 * 1024 * 1024 * 1024).toString(),\n  });\n\n  return r;\n}\n\nconst ThroughputNormalizer = generateThroughputNormalizer();\n\nconst JdkDesc = {\n  title: 'JDK',\n  prop: 'jdk',\n  values: Jdks,\n};\n\nconst legend = {\n  textStyle: {\n    fontSize: 12,\n  },\n};\n\nconst hAxisDataLength = { title: 'Data length, bytes' };\nconst vAxisThroughput = { title: 'throughput, bytes per second' };\nconst vAxisTime = { title: 'time, microseconds' };\n\nconst JavaCompressionPerformanceImpl = ({ jmhList }: JmhChartComponentProps) => {\n  const [jdk, jdkSet] = useState<JdkVersion>('openjdk-17');\n  const [action, actionSet] = useState(AllActions[0].value);\n  const [throughputNormalizationBytes, throughputNormalizationBytesSet] = useState(\n    parseInt(ThroughputNormalizer[4].value)\n  );\n  const encoding = action !== 'decode';\n  const [extractor, extractorSet] = useState(EmptyJmhExtractorFuncHolder);\n\n  const [realDataLength, realDataLengthSet] = useState('4287156');\n  const [dataset, datasetSet] = useState(DefaultRealDataset);\n\n  const [stubDataLength, stubDataLengthSet] = useState('102400');\n  const [compressionRatio, compressionRatioSet] = useState(DefaultCompressionRatio);\n\n  const finalAlgoDesc: JmhAxisDescriptor =\n    action === 'encode'\n      ? {\n          ...AlgorithmDesc,\n          values: AlgorithmDesc.values.filter((v) => v !== 'brotli_11'),\n        }\n      : AlgorithmDesc;\n\n  const filterByJdk = (p: any) => p.jdk === jdk;\n  const filterByAction = (p: any) => p.action === (encoding ? 'encode' : 'decode');\n\n  const filterByRatio = (p: any) => p.compressionRatio === compressionRatio;\n\n  const throughputExtractor = (pm: any) => {\n    const inputOrOutput = (input: boolean) => (input ? pm.totalInputBytes : pm.totalOutputBytes);\n    const input = inputOrOutput(encoding);\n    const output = inputOrOutput(!encoding);\n    const ratio = input / output;\n    const limit = throughputNormalizationBytes;\n    if (input > limit) {\n      return Math.min(input, limit * ratio);\n    } else {\n      return input;\n    }\n  };\n\n  const actionTitle = encoding ? 'Encoding' : 'Decoding';\n\n  const items = (list: string[]) => list.map((v) => ({ label: v, value: v }));\n  const JdkChoose = <StatelessChoose label=\"JDK:\" items={items(Jdks)} value={jdk} onChange={jdkSet} />;\n  const ActionChoose = <StatelessChoose label=\"Action:\" items={AllActions} value={action} onChange={actionSet} />;\n  const DatasetChoose = <DatasetChooseComponent dataset={dataset} datasetSet={datasetSet} />;\n  const ThroughputNormalizerChoose = (\n    <ChooseSlider\n      label=\"IO limit:\"\n      items={ThroughputNormalizer.map((i) => ({ ...i, default: i.value === throughputNormalizationBytes.toString() }))}\n      onChange={(v) => throughputNormalizationBytesSet(parseInt(v))}\n    />\n  );\n\n  const RealDataSlider = (\n    <ChooseSlider\n      label=\"Data length:\"\n      items={getChooseItemsForLength(RealLengthDesc, realDataLength)}\n      onChange={realDataLengthSet}\n    />\n  );\n  const StubDataSlider = (\n    <ChooseSlider\n      label=\"Data length:\"\n      items={getChooseItemsForLength(StubLengthDesc, stubDataLength)}\n      onChange={stubDataLengthSet}\n    />\n  );\n  const CompressionRatioChoose = (\n    <CompressionRatioChooseComponent value={compressionRatio} onChange={compressionRatioSet} />\n  );\n\n  const PerformanceChart = (realData: boolean) => {\n    return (\n      <div>\n        <h3>{actionTitle} Performance (time, microseconds)</h3>\n\n        {realData ? (\n          <div>\n            {' '}\n            {JdkChoose}\n            {ActionChoose}\n            {DatasetChoose}\n          </div>\n        ) : (\n          <div>\n            {JdkChoose}\n            {ActionChoose}\n            {CompressionRatioChoose}\n          </div>\n        )}\n\n        <ChartAndTable2\n          chartType=\"Line\"\n          dataTable={jmhList}\n          extractor={extractor.func}\n          filter={(p: any) =>\n            p.realData == realData &&\n            filterByJdk(p) &&\n            filterByAction(p) &&\n            (realData ? filterByDataset(dataset, p) : filterByRatio(p))\n          }\n          xDesc={realData ? RealLengthDesc : StubLengthDesc}\n          yDesc={finalAlgoDesc}\n          options={{\n            legend,\n            hAxis: hAxisDataLength,\n            vAxis: vAxisTime,\n          }}\n        />\n      </div>\n    );\n  };\n\n  const ThroughputChart = (realData: boolean) => {\n    return (\n      <div>\n        <h3>\n          {actionTitle} Throughput ({encoding ? 'input' : 'output'} bytes)\n        </h3>\n\n        {realData ? (\n          <div>\n            {' '}\n            {JdkChoose}\n            {ActionChoose}\n            {DatasetChoose}\n          </div>\n        ) : (\n          <div>\n            {JdkChoose}\n            {ActionChoose}\n            {CompressionRatioChoose}\n          </div>\n        )}\n        {ThroughputNormalizerChoose}\n\n        <ChartAndTable2\n          chartType=\"Line\"\n          dataTable={jmhList}\n          extractor={throughputExtractor}\n          filter={(p: any) =>\n            p.realData === realData &&\n            filterByJdk(p) &&\n            filterByAction(p) &&\n            (realData ? filterByDataset(dataset, p) : filterByRatio(p))\n          }\n          xDesc={realData ? RealLengthDesc : StubLengthDesc}\n          yDesc={finalAlgoDesc}\n          options={{\n            legend,\n            hAxis: hAxisDataLength,\n            vAxis: vAxisThroughput,\n          }}\n        />\n      </div>\n    );\n  };\n\n  const PerformanceByJdkChart = (realData: boolean, length: string) => {\n    return (\n      <div>\n        <h3>{actionTitle} Performance By JDK</h3>\n\n        {ActionChoose}\n        {realData ? (\n          RealDataSlider\n        ) : (\n          <div>\n            {CompressionRatioChoose}\n            {StubDataSlider}\n          </div>\n        )}\n\n        <ChartAndTable2\n          chartType=\"Bar\"\n          dataTable={jmhList}\n          extractor={extractor.func}\n          filter={(p: any) =>\n            p.realData == realData && p.length === length && filterByAction(p) && (realData || filterByRatio(p))\n          }\n          xDesc={JdkDesc}\n          yDesc={finalAlgoDesc}\n          options={{\n            legend,\n            vAxis: vAxisTime,\n          }}\n        />\n      </div>\n    );\n  };\n\n  const Comparison = (title: string, xDesc: JmhAxisDescriptor, alternate?: number) => {\n    const f = (p: any) => !p.realData && filterByJdk(p) && filterByAction(p);\n    return (\n      <div>\n        <h3>\n          {actionTitle} Comparison: {title}\n        </h3>\n\n        <h4>Performance Comparison: {title}</h4>\n\n        {JdkChoose}\n        {ActionChoose}\n\n        <ChartAndTable2\n          chartType=\"Line\"\n          dataTable={jmhList}\n          extractor={extractor.func}\n          filter={f}\n          xDesc={StubLengthDesc}\n          yDesc={xDesc}\n          alternateColors={alternate || 2}\n          options={{\n            legend,\n            hAxis: hAxisDataLength,\n            vAxis: vAxisTime,\n          }}\n        />\n\n        <h4>Throughput Comparison: {title}</h4>\n\n        {JdkChoose}\n        {ActionChoose}\n\n        <ChartAndTable2\n          chartType=\"Line\"\n          dataTable={jmhList}\n          filter={f}\n          extractor={throughputExtractor}\n          xDesc={StubLengthDesc}\n          yDesc={xDesc}\n          alternateColors={alternate || 2}\n          options={{\n            legend,\n            hAxis: hAxisDataLength,\n            vAxis: vAxisThroughput,\n          }}\n        />\n\n        <h4>Compression Ratios: {title}</h4>\n\n        <ChartAndTable2\n          chartType=\"Line\"\n          dataTable={jmhList}\n          filter={f}\n          extractor={(pm: any) => pm.ratio}\n          xDesc={StubLengthDesc}\n          yDesc={xDesc}\n          doNotFloorValues\n          alternateColors={alternate || 2}\n          options={{\n            legend,\n            hAxis: hAxisDataLength,\n            vAxis: {\n              title: 'compression ratio',\n              format: 'decimal',\n            },\n          }}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"markdown\">\n      <h2>Introduction</h2>\n\n      <p>\n        Here are benchmarking results for{' '}\n        <Link to=\"/p/java-compression\">&laquo;Java Compression Performance&raquo;</Link> blog post.\n      </p>\n\n      <p>\n        The performance tests are performed via <a href=\"https://github.com/openjdk/jmh\">JMH</a>. The configuration of a\n        hardware is Intel® Core™ i7-1165G7 @ 2.80GHz × 8 (4 core + 4 HT) with 16 GB RAM. Scala version: 2.13.6.\n      </p>\n\n      <ul>\n        <li>\n          <a href=\"#real-data\">Charts for real data</a>\n        </li>\n        <li>\n          <a href=\"#stub-data\">Charts for stub (random) data</a>\n        </li>\n      </ul>\n\n      <TimeUnits onChange={(func: any) => extractorSet({ func })} />\n\n      <h2>Charts for real data</h2>\n\n      {PerformanceChart(true)}\n      {ThroughputChart(true)}\n      {PerformanceByJdkChart(true, realDataLength)}\n\n      <h2>Charts for stub (random) data</h2>\n\n      {PerformanceChart(false)}\n      {ThroughputChart(false)}\n      {PerformanceByJdkChart(false, stubDataLength)}\n\n      <h2>Comparisons</h2>\n\n      {Comparison('gzip vs deflate', {\n        title: 'Compression Algorithm',\n        prop: 'comparison',\n        values: sideBySide([comparisonValues('gzip', 'gzip'), comparisonValues('deflate', 'deflate')]),\n      })}\n      {Comparison('deflate vs deflate+size', {\n        title: 'Compression Algorithm',\n        prop: 'comparison',\n        values: sideBySide([comparisonValues('deflate', 'deflate'), comparisonValues('mysql', 'deflateWithSize')]),\n      })}\n      {Comparison(\n        'lz4 levels',\n        {\n          title: 'Compression Algorithm',\n          prop: 'comparison',\n          values: sideBySide([\n            comparisonValues('lz4_fast', 'lz4_fast'),\n            comparisonValues('lz4_high9', 'lz4_high9'),\n            comparisonValues('lz4_high17', 'lz4_high17'),\n          ]),\n        },\n        3\n      )}\n      {Comparison(\n        'brotli levels',\n        {\n          title: 'Compression Algorithm',\n          prop: 'comparison',\n          values: sideBySide([\n            comparisonValues('brotli_0', 'brotli_0'),\n            comparisonValues('brotli_6', 'brotli_6'),\n            comparisonValues('brotli_11', 'brotli_11'),\n          ]),\n        },\n        3\n      )}\n      {Comparison('lz4 vs brotli', {\n        title: 'Compression Algorithm',\n        prop: 'comparison',\n        values: sideBySide([comparisonValues('lz4_high9', 'lz4_high9'), comparisonValues('brotli_6', 'brotli_6')]),\n      })}\n      {Comparison('lz4_fast vs snappy', {\n        title: 'Compression Algorithm',\n        prop: 'comparison',\n        values: sideBySide([comparisonValues('lz4_fast', 'lz4_fast'), comparisonValues('snappy', 'snappy')]),\n      })}\n      {Comparison('brotli_6 vs gzip', {\n        title: 'Compression Algorithm',\n        prop: 'comparison',\n        values: sideBySide([comparisonValues('brotli_6', 'brotli_6'), comparisonValues('gzip', 'gzip')]),\n      })}\n\n      <p>\n        Full JMH logs:\n        <a href={filePath('jdk8.log.txt')}>openjdk-8</a> (<a href={filePath('jdk8.json')}>json</a>),{' '}\n        <a href={filePath('jdk11.log.txt')}>openjdk-11</a> (<a href={filePath('jdk11.json')}>json</a>),{' '}\n        <a href={filePath('jdk17.log.txt')}>openjdk-17</a> (<a href={filePath('jdk17.json')}>json</a>). Compression\n        ratios and data lengths in a{' '}\n        <a href=\"https://docs.google.com/spreadsheets/d/1pFOAgxVYsos38oraeva1_RHC9P4J3oN2Oj2fQ65L8OI\">speadsheet</a>.\n      </p>\n    </div>\n  );\n};\n\nconst filePath = (name: string) => `/data/charts/java-compression/${name}`;\n\nconst JavaCompressionPerformance = JmhChartPage(JavaCompressionPerformanceImpl, {\n  fetchFunc: () => loadJson(filePath('jmh.min.json')),\n  exportDimensionsFunc: (_, params) => params,\n  headerText: 'Java Compression Performance (Charts)',\n});\n\nexport default JavaCompressionPerformance;\n"],"names":["AllCompressionRatios","name","value","DefaultCompressionRatio","sideBySide","lists","length","Error","find","v","r","i","j","push","comparisonValues","slice","reverse","map","CompressionRatioChooseComponent","onChange","React","StatelessChoose","label","items","RealLengthDesc","title","prop","values","DefaultRealDataset","AllRealDatasets","filterByDataset","dataset","p","inBetween","from","to","num","parseInt","DatasetChooseComponent","datasetSet","AllActions","AlgorithmDesc","getChooseItemsForLength","desc","defaultValue","default","StubLengthDesc","ThroughputNormalizer","toString","generateThroughputNormalizer","JdkDesc","Jdks","legend","textStyle","fontSize","hAxisDataLength","vAxisThroughput","vAxisTime","filePath","JavaCompressionPerformance","JmhChartPage","list","jmhList","useState","jdk","jdkSet","action","actionSet","throughputNormalizationBytes","throughputNormalizationBytesSet","encoding","EmptyJmhExtractorFuncHolder","extractor","extractorSet","realDataLength","realDataLengthSet","stubDataLength","stubDataLengthSet","compressionRatio","compressionRatioSet","finalAlgoDesc","filter","filterByJdk","filterByAction","filterByRatio","throughputExtractor","pm","inputOrOutput","input","totalInputBytes","totalOutputBytes","ratio","limit","Math","min","actionTitle","JdkChoose","ActionChoose","DatasetChoose","ThroughputNormalizerChoose","ChooseSlider","RealDataSlider","StubDataSlider","CompressionRatioChoose","PerformanceChart","realData","ChartAndTable2","chartType","dataTable","func","xDesc","yDesc","options","hAxis","vAxis","ThroughputChart","PerformanceByJdkChart","Comparison","alternate","f","alternateColors","doNotFloorValues","format","className","Link","href","TimeUnits","fetchFunc","loadJson","exportDimensionsFunc","_","params","headerText"],"sourceRoot":""}