{"componentChunkName":"component---src-templates-blog-by-tag-js","path":"/posts/performance","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"excerpt":"For some time I wanted to write a blog post about performance optimizations: a step by step guide how to improve performance of some small…","fields":{"slug":"/p/optimizing-performance-of-simple-version-parsing-in-scala/"},"frontmatter":{"date":"September 12, 2023","title":"Optimizing Performance of Simple Version Parsing in Scala","description":"A step by step guide how code optimization is done: what to look for during optimization process, how to win nanoseconds and have fun!"}}},{"node":{"excerpt":"What’s the best way to store binary data in MySQL? This is a question that has multiple answers, depending on what you want to achieve. For…","fields":{"slug":"/p/mysql-blob-fetch-performance-in-java/"},"frontmatter":{"date":"February 05, 2023","title":"MySQL BLOB Fetch Performance in Java","description":"A performance benchmark: fetching BLOB column from MySQL uncompressed vs compressed with different algorithms!"}}},{"node":{"excerpt":"Data compression is a very broad topic, we may find lots of materials on this topic on Internet. There are amazing benchmarks for all kinds…","fields":{"slug":"/p/java-compression-performance/"},"frontmatter":{"date":"January 10, 2023","title":"Java Compression Performance","description":"A performance benchmark for a few compression libraries in Java"}}},{"node":{"excerpt":"It’s time to consolidate my Base64 findings: take the best of JVM world, the best of Rust world and benchmark it together from within the…","fields":{"slug":"/p/java-exploring-jni-performance-via-decoding-base64/"},"frontmatter":{"date":"October 27, 2022","title":"Java: Exploring JNI performance via Decoding Base64","description":"What is the overhead of calling native libraries via JNI? A performance benchmark on a more or less real-world example of decoding Base64."}}},{"node":{"excerpt":"This is a remake of java-native-benchmark: performance benchmark of different ways (libraries) of using native libraries. The original…","fields":{"slug":"/p/java-native-access-performance/"},"frontmatter":{"date":"October 22, 2022","title":"Java Native Access Performance","description":"Performance comparison of  native libraries access from Java: JNI vs JNR vs JavaCPP vs BridJ vs JNA"}}},{"node":{"excerpt":"UPD: A lot of interesting comments on reddit: Added benchmarks for data-encoding crate. Added an optimized version of JDK ported…","fields":{"slug":"/p/base64-encoding-performance-java-vs-rust/"},"frontmatter":{"date":"October 16, 2022","title":"Base64 Encoding Performance: Java vs Rust","description":"Performance comparison of base64 encoding/decoding between base64, crypto2 and JDK implementations with some unexpected results!"}}},{"node":{"excerpt":"UPD. Charts updated with better input data. Recently I stumbled upon some old code that used Base64 from Apache Commons. So I decided to…","fields":{"slug":"/p/base64-encoding-performance-jdk-vs-apache-commons/"},"frontmatter":{"date":"September 25, 2022","title":"Base64 Encoding Performance: JDK vs Apache Commons","description":"Performance comparison of base64 encoding/decoding between java.util.Base64 and Apache Commons implementation"}}},{"node":{"excerpt":"Wow, that’s the fifth (and I hope that last, famous last words) episode in my series “Benchmarking something that almost no one needs” :) I…","fields":{"slug":"/p/replacing-hash-map-with-off-heap-hash-map-in-java/"},"frontmatter":{"date":"September 08, 2022","title":"Replacing HashMap with Off-Heap HashMap in Java?","description":"Implementing a simple read only HashMap stored off-heap in Java and benchmarking it against java.util.HashMap!"}}},{"node":{"excerpt":"This is the next portion of my “research” around my UUID set cache. I’ve benchmarked Map Performance Java vs Scala, binary search instead of…","fields":{"slug":"/p/mysql-as-redis-vs-redis/"},"frontmatter":{"date":"September 05, 2022","title":"MySQL as Redis vs Redis?","description":"Simple one column table in MySQL representing a Set. Let's benchmark it (against Redis)!"}}},{"node":{"excerpt":"After my post about making off-heap Set-like data structure, my friend threw an idea at me: why not to go all the way, and use not just off…","fields":{"slug":"/p/ultimate-off-heap-hash-set-using-redis/"},"frontmatter":{"date":"August 31, 2022","title":"Ultimate Off-Heap Hash Set: Using Redis","description":"A benchmark to check the performance of out-of-process cache in Redis to potentially replace in-process cache"}}},{"node":{"excerpt":"This post is not about a Magical Solution that I found or some performances issues in JDK or in Scala. Here I want to describe my findings…","fields":{"slug":"/p/replacing-hash-set-with-sorted-array-in-java/"},"frontmatter":{"date":"August 14, 2022","title":"Replacing HashSet with Sorted Array and Binary Search in Java?","description":"An attempt to replace HashSet with sorted array and binary search for memory optimization. Including off-heap storage."}}},{"node":{"excerpt":"Yet another post about performance and microbenchmarks. Beware of the results. I was wondering about performance of Scala collections and…","fields":{"slug":"/p/map-performance-java-vs-scala/"},"frontmatter":{"date":"August 02, 2022","title":"Map Performance: Java vs Scala","description":"A microbenchmark of Map.get and Set.contains performance for different JDK and Scala versions"}}},{"node":{"excerpt":"Yet another post about performance and microbenchmarks. Beware of the results. There is a method in String class, called regionMatches…","fields":{"slug":"/p/benchmarking-string-regionmatches/"},"frontmatter":{"date":"April 24, 2022","title":"Benchmarking String.regionMatches","description":"A simple just for fun benchmark reveals some bizarre performance of regionMatches method"}}},{"node":{"excerpt":"UPD: Here is the Pull Request to scala-compiler with changes inspired by this post. String concatenation is a basic building block in every…","fields":{"slug":"/p/scala-string-interpolation-performance/"},"frontmatter":{"date":"December 05, 2016","title":"Scala: String Interpolation Performance","description":"Performance comparison between different kinds of string concatenation/formatting in Java/Scala..."}}},{"node":{"excerpt":"Yet another post about performance and microbenchmarks. Yes, I know. Very small JMH benchmark: And the result: Wow. Apparently, JVM doesn’t…","fields":{"slug":"/p/scala-stringbuilder-vs-java-stringbuilder-performance/"},"frontmatter":{"date":"December 03, 2016","title":"Scala StringBuilder vs Java StringBuilder Performance","description":"O_O performance benchmark of StringBuilder wrapper in Scala..."}}},{"node":{"excerpt":"I’ve just created charts. There I’ve put my recent benchmark results from the\nScala Serialization article. Things changed: Results gathered…","fields":{"slug":"/p/scala-serialization-updated/"},"frontmatter":{"date":"June 26, 2016","title":"Scala Serialization Updated","description":"Short update on Scala Serialization post..."}}},{"node":{"excerpt":"UPD-2022: A remake of this blog post on 2022.\nUPD: Recent benchmark charts are here. It’s common to use JSON as the main format of…","fields":{"slug":"/p/scala-serialization/"},"frontmatter":{"date":"June 12, 2016","title":"Scala Serialization","description":"Performance comparison of popular serialization libraries for Scala..."}}},{"node":{"excerpt":"I doubt a bit, but then I decided to try to submit a patch to JDK with\nthe performance improvement. I’ve read couple articles,\ncloned code…","fields":{"slug":"/p/lets-continue-with-uuid-fromstring/"},"frontmatter":{"date":"November 16, 2015","title":"Let’s continue with UUID.fromString","description":"Everything is invented before us: my attempt to contribute UUID.fromString to JDK9..."}}},{"node":{"excerpt":"I spent some time on optimizing UUID.fromString\nfunction and I want to share my experience about it. TL;DR — we will improve\nit’s…","fields":{"slug":"/p/micro-optimization-for-uuid-fromstring-in-7-steps/"},"frontmatter":{"date":"November 05, 2015","title":"Micro-optimization for UUID.fromString in 7 steps","description":"A sequence of 7 micro-optimizations for parsing UUID from String to make it really fast!"}}}]}},"pageContext":{"tag":"performance"}},"staticQueryHashes":["3675711862"]}