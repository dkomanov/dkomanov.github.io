{"componentChunkName":"component---src-templates-blog-post-js","path":"/p/scala-try-with-resources/","webpackCompilationHash":"a8150f80a47cc5264375","result":{"data":{"markdownRemark":{"id":"68685a7a-df7c-5a1f-a133-2cd203208db4","excerpt":"UPD: Apparently in top5 from Google there are no correct examples, changed text accordingly. Resource management is a very important topic in software…","html":"<blockquote>\n<p>UPD: Apparently in top5 from Google there are no correct examples, changed text accordingly.</p>\n</blockquote>\n<p>Resource management is a very important topic in software development. Also, it is hard to add something new to it. The topic is covered pretty well in all kinds of blog posts, articles, and tech papers. Nevertheless, I have something to say, not new, but I believe it’s worth repeating.</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>A usual pattern for working with files (or other resources), for example, is following:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> file<span class=\"token operator\">:</span> InputStream <span class=\"token operator\">=</span> _\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// read from stream</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  file<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But this is not the “right” way of working with resources, because if there are exceptions both in try-block and finally-block, then the latter will “overthrow” the exception from try-block (that exception will be lost). Not nice.</p>\n<h2 id=\"more-plot-into-a-subject\"><a href=\"#more-plot-into-a-subject\" aria-label=\"more plot into a subject permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>More plot into a subject</h2>\n<p>It’s quite common to use <a href=\"https://commons.apache.org/proper/commons-io/javadocs/api-2.5/org/apache/commons/io/IOUtils.html#closeQuietly(java.io.Closeable)\">IOUtils.closeQuietly</a> for this matter:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">var</span> file<span class=\"token operator\">:</span> InputStream <span class=\"token operator\">=</span> _\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// read from stream</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  IOUtils<span class=\"token punctuation\">.</span>closeQuietly<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>By doing this exception in finally-block is just ignored. Which is also not always good.</p>\n<p>I’ve recently <a href=\"https://commons.apache.org/proper/commons-io/upgradeto2_6.html\">upgraded</a> Apache Commons library in one of my projects and I noticed that the IOUtils.closeQuietly method became <a href=\"https://docs.oracle.com/javase/7/docs/technotes/guides/javadoc/deprecation/deprecation.html\">deprecated</a>. So, now I finally have to do something with it to make it right.</p>\n<h2 id=\"try-with-resources\"><a href=\"#try-with-resources\" aria-label=\"try with resources permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try-with-resources</h2>\n<p>In Java, since Java7, there is a special language construct for such cases, called try <code class=\"language-text\">try-with-resources</code>. This concept described very well in <a href=\"http://www.oracle.com/technetwork/articles/java/trywithresources-401775.html\">this</a> tech article. Actually, most of the content of this post is scattered there (not everything, thankfully).</p>\n<p>What I tried to do, is to find a way of reusing this pattern, but in Scala. I was quite disappointed, I must say. From 5 first results in <a href=\"https://www.google.com/search?q=scala+try+with+resources\">Google</a> there wasn’t any correct! This is why I decided to go over some mistakes that were made there.</p>\n<h3 id=\"mistake-1-swallow-exception-in-finally\"><a href=\"#mistake-1-swallow-exception-in-finally\" aria-label=\"mistake 1 swallow exception in finally permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mistake 1: swallow exception in finally</h3>\n<p>As I mentioned in the first example, such code isn’t good:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">finally {\n  file.close()\n}</code></pre></div>\n<p><code class=\"language-text\">close</code> can throw an exception, therefore exception thrown in try-block might be swallowed. How to deal with it? The solution isn’t “neat”.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var exception: Throwable = null\nval file: InputStream = _\ntry {\n  // read from stream\n} catch {\n  case e =&gt;\n    exception = e\n    throw e\n} finally {\n  try {\n    file.close()\n  } catch {\n    case fe =&gt;\n      if (exception != null) {\n        exception.addSuppressed(fe)\n      } else {\n        throw fe\n      }\n  }\n}</code></pre></div>\n<p>Ok, this is a little bit long one, but what is important here is a call to <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html#addSuppressed(java.lang.Throwable)\">addSuppressed</a> method. So, if there was an exception in try-block, exception from <code class=\"language-text\">close</code> won’t swallow it but will be just added to original exception as suppressed. Nice!</p>\n<p>This mistake I saw in many places, for example in the most popular <a href=\"https://stackoverflow.com/questions/39866000/java-try-with-resource-not-working-with-scala\">StackOverflow</a> <a href=\"https://stackoverflow.com/a/39868021/426397\">response</a>.</p>\n<h3 id=\"mistake-2-catching-exceptionthrowable\"><a href=\"#mistake-2-catching-exceptionthrowable\" aria-label=\"mistake 2 catching exceptionthrowable permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mistake 2: Catching Exception/Throwable</h3>\n<p>Another thing that people don’t pay attention is a catch clause. What can be wrong with it? Actually, a lot.</p>\n<p>Let’s take as an example the <a href=\"https://www.phdata.io/try-with-resources-in-scala/\">first link</a> from Google:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> cleanly<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>resource<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>cleanup<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> <span class=\"token builtin\">Unit</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>doWork<span class=\"token operator\">:</span> A <span class=\"token keyword\">=></span> B<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Try<span class=\"token punctuation\">[</span>B<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      Success<span class=\"token punctuation\">(</span>doWork<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> e<span class=\"token operator\">:</span> Exception <span class=\"token keyword\">=></span> Failure<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>Here we see an attempt to wrap execution result to a <code class=\"language-text\">Try</code> monad. What I want to concentrate on in this example is</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">case e: Exception =&gt; Failure(e)</code></pre></div>\n<p>What does it mean? First of all, some Throwable descendants won’t be caught, which might be surprising to a caller. Secondly, there is one particular exception, that shouldn’t be caught in that manner, and it’s an <a href=\"https://docs.oracle.com/javase/7/docs/api/java/lang/InterruptedException.html\">InterruptedException</a>. There is a good <a href=\"https://stackoverflow.com/a/3976377/426397\">post</a> about it.</p>\n<p>By the way, another mistake is to just catch everything, which is even worse.</p>\n<p>So, what to do? Happily, in Scala there is a <a href=\"http://www.scala-lang.org/api/current/scala/util/control/NonFatal$.html\">NonFatal</a> extractor (thanks to <a href=\"http://twitter.github.io/effectivescala/#Error%20handling-Handling%20exceptions\">Twitter</a>), which you may safely use instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">case NonFatal(e) =&gt; Failure(e)</code></pre></div>\n<p>It won’t match special exceptions like InterruptedException or OutOfMemoryError, which will be just propagated. What’s also good, this extractor is used inside Try and Future, so you don’t need to care in your code about it.</p>\n<h3 id=\"mistake-3-not-closing-resource\"><a href=\"#mistake-3-not-closing-resource\" aria-label=\"mistake 3 not closing resource permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mistake 3: Not closing resource</h3>\n<p>In previous part I suggested to use NonFatal extractor, but it has to be used wisely. Another <a href=\"https://codereview.stackexchange.com/questions/79267/scala-trywith-that-closes-resources-automatically\">example</a> from Google. In attempt to make try-with-resources more idiomatic, the big mistake was introduced:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> apply<span class=\"token punctuation\">[</span>C <span class=\"token operator\">&lt;</span><span class=\"token operator\">:</span> Closeable<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>resource<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> C <span class=\"token keyword\">=></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Try<span class=\"token punctuation\">[</span>R<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n  Try<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>resourceInstance <span class=\"token keyword\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">val</span> returnValue <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span>resourceInstance<span class=\"token punctuation\">)</span>\n      Try<span class=\"token punctuation\">(</span>resourceInstance<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>_ <span class=\"token keyword\">=></span> returnValue<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> NonFatal<span class=\"token punctuation\">(</span>exceptionInFunction<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          resourceInstance<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          Failure<span class=\"token punctuation\">(</span>exceptionInFunction<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> NonFatal<span class=\"token punctuation\">(</span>exceptionInClose<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n            exceptionInFunction<span class=\"token punctuation\">.</span>addSuppressed<span class=\"token punctuation\">(</span>exceptionInClose<span class=\"token punctuation\">)</span>\n            Failure<span class=\"token punctuation\">(</span>exceptionInFunction<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice that catch clause: on NonFatal exception - close the resource. But what’s about fatal exception? What are we supposed to do with resources? Remember, one of the fatal exceptions is InterruptedException? Isn’t it normal to cleanup before stopping thread? Of course it is.</p>\n<p>The general rule is you should always try to close (release) the resource. Even in case of “fatal” exception.</p>\n<h3 id=\"mistake-4-swallowing-exceptions-from-close\"><a href=\"#mistake-4-swallowing-exceptions-from-close\" aria-label=\"mistake 4 swallowing exceptions from close permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mistake 4: Swallowing exceptions from close</h3>\n<p>I showed, in the beginning, a use of <code class=\"language-text\">closeQuietly</code> in finally. When can it be bad? Let’s put aside the topic of swallowing exceptions in general. Let’s assume, that it’s either ok or we do proper logging on the swallow. So, what can go wrong?</p>\n<p>Here is a very simple example that describes the problem:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> FileOutputStream<span class=\"token punctuation\">(</span><span class=\"token string\">\"file.bin\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    file<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> NonFatal<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> <span class=\"token comment\">// log it properly!</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, what does it mean when <a href=\"http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/tip/src/java.base/share/classes/java/io/FileOutputStream.java\">close</a> throws an exception? It could mean many things:</p>\n<ul>\n<li>Internal buffer failed to flush bytes on disk.</li>\n<li>Some internal error during closing a file descriptor.</li>\n</ul>\n<p>We can’t do anything about the latter case. But what’s about failing flush on disk? We can definitely say, that our file doesn’t contain exactly what we expected to write there.</p>\n<p>So, in this case, when we write something in a file (socket, whatever), we shouldn’t swallow exception on close, because we can’t definitively say whether our business process succeeded or not. So, we should signal to our caller, that we failed.</p>\n<p>Also, we may deduct from it, that it’s mostly fine to swallow exception in close during reading.</p>\n<h2 id=\"try-with-resources-in-scala\"><a href=\"#try-with-resources-in-scala\" aria-label=\"try with resources in scala permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>try-with-resources in Scala</h2>\n<p>So, how the OK version of try-with-resources in Scala may look like?</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> withResources<span class=\"token punctuation\">[</span>T <span class=\"token operator\">&lt;</span><span class=\"token operator\">:</span> AutoCloseable<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> <span class=\"token keyword\">=></span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">:</span> T <span class=\"token keyword\">=></span> V<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> V <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> resource<span class=\"token operator\">:</span> T <span class=\"token operator\">=</span> r\n  require<span class=\"token punctuation\">(</span>resource <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"resource is null\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">var</span> exception<span class=\"token operator\">:</span> Throwable <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    f<span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> NonFatal<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n      exception <span class=\"token operator\">=</span> e\n      <span class=\"token keyword\">throw</span> e\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n    closeAndAddSuppressed<span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">def</span> closeAndAddSuppressed<span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Throwable<span class=\"token punctuation\">,</span> resource<span class=\"token operator\">:</span> AutoCloseable<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      resource<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> NonFatal<span class=\"token punctuation\">(</span>suppressed<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span>\n        e<span class=\"token punctuation\">.</span>addSuppressed<span class=\"token punctuation\">(</span>suppressed<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    resource<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A little bit verbose, but it should be a part of a standard library (or your framework), so who cares?</p>\n<h2 id=\"recap\"><a href=\"#recap\" aria-label=\"recap permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recap</h2>\n<p>Let’s recap the main points:</p>\n<ul>\n<li>Don’t catch <code class=\"language-text\">Exception</code> or <code class=\"language-text\">Throwable</code>.</li>\n<li>Be cautious in finally clause, don’t let exception there to overthrow an original one.</li>\n<li>You may swallow exceptions in close for read operations.</li>\n</ul>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Despite the fact that resource management is a well-known subject, there are still many mistakes around it. Especially in languages not mature enough (I believe, Scala is one of that kind). Don’t get me wrong, there are libraries in Scala world that handle resource management properly, i.e. <a href=\"https://github.com/pathikrit/better-files/\">better-files</a> or <a href=\"https://github.com/jsuereth/scala-arm/\">scala-arm</a>. But I believe that it should be a part of the language. Either as a language construct or as a part of a scala-library. It’s too important to not have it.</p>\n<p>All code is available on <a href=\"https://github.com/dkomanov/stuff/tree/master/src/com/komanov/io\">GitHub</a>. Originally posted on <a href=\"https://medium.com/@dkomanov/scala-try-with-resources-735baad0fd7d\">Medium</a>.</p>","fields":{"slug":"/p/scala-try-with-resources/"},"frontmatter":{"rawDate":"2018-03-12T00:00:00.000Z","date":"March 12, 2018","title":"Scala try-with-resources","description":"My 2 cents on how to properly manage resources in Scala, or a story of reimplementing try-with-resources in Scala.","tags":["scala","java","exception","error","io"],"canonicalUrl":"https://medium.com/@dkomanov/scala-try-with-resources-735baad0fd7d","cover":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/p/scala-try-with-resources/","previous":{"fields":{"slug":"/p/performance-of-readline-in-jvm/"}},"next":null}}}