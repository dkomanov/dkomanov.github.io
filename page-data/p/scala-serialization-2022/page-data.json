{"componentChunkName":"component---src-templates-blog-post-js","path":"/p/scala-serialization-2022/","result":{"data":{"markdownRemark":{"id":"fd58342e-adb6-5d58-8283-08c1b38faa81","excerpt":"In age of remakes, sequels, reboots and such things I decided to make my own :) 6 years ago I wrote a pretty big blog post about Scala Serialization. I received…","html":"<p>In age of remakes, sequels, reboots and such things I decided to make my own :) 6 years ago I wrote a pretty big blog post about <a href=\"/p/scala-serialization\">Scala Serialization</a>. I received some positive feedback and some proposal - which libraries to include to benchmark. I wanted to follow up on it for a long time, but… didn’t have enough time and motivation to go back. And now it’s time :)</p>\n<p>In our era of Internet, <a href=\"https://www.json.org/\">JSON</a> is probably the most used data format. It makes the choice of the library to work with JSON (or any other data format) pretty much important: CPU cycles spent on <a href=\"https://en.wikipedia.org/wiki/Serialization\">serialization</a>/deserialization may save your bill and environment.</p>\n<p>Even though the focus of this benchmark is on Scala libraries, I actually benchmark 50/50 Scala and Java libraries.</p>\n<h2 id=\"data-formats-and-libraries\" style=\"position:relative;\"><a href=\"#data-formats-and-libraries\" aria-label=\"data formats and libraries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Formats and Libraries</h2>\n<p>A full list of formats and libraries in benchmark:</p>\n<ul>\n<li><a href=\"https://www.json.org/\">JSON</a> format: <a href=\"https://github.com/FasterXML/jackson\">Jackson</a>, <a href=\"https://github.com/plokhotnyuk/jsoniter-scala\">Jsoniter</a>, <a href=\"https://github.com/com-lihaoyi/upickle\">uPickle</a> and <a href=\"https://github.com/circe/circe\">Circe</a>.</li>\n<li><a href=\"https://developers.google.com/protocol-buffers/\">Protocol Buffers</a> (protobuf): <a href=\"https://github.com/scalapb/ScalaPB\">ScalaPB</a> and <a href=\"https://developers.google.com/protocol-buffers/docs/reference/java-generated\">protobuf-java</a>.</li>\n<li><a href=\"https://thrift.apache.org/\">Thrift</a>: <a href=\"https://github.com/apache/thrift/tree/master/lib/java\">libthrift</a>.</li>\n<li><a href=\"https://msgpack.org/\">MessagePack</a>: <a href=\"https://github.com/com-lihaoyi/upickle\">uPickle</a>.</li>\n<li><a href=\"https://capnproto.org/\">Cap’n Proto</a>: <a href=\"https://github.com/dwrensha/capnproto-java\">capnproto-java</a>.</li>\n<li><a href=\"https://github.com/suzaku-io/boopickle\">Boopickle</a>. Custom binary format without backward-compatibility.</li>\n<li><a href=\"https://github.com/EsotericSoftware/kryo\">Kryo</a>: <a href=\"https://github.com/twitter/chill\">Chill</a>.</li>\n<li><a href=\"https://tools.ietf.org/html/rfc7049\">CBOR</a> and <a href=\"https://github.com/FasterXML/smile-format-specification\">Smile</a> via <a href=\"https://github.com/FasterXML/jackson-dataformats-binary\">Jackson</a>.</li>\n<li><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/serialization/index.html\">Java serialization</a> just for reference.</li>\n</ul>\n<p>I dropped few libraries that I benchmarked previously:</p>\n<ul>\n<li><a href=\"https://github.com/evolution-gaming/kryo-macros\">kryo-macros</a>: it’s not maintained, apparently, the library was published on bintray, which is <a href=\"https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/\">shutdown</a>.</li>\n<li><a href=\"https://github.com/twitter/scrooge\">Scrooge</a>: doesn’t work with <code class=\"language-text\">libthrift</code> greater than <code class=\"language-text\">0.10.0</code>.</li>\n<li><a href=\"https://github.com/scala/pickling\">pickling</a>: repo is archived, last version is for scala-library <code class=\"language-text\">2.11</code>.</li>\n</ul>\n<h2 id=\"data-model\" style=\"position:relative;\"><a href=\"#data-model\" aria-label=\"data model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Model</h2>\n<p>TBD: Why is it important that I use DTO and events?</p>\n<h2 id=\"performance\" style=\"position:relative;\"><a href=\"#performance\" aria-label=\"performance permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance</h2>\n<p>Charts!</p>\n<h2 id=\"data-size\" style=\"position:relative;\"><a href=\"#data-size\" aria-label=\"data size permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data Size</h2>\n<p>Table, charts!</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<h3 id=\"extra\" style=\"position:relative;\"><a href=\"#extra\" aria-label=\"extra permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Extra</h3>\n<h2 id=\"read-more\" style=\"position:relative;\"><a href=\"#read-more\" aria-label=\"read more permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Read More</h2>\n<ul>\n<li>Amazing and rich <a href=\"https://plokhotnyuk.github.io/jsoniter-scala/\">benchmarks</a> by jsoniter-scala.</li>\n<li><a href=\"https://github.com/eishay/jvm-serializers\">JVM Serializers</a></li>\n</ul>\n<p>Play with charts <a href=\"/charts/scala-serialization-2022\">here</a>, <a href=\"https://docs.google.com/spreadsheets/d/1ztxHL8oDnhOpiPeG6SEiocbs5qa3Xw7a-Ei0RSX9rdk\">data sizes tables</a>. Source code is on <a href=\"https://github.com/dkomanov/stuff/tree/c9315e7765ce95bbe2dd1cd4f339d4abc7f9795f/src/com/komanov/serialization\">GitHub</a>. Originally posted on <a href=\"TBD\">Medium</a>. <a href=\"\">Cover image</a> by <a href=\"\"></a> from <a href=\"https://pixabay.com/\">Pixabay</a>.</p>","fields":{"slug":"/p/scala-serialization-2022/"},"frontmatter":{"rawDate":"2022-10-20T00:00:00.000Z","date":"October 20, 2022","title":"Scala Serialization 2022","description":"Performance comparison of popular serialization libraries for Scala. A remake of the post from 2016 with new libraries, different JVMs and new insights","tags":["scala","java","serialization","benchmark","performance"],"canonicalUrl":"TBD","cover":null}}},"pageContext":{"slug":"/p/scala-serialization-2022/","previous":{"fields":{"slug":"/p/base64-encoding-performance-java-vs-rust/"}},"next":{"fields":{"slug":"/p/java-native-access-performance/"}}}},"staticQueryHashes":["3675711862"]}