{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/p/benchmarking-batch-jdbc-queries/",
    "result": {"data":{"markdownRemark":{"id":"e8be4183-e185-5431-b901-9e42b4fa3d1f","excerpt":"One of our services recently started to perform multiple inserts and deletes in MySQL database. To the point of a noticeable\nresponse time increase. Batching of…","html":"<p>One of our services recently started to perform multiple inserts and deletes in MySQL database. To the point of a noticeable\nresponse time increase. <a href=\"https://docs.oracle.com/cd/E11882_01/java.112/e16548/oraperf.htm#JJDBC28753\">Batching</a> of SQL\nqueries is nothing new, but I decided to wander around this topic a bit in Internet, and stumbled upon something I never\nheard before (or blissfully forgot). A <a href=\"https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-performance-extensions.html#cj-conn-prop_rewriteBatchedStatements\">rewriteBatchedStatements</a>\nproperty of MySQL JDBC driver. Here I am, benchmarking this thing and checking other options…</p>\n<p>Disclaimer 1. To be honest, this post doesn’t contain anything new or special in it. I’ve just discovered something\ninteresting and would like to share it.</p>\n<p>Disclaimer 2. This time I haven’t prepared standalone code example, as I did it for a specific task inside of\n<a href=\"https://www.wix.engineering/post/virtual-monorepo-for-bazel\">our</a> <a href=\"https://bazel.build/\">bazel</a> monorepo using some of\nour internal tooling. Sorry. But there’s nothing special in those benchmarks.</p>\n<h2 id=\"what-happened\" style=\"position:relative;\"><a href=\"#what-happened\" aria-label=\"what happened permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What happened?</h2>\n<p>Initially we used queries like this (all examples are for <a href=\"http://scalikejdbc.org/\">scalikejdbc</a> but it doesn’t really\nmatter):</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Entity<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> val1<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> val2<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">,</span> val3<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">Byte</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> add<span class=\"token punctuation\">(</span>entity<span class=\"token operator\">:</span> Entry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> autoCommit <span class=\"token punctuation\">{</span> <span class=\"token keyword\">implicit</span> session <span class=\"token keyword\">=></span>\n  sql<span class=\"token triple-quoted-string string\">\"\"\"\n     INSERT INTO tbl (id, col1, col2, col3)\n              VALUES (${entity.id}, ${entity.val1}, ${entity.val2}, ${entity.val3})\n  \"\"\"</span>\n    <span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">def</span> remove<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> autoCommit <span class=\"token punctuation\">{</span> <span class=\"token keyword\">implicit</span> session <span class=\"token keyword\">=></span>\n  sql<span class=\"token triple-quoted-string string\">\"\"\"DELETE FROM tbl WHERE id = $id\"\"\"</span>\n    <span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As system evolved, we started calling those DAO methods in a loop (gotcha!). Eventually number of entities grew, and we\ngot a problem :)</p>\n<h2 id=\"batching\" style=\"position:relative;\"><a href=\"#batching\" aria-label=\"batching permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Batching</h2>\n<p>Batching is an attempt to reduce number of round-trips from application to a database. So, what driver does is — instead\nof sending a bunch of separate queries, it sends it this way:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> tbl <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> tbl <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note the <code class=\"language-text\">;</code> at the end of the query. Those are still separate queries, but it’s sent as a single request. To code change\nis not that big:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> add<span class=\"token punctuation\">(</span>entities<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span>Entity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> localTx <span class=\"token punctuation\">{</span> <span class=\"token keyword\">implicit</span> session <span class=\"token keyword\">=></span>\n  <span class=\"token keyword\">val</span> params <span class=\"token operator\">=</span> entities<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">{</span> entity <span class=\"token keyword\">=></span>\n    Seq<span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"id\"</span> <span class=\"token operator\">-></span> entity<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"val1\"</span> <span class=\"token operator\">-></span> entity<span class=\"token punctuation\">.</span>val1<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"val2\"</span> <span class=\"token operator\">-></span> entity<span class=\"token punctuation\">.</span>val2<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"val3\"</span> <span class=\"token operator\">-></span> entity<span class=\"token punctuation\">.</span>val3<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  sql<span class=\"token triple-quoted-string string\">\"\"\"\n    INSERT INTO tbl (id, col1, col2, col3)\n             VALUES ({id}, {val1}, {val2}, {val3})\n    \"\"\"</span>\n    <span class=\"token punctuation\">.</span>batchByName<span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Similar thing we can do for DELETE:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> remove<span class=\"token punctuation\">(</span>ids<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> localTx <span class=\"token punctuation\">{</span> <span class=\"token keyword\">implicit</span> session <span class=\"token keyword\">=></span>\n  <span class=\"token keyword\">val</span> params <span class=\"token operator\">=</span> ids<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>v <span class=\"token keyword\">=></span> Seq<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  sql<span class=\"token triple-quoted-string string\">\"\"\"DELETE FROM tbl WHERE id = ?\"\"\"</span>\n    <span class=\"token punctuation\">.</span>batch<span class=\"token punctuation\">(</span>params<span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"better-delete-in-clause\" style=\"position:relative;\"><a href=\"#better-delete-in-clause\" aria-label=\"better delete in clause permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Better DELETE (IN clause)</h2>\n<p>Actually, for delete we can do much more robust thing:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> remove<span class=\"token punctuation\">(</span>ids<span class=\"token operator\">:</span> Seq<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> autoCommit <span class=\"token punctuation\">{</span> <span class=\"token keyword\">implicit</span> session <span class=\"token keyword\">=></span>\n  <span class=\"token keyword\">val</span> inClause <span class=\"token operator\">=</span> SQLSyntax<span class=\"token punctuation\">.</span>csv<span class=\"token punctuation\">(</span>ids<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">=></span> sqls<span class=\"token triple-quoted-string string\">\"\"\"$id\"\"\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> _<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n  sql<span class=\"token triple-quoted-string string\">\"\"\"DELETE FROM tbl WHERE id IN ($inClause)\"\"\"</span>\n    <span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"rewritebatchedstatements\" style=\"position:relative;\"><a href=\"#rewritebatchedstatements\" aria-label=\"rewritebatchedstatements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>rewriteBatchedStatements</h2>\n<p>I stumbled upon this parameter on <a href=\"https://stackoverflow.com/questions/26307760/mysql-and-jdbc-with-rewritebatchedstatements-true\">StackOverflow</a>\nand instantly decided to check how it works. Basically, it rewrites INSERT queries in multi-value queries:</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> tbl <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n         <span class=\"token keyword\">VALUES</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Which makes it slightly more concise (less SQL) and <a href=\"https://dev.mysql.com/doc/refman/8.0/en/insert-optimization.html\">something</a>\ninside MySQL makes it faster.</p>\n<h2 id=\"benchmarks\" style=\"position:relative;\"><a href=\"#benchmarks\" aria-label=\"benchmarks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Benchmarks</h2>\n<p>First, I verified that <code class=\"language-text\">rewriteBatchedStatements</code> actually works by enabling <a href=\"https://stackoverflow.com/questions/10903206/enabling-mysql-general-query-log-with-jdbc/13025521\">profile logs</a>\nin driver, it showed that final queries. Second, I built a very simple benchmark that tests different flavors of batching\nfor <code class=\"language-text\">INSERT</code> and for <code class=\"language-text\">DELETE</code> with different number of entries. Each entry in my test is about few hundreds of bytes,\nmultiple columns, nothing fancy.</p>\n<h3 id=\"insert\" style=\"position:relative;\"><a href=\"#insert\" aria-label=\"insert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INSERT</h3>\n<p>As you may see in benchmark results below, multi-value INSERT is really the fastest.</p>\n<p><code class=\"language-text\">oneByOne</code> is just a loop outside the DAO. Total time increases linearly (obviously). The problem here is simple — the\nnumber of transactions in MySQL equals to number of rows that we’re inserting. And a transaction takes time.</p>\n<p>Solution to this is to start transaction only once and then make queries in the loop within this transaction. This case\nrepresented by <code class=\"language-text\">oneByOneInTransaction</code> in the table. As you may see, its performance is comparable to a regular batching.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Benchmark            (numberOfEntities)  Mode  Cnt     Score   Error  Units\n\nbatch                                 1  avgt    2    12.797          ms/op\nbatchRewriting                        1  avgt    2    11.769          ms/op\noneByOneInTransaction                 1  avgt    2    12.624          ms/op\noneByOne                              1  avgt    2    12.184          ms/op\n\nbatch                                10  avgt    2    13.433          ms/op\nbatchRewriting                       10  avgt    2    11.835          ms/op\noneByOneInTransaction                10  avgt    2    15.592          ms/op\noneByOne                             10  avgt    2   125.161          ms/op\n\nbatch                               100  avgt    2    29.763          ms/op\nbatchRewriting                      100  avgt    2    22.480          ms/op\noneByOneInTransaction               100  avgt    2    35.664          ms/op\noneByOne                            100  avgt    2  1281.417          ms/op\n\nbatch                              1000  avgt    2   213.938          ms/op\nbatchRewriting                     1000  avgt    2   148.009          ms/op\noneByOneInTransaction              1000  avgt    2   229.646          ms/op\n\nbatch                             10000  avgt    2  2027.138          ms/op\nbatchRewriting                    10000  avgt    2  1497.429          ms/op\noneByOneInTransaction             10000  avgt    2  2321.587          ms/op</code></pre></div>\n<h3 id=\"delete\" style=\"position:relative;\"><a href=\"#delete\" aria-label=\"delete permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DELETE</h3>\n<p>In case of DELETE the option <code class=\"language-text\">rewriteBatchedStatements</code> shouldn’t affect anything. However, it’s still better than regular\nbatching.</p>\n<p>As expected, by using <code class=\"language-text\">IN</code> clause we get the best performance, as it’s a single query (just like in case of INSERT with\nmulti-values).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Benchmark            (numberOfEntities)  Mode  Cnt     Score   Error  Units\nbatch                                 1  avgt    2    21.636          ms/op\nbatchRewriting                        1  avgt    2    15.237          ms/op\ninClause                              1  avgt    2    13.483          ms/op\noneByOneInTransaction                 1  avgt    2    10.938          ms/op\noneByOne                              1  avgt    2    12.273          ms/op\n\nbatch                                10  avgt    2    16.328          ms/op\nbatchRewriting                       10  avgt    2    14.396          ms/op\ninClause                             10  avgt    2    11.184          ms/op\noneByOneInTransaction                10  avgt    2    13.085          ms/op\noneByOne                             10  avgt    2   124.575          ms/op\n\nbatch                               100  avgt    2    21.893          ms/op\nbatchRewriting                      100  avgt    2    17.696          ms/op\ninClause                            100  avgt    2    13.029          ms/op\noneByOneInTransaction               100  avgt    2    24.492          ms/op\noneByOne                            100  avgt    2  1181.656          ms/op\n\nbatch                              1000  avgt    2   104.244          ms/op\nbatchRewriting                     1000  avgt    2    83.070          ms/op\ninClause                           1000  avgt    2    25.444          ms/op\noneByOneInTransaction              1000  avgt    2   130.383          ms/op\n\nbatch                             10000  avgt    2   925.338          ms/op\nbatchRewriting                    10000  avgt    2   854.990          ms/op\ninClause                          10000  avgt    2   167.237          ms/op\noneByOneInTransaction             10000  avgt    2  1254.676          ms/op</code></pre></div>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>The way to achieve the best performance with a database is to use the least amount of queries. In case of <code class=\"language-text\">INSERT</code> it’s\na multi-value query, in case of <code class=\"language-text\">DELETE</code> it’s an <code class=\"language-text\">IN</code> clause with multiple identifiers specified. For <code class=\"language-text\">DELETE</code> queries\nit’s on us to write it properly, and for <code class=\"language-text\">INSERT</code> queries there is a very nice driver option that converts your batch\nquery into multi-value query and boosts the performance auto-magically!</p>\n<p>Originally posted on <a href=\"https://dkomanov.medium.com/benchmarking-batch-jdbc-queries-a2b5911ada26\">Medium</a>. <a href=\"https://pixabay.com/photos/logistics-stock-transport-shipping-852936/\">Image</a> by <a href=\"https://pixabay.com/users/falco-81448/?utm_source=link-attribution&#x26;utm_medium=referral&#x26;utm_campaign=image&#x26;utm_content=852936\">falco</a> from <a href=\"https://pixabay.com/?utm_source=link-attribution&#x26;utm_medium=referral&#x26;utm_campaign=image&#x26;utm_content=852936\">Pixabay</a>.</p>","fields":{"slug":"/p/benchmarking-batch-jdbc-queries/"},"frontmatter":{"rawDate":"2021-06-17T00:00:00.000Z","date":"June 17, 2021","title":"Benchmarking batch JDBC queries","description":"Benchmarks for different kinds of batch queries to MySQL","tags":["scala","java","jdbc","mysql","benchmark"],"canonicalUrl":"https://dkomanov.medium.com/benchmarking-batch-jdbc-queries-a2b5911ada26","cover":{"publicURL":"/static/f924107ec8d0fe3dee7bc4935a3fe6f3/cover.jpg"}}}},"pageContext":{"slug":"/p/benchmarking-batch-jdbc-queries/","previous":{"fields":{"slug":"/p/writing-async-app-in-scala-part-4-rewrite-blocking-app/"}},"next":null}},
    "staticQueryHashes": ["3675711862"]}